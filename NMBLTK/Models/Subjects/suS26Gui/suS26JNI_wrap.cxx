/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#if defined(__GNUC__)
    typedef long long __int64; /*For gcc on Windows */
#endif
#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;

#if defined(SWIG_NOINCLUDE)
void SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg);
#else


void SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


#endif


#include <NMBLTK/Tools/rdToolsDLL.h>
#include <NMBLTK/Simulation/rdSimulationDLL.h>
#include <NMBLTK/Tools/rdArray.h>
#include <NMBLTK/Tools/rdArrayPtrs.h>
#include <NMBLTK/Tools/rdProperty.h>
#include <NMBLTK/Tools/rdPropertySet.h>
#include <NMBLTK/Tools/rdObject.h>
#include <NMBLTK/Tools/rdMaterial.h>
#include <NMBLTK/Tools/rdVisibleProperties.h>
#include <NMBLTK/Tools/rdTransform.h>
#include <NMBLTK/Tools/rdVisibleObject.h>

#include <NMBLTK/Tools/rdSet.h>
#include <NMBLTK/Simulation/Model/rdBody.h>
#include <NMBLTK/Simulation/Model/rdBodySet.h>

#include <NMBLTK/Tools/rdMaterialSet.h>

#include <NMBLTK/Simulation/Model/rdActuator.h>
#include <NMBLTK/Simulation/Model/rdActuatorSet.h>

#include <NMBLTK/Simulation/Model/rdContactForceSet.h>

#include <NMBLTK/Tools/rdStateVector.h>
#include <NMBLTK/Tools/rdStorage.h>

#include <NMBLTK/Simulation/Model/rdModel.h>
#include <NMBLTK/Simulation/SDFast/rdSDFastDLL.h>
#include <NMBLTK/Simulation/SDFast/rdSDFast.h>
#include <NMBLTK/Simulation/SDFast/rdActuatedModel_SDFast.h>
#include <NMBLTK/Models/SIMMPipeline/4.0/suPipeline40/suPipeline40.h>
#include <NMBLTK/Models/SIMMPipeline/4.0/Pipeline40Workflow/suPipeline40Workflow.h>
#include "suS26.h"


/* Note: double[n] is equivalent to a pointer to a double */
double *new_doubleArray(int n) {
   return (double *) malloc(n*sizeof(double));
}
void free_doubleArray(double *x) {
   free(x);
}
void doubleArray_set(double* x, int i, double v) {
   x[i] = v;
}
double doubleArray_get(double *x, int i) {
   return x[i];
}


/* parallel code for float arrays */

float *new_floatArray(int n) {
   return (float *) malloc(n*sizeof(float));
}
void free_floatArray(float *x) {
   free(x);
}
void floatArray_set(float* x, int i, float v) {
   x[i] = v;
}
float floatArray_get(float *x, int i) {
   return x[i];
}


/* repeat for integer arrays */

int *new_intArray(int n) {
   return (int *) malloc(n*sizeof(int));
}
void free_intArray(int *x) {
   free(x);
}
void intArray_set(int* x, int i, int v) {
   x[i] = v;
}
int intArray_get(int *x, int i) {
   return x[i];
}


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}
#define SWIG_exception(code, msg) { SWIG_JavaException(jenv, code, msg); }


#include <string>

bool rdArraylbool_g_getitem___(rdArray<bool > *self,int index){
      return self->get(index);
    }
void rdArraylbool_g_setitem___(rdArray<bool > *self,int index,bool val){
      self->set(index,val);
    }
double rdArrayldouble_g_getitem___(rdArray<double > *self,int index){
      return self->get(index);
    }
void rdArrayldouble_g_setitem___(rdArray<double > *self,int index,double val){
      self->set(index,val);
    }
int rdArraylint_g_getitem___(rdArray<int > *self,int index){
      return self->get(index);
    }
void rdArraylint_g_setitem___(rdArray<int > *self,int index,int val){
      self->set(index,val);
    }
std::string rdArraylstd_string_g_getitem___(rdArray<std::string > *self,int index){
      return self->get(index);
    }
void rdArraylstd_string_g_setitem___(rdArray<std::string > *self,int index,std::string val){
      self->set(index,val);
    }
#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1doubleArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
    jlong jresult = 0 ;
    int arg1 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    result = (double *)new_doubleArray(arg1);
    
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_free_1doubleArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    double *arg1 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(double **)&jarg1; 
    free_doubleArray(arg1);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_doubleArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    double *arg1 = (double *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(double **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    doubleArray_set(arg1,arg2,arg3);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_doubleArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    double *arg1 = (double *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(double **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)doubleArray_get(arg1,arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1floatArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
    jlong jresult = 0 ;
    int arg1 ;
    float *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    result = (float *)new_floatArray(arg1);
    
    *(float **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_free_1floatArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    float *arg1 = (float *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(float **)&jarg1; 
    free_floatArray(arg1);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_floatArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3) {
    float *arg1 = (float *) 0 ;
    int arg2 ;
    float arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(float **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (float)jarg3; 
    floatArray_set(arg1,arg2,arg3);
    
}


JNIEXPORT jfloat JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_floatArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jfloat jresult = 0 ;
    float *arg1 = (float *) 0 ;
    int arg2 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(float **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (float)floatArray_get(arg1,arg2);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1intArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
    jlong jresult = 0 ;
    int arg1 ;
    int *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    result = (int *)new_intArray(arg1);
    
    *(int **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_free_1intArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    int *arg1 = (int *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(int **)&jarg1; 
    free_intArray(arg1);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_intArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    int *arg1 = (int *) 0 ;
    int arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(int **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    intArray_set(arg1,arg2,arg3);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_intArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    int *arg1 = (int *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(int **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)intArray_get(arg1,arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdArray_1CAPMIN(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)(int)rdArray_CAPMIN;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdProperty_1None(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdProperty::None;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdProperty_1Bool(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdProperty::Bool;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdProperty_1Int(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdProperty::Int;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdProperty_1Flt(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdProperty::Flt;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdProperty_1Dbl(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdProperty::Dbl;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdProperty_1Str(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdProperty::Str;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdProperty_1Obj(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdProperty::Obj;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdProperty_1BoolArray(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdProperty::BoolArray;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdProperty_1IntArray(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdProperty::IntArray;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdProperty_1FltArray(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdProperty::FltArray;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdProperty_1DblArray(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdProperty::DblArray;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdProperty_1StrArray(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdProperty::StrArray;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdProperty_1ObjArray(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdProperty::ObjArray;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    rdProperty *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    result = (rdProperty *)((rdProperty const *)arg1)->copy();
    
    *(rdProperty **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdProperty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setNull(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    (arg1)->setNull();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->setType((rdProperty::rdPropertyType )arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    result = (int)((rdProperty const *)arg1)->getType();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1getTypeAsString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    result = (char *)((rdProperty const *)arg1)->getTypeAsString();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    (arg1)->setName((std::string const &)*arg2);
    
    delete arg2; 
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    {
        std::string const &_result_ref = ((rdProperty const *)arg1)->getName();
        result = (std::string *) &_result_ref;
    }
    
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    {
        std::string const &_result_ref = (arg1)->toString();
        result = (std::string *) &_result_ref;
    }
    
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    (arg1)->setValue(arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1getValueBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    bool *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    {
        bool &_result_ref = (arg1)->getValueBool();
        result = (bool *) &_result_ref;
    }
    
    *(bool **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->setValue(arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1getValueInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    int *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    {
        int &_result_ref = (arg1)->getValueInt();
        result = (int *) &_result_ref;
    }
    
    *(int **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->setValue(arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1getValueDbl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    {
        double &_result_ref = (arg1)->getValueDbl();
        result = (double *) &_result_ref;
    }
    
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    (arg1)->setValue((std::string const &)*arg2);
    
    delete arg2; 
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1getValueStr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    {
        std::string &_result_ref = (arg1)->getValueStr();
        result = (std::string *) &_result_ref;
    }
    
    *(std::string **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setValue_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    rdObject *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = *(rdObject **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdObject const & reference is null");
        return ;
    }
    (arg1)->setValue((rdObject const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1getValueObj(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    {
        rdObject &_result_ref = (arg1)->getValueObj();
        result = (rdObject *) &_result_ref;
    }
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setValue_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    int arg2 ;
    bool *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(bool **)&jarg3; 
    (arg1)->setValue(arg2,(bool const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setValue_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    rdArray<bool > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = *(rdArray<bool > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<bool > const & reference is null");
        return ;
    }
    (arg1)->setValue((rdArray<bool > const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1getValueBoolArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    rdArray<bool > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    {
        rdArray<bool > &_result_ref = (arg1)->getValueBoolArray();
        result = (rdArray<bool > *) &_result_ref;
    }
    
    *(rdArray<bool > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setValue_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    int arg2 ;
    int *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    (arg1)->setValue(arg2,(int const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setValue_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    rdArray<int > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = *(rdArray<int > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<int > const & reference is null");
        return ;
    }
    (arg1)->setValue((rdArray<int > const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1getValueIntArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    rdArray<int > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    {
        rdArray<int > &_result_ref = (arg1)->getValueIntArray();
        result = (rdArray<int > *) &_result_ref;
    }
    
    *(rdArray<int > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setValue_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->setValue(arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setValue_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    rdArray<double > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = *(rdArray<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<double > const & reference is null");
        return ;
    }
    (arg1)->setValue((rdArray<double > const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1getValueDblArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    rdArray<double > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    {
        rdArray<double > &_result_ref = (arg1)->getValueDblArray();
        result = (rdArray<double > *) &_result_ref;
    }
    
    *(rdArray<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setValue_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    int arg2 ;
    std::string *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(std::string **)&jarg3; 
    (arg1)->setValue(arg2,(std::string const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setValue_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    rdArray<std::string > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = *(rdArray<std::string > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<std::string > const & reference is null");
        return ;
    }
    (arg1)->setValue((rdArray<std::string > const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1getValueStrArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    rdArray<std::string > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    {
        rdArray<std::string > &_result_ref = (arg1)->getValueStrArray();
        result = (rdArray<std::string > *) &_result_ref;
    }
    
    *(rdArray<std::string > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setValue_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    int arg2 ;
    rdObject **arg3 = (rdObject **) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(rdObject ***)&jarg3; 
    (arg1)->setValue(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setValue_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    rdArrayPtrs<rdObject > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = *(rdArrayPtrs<rdObject > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArrayPtrs<rdObject > const & reference is null");
        return ;
    }
    (arg1)->setValue((rdArrayPtrs<rdObject > const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1getValueObjArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    rdArrayPtrs<rdObject > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    {
        rdArrayPtrs<rdObject > &_result_ref = (arg1)->getValueObjArray();
        result = (rdArrayPtrs<rdObject > *) &_result_ref;
    }
    
    *(rdArrayPtrs<rdObject > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1setUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    rdProperty *arg1 = (rdProperty *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    (arg1)->setUseDefault(arg2);
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdProperty_1getUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    rdProperty *arg1 = (rdProperty *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdProperty **)&jarg1; 
    result = (bool)((rdProperty const *)arg1)->getUseDefault();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_set_1rdPropertySet_1_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdPropertySet *arg1 = (rdPropertySet *) 0 ;
    rdArrayPtrs<rdProperty > *arg2 = (rdArrayPtrs<rdProperty > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdPropertySet **)&jarg1; 
    arg2 = *(rdArrayPtrs<rdProperty > **)&jarg2; 
    if (arg1) (arg1)->_array = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdPropertySet_1_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdPropertySet *arg1 = (rdPropertySet *) 0 ;
    rdArrayPtrs<rdProperty > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdPropertySet **)&jarg1; 
    result = (rdArrayPtrs<rdProperty > *)& ((arg1)->_array);
    
    *(rdArrayPtrs<rdProperty > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdPropertySet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    rdPropertySet *result;
    
    (void)jenv;
    (void)jcls;
    result = (rdPropertySet *)new rdPropertySet();
    
    *(rdPropertySet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdPropertySet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdPropertySet *arg1 = 0 ;
    rdPropertySet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdPropertySet **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdPropertySet const & reference is null");
        return 0;
    }
    result = (rdPropertySet *)new rdPropertySet((rdPropertySet const &)*arg1);
    
    *(rdPropertySet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdPropertySet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdPropertySet *arg1 = (rdPropertySet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdPropertySet **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdPropertySet_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    rdPropertySet *arg1 = (rdPropertySet *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdPropertySet **)&jarg1; 
    result = (bool)((rdPropertySet const *)arg1)->isEmpty();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdPropertySet_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdPropertySet *arg1 = (rdPropertySet *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdPropertySet **)&jarg1; 
    result = (int)((rdPropertySet const *)arg1)->getSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdPropertySet_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    rdPropertySet *arg1 = (rdPropertySet *) 0 ;
    int arg2 ;
    rdProperty *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdPropertySet **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (rdProperty *)(arg1)->get(arg2);
    
    *(rdProperty **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdPropertySet_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    rdPropertySet *arg1 = (rdPropertySet *) 0 ;
    std::string *arg2 = 0 ;
    rdProperty *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdPropertySet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (rdProperty *)(arg1)->get((std::string const &)*arg2);
    
    *(rdProperty **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdPropertySet_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdPropertySet *arg1 = (rdPropertySet *) 0 ;
    rdProperty *arg2 = (rdProperty *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdPropertySet **)&jarg1; 
    arg2 = *(rdProperty **)&jarg2; 
    (arg1)->append(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdPropertySet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    rdPropertySet *arg1 = (rdPropertySet *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdPropertySet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    (arg1)->remove((std::string const &)*arg2);
    
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdPropertySet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdPropertySet *arg1 = (rdPropertySet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdPropertySet **)&jarg1; 
    (arg1)->clear();
    
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdObjectDEFAULT_1NAME(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *)(char *)rdObjectDEFAULT_NAME;
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdObject *arg1 = (rdObject *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    result = (rdObject *)new rdObject();
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (rdObject *)new rdObject((std::string const &)*arg1);
    
    *(rdObject **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdXMLDocument *arg1 = (rdXMLDocument *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdXMLDocument **)&jarg1; 
    result = (rdObject *)new rdObject((rdXMLDocument const *)arg1);
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdObject_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    result = (rdObject *)new rdObject(arg1);
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdObject_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdObject *arg1 = 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdObject const & reference is null");
        return 0;
    }
    result = (rdObject *)new rdObject((rdObject const &)*arg1);
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdObject *arg1 = (rdObject *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    result = (rdObject *)((rdObject const *)arg1)->copy();
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    rdObject *arg1 = (rdObject *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    result = (rdObject *)((rdObject const *)arg1)->copy(arg2);
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    rdObject *arg1 = (rdObject *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    {
        std::string const &_result_ref = ((rdObject const *)arg1)->getType();
        result = (std::string *) &_result_ref;
    }
    
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    rdObject *arg1 = (rdObject *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    (arg1)->setName((std::string const &)*arg2);
    
    delete arg2; 
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    rdObject *arg1 = (rdObject *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    {
        std::string const &_result_ref = ((rdObject const *)arg1)->getName();
        result = (std::string *) &_result_ref;
    }
    
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    rdObject *arg1 = (rdObject *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    (arg1)->setDescription((std::string const &)*arg2);
    
    delete arg2; 
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    rdObject *arg1 = (rdObject *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    {
        std::string const &_result_ref = ((rdObject const *)arg1)->getDescription();
        result = (std::string *) &_result_ref;
    }
    
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    rdObject *arg1 = (rdObject *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    {
        std::string const &_result_ref = ((rdObject const *)arg1)->toString();
        result = (std::string *) &_result_ref;
    }
    
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1getPropertySet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdObject *arg1 = (rdObject *) 0 ;
    rdPropertySet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    {
        rdPropertySet &_result_ref = (arg1)->getPropertySet();
        result = (rdPropertySet *) &_result_ref;
    }
    
    *(rdPropertySet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1RegisterType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdObject *arg1 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdObject const & reference is null");
        return ;
    }
    rdObject::RegisterType((rdObject const &)*arg1);
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1isValidDefaultType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdObject *arg1 = (rdObject *) 0 ;
    rdObject *arg2 = (rdObject *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    arg2 = *(rdObject **)&jarg2; 
    result = (bool)((rdObject const *)arg1)->isValidDefaultType((rdObject const *)arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1updateFromXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdObject *arg1 = (rdObject *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    (arg1)->updateFromXMLNode();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1updateDefaultObjectsFromXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdObject *arg1 = (rdObject *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    (arg1)->updateDefaultObjectsFromXMLNode();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1updateXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdObject *arg1 = (rdObject *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    (arg1)->updateXMLNode(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1generateXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdObject *arg1 = (rdObject *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    (arg1)->generateXMLNode(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1setInlined(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jstring jarg3) {
    rdObject *arg1 = (rdObject *) 0 ;
    bool arg2 ;
    char *arg3 = (char *) NULL ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return ;
        }
    }
    (arg1)->setInlined(arg2,(char const *)arg3);
    
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1getInlined(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    rdObject *arg1 = (rdObject *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    result = (bool)((rdObject const *)arg1)->getInlined();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1getOffLineFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    rdObject *arg1 = (rdObject *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    result = (char *)((rdObject const *)arg1)->getOffLineFileName();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1clearXMLNodes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdObject *arg1 = (rdObject *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    (arg1)->clearXMLNodes();
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1getDocument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdObject *arg1 = (rdObject *) 0 ;
    rdXMLDocument *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    result = (rdXMLDocument *)((rdObject const *)arg1)->getDocument();
    
    *(rdXMLDocument **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1getXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdObject *arg1 = (rdObject *) 0 ;
    DOMElement *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    result = (DOMElement *)((rdObject const *)arg1)->getXMLNode();
    
    *(DOMElement **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1print(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    rdObject *arg1 = (rdObject *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    (arg1)->print((std::string const &)*arg2);
    
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1addObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdObject *arg1 = (rdObject *) 0 ;
    rdObject *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    arg2 = *(rdObject **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdObject & reference is null");
        return ;
    }
    (arg1)->addObserver(*arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1deleteObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdObject *arg1 = (rdObject *) 0 ;
    rdObject *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    arg2 = *(rdObject **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdObject & reference is null");
        return ;
    }
    (arg1)->deleteObserver(*arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1addObserverEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    rdObject *arg1 = (rdObject *) 0 ;
    rdObject *arg2 = 0 ;
    rdEvent *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    arg2 = *(rdObject **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdObject & reference is null");
        return ;
    }
    arg3 = *(rdEvent **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdEvent & reference is null");
        return ;
    }
    (arg1)->addObserverEvent(*arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1notifyObservers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdObject *arg1 = (rdObject *) 0 ;
    rdEvent *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    arg2 = *(rdEvent **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdEvent & reference is null");
        return ;
    }
    (arg1)->notifyObservers(*arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1deleteObservers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdObject *arg1 = (rdObject *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    (arg1)->deleteObservers();
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1countObservers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdObject *arg1 = (rdObject *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    result = (int)((rdObject const *)arg1)->countObservers();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdObject_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    rdObject *arg1 = (rdObject *) 0 ;
    rdObject *arg2 = 0 ;
    rdEvent *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdObject **)&jarg1; 
    arg2 = *(rdObject **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdObject const & reference is null");
        return ;
    }
    arg3 = *(rdEvent **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdEvent & reference is null");
        return ;
    }
    (arg1)->update((rdObject const &)*arg2,*arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_set_1rdMaterial_1_1propTranslucency(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    rdPropertyDbl arg2 ;
    rdPropertyDbl *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    argp2 = *(rdPropertyDbl **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rdPropertyDbl");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->_propTranslucency = arg2;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdMaterial_1_1propTranslucency(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    rdPropertyDbl result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    result =  ((arg1)->_propTranslucency);
    
    *(rdPropertyDbl **)&jresult = new rdPropertyDbl((rdPropertyDbl &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_set_1rdMaterial_1_1propAmbientColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    rdPropertyDblArray arg2 ;
    rdPropertyDblArray *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    argp2 = *(rdPropertyDblArray **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rdPropertyDblArray");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->_propAmbientColor = arg2;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdMaterial_1_1propAmbientColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    rdPropertyDblArray result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    result =  ((arg1)->_propAmbientColor);
    
    *(rdPropertyDblArray **)&jresult = new rdPropertyDblArray((rdPropertyDblArray &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_set_1rdMaterial_1_1propDiffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    rdPropertyDblArray arg2 ;
    rdPropertyDblArray *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    argp2 = *(rdPropertyDblArray **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rdPropertyDblArray");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->_propDiffuseColor = arg2;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdMaterial_1_1propDiffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    rdPropertyDblArray result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    result =  ((arg1)->_propDiffuseColor);
    
    *(rdPropertyDblArray **)&jresult = new rdPropertyDblArray((rdPropertyDblArray &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_set_1rdMaterial_1_1propSpecularColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    rdPropertyDblArray arg2 ;
    rdPropertyDblArray *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    argp2 = *(rdPropertyDblArray **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null rdPropertyDblArray");
        return ;
    }
    arg2 = *argp2; 
    if (arg1) (arg1)->_propSpecularColor = arg2;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdMaterial_1_1propSpecularColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    rdPropertyDblArray result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    result =  ((arg1)->_propSpecularColor);
    
    *(rdPropertyDblArray **)&jresult = new rdPropertyDblArray((rdPropertyDblArray &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_set_1rdMaterial_1_1translucency(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    double *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    arg2 = *(double **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return ;
    }
    if (arg1) (arg1)->_translucency = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdMaterial_1_1translucency(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    {
        double &_result_ref = (double &) ((arg1)->_translucency);
        result = (double *) &_result_ref;
    }
    
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_set_1rdMaterial_1_1ambientColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    rdArray<double > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    arg2 = *(rdArray<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<double > & reference is null");
        return ;
    }
    if (arg1) (arg1)->_ambientColor = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdMaterial_1_1ambientColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    rdArray<double > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    {
        rdArray<double > &_result_ref = (rdArray<double > &) ((arg1)->_ambientColor);
        result = (rdArray<double > *) &_result_ref;
    }
    
    *(rdArray<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_set_1rdMaterial_1_1diffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    rdArray<double > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    arg2 = *(rdArray<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<double > & reference is null");
        return ;
    }
    if (arg1) (arg1)->_diffuseColor = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdMaterial_1_1diffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    rdArray<double > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    {
        rdArray<double > &_result_ref = (rdArray<double > &) ((arg1)->_diffuseColor);
        result = (rdArray<double > *) &_result_ref;
    }
    
    *(rdArray<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_set_1rdMaterial_1_1specularColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    rdArray<double > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    arg2 = *(rdArray<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<double > & reference is null");
        return ;
    }
    if (arg1) (arg1)->_specularColor = *arg2;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdMaterial_1_1specularColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    rdArray<double > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    {
        rdArray<double > &_result_ref = (rdArray<double > &) ((arg1)->_specularColor);
        result = (rdArray<double > *) &_result_ref;
    }
    
    *(rdArray<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_set_1rdMaterial_1_1defaultMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    rdMaterial::_defaultMaterial = arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdMaterial_1_1defaultMaterial(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    rdMaterial *result;
    
    (void)jenv;
    (void)jcls;
    result = (rdMaterial *)rdMaterial::_defaultMaterial;
    
    *(rdMaterial **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdMaterial_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    rdMaterial *result;
    
    (void)jenv;
    (void)jcls;
    result = (rdMaterial *)new rdMaterial();
    
    *(rdMaterial **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdMaterial_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    rdMaterial *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (rdMaterial *)new rdMaterial((std::string const &)*arg1);
    
    *(rdMaterial **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdMaterial_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    rdMaterial *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    result = (rdMaterial *)new rdMaterial(arg1);
    
    *(rdMaterial **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdMaterial_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdMaterial *arg1 = 0 ;
    rdMaterial *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdMaterial const & reference is null");
        return 0;
    }
    result = (rdMaterial *)new rdMaterial((rdMaterial const &)*arg1);
    
    *(rdMaterial **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterial_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    result = (rdObject *)((rdMaterial const *)arg1)->copy();
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterial_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    result = (rdObject *)((rdMaterial const *)arg1)->copy(arg2);
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterial_1setTranslucency(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->setTranslucency(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterial_1getTranslucency(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    result = (double)((rdMaterial const *)arg1)->getTranslucency();
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterial_1setAmbientColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setAmbientColor((double const (*))arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterial_1getAmbientColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    result = (double *)((rdMaterial const *)arg1)->getAmbientColor();
    
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterial_1setDiffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setDiffuseColor((double const (*))arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterial_1getDiffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    result = (double *)((rdMaterial const *)arg1)->getDiffuseColor();
    
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterial_1setSpecularColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setSpecularColor((double const (*))arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterial_1getSpecularColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    result = (double *)((rdMaterial const *)arg1)->getSpecularColor();
    
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterial_1GetDefaultMaterialName(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    {
        std::string const &_result_ref = rdMaterial::GetDefaultMaterialName();
        result = (std::string *) &_result_ref;
    }
    
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterial_1GetDefaultMaterial(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    rdMaterial *result;
    
    (void)jenv;
    (void)jcls;
    {
        rdMaterial const &_result_ref = rdMaterial::GetDefaultMaterial();
        result = (rdMaterial *) &_result_ref;
    }
    
    *(rdMaterial **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterial_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdMaterial *arg1 = (rdMaterial *) 0 ;
    DOMElement *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterial **)&jarg1; 
    result = (DOMElement *)((rdMaterial const *)arg1)->getNode();
    
    *(DOMElement **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdVisibleProperties_1None(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdVisibleProperties::None;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdVisibleProperties_1WireFrame(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdVisibleProperties::WireFrame;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdVisibleProperties_1SolidFill(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdVisibleProperties::SolidFill;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdVisibleProperties_1FlatShaded(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdVisibleProperties::FlatShaded;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdVisibleProperties_1GouraudShaded(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdVisibleProperties::GouraudShaded;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdVisibleProperties_1PhongShaded(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdVisibleProperties::PhongShaded;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdVisibleProperties_1BoundingBox(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdVisibleProperties::BoundingBox;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdVisibleProperties_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    rdVisibleProperties *result;
    
    (void)jenv;
    (void)jcls;
    result = (rdVisibleProperties *)new rdVisibleProperties();
    
    *(rdVisibleProperties **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdVisibleProperties_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    rdVisibleProperties *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (rdVisibleProperties *)new rdVisibleProperties((std::string const &)*arg1);
    
    *(rdVisibleProperties **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdVisibleProperties_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdXMLDocument *arg1 = (rdXMLDocument *) 0 ;
    rdVisibleProperties *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdXMLDocument **)&jarg1; 
    result = (rdVisibleProperties *)new rdVisibleProperties((rdXMLDocument const *)arg1);
    
    *(rdVisibleProperties **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdVisibleProperties_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    rdVisibleProperties *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    result = (rdVisibleProperties *)new rdVisibleProperties(arg1);
    
    *(rdVisibleProperties **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdVisibleProperties_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdVisibleProperties *arg1 = 0 ;
    rdVisibleProperties *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleProperties **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdVisibleProperties const & reference is null");
        return 0;
    }
    result = (rdVisibleProperties *)new rdVisibleProperties((rdVisibleProperties const &)*arg1);
    
    *(rdVisibleProperties **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdVisibleProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdVisibleProperties *arg1 = (rdVisibleProperties *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleProperties **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleProperties_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdVisibleProperties *arg1 = (rdVisibleProperties *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleProperties **)&jarg1; 
    result = (rdObject *)((rdVisibleProperties const *)arg1)->copy();
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleProperties_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    rdVisibleProperties *arg1 = (rdVisibleProperties *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleProperties **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    result = (rdObject *)((rdVisibleProperties const *)arg1)->copy(arg2);
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleProperties_1setDisplayPreference(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdVisibleProperties *arg1 = (rdVisibleProperties *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleProperties **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->setDisplayPreference((rdVisibleProperties::DisplayPreference )arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleProperties_1getDisplayPreference(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdVisibleProperties *arg1 = (rdVisibleProperties *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleProperties **)&jarg1; 
    result = (int)((rdVisibleProperties const *)arg1)->getDisplayPreference();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleProperties_1setShowNormals(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    rdVisibleProperties *arg1 = (rdVisibleProperties *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleProperties **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    (arg1)->setShowNormals(arg2);
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleProperties_1getShowNormals(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    rdVisibleProperties *arg1 = (rdVisibleProperties *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleProperties **)&jarg1; 
    result = (bool)((rdVisibleProperties const *)arg1)->getShowNormals();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleProperties_1setShowAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    rdVisibleProperties *arg1 = (rdVisibleProperties *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleProperties **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    (arg1)->setShowAxes(arg2);
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleProperties_1getShowAxes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    rdVisibleProperties *arg1 = (rdVisibleProperties *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleProperties **)&jarg1; 
    result = (bool)((rdVisibleProperties const *)arg1)->getShowAxes();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleProperties_1setMaterialName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    rdVisibleProperties *arg1 = (rdVisibleProperties *) 0 ;
    char *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleProperties **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->setMaterialName((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleProperties_1getMaterialName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    rdVisibleProperties *arg1 = (rdVisibleProperties *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleProperties **)&jarg1; 
    result = (char *)((rdVisibleProperties const *)arg1)->getMaterialName();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdTransform_1X(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdTransform::X;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdTransform_1Y(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdTransform::Y;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdTransform_1Z(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdTransform::Z;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdTransform_1NoAxis(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdTransform::NoAxis;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdTransform_1XYZ(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdTransform::XYZ;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdTransform_1XZY(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdTransform::XZY;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdTransform_1YXZ(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdTransform::YXZ;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdTransform_1YZX(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdTransform::YZX;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdTransform_1ZXY(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdTransform::ZXY;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdTransform_1ZYX(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdTransform::ZYX;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdTransform_1Radians(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdTransform::Radians;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdTransform_1Degrees(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)rdTransform::Degrees;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    rdTransform *result;
    
    (void)jenv;
    (void)jcls;
    result = (rdTransform *)new rdTransform();
    
    *(rdTransform **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdTransform *arg1 = 0 ;
    rdTransform *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdTransform const & reference is null");
        return 0;
    }
    result = (rdTransform *)new rdTransform((rdTransform const &)*arg1);
    
    *(rdTransform **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdTransform_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    double arg1 ;
    double *arg2 ;
    rdTransform *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (double)jarg1; 
    arg2 = *(double **)&jarg2; 
    result = (rdTransform *)new rdTransform(arg1,arg2);
    
    *(rdTransform **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdTransform *arg1 = (rdTransform *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    result = (rdObject *)((rdTransform const *)arg1)->copy();
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1printMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    (arg1)->printMatrix();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdTransform const *)arg1)->getPosition(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setPosition((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1getOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdTransform const *)arg1)->getOrientation(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1setOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setOrientation((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1setIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    (arg1)->setIdentity();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1rotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    double *arg2 ;
    int arg3 ;
    int arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (int)jarg4; 
    (arg1)->rotate((double const (*))arg2,(rdTransform::AnglePreference )arg3,(rdTransform::RotationOrder )arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1rotateX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    double arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    (arg1)->rotateX(arg2,(rdTransform::AnglePreference )arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1rotateY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    double arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    (arg1)->rotateY(arg2,(rdTransform::AnglePreference )arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1rotateZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    double arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    (arg1)->rotateZ(arg2,(rdTransform::AnglePreference )arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1rotateAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    double arg2 ;
    int arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double **)&jarg4; 
    (arg1)->rotateAxis(arg2,(rdTransform::AnglePreference )arg3,(double const (*))arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1translateX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->translateX(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1translateY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->translateY(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1translateZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->translateZ(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->translate((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdTransform_1setupSerializedMembers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdTransform *arg1 = (rdTransform *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdTransform **)&jarg1; 
    (arg1)->setupSerializedMembers();
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdVisibleObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    rdVisibleObject *result;
    
    (void)jenv;
    (void)jcls;
    result = (rdVisibleObject *)new rdVisibleObject();
    
    *(rdVisibleObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdVisibleObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    rdVisibleObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (rdVisibleObject *)new rdVisibleObject((std::string const &)*arg1);
    
    *(rdVisibleObject **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdVisibleObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    rdVisibleObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    result = (rdVisibleObject *)new rdVisibleObject(arg1);
    
    *(rdVisibleObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdVisibleObject_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdVisibleObject *arg1 = 0 ;
    rdVisibleObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdVisibleObject const & reference is null");
        return 0;
    }
    result = (rdVisibleObject *)new rdVisibleObject((rdVisibleObject const &)*arg1);
    
    *(rdVisibleObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdVisibleObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    result = (rdObject *)((rdVisibleObject const *)arg1)->copy();
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    result = (rdObject *)((rdVisibleObject const *)arg1)->copy(arg2);
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1setNumGeometryFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->setNumGeometryFiles(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1setGeometryFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return ;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    (arg1)->setGeometryFileName(arg2,(std::string const &)*arg3);
    
    delete arg3; 
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1getNumGeometryFiles(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    result = (int)((rdVisibleObject const *)arg1)->getNumGeometryFiles();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1getGeometryFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    int arg2 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (char *)((rdVisibleObject const *)arg1)->getGeometryFileName(arg2);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1setVisibleProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    rdVisibleProperties *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = *(rdVisibleProperties **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdVisibleProperties const & reference is null");
        return ;
    }
    (arg1)->setVisibleProperties((rdVisibleProperties const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1getVisibleProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    rdVisibleProperties *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    {
        rdVisibleProperties &_result_ref = (arg1)->getVisibleProperties();
        result = (rdVisibleProperties *) &_result_ref;
    }
    
    *(rdVisibleProperties **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1setTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    rdTransform *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = *(rdTransform **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdTransform const & reference is null");
        return ;
    }
    (arg1)->setTransform((rdTransform const &)*arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1getTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    rdTransform *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    {
        rdTransform &_result_ref = (arg1)->getTransform();
        result = (rdTransform *) &_result_ref;
    }
    
    *(rdTransform **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1setScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setScaleFactors((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1getScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdVisibleObject const *)arg1)->getScaleFactors(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1rotateRadians_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->rotateRadians((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1rotateRadians_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    double *arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = (int)jarg3; 
    (arg1)->rotateRadians((double const (*))arg2,(rdTransform::RotationOrder )arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1rotateRadiansX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->rotateRadiansX(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1rotateRadiansY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->rotateRadiansY(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1rotateRadiansZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->rotateRadiansZ(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1rotateRadiansAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    double arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->rotateRadiansAxis(arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1rotateDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->rotateDegrees((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1rotateDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    double *arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = (int)jarg3; 
    (arg1)->rotateDegrees((double const (*))arg2,(rdTransform::RotationOrder )arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1rotateDegreesX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->rotateDegreesX(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1rotateDegreesY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->rotateDegreesY(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1rotateDegreesZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->rotateDegreesZ(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1rotateDegreesAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    double arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->rotateDegreesAxis(arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->translate((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdVisibleObject_1setupProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdVisibleObject *arg1 = (rdVisibleObject *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdVisibleObject **)&jarg1; 
    (arg1)->setupProperties();
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdBody_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    double arg1 = (double) 1.0 ;
    double *arg2 = (double *) NULL ;
    rdBody *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (double)jarg1; 
    arg2 = *(double **)&jarg2; 
    result = (rdBody *)new rdBody(arg1,arg2);
    
    *(rdBody **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdBody_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdBody *arg1 = 0 ;
    rdBody *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdBody const & reference is null");
        return 0;
    }
    result = (rdBody *)new rdBody((rdBody const &)*arg1);
    
    *(rdBody **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdBody_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    rdBody *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (rdBody *)new rdBody((std::string const &)*arg1);
    
    *(rdBody **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdBody_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    rdBody *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    result = (rdBody *)new rdBody(arg1);
    
    *(rdBody **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdBody *arg1 = (rdBody *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdBody_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdBody *arg1 = (rdBody *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1; 
    result = (rdObject *)((rdBody const *)arg1)->copy();
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdBody_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    rdBody *arg1 = (rdBody *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    result = (rdObject *)((rdBody const *)arg1)->copy(arg2);
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdBody_1setMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdBody *arg1 = (rdBody *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->setMass(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdBody_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    rdBody *arg1 = (rdBody *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1; 
    result = (double)(arg1)->getMass();
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdBody_1setInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdBody *arg1 = (rdBody *) 0 ;
    double *arg2 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setInertia(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdBody_1setInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
    rdBody *arg1 = (rdBody *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    (arg1)->setInertia(arg2,arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdBody_1setInertia_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
    rdBody *arg1 = (rdBody *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    double arg7 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = (double)jarg6; 
    arg7 = (double)jarg7; 
    (arg1)->setInertia(arg2,arg3,arg4,arg5,arg6,arg7);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdBody_1getInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdBody *arg1 = (rdBody *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->getInertia(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdBody_1getInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdBody *arg1 = (rdBody *) 0 ;
    double (*arg2)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1; 
    arg2 = *(double (**)[3])&jarg2; 
    (arg1)->getInertia((double (*)[3])arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdBody_1setCenterOfMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdBody *arg1 = (rdBody *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setCenterOfMass((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdBody_1getCenterOfMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdBody *arg1 = (rdBody *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdBody const *)arg1)->getCenterOfMass(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdBody_1scaleBy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdBody *arg1 = (rdBody *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->scaleBy((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdBody_1setNull(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdBody *arg1 = (rdBody *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1; 
    (arg1)->setNull();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdBody_1setupProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdBody *arg1 = (rdBody *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdBody **)&jarg1; 
    (arg1)->setupProperties();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdSetBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdSetBodies_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    rdSet<rdBody > *result;
    
    (void)jenv;
    (void)jcls;
    result = (rdSet<rdBody > *)new rdSet<rdBody >();
    
    *(rdSet<rdBody > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdSetBodies_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    rdSet<rdBody > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (rdSet<rdBody > *)new rdSet<rdBody >((std::string const &)*arg1);
    
    *(rdSet<rdBody > **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdSetBodies_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdSet<rdBody > *arg1 = 0 ;
    rdSet<rdBody > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdSet<rdBody > const & reference is null");
        return 0;
    }
    result = (rdSet<rdBody > *)new rdSet<rdBody >((rdSet<rdBody > const &)*arg1);
    
    *(rdSet<rdBody > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    result = (rdObject *)((rdSet<rdBody > const *)arg1)->copy();
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    (arg1)->setMemoryOwner(arg2);
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    result = (bool)((rdSet<rdBody > const *)arg1)->getMemoryOwner();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->ensureCapacity(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    (arg1)->trim();
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    result = (int)((rdSet<rdBody > const *)arg1)->getCapacity();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->setCapacityIncrement(arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    result = (int)((rdSet<rdBody > const *)arg1)->getCapacityIncrement();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->setSize(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    result = (int)((rdSet<rdBody > const *)arg1)->getSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    rdBody *arg2 = (rdBody *) 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = *(rdBody **)&jarg2; 
    arg3 = (int)jarg3; 
    result = (int)((rdSet<rdBody > const *)arg1)->getIndex((rdBody const *)arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jint jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    result = (int)((rdSet<rdBody > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    rdBody *arg2 = (rdBody *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = *(rdBody **)&jarg2; 
    result = (bool)(arg1)->append(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    rdArrayPtrs<rdBody > *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = *(rdArrayPtrs<rdBody > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArrayPtrs<rdBody > & reference is null");
        return 0;
    }
    result = (bool)(arg1)->append(*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    int arg2 ;
    rdBody *arg3 = (rdBody *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(rdBody **)&jarg3; 
    result = (bool)(arg1)->insert(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->remove(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    rdBody *arg2 = (rdBody *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = *(rdBody **)&jarg2; 
    result = (bool)(arg1)->remove((rdBody const *)arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    int arg2 ;
    rdBody *arg3 = (rdBody *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(rdBody **)&jarg3; 
    result = (bool)(arg1)->set(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    int arg2 ;
    rdBody *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (rdBody *)((rdSet<rdBody > const *)arg1)->get(arg2);
    
    *(rdBody **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    std::string *arg2 = 0 ;
    rdBody *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (rdBody *)(arg1)->get((std::string const &)*arg2);
    
    *(rdBody **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    rdBody *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    result = (rdBody *)((rdSet<rdBody > const *)arg1)->getLast();
    
    *(rdBody **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetBodies_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    rdSet<rdBody > *arg1 = (rdSet<rdBody > *) 0 ;
    rdBody *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdBody > **)&jarg1; 
    arg2 = *(rdBody **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdBody const & reference is null");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    result = (int)((rdSet<rdBody > const *)arg1)->searchBinary((rdBody const &)*arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdSetMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdSetMaterials_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    rdSet<rdMaterial > *result;
    
    (void)jenv;
    (void)jcls;
    result = (rdSet<rdMaterial > *)new rdSet<rdMaterial >();
    
    *(rdSet<rdMaterial > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdSetMaterials_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    rdSet<rdMaterial > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (rdSet<rdMaterial > *)new rdSet<rdMaterial >((std::string const &)*arg1);
    
    *(rdSet<rdMaterial > **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdSetMaterials_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdSet<rdMaterial > *arg1 = 0 ;
    rdSet<rdMaterial > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdSet<rdMaterial > const & reference is null");
        return 0;
    }
    result = (rdSet<rdMaterial > *)new rdSet<rdMaterial >((rdSet<rdMaterial > const &)*arg1);
    
    *(rdSet<rdMaterial > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    result = (rdObject *)((rdSet<rdMaterial > const *)arg1)->copy();
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    (arg1)->setMemoryOwner(arg2);
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    result = (bool)((rdSet<rdMaterial > const *)arg1)->getMemoryOwner();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->ensureCapacity(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    (arg1)->trim();
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    result = (int)((rdSet<rdMaterial > const *)arg1)->getCapacity();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->setCapacityIncrement(arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    result = (int)((rdSet<rdMaterial > const *)arg1)->getCapacityIncrement();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->setSize(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    result = (int)((rdSet<rdMaterial > const *)arg1)->getSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    rdMaterial *arg2 = (rdMaterial *) 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = *(rdMaterial **)&jarg2; 
    arg3 = (int)jarg3; 
    result = (int)((rdSet<rdMaterial > const *)arg1)->getIndex((rdMaterial const *)arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jint jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    result = (int)((rdSet<rdMaterial > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    rdMaterial *arg2 = (rdMaterial *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = *(rdMaterial **)&jarg2; 
    result = (bool)(arg1)->append(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    rdArrayPtrs<rdMaterial > *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = *(rdArrayPtrs<rdMaterial > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArrayPtrs<rdMaterial > & reference is null");
        return 0;
    }
    result = (bool)(arg1)->append(*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    int arg2 ;
    rdMaterial *arg3 = (rdMaterial *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(rdMaterial **)&jarg3; 
    result = (bool)(arg1)->insert(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->remove(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    rdMaterial *arg2 = (rdMaterial *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = *(rdMaterial **)&jarg2; 
    result = (bool)(arg1)->remove((rdMaterial const *)arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    int arg2 ;
    rdMaterial *arg3 = (rdMaterial *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(rdMaterial **)&jarg3; 
    result = (bool)(arg1)->set(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    int arg2 ;
    rdMaterial *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (rdMaterial *)((rdSet<rdMaterial > const *)arg1)->get(arg2);
    
    *(rdMaterial **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    std::string *arg2 = 0 ;
    rdMaterial *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (rdMaterial *)(arg1)->get((std::string const &)*arg2);
    
    *(rdMaterial **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    rdMaterial *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    result = (rdMaterial *)((rdSet<rdMaterial > const *)arg1)->getLast();
    
    *(rdMaterial **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetMaterials_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    rdSet<rdMaterial > *arg1 = (rdSet<rdMaterial > *) 0 ;
    rdMaterial *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdMaterial > **)&jarg1; 
    arg2 = *(rdMaterial **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdMaterial const & reference is null");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    result = (int)((rdSet<rdMaterial > const *)arg1)->searchBinary((rdMaterial const &)*arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdMaterialSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    rdMaterialSet *result;
    
    (void)jenv;
    (void)jcls;
    result = (rdMaterialSet *)new rdMaterialSet();
    
    *(rdMaterialSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdMaterialSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    rdMaterialSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (rdMaterialSet *)new rdMaterialSet((std::string const &)*arg1);
    
    *(rdMaterialSet **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdMaterialSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdMaterialSet *arg1 = 0 ;
    rdMaterialSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterialSet **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdMaterialSet const & reference is null");
        return 0;
    }
    result = (rdMaterialSet *)new rdMaterialSet((rdMaterialSet const &)*arg1);
    
    *(rdMaterialSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdMaterialSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdMaterialSet *arg1 = (rdMaterialSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterialSet **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterialSet_1addMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdMaterialSet *arg1 = (rdMaterialSet *) 0 ;
    rdMaterial *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterialSet **)&jarg1; 
    arg2 = *(rdMaterial **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdMaterial & reference is null");
        return 0;
    }
    result = (bool)(arg1)->addMaterial(*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterialSet_1updateMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdMaterialSet *arg1 = (rdMaterialSet *) 0 ;
    rdMaterial *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterialSet **)&jarg1; 
    arg2 = *(rdMaterial **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdMaterial & reference is null");
        return 0;
    }
    result = (bool)(arg1)->updateMaterial(*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterialSet_1removeMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdMaterialSet *arg1 = (rdMaterialSet *) 0 ;
    rdMaterial *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterialSet **)&jarg1; 
    arg2 = *(rdMaterial **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdMaterial & reference is null");
        return 0;
    }
    result = (bool)(arg1)->removeMaterial(*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterialSet_1materialExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    rdMaterialSet *arg1 = (rdMaterialSet *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterialSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (bool)((rdMaterialSet const *)arg1)->materialExists((std::string const &)*arg2);
    
    jresult = (jboolean)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterialSet_1getNumberOfMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdMaterialSet *arg1 = (rdMaterialSet *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterialSet **)&jarg1; 
    result = (int)((rdMaterialSet const *)arg1)->getNumberOfMaterials();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterialSet_1getMaterialByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    rdMaterialSet *arg1 = (rdMaterialSet *) 0 ;
    int arg2 ;
    rdMaterial *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterialSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        rdMaterial const &_result_ref = ((rdMaterialSet const *)arg1)->getMaterialByIndex(arg2);
        result = (rdMaterial *) &_result_ref;
    }
    
    *(rdMaterial **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdMaterialSet_1getMaterialByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    rdMaterialSet *arg1 = (rdMaterialSet *) 0 ;
    char *arg2 ;
    rdMaterial *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdMaterialSet **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    {
        rdMaterial const &_result_ref = ((rdMaterialSet const *)arg1)->getMaterialByName((char const *)arg2);
        result = (rdMaterial *) &_result_ref;
    }
    
    *(rdMaterial **)&jresult = result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdActuator_1LARGE(JNIEnv *jenv, jclass jcls) {
    jdouble jresult = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    result = (double)(double)rdActuator::LARGE;
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdActuator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    result = (rdObject *)((rdActuator const *)arg1)->copy();
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    result = (rdObject *)((rdActuator const *)arg1)->copy(arg2);
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    rdModel *arg2 = (rdModel *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = *(rdModel **)&jarg2; 
    (arg1)->setModel(arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    rdModel *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    result = (rdModel *)((rdActuator const *)arg1)->getModel();
    
    *(rdModel **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    result = (int)((rdActuator const *)arg1)->getNX();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdActuator const *)arg1)->getControlName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdActuator const *)arg1)->getControlIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->setControl(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    (arg1)->setControl((std::string const &)*arg2,arg3);
    
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setControls((double const (*))arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuator const *)arg1)->getControl(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdActuator const *)arg1)->getControl((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdActuator const *)arg1)->getControls(arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    result = (int)((rdActuator const *)arg1)->getNY();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    int arg2 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        std::string const &_result_ref = ((rdActuator const *)arg1)->getStateName(arg2);
        result = (std::string *) &_result_ref;
    }
    
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdActuator const *)arg1)->getStateIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1setState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->setState(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1setState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    (arg1)->setState((std::string const &)*arg2,arg3);
    
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setStates((double const (*))arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuator const *)arg1)->getState(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdActuator const *)arg1)->getState((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdActuator const *)arg1)->getStates(arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getNYP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    result = (int)((rdActuator const *)arg1)->getNYP();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    int arg2 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        std::string const &_result_ref = ((rdActuator const *)arg1)->getPseudoStateName(arg2);
        result = (std::string *) &_result_ref;
    }
    
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdActuator const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1setPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->setPseudoState(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1setPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    (arg1)->setPseudoState((std::string const &)*arg2,arg3);
    
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setPseudoStates((double const (*))arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuator const *)arg1)->getPseudoState(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdActuator const *)arg1)->getPseudoState((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdActuator const *)arg1)->getPseudoStates(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1setArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->setArea(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    result = (double)((rdActuator const *)arg1)->getArea();
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getAppliesForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    result = (bool)((rdActuator const *)arg1)->getAppliesForce();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1setForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->setForce(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    result = (double)((rdActuator const *)arg1)->getForce();
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getStress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    result = (double)((rdActuator const *)arg1)->getStress();
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    result = (double)((rdActuator const *)arg1)->getSpeed();
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getPower(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    result = (double)((rdActuator const *)arg1)->getPower();
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1setMaxForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->setMaxForce(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getMaxForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    result = (double)((rdActuator const *)arg1)->getMaxForce();
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1setMinForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->setMinForce(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getMinForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    result = (double)((rdActuator const *)arg1)->getMinForce();
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1setOptimalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->setOptimalForce(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1getOptimalForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    result = (double)((rdActuator const *)arg1)->getOptimalForce();
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    double *arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    (arg1)->computeActuation();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1computeStateDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->computeStateDerivatives(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1updatePseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    (arg1)->updatePseudoStates();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdActuator *arg1 = (rdActuator *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    (arg1)->apply();
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuator_1check(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    rdActuator *arg1 = (rdActuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuator **)&jarg1; 
    result = (bool)((rdActuator const *)arg1)->check();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdSetActuators(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdSetActuators_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    rdSet<rdActuator > *result;
    
    (void)jenv;
    (void)jcls;
    result = (rdSet<rdActuator > *)new rdSet<rdActuator >();
    
    *(rdSet<rdActuator > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdSetActuators_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    rdSet<rdActuator > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (rdSet<rdActuator > *)new rdSet<rdActuator >((std::string const &)*arg1);
    
    *(rdSet<rdActuator > **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdSetActuators_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdSet<rdActuator > *arg1 = 0 ;
    rdSet<rdActuator > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdSet<rdActuator > const & reference is null");
        return 0;
    }
    result = (rdSet<rdActuator > *)new rdSet<rdActuator >((rdSet<rdActuator > const &)*arg1);
    
    *(rdSet<rdActuator > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    result = (rdObject *)((rdSet<rdActuator > const *)arg1)->copy();
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    (arg1)->setMemoryOwner(arg2);
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    result = (bool)((rdSet<rdActuator > const *)arg1)->getMemoryOwner();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->ensureCapacity(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    (arg1)->trim();
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    result = (int)((rdSet<rdActuator > const *)arg1)->getCapacity();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->setCapacityIncrement(arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    result = (int)((rdSet<rdActuator > const *)arg1)->getCapacityIncrement();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->setSize(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    result = (int)((rdSet<rdActuator > const *)arg1)->getSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    rdActuator *arg2 = (rdActuator *) 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = *(rdActuator **)&jarg2; 
    arg3 = (int)jarg3; 
    result = (int)((rdSet<rdActuator > const *)arg1)->getIndex((rdActuator const *)arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jint jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    result = (int)((rdSet<rdActuator > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    rdActuator *arg2 = (rdActuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = *(rdActuator **)&jarg2; 
    result = (bool)(arg1)->append(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    rdArrayPtrs<rdActuator > *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = *(rdArrayPtrs<rdActuator > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArrayPtrs<rdActuator > & reference is null");
        return 0;
    }
    result = (bool)(arg1)->append(*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    int arg2 ;
    rdActuator *arg3 = (rdActuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(rdActuator **)&jarg3; 
    result = (bool)(arg1)->insert(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->remove(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    rdActuator *arg2 = (rdActuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = *(rdActuator **)&jarg2; 
    result = (bool)(arg1)->remove((rdActuator const *)arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    int arg2 ;
    rdActuator *arg3 = (rdActuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(rdActuator **)&jarg3; 
    result = (bool)(arg1)->set(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    int arg2 ;
    rdActuator *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (rdActuator *)((rdSet<rdActuator > const *)arg1)->get(arg2);
    
    *(rdActuator **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    std::string *arg2 = 0 ;
    rdActuator *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (rdActuator *)(arg1)->get((std::string const &)*arg2);
    
    *(rdActuator **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    rdActuator *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    result = (rdActuator *)((rdSet<rdActuator > const *)arg1)->getLast();
    
    *(rdActuator **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSetActuators_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    rdSet<rdActuator > *arg1 = (rdSet<rdActuator > *) 0 ;
    rdActuator *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSet<rdActuator > **)&jarg1; 
    arg2 = *(rdActuator **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdActuator const & reference is null");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    result = (int)((rdSet<rdActuator > const *)arg1)->searchBinary((rdActuator const &)*arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdActuatorSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    rdActuatorSet *result;
    
    (void)jenv;
    (void)jcls;
    result = (rdActuatorSet *)new rdActuatorSet();
    
    *(rdActuatorSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdActuatorSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    char *arg1 ;
    rdActuatorSet *result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (rdActuatorSet *)new rdActuatorSet((char const *)arg1);
    
    *(rdActuatorSet **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdActuatorSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    rdModel *arg2 = (rdModel *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = *(rdModel **)&jarg2; 
    (arg1)->setModel(arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    rdModel *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    result = (rdModel *)((rdActuatorSet const *)arg1)->getModel();
    
    *(rdModel **)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->remove(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    rdActuator *arg2 = (rdActuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = *(rdActuator **)&jarg2; 
    result = (bool)(arg1)->append(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    rdActuator *arg3 = (rdActuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(rdActuator **)&jarg3; 
    result = (bool)(arg1)->set(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    result = (int)((rdActuatorSet const *)arg1)->getNX();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1mapActuatorToControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)((rdActuatorSet const *)arg1)->mapActuatorToControl(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1mapControlToActuator(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)((rdActuatorSet const *)arg1)->mapControlToActuator(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdActuatorSet const *)arg1)->getControlIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdActuatorSet const *)arg1)->getControlName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->setControl(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    (arg1)->setControl((std::string const &)*arg2,arg3);
    
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setControls((double const (*))arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuatorSet const *)arg1)->getControl(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdActuatorSet const *)arg1)->getControl((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdActuatorSet const *)arg1)->getControls(arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    result = (int)((rdActuatorSet const *)arg1)->getNY();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1mapActuatorToState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)((rdActuatorSet const *)arg1)->mapActuatorToState(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1mapStateToActuator(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)((rdActuatorSet const *)arg1)->mapStateToActuator(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdActuatorSet const *)arg1)->getStateIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdActuatorSet const *)arg1)->getStateName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1setState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->setState(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1setState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    (arg1)->setState((std::string const &)*arg2,arg3);
    
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setStates((double const (*))arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuatorSet const *)arg1)->getState(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdActuatorSet const *)arg1)->getState((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdActuatorSet const *)arg1)->getStates(arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getNYP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    result = (int)((rdActuatorSet const *)arg1)->getNYP();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1mapActuatorToPseudoState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)((rdActuatorSet const *)arg1)->mapActuatorToPseudoState(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1mapPseudoStateToActuator(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)((rdActuatorSet const *)arg1)->mapPseudoStateToActuator(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdActuatorSet const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdActuatorSet const *)arg1)->getPseudoStateName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1setPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->setPseudoState(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1setPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    (arg1)->setPseudoState((std::string const &)*arg2,arg3);
    
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setPseudoStates((double const (*))arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuatorSet const *)arg1)->getPseudoState(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdActuatorSet const *)arg1)->getPseudoState((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdActuatorSet const *)arg1)->getPseudoStates(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    double *arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    (arg1)->computeActuation();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1computeStateDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->computeStateDerivatives(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1updatePseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    (arg1)->updatePseudoStates();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    (arg1)->apply();
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatorSet_1check(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    result = (bool)((rdActuatorSet const *)arg1)->check();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdContactForceSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    rdContactForceSet *result;
    
    (void)jenv;
    (void)jcls;
    result = (rdContactForceSet *)new rdContactForceSet();
    
    *(rdContactForceSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdContactForceSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    char *arg1 ;
    rdContactForceSet *result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (rdContactForceSet *)new rdContactForceSet((char const *)arg1);
    
    *(rdContactForceSet **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdContactForceSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdContactForceSet *arg1 = (rdContactForceSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdContactForceSet **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdContactForceSet_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdContactForceSet *arg1 = (rdContactForceSet *) 0 ;
    rdContactForce *arg2 = (rdContactForce *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdContactForceSet **)&jarg1; 
    arg2 = *(rdContactForce **)&jarg2; 
    result = (bool)(arg1)->append(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdContactForceSet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdContactForceSet *arg1 = (rdContactForceSet *) 0 ;
    int arg2 ;
    rdContactForce *arg3 = (rdContactForce *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdContactForceSet **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(rdContactForce **)&jarg3; 
    result = (bool)(arg1)->set(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdContactForceSet_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdContactForceSet *arg1 = (rdContactForceSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdContactForceSet **)&jarg1; 
    (arg1)->computeContact();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdContactForceSet_1updatePseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdContactForceSet *arg1 = (rdContactForceSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdContactForceSet **)&jarg1; 
    (arg1)->updatePseudoStates();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdContactForceSet_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdContactForceSet *arg1 = (rdContactForceSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdContactForceSet **)&jarg1; 
    (arg1)->apply();
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdContactForceSet_1check(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    rdContactForceSet *arg1 = (rdContactForceSet *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdContactForceSet **)&jarg1; 
    result = (bool)((rdContactForceSet const *)arg1)->check();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    double arg1 = (double) 0.0 ;
    int arg2 = (int) 0 ;
    double *arg3 = (double *) NULL ;
    rdStateVector *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (double)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    result = (rdStateVector *)new rdStateVector(arg1,arg2,(double const *)arg3);
    
    *(rdStateVector **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdStateVector *arg1 = 0 ;
    rdStateVector *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdStateVector const & reference is null");
        return 0;
    }
    result = (rdStateVector *)new rdStateVector((rdStateVector const &)*arg1);
    
    *(rdStateVector **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    double arg2 ;
    int arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double **)&jarg4; 
    (arg1)->setStates(arg2,arg3,(double const (*))arg4);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    result = (int)((rdStateVector const *)arg1)->getSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->setTime(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    result = (double)((rdStateVector const *)arg1)->getTime();
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1getDataValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return 0;
    }
    result = (int)(arg1)->getDataValue(arg2,*arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1setDataValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return ;
    }
    (arg1)->setDataValue(arg2,*arg3);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    rdArray<double > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    {
        rdArray<double > &_result_ref = (arg1)->getData();
        result = (rdArray<double > *) &_result_ref;
    }
    
    *(rdArray<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1shiftTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->shiftTime(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1scaleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->scaleTime(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->add(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->add(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->add(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    rdStateVector *arg2 = (rdStateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = *(rdStateVector **)&jarg2; 
    (arg1)->add(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1subtract_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->subtract(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1subtract_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->subtract(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1subtract_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    rdStateVector *arg2 = (rdStateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = *(rdStateVector **)&jarg2; 
    (arg1)->subtract(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1multiply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->multiply(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1multiply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->multiply(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1multiply_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    rdStateVector *arg2 = (rdStateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = *(rdStateVector **)&jarg2; 
    (arg1)->multiply(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1divide_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->divide(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1divide_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->divide(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1divide_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    rdStateVector *arg2 = (rdStateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = *(rdStateVector **)&jarg2; 
    (arg1)->divide(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    (arg1)->print();
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStateVector_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    rdStateVector *arg1 = (rdStateVector *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStateVector **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    result = (int)(arg1)->print(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdStorage_1DEFAULT_1CAPACITY(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)(int)rdStorage_DEFAULT_CAPACITY;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdStorage_1LARGE_1NEGATIVE(JNIEnv *jenv, jclass jcls) {
    jdouble jresult = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    result = (double)(double)rdStorage::LARGE_NEGATIVE;
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdStorage_1LARGE_1POSITIVE(JNIEnv *jenv, jclass jcls) {
    jdouble jresult = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    result = (double)(double)rdStorage::LARGE_POSITIVE;
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_set_1rdStorage_1DEFAULT_1HEADER_1TOKEN(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    char *arg1 ;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return ;
        }
    }
    {
        if (arg1) {
            rdStorage::DEFAULT_HEADER_TOKEN = (char const *) (new char[strlen(arg1)+1]);
            strcpy((char *) rdStorage::DEFAULT_HEADER_TOKEN,arg1);
        }else {
            rdStorage::DEFAULT_HEADER_TOKEN = 0;
        }
    }
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdStorage_1DEFAULT_1HEADER_1TOKEN(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *)rdStorage::DEFAULT_HEADER_TOKEN;
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_set_1rdStorage_1DEFAULT_1HEADER_1SEPARATOR(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    char *arg1 ;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return ;
        }
    }
    {
        if (arg1) {
            rdStorage::DEFAULT_HEADER_SEPARATOR = (char const *) (new char[strlen(arg1)+1]);
            strcpy((char *) rdStorage::DEFAULT_HEADER_SEPARATOR,arg1);
        }else {
            rdStorage::DEFAULT_HEADER_SEPARATOR = 0;
        }
    }
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_get_1rdStorage_1DEFAULT_1HEADER_1SEPARATOR(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *)rdStorage::DEFAULT_HEADER_SEPARATOR;
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdStorage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    int arg1 = (int) rdStorage_DEFAULT_CAPACITY ;
    char *arg2 = (char *) "UNKNOWN" ;
    rdStorage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (rdStorage *)new rdStorage(arg1,(char const *)arg2);
    
    *(rdStorage **)&jresult = result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdStorage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    char *arg1 ;
    rdStorage *result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (rdStorage *)new rdStorage((char const *)arg1);
    
    *(rdStorage **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdStorage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    jlong jresult = 0 ;
    rdStorage *arg1 = 0 ;
    bool arg2 = (bool) true ;
    rdStorage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdStorage const & reference is null");
        return 0;
    }
    arg2 = jarg2 ? true : false; 
    result = (rdStorage *)new rdStorage((rdStorage const &)*arg1,arg2);
    
    *(rdStorage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdStorage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jstring jarg4) {
    jlong jresult = 0 ;
    rdStorage *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    char *arg4 = (char *) "\t" ;
    rdStorage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdStorage const & reference is null");
        return 0;
    }
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    {
        arg4 = 0;
        if (jarg4) {
            arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
            if (!arg4) return 0;
        }
    }
    result = (rdStorage *)new rdStorage((rdStorage const &)*arg1,arg2,arg3,(char const *)arg4);
    
    *(rdStorage **)&jresult = result; 
    {
        if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    result = (rdObject *)((rdStorage const *)arg1)->copy();
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    result = (int)(arg1)->getSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getSmallestNumberOfStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    result = (int)(arg1)->getSmallestNumberOfStates();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    rdStateVector *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (rdStateVector *)((rdStorage const *)arg1)->getStateVector(arg2);
    
    *(rdStateVector **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getLastStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    rdStateVector *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    result = (rdStateVector *)((rdStorage const *)arg1)->getLastStateVector();
    
    *(rdStateVector **)&jresult = result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getFirstTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    result = (double)(arg1)->getFirstTime();
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getLastTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    result = (double)(arg1)->getLastTime();
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    int arg4 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return 0;
    }
    arg4 = (int)jarg4; 
    result = (int)((rdStorage const *)arg1)->getTime(arg2,*arg3,arg4);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getTimeColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    double **arg2 = 0 ;
    int arg3 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = *(double ***)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
        return 0;
    }
    arg3 = (int)jarg3; 
    result = (int)(arg1)->getTimeColumn(*arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    int arg3 ;
    double *arg4 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double **)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return 0;
    }
    result = (int)((rdStorage const *)arg1)->getData(arg2,arg3,*arg4);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = *(double **)&jarg5; 
    result = (int)((rdStorage const *)arg1)->getData(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    int arg3 ;
    double **arg4 = (double **) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double ***)&jarg4; 
    result = (int)((rdStorage const *)arg1)->getData(arg2,arg3,arg4);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    int arg3 ;
    double *arg4 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double **)&jarg4; 
    result = (int)((rdStorage const *)arg1)->getData(arg2,arg3,arg4);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getDataAtTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    double arg2 ;
    int arg3 ;
    double **arg4 = (double **) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double ***)&jarg4; 
    result = (int)(arg1)->getDataAtTime(arg2,arg3,arg4);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getDataAtTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    double arg2 ;
    int arg3 ;
    double *arg4 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double **)&jarg4; 
    result = (int)(arg1)->getDataAtTime(arg2,arg3,arg4);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getDataColumn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    double **arg3 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double ***)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
        return 0;
    }
    result = (int)((rdStorage const *)arg1)->getDataColumn(arg2,*arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1setDataColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    rdArray<double > *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(rdArray<double > **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<double > const & reference is null");
        return ;
    }
    (arg1)->setDataColumn(arg2,(rdArray<double > const &)*arg3);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getDataColumn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    std::string *arg2 = 0 ;
    double **arg3 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = *(std::string **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return 0;
    }
    arg3 = *(double ***)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
        return 0;
    }
    result = (int)((rdStorage const *)arg1)->getDataColumn(*arg2,*arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1setStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->setStepInterval(arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    result = (int)((rdStorage const *)arg1)->getStepInterval();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->setCapacityIncrement(arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    result = (int)((rdStorage const *)arg1)->getCapacityIncrement();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1setWriteSIMMHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    (arg1)->setWriteSIMMHeader(arg2);
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getWriteSIMMHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    result = (bool)((rdStorage const *)arg1)->getWriteSIMMHeader();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1setHeaderToken(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    char *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->setHeaderToken((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getHeaderToken(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    result = (char *)((rdStorage const *)arg1)->getHeaderToken();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getColumnIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdStorage const *)arg1)->getColumnIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1setColumnLabels(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    char *arg2 = (char *) NULL ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->setColumnLabels((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getColumnLabels(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    result = (char *)((rdStorage const *)arg1)->getColumnLabels();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1getColumnLabelsArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    rdArray<std::string > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    {
        rdArray<std::string > const &_result_ref = ((rdStorage const *)arg1)->getColumnLabelsArray();
        result = (rdArray<std::string > *) &_result_ref;
    }
    
    *(rdArray<std::string > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1reset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->reset(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1reset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    double arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (double)jarg2; 
    result = (int)(arg1)->reset(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    rdStateVector *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = *(rdStateVector **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdStateVector const & reference is null");
        return 0;
    }
    result = (int)(arg1)->append((rdStateVector const &)*arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    rdArray<rdStateVector > *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = *(rdArray<rdStateVector > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<rdStateVector > const & reference is null");
        return 0;
    }
    result = (int)(arg1)->append((rdArray<rdStateVector > const &)*arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    double arg2 ;
    int arg3 ;
    double *arg4 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double **)&jarg4; 
    result = (int)(arg1)->append(arg2,arg3,(double const *)arg4);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    double arg3 ;
    int arg4 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = *(double **)&jarg5; 
    result = (int)(arg1)->store(arg2,arg3,arg4,(double const *)arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1shiftTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->shiftTime(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1scaleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->scaleTime(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->add(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->add(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->add(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    rdStateVector *arg2 = (rdStateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = *(rdStateVector **)&jarg2; 
    (arg1)->add(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1add_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    rdStorage *arg2 = (rdStorage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = *(rdStorage **)&jarg2; 
    (arg1)->add(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1subtract_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->subtract(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1subtract_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->subtract(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1subtract_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    rdStateVector *arg2 = (rdStateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = *(rdStateVector **)&jarg2; 
    (arg1)->subtract(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1subtract_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    rdStorage *arg2 = (rdStorage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = *(rdStorage **)&jarg2; 
    (arg1)->subtract(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1multiply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->multiply(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1multiplyColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->multiplyColumn(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1multiply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->multiply(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1multiply_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    rdStateVector *arg2 = (rdStateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = *(rdStateVector **)&jarg2; 
    (arg1)->multiply(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1multiply_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    rdStorage *arg2 = (rdStorage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = *(rdStorage **)&jarg2; 
    (arg1)->multiply(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1divide_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->divide(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1divide_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->divide(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1divide_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    rdStateVector *arg2 = (rdStateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = *(rdStateVector **)&jarg2; 
    (arg1)->divide(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1divide_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    rdStorage *arg2 = (rdStorage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = *(rdStorage **)&jarg2; 
    (arg1)->divide(arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1integrate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jlong jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 = (int) -2 ;
    int arg3 = (int) -1 ;
    rdStorage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (rdStorage *)(arg1)->integrate(arg2,arg3);
    
    *(rdStorage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1integrate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
    jlong jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    double arg2 ;
    double arg3 ;
    rdStorage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    result = (rdStorage *)(arg1)->integrate(arg2,arg3);
    
    *(rdStorage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1computeArea_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    result = (int)(arg1)->computeArea(arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1computeArea_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    double arg2 ;
    double arg3 ;
    int arg4 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = *(double **)&jarg5; 
    result = (int)(arg1)->computeArea(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1computeAverage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    result = (int)(arg1)->computeAverage(arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1computeAverage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    double arg2 ;
    double arg3 ;
    int arg4 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = *(double **)&jarg5; 
    result = (int)(arg1)->computeAverage(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1pad(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->pad(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1lowpassFIR(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->lowpassFIR(arg2,arg3);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1findIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    double arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (double)jarg2; 
    result = (int)(arg1)->findIndex(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1findIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    int arg2 ;
    double arg3 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    result = (int)(arg1)->findIndex(arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1resample(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    double arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    (arg1)->resample(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdStorage *arg1 = (rdStorage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    (arg1)->print();
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    char *arg2 ;
    char *arg3 = (char *) "w" ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return 0;
        }
    }
    result = (int)(arg1)->print((char const *)arg2,(char const *)arg3);
    
    jresult = (jint)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdStorage_1print_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3, jstring jarg4) {
    jint jresult = 0 ;
    rdStorage *arg1 = (rdStorage *) 0 ;
    char *arg2 ;
    double arg3 ;
    char *arg4 = (char *) "w" ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdStorage **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    arg3 = (double)jarg3; 
    {
        arg4 = 0;
        if (jarg4) {
            arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
            if (!arg4) return 0;
        }
    }
    result = (int)(arg1)->print((char const *)arg2,arg3,(char const *)arg4);
    
    jresult = (jint)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdModel *arg1 = (rdModel *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getModelDescriptionFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (char *)((rdModel const *)arg1)->getModelDescriptionFileName();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setModelDescriptionFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    (arg1)->setModelDescriptionFileName((std::string const &)*arg2);
    
    delete arg2; 
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getNB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (int)((rdModel const *)arg1)->getNB();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getNJ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (int)((rdModel const *)arg1)->getNJ();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getNQ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (int)((rdModel const *)arg1)->getNQ();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getNU(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (int)((rdModel const *)arg1)->getNU();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (int)((rdModel const *)arg1)->getNX();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getNA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (int)((rdModel const *)arg1)->getNA();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getNP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (int)((rdModel const *)arg1)->getNP();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (int)((rdModel const *)arg1)->getNY();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getNYP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (int)((rdModel const *)arg1)->getNYP();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    (arg1)->setName((std::string const &)*arg2);
    
    delete arg2; 
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getBodyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdModel const *)arg1)->getBodyName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getCoordinateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdModel const *)arg1)->getCoordinateName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getSpeedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdModel const *)arg1)->getSpeedName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getActuatorName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdModel const *)arg1)->getActuatorName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdModel const *)arg1)->getControlName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdModel const *)arg1)->getStateName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdModel const *)arg1)->getPseudoStateName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getBodyIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdModel const *)arg1)->getBodyIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getCoordinateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdModel const *)arg1)->getCoordinateIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getSpeedIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdModel const *)arg1)->getSpeedIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getActuatorIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdModel const *)arg1)->getActuatorIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdModel const *)arg1)->getControlIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdModel const *)arg1)->getStateIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdModel const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    rdBody *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (rdBody *)((rdModel const *)arg1)->getBody(arg2);
    
    *(rdBody **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1constructBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdModel *arg1 = (rdModel *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    (arg1)->constructBodies();
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getBodySet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    rdBodySet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (rdBodySet *)(arg1)->getBodySet();
    
    *(rdBodySet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getMaterialSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    rdMaterialSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (rdMaterialSet *)(arg1)->getMaterialSet();
    
    *(rdMaterialSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getVisibleObjectByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    rdVisibleObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (rdVisibleObject *)((rdModel const *)arg1)->getVisibleObjectByName((std::string const &)*arg2);
    
    *(rdVisibleObject **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    double arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    (arg1)->set(arg2,(double const (*))arg3,(double const (*))arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->setTime(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (double)((rdModel const *)arg1)->getTime();
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setTimeNormConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (double)jarg2; 
    (arg1)->setTimeNormConstant(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getTimeNormConstant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (double)((rdModel const *)arg1)->getTimeNormConstant();
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setControls((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->setControl(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    (arg1)->setControl((std::string const &)*arg2,arg3);
    
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdModel const *)arg1)->getControls(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getControl(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdModel const *)arg1)->getControl((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setInitialStates((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdModel const *)arg1)->getInitialStates(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getInitialState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getInitialState(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getInitialState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdModel const *)arg1)->getInitialState((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setStates((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdModel const *)arg1)->getStates(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getState(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdModel const *)arg1)->getState((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setInitialPseudoStates((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdModel const *)arg1)->getInitialPseudoStates(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getInitialPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getInitialPseudoState(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getInitialPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdModel const *)arg1)->getInitialPseudoState((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setPseudoStates((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdModel const *)arg1)->getPseudoStates(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getPseudoState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getPseudoState(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setConfiguration((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->setConfiguration((double const (*))arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdModel const *)arg1)->getCoordinates(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getCoordinate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getCoordinate(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getCoordinate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdModel const *)arg1)->getCoordinate((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdModel const *)arg1)->getSpeeds(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getSpeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getSpeed(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getSpeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdModel const *)arg1)->getSpeed((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdModel const *)arg1)->getAccelerations(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getAcceleration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getAcceleration(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getAcceleration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdModel const *)arg1)->getAcceleration((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1extractConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdModel const *)arg1)->extractConfiguration((double const (*))arg2,arg3,arg4);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1assemble(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jint jarg6, jlong jarg7, jlong jarg8) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    double arg2 ;
    double *arg3 = (double *) 0 ;
    int *arg4 = (int *) 0 ;
    double arg5 ;
    int arg6 ;
    int *arg7 = (int *) 0 ;
    int *arg8 = (int *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(int **)&jarg4; 
    arg5 = (double)jarg5; 
    arg6 = (int)jarg6; 
    arg7 = *(int **)&jarg7; 
    arg8 = *(int **)&jarg8; 
    result = (int)(arg1)->assemble(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    suScaleSet *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(suScaleSet **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "suScaleSet const & reference is null");
        return 0;
    }
    result = (bool)(arg1)->scale((suScaleSet const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdModel const *)arg1)->getGravity(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setGravity(arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getGroundID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (int)((rdModel const *)arg1)->getGroundID();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->setBodyToJointBodyLocal(arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->getBodyToJointBodyLocal(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->setInboardToJointBodyLocal(arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->getInboardToJointBodyLocal(arg2,arg3);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getMass(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getInertiaBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double (*arg3)[3] ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double (**)[3])&jarg3; 
    result = (int)((rdModel const *)arg1)->getInertiaBodyLocal(arg2,(double (*)[3])arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getInertiaBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    result = (int)((rdModel const *)arg1)->getInertiaBodyLocal(arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getSystemInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 ;
    double (*arg4)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double (**)[3])&jarg4; 
    ((rdModel const *)arg1)->getSystemInertia(arg2,arg3,(double (*)[3])arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getSystemInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdModel const *)arg1)->getSystemInertia(arg2,arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdModel const *)arg1)->getPosition(arg2,(double const (*))arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdModel const *)arg1)->getVelocity(arg2,(double const (*))arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getAcceleration_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdModel const *)arg1)->getAcceleration(arg2,(double const (*))arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double (*arg3)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double (**)[3])&jarg3; 
    ((rdModel const *)arg1)->getDirectionCosines(arg2,(double (*)[3])arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->getDirectionCosines(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getAngularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->getAngularVelocity(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getAngularVelocityBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->getAngularVelocityBodyLocal(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getAngularAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->getAngularAcceleration(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getAngularAccelerationBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->getAngularAccelerationBodyLocal(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    (arg1)->applyForce(arg2,(double const (*))arg3,(double const (*))arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    int *arg3 ;
    double (*arg4)[3] ;
    double (*arg5)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double (**)[3])&jarg4; 
    arg5 = *(double (**)[3])&jarg5; 
    (arg1)->applyForces(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    int *arg3 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    (arg1)->applyForces(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyForceBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    (arg1)->applyForceBodyLocal(arg2,(double const (*))arg3,(double const (*))arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyForcesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    int *arg3 ;
    double (*arg4)[3] ;
    double (*arg5)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double (**)[3])&jarg4; 
    arg5 = *(double (**)[3])&jarg5; 
    (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyForcesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    int *arg3 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->applyTorque(arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyTorques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    int *arg3 ;
    double (*arg4)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double (**)[3])&jarg4; 
    (arg1)->applyTorques(arg2,(int const (*))arg3,(double const (*)[3])arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyTorques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    int *arg3 ;
    double *arg4 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    (arg1)->applyTorques(arg2,(int const (*))arg3,(double const *)arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyTorqueBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->applyTorqueBodyLocal(arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyTorquesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    int *arg3 ;
    double (*arg4)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double (**)[3])&jarg4; 
    (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyTorquesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    int *arg3 ;
    double *arg4 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->applyGeneralizedForce(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyGeneralizedForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->applyGeneralizedForces((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyGeneralizedForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    int *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    (arg1)->applyGeneralizedForces(arg2,(int const (*))arg3,(double const (*))arg4);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getNetAppliedGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getNetAppliedGeneralizedForce(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1computeGeneralizedForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->computeGeneralizedForces(arg2,arg3);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1computeAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    result = (int)(arg1)->computeAccelerations(arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1formMassMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->formMassMatrix(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1formEulerTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->formEulerTransform(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1formJacobianTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 = (double *) 0 ;
    int arg5 = (int) -1 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = (int)jarg5; 
    ((rdModel const *)arg1)->formJacobianTranslation(arg2,(double const (*))arg3,arg4,arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1formJacobianOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    int arg4 = (int) -1 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = (int)jarg4; 
    ((rdModel const *)arg1)->formJacobianOrientation(arg2,arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1formJacobianEuler(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    int arg4 = (int) -1 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = (int)jarg4; 
    ((rdModel const *)arg1)->formJacobianEuler(arg2,arg3,arg4);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1ComputeEffectiveMassMatrix(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    jint jresult = 0 ;
    int arg1 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    result = (int)rdModel::ComputeEffectiveMassMatrix(arg1,arg2,(double const *)arg3,(double const *)arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1ComputeJacobianInverse(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    jint jresult = 0 ;
    int arg1 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    result = (int)rdModel::ComputeJacobianInverse(arg1,arg2,(double const *)arg3,(double const *)arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1deriv_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    double arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    result = (int)(arg1)->deriv(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1deriv_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    double arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    result = (int)(arg1)->deriv(arg2,arg3,arg4,arg5,arg6);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1computePerformance(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    double arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    void *arg6 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(void **)&jarg6; 
    result = (int)(arg1)->computePerformance(arg2,arg3,arg4,arg5,arg6);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1computeConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6, jlong jarg7) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    double arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    int arg5 ;
    double *arg6 = (double *) 0 ;
    void *arg7 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = (int)jarg5; 
    arg6 = *(double **)&jarg6; 
    arg7 = *(void **)&jarg7; 
    result = (int)(arg1)->computeConstraint(arg2,arg3,arg4,arg5,arg6,arg7);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4, jlong jarg5) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    int arg4 ;
    double *arg5 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = (int)jarg4; 
    arg5 = *(double **)&jarg5; 
    ((rdModel const *)arg1)->transform(arg2,(double const (*))arg3,arg4,arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1transformPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdModel const *)arg1)->transformPosition(arg2,(double const (*))arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertQuaternionsToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->convertQuaternionsToAngles(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertQuaternionsToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    rdStorage *arg2 = (rdStorage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(rdStorage **)&jarg2; 
    ((rdModel const *)arg1)->convertQuaternionsToAngles(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertAnglesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->convertAnglesToQuaternions(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertAnglesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    rdStorage *arg2 = (rdStorage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(rdStorage **)&jarg2; 
    ((rdModel const *)arg1)->convertAnglesToQuaternions(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertRadiansToDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->convertRadiansToDegrees(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertRadiansToDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    rdStorage *arg2 = (rdStorage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(rdStorage **)&jarg2; 
    ((rdModel const *)arg1)->convertRadiansToDegrees(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertDegreesToRadians_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->convertDegreesToRadians(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertDegreesToRadians_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    rdStorage *arg2 = (rdStorage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(rdStorage **)&jarg2; 
    ((rdModel const *)arg1)->convertDegreesToRadians(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertAnglesToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
    rdModel *arg1 = (rdModel *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double (*arg5)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = *(double (**)[3])&jarg5; 
    ((rdModel const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,(double (*)[3])arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertAnglesToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
    rdModel *arg1 = (rdModel *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double *arg5 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = *(double **)&jarg5; 
    ((rdModel const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertDirectionCosinesToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdModel *arg1 = (rdModel *) 0 ;
    double (*arg2)[3] ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double (**)[3])&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    ((rdModel const *)arg1)->convertDirectionCosinesToAngles((double (*)[3])arg2,arg3,arg4,arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertDirectionCosinesToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    ((rdModel const *)arg1)->convertDirectionCosinesToAngles(arg2,arg3,arg4,arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertDirectionCosinesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
    rdModel *arg1 = (rdModel *) 0 ;
    double (*arg2)[3] ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double (**)[3])&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    ((rdModel const *)arg1)->convertDirectionCosinesToQuaternions((double (*)[3])arg2,arg3,arg4,arg5,arg6);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertDirectionCosinesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
    rdModel *arg1 = (rdModel *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    ((rdModel const *)arg1)->convertDirectionCosinesToQuaternions(arg2,arg3,arg4,arg5,arg6);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertQuaternionsToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
    rdModel *arg1 = (rdModel *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double (*arg6)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = *(double (**)[3])&jarg6; 
    ((rdModel const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,(double (*)[3])arg6);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1convertQuaternionsToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
    rdModel *arg1 = (rdModel *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double *arg6 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = *(double **)&jarg6; 
    ((rdModel const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,arg6);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdModel *arg1 = (rdModel *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    (arg1)->computeActuation();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->applyActuatorForce(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyActuatorForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdModel *arg1 = (rdModel *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    (arg1)->applyActuatorForces();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->setActuatorForce(arg2,arg3);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getActuatorForce(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getActuatorStress(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getActuatorStress(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getActuatorSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getActuatorSpeed(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getActuatorPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getActuatorPower(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdModel *arg1 = (rdModel *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    (arg1)->computeContact();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyContactForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->applyContactForce(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1applyContactForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdModel *arg1 = (rdModel *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    (arg1)->applyContactForces();
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getContactBodyA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)((rdModel const *)arg1)->getContactBodyA(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getContactBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)((rdModel const *)arg1)->getContactBodyB(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->setContactPointA(arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->getContactPointA(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1setContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->setContactPointB(arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->getContactPointB(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getContactForce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->getContactForce(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getContactNormalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    double *arg5 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    ((rdModel const *)arg1)->getContactNormalForce(arg2,arg3,arg4,arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getContactTangentForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    double *arg5 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    ((rdModel const *)arg1)->getContactTangentForce(arg2,arg3,arg4,arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getContactStiffness(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdModel const *)arg1)->getContactStiffness(arg2,(double const (*))arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getContactViscosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdModel const *)arg1)->getContactViscosity(arg2,(double const (*))arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getContactFrictionCorrection(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdModel const *)arg1)->getContactFrictionCorrection(arg2,arg3);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getContactForce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getContactForce(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getContactSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getContactSpeed(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getContactPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdModel const *)arg1)->getContactPower(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getAnalysisSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    rdAnalysisSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (rdAnalysisSet *)(arg1)->getAnalysisSet();
    
    *(rdAnalysisSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1addAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    rdAnalysis *arg2 = (rdAnalysis *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(rdAnalysis **)&jarg2; 
    (arg1)->addAnalysis(arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getIntegCallbackSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    rdIntegCallbackSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (rdIntegCallbackSet *)(arg1)->getIntegCallbackSet();
    
    *(rdIntegCallbackSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1addIntegCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    rdIntegCallback *arg2 = (rdIntegCallback *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(rdIntegCallback **)&jarg2; 
    (arg1)->addIntegCallback(arg2);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1getDerivCallbackSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdModel *arg1 = (rdModel *) 0 ;
    rdDerivCallbackSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    result = (rdDerivCallbackSet *)(arg1)->getDerivCallbackSet();
    
    *(rdDerivCallbackSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdModel_1addDerivCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdModel *arg1 = (rdModel *) 0 ;
    rdDerivCallback *arg2 = (rdDerivCallback *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdModel **)&jarg1; 
    arg2 = *(rdDerivCallback **)&jarg2; 
    (arg1)->addDerivCallback(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdArrayBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdArrayBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2, jint jarg3) {
    jlong jresult = 0 ;
    bool *arg1 = 0 ;
    int arg2 = (int) 0 ;
    int arg3 = (int) rdArray_CAPMIN ;
    rdArray<bool > *result;
    bool temp1 ;
    
    (void)jenv;
    (void)jcls;
    temp1 = jarg1 ? true : false; 
    arg1 = &temp1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (rdArray<bool > *)new rdArray<bool >((bool const &)*arg1,arg2,arg3);
    
    *(rdArray<bool > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdArrayBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdArray<bool > *arg1 = 0 ;
    rdArray<bool > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<bool > const & reference is null");
        return 0;
    }
    result = (rdArray<bool > *)new rdArray<bool >((rdArray<bool > const &)*arg1);
    
    *(rdArray<bool > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->ensureCapacity(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    (arg1)->trim();
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    result = (int)((rdArray<bool > const *)arg1)->getCapacity();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->setCapacityIncrement(arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    result = (int)((rdArray<bool > const *)arg1)->getCapacityIncrement();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->setSize(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    result = (int)((rdArray<bool > const *)arg1)->getSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    jint jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    bool *arg2 = 0 ;
    int result;
    bool temp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    temp2 = jarg2 ? true : false; 
    arg2 = &temp2; 
    result = (int)(arg1)->append((bool const &)*arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    rdArray<bool > *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    arg2 = *(rdArray<bool > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<bool > const & reference is null");
        return 0;
    }
    result = (int)(arg1)->append((rdArray<bool > const &)*arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    int arg2 ;
    bool *arg3 = (bool *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(bool **)&jarg3; 
    result = (int)(arg1)->append(arg2,(bool const *)arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
    jint jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    int arg2 ;
    bool *arg3 = 0 ;
    int result;
    bool temp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    temp3 = jarg3 ? true : false; 
    arg3 = &temp3; 
    result = (int)(arg1)->insert(arg2,(bool const &)*arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->remove(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    int arg2 ;
    bool *arg3 = 0 ;
    bool temp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    temp3 = jarg3 ? true : false; 
    arg3 = &temp3; 
    (arg1)->set(arg2,(bool const &)*arg3);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    bool *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    result = (bool *)(arg1)->get();
    
    *(bool **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    int arg2 ;
    bool *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        bool &_result_ref = ((rdArray<bool > const *)arg1)->get(arg2);
        result = (bool *) &_result_ref;
    }
    
    *(bool **)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)rdArraylbool_g_getitem___(arg1,arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    int arg2 ;
    bool arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = jarg3 ? true : false; 
    rdArraylbool_g_setitem___(arg1,arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    bool *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    {
        bool &_result_ref = ((rdArray<bool > const *)arg1)->getLast();
        result = (bool *) &_result_ref;
    }
    
    *(bool **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayBool_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    rdArray<bool > *arg1 = (rdArray<bool > *) 0 ;
    bool *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    bool temp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<bool > **)&jarg1; 
    temp2 = jarg2 ? true : false; 
    arg2 = &temp2; 
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    result = (int)((rdArray<bool > const *)arg1)->searchBinary((bool const &)*arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdArrayDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdArrayDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2, jint jarg3) {
    jlong jresult = 0 ;
    double *arg1 = 0 ;
    int arg2 = (int) 0 ;
    int arg3 = (int) rdArray_CAPMIN ;
    rdArray<double > *result;
    double temp1 ;
    
    (void)jenv;
    (void)jcls;
    temp1 = (double)jarg1; 
    arg1 = &temp1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (rdArray<double > *)new rdArray<double >((double const &)*arg1,arg2,arg3);
    
    *(rdArray<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdArrayDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdArray<double > *arg1 = 0 ;
    rdArray<double > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<double > const & reference is null");
        return 0;
    }
    result = (rdArray<double > *)new rdArray<double >((rdArray<double > const &)*arg1);
    
    *(rdArray<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->ensureCapacity(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    (arg1)->trim();
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    result = (int)((rdArray<double > const *)arg1)->getCapacity();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->setCapacityIncrement(arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    result = (int)((rdArray<double > const *)arg1)->getCapacityIncrement();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->setSize(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    result = (int)((rdArray<double > const *)arg1)->getSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jint jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    double *arg2 = 0 ;
    int result;
    double temp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    temp2 = (double)jarg2; 
    arg2 = &temp2; 
    result = (int)(arg1)->append((double const &)*arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    rdArray<double > *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    arg2 = *(rdArray<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<double > const & reference is null");
        return 0;
    }
    result = (int)(arg1)->append((rdArray<double > const &)*arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    result = (int)(arg1)->append(arg2,(double const *)arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    jint jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    int result;
    double temp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    temp3 = (double)jarg3; 
    arg3 = &temp3; 
    result = (int)(arg1)->insert(arg2,(double const &)*arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->remove(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    double temp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    temp3 = (double)jarg3; 
    arg3 = &temp3; 
    (arg1)->set(arg2,(double const &)*arg3);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    result = (double *)(arg1)->get();
    
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    int arg2 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        double &_result_ref = ((rdArray<double > const *)arg1)->get(arg2);
        result = (double *) &_result_ref;
    }
    
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)rdArrayldouble_g_getitem___(arg1,arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    rdArrayldouble_g_setitem___(arg1,arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    {
        double &_result_ref = ((rdArray<double > const *)arg1)->getLast();
        result = (double *) &_result_ref;
    }
    
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayDouble_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    rdArray<double > *arg1 = (rdArray<double > *) 0 ;
    double *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    double temp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<double > **)&jarg1; 
    temp2 = (double)jarg2; 
    arg2 = &temp2; 
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    result = (int)((rdArray<double > const *)arg1)->searchBinary((double const &)*arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdArrayInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdArrayInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
    jlong jresult = 0 ;
    int *arg1 = 0 ;
    int arg2 = (int) 0 ;
    int arg3 = (int) rdArray_CAPMIN ;
    rdArray<int > *result;
    int temp1 ;
    
    (void)jenv;
    (void)jcls;
    temp1 = (int)jarg1; 
    arg1 = &temp1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (rdArray<int > *)new rdArray<int >((int const &)*arg1,arg2,arg3);
    
    *(rdArray<int > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdArrayInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdArray<int > *arg1 = 0 ;
    rdArray<int > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<int > const & reference is null");
        return 0;
    }
    result = (rdArray<int > *)new rdArray<int >((rdArray<int > const &)*arg1);
    
    *(rdArray<int > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->ensureCapacity(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    (arg1)->trim();
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    result = (int)((rdArray<int > const *)arg1)->getCapacity();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->setCapacityIncrement(arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    result = (int)((rdArray<int > const *)arg1)->getCapacityIncrement();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->setSize(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    result = (int)((rdArray<int > const *)arg1)->getSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int *arg2 = 0 ;
    int result;
    int temp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    temp2 = (int)jarg2; 
    arg2 = &temp2; 
    result = (int)(arg1)->append((int const &)*arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    rdArray<int > *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    arg2 = *(rdArray<int > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<int > const & reference is null");
        return 0;
    }
    result = (int)(arg1)->append((rdArray<int > const &)*arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int arg2 ;
    int *arg3 = (int *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    result = (int)(arg1)->append(arg2,(int const *)arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jint jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    int result;
    int temp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    temp3 = (int)jarg3; 
    arg3 = &temp3; 
    result = (int)(arg1)->insert(arg2,(int const &)*arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->remove(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    int temp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    temp3 = (int)jarg3; 
    arg3 = &temp3; 
    (arg1)->set(arg2,(int const &)*arg3);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    result = (int *)(arg1)->get();
    
    *(int **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int arg2 ;
    int *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        int &_result_ref = ((rdArray<int > const *)arg1)->get(arg2);
        result = (int *) &_result_ref;
    }
    
    *(int **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)rdArraylint_g_getitem___(arg1,arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    rdArraylint_g_setitem___(arg1,arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    {
        int &_result_ref = ((rdArray<int > const *)arg1)->getLast();
        result = (int *) &_result_ref;
    }
    
    *(int **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayInt_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    rdArray<int > *arg1 = (rdArray<int > *) 0 ;
    int *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    int temp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<int > **)&jarg1; 
    temp2 = (int)jarg2; 
    arg2 = &temp2; 
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    result = (int)((rdArray<int > const *)arg1)->searchBinary((int const &)*arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdArrayStr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdArrayStr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    int arg2 = (int) 0 ;
    int arg3 = (int) rdArray_CAPMIN ;
    rdArray<std::string > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    result = (rdArray<std::string > *)new rdArray<std::string >((std::string const &)*arg1,arg2,arg3);
    
    *(rdArray<std::string > **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdArrayStr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdArray<std::string > *arg1 = 0 ;
    rdArray<std::string > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<std::string > const & reference is null");
        return 0;
    }
    result = (rdArray<std::string > *)new rdArray<std::string >((rdArray<std::string > const &)*arg1);
    
    *(rdArray<std::string > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->ensureCapacity(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    (arg1)->trim();
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    result = (int)((rdArray<std::string > const *)arg1)->getCapacity();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->setCapacityIncrement(arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    result = (int)((rdArray<std::string > const *)arg1)->getCapacityIncrement();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->setSize(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    result = (int)((rdArray<std::string > const *)arg1)->getSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)(arg1)->append((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    rdArray<std::string > *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    arg2 = *(rdArray<std::string > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArray<std::string > const & reference is null");
        return 0;
    }
    result = (int)(arg1)->append((rdArray<std::string > const &)*arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    int arg2 ;
    std::string *arg3 = (std::string *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(std::string **)&jarg3; 
    result = (int)(arg1)->append(arg2,(std::string const *)arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
    jint jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)(arg1)->insert(arg2,(std::string const &)*arg3);
    
    jresult = (jint)result; 
    delete arg3; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)(arg1)->remove(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return ;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    (arg1)->set(arg2,(std::string const &)*arg3);
    
    delete arg3; 
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    result = (std::string *)(arg1)->get();
    
    *(std::string **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    int arg2 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        std::string &_result_ref = ((rdArray<std::string > const *)arg1)->get(arg2);
        result = (std::string *) &_result_ref;
    }
    
    *(std::string **)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = rdArraylstd_string_g_getitem___(arg1,arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    int arg2 ;
    std::string arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return ;
        arg3 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    rdArraylstd_string_g_setitem___(arg1,arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    {
        std::string &_result_ref = ((rdArray<std::string > const *)arg1)->getLast();
        result = (std::string *) &_result_ref;
    }
    
    *(std::string **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayStr_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    rdArray<std::string > *arg1 = (rdArray<std::string > *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArray<std::string > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    result = (int)((rdArray<std::string > const *)arg1)->searchBinary((std::string const &)*arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdArrayPtrsObj(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdArrayPtrsObj_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
    jlong jresult = 0 ;
    int arg1 = (int) 1 ;
    rdArrayPtrs<rdObject > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    result = (rdArrayPtrs<rdObject > *)new rdArrayPtrs<rdObject >(arg1);
    
    *(rdArrayPtrs<rdObject > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdArrayPtrsObj_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = 0 ;
    rdArrayPtrs<rdObject > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArrayPtrs<rdObject > const & reference is null");
        return 0;
    }
    result = (rdArrayPtrs<rdObject > *)new rdArrayPtrs<rdObject >((rdArrayPtrs<rdObject > const &)*arg1);
    
    *(rdArrayPtrs<rdObject > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    (arg1)->clearAndDestroy();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    (arg1)->setMemoryOwner(arg2);
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    result = (bool)((rdArrayPtrs<rdObject > const *)arg1)->getMemoryOwner();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->ensureCapacity(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    (arg1)->trim();
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    result = (int)((rdArrayPtrs<rdObject > const *)arg1)->getCapacity();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->setCapacityIncrement(arg2);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    result = (int)((rdArrayPtrs<rdObject > const *)arg1)->getCapacityIncrement();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->setSize(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    result = (int)((rdArrayPtrs<rdObject > const *)arg1)->getSize();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    rdObject *arg2 = (rdObject *) 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = *(rdObject **)&jarg2; 
    arg3 = (int)jarg3; 
    result = (int)((rdArrayPtrs<rdObject > const *)arg1)->getIndex((rdObject const *)arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jint jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    result = (int)((rdArrayPtrs<rdObject > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    rdObject *arg2 = (rdObject *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = *(rdObject **)&jarg2; 
    result = (bool)(arg1)->append(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    rdArrayPtrs<rdObject > *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = *(rdArrayPtrs<rdObject > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdArrayPtrs<rdObject > & reference is null");
        return 0;
    }
    result = (bool)(arg1)->append(*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    int arg2 ;
    rdObject *arg3 = (rdObject *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(rdObject **)&jarg3; 
    result = (bool)(arg1)->insert(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (bool)(arg1)->remove(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    rdObject *arg2 = (rdObject *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = *(rdObject **)&jarg2; 
    result = (bool)(arg1)->remove((rdObject const *)arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    int arg2 ;
    rdObject *arg3 = (rdObject *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(rdObject **)&jarg3; 
    result = (bool)(arg1)->set(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    int arg2 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (rdObject *)(arg1)->get(arg2);
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    std::string *arg2 = 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (rdObject *)(arg1)->get((std::string const &)*arg2);
    
    *(rdObject **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    rdObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    result = (rdObject *)((rdArrayPtrs<rdObject > const *)arg1)->getLast();
    
    *(rdObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdArrayPtrsObj_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    rdArrayPtrs<rdObject > *arg1 = (rdArrayPtrs<rdObject > *) 0 ;
    rdObject *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdArrayPtrs<rdObject > **)&jarg1; 
    arg2 = *(rdObject **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "rdObject const & reference is null");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    result = (int)((rdArrayPtrs<rdObject > const *)arg1)->searchBinary((rdObject const &)*arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdSDFast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1constructBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    (arg1)->constructBodies();
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getNJ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    result = (int)((rdSDFast const *)arg1)->getNJ();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getNQ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    result = (int)((rdSDFast const *)arg1)->getNQ();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getNU(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    result = (int)((rdSDFast const *)arg1)->getNU();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getCoordinateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdSDFast const *)arg1)->getCoordinateName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getCoordinate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdSDFast const *)arg1)->getCoordinate(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getCoordinate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdSDFast const *)arg1)->getCoordinate((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getCoordinateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdSDFast const *)arg1)->getCoordinateIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdSDFast const *)arg1)->getCoordinates(arg2);
    
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getSpeedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdSDFast const *)arg1)->getSpeedName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getSpeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdSDFast const *)arg1)->getSpeed(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getSpeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdSDFast const *)arg1)->getSpeed((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getSpeedIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdSDFast const *)arg1)->getSpeedIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdSDFast const *)arg1)->getSpeeds(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdSDFast const *)arg1)->getAccelerations(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAcceleration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdSDFast const *)arg1)->getAcceleration((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAcceleration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdSDFast const *)arg1)->getAcceleration(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1setGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setGravity(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdSDFast const *)arg1)->getGravity(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1setConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->setConfiguration((double const (*))arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1setConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setConfiguration((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1extractConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdSDFast const *)arg1)->extractConfiguration((double const (*))arg2,arg3,arg4);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1assemble(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jint jarg6, jlong jarg7, jlong jarg8) {
    jint jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double arg2 ;
    double *arg3 = (double *) 0 ;
    int *arg4 = (int *) 0 ;
    double arg5 ;
    int arg6 ;
    int *arg7 = (int *) 0 ;
    int *arg8 = (int *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(int **)&jarg4; 
    arg5 = (double)jarg5; 
    arg6 = (int)jarg6; 
    arg7 = *(int **)&jarg7; 
    arg8 = *(int **)&jarg8; 
    result = (int)(arg1)->assemble(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    suScaleSet *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(suScaleSet **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "suScaleSet const & reference is null");
        return 0;
    }
    result = (bool)(arg1)->scale((suScaleSet const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    (arg1)->dump((std::string const &)*arg2);
    
    delete arg2; 
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getGroundID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    result = (int)((rdSDFast const *)arg1)->getGroundID();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1setBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->setBodyToJointBodyLocal(arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdSDFast const *)arg1)->getBodyToJointBodyLocal(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1setInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->setInboardToJointBodyLocal(arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdSDFast const *)arg1)->getInboardToJointBodyLocal(arg2,arg3);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdSDFast const *)arg1)->getMass(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1setMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    jint jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double arg3 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    result = (int)(arg1)->setMass(arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getInertiaBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double (*arg3)[3] ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double (**)[3])&jarg3; 
    result = (int)((rdSDFast const *)arg1)->getInertiaBodyLocal(arg2,(double (*)[3])arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getInertiaBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    result = (int)((rdSDFast const *)arg1)->getInertiaBodyLocal(arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1setInertiaBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double (*arg3)[3] ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double (**)[3])&jarg3; 
    result = (int)(arg1)->setInertiaBodyLocal(arg2,(double const (*)[3])arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getSystemInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 ;
    double (*arg4)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double (**)[3])&jarg4; 
    ((rdSDFast const *)arg1)->getSystemInertia(arg2,arg3,(double (*)[3])arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getSystemInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdSDFast const *)arg1)->getSystemInertia(arg2,arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdSDFast const *)arg1)->getPosition(arg2,(double const (*))arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdSDFast const *)arg1)->getVelocity(arg2,(double const (*))arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAcceleration_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdSDFast const *)arg1)->getAcceleration(arg2,(double const (*))arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double (*arg3)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double (**)[3])&jarg3; 
    ((rdSDFast const *)arg1)->getDirectionCosines(arg2,(double (*)[3])arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdSDFast const *)arg1)->getDirectionCosines(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAngularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdSDFast const *)arg1)->getAngularVelocity(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAngularVelocityBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdSDFast const *)arg1)->getAngularVelocityBodyLocal(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAngularAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdSDFast const *)arg1)->getAngularAcceleration(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAngularAccelerationBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdSDFast const *)arg1)->getAngularAccelerationBodyLocal(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    (arg1)->applyForce(arg2,(double const (*))arg3,(double const (*))arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    int *arg3 ;
    double (*arg4)[3] ;
    double (*arg5)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double (**)[3])&jarg4; 
    arg5 = *(double (**)[3])&jarg5; 
    (arg1)->applyForces(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    int *arg3 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    (arg1)->applyForces(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyForceBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    (arg1)->applyForceBodyLocal(arg2,(double const (*))arg3,(double const (*))arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyForcesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    int *arg3 ;
    double (*arg4)[3] ;
    double (*arg5)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double (**)[3])&jarg4; 
    arg5 = *(double (**)[3])&jarg5; 
    (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyForcesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    int *arg3 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->applyTorque(arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyTorques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    int *arg3 ;
    double (*arg4)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double (**)[3])&jarg4; 
    (arg1)->applyTorques(arg2,(int const (*))arg3,(double const (*)[3])arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyTorques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    int *arg3 ;
    double *arg4 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    (arg1)->applyTorques(arg2,(int const (*))arg3,(double const *)arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyTorqueBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->applyTorqueBodyLocal(arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyTorquesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    int *arg3 ;
    double (*arg4)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double (**)[3])&jarg4; 
    (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyTorquesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    int *arg3 ;
    double *arg4 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->applyGeneralizedForce(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyGeneralizedForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->applyGeneralizedForces((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyGeneralizedForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    int *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    (arg1)->applyGeneralizedForces(arg2,(int const (*))arg3,(double const (*))arg4);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getNetAppliedGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdSDFast const *)arg1)->getNetAppliedGeneralizedForce(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1computeGeneralizedForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdSDFast const *)arg1)->computeGeneralizedForces(arg2,arg3);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1computeAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jint jresult = 0 ;
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    result = (int)(arg1)->computeAccelerations(arg2,arg3);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1formMassMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->formMassMatrix(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1formEulerTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdSDFast const *)arg1)->formEulerTransform(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1formJacobianTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 = (double *) 0 ;
    int arg5 = (int) -1 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = (int)jarg5; 
    ((rdSDFast const *)arg1)->formJacobianTranslation(arg2,(double const (*))arg3,arg4,arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1formJacobianOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    int arg4 = (int) -1 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = (int)jarg4; 
    ((rdSDFast const *)arg1)->formJacobianOrientation(arg2,arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1formJacobianEuler(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    int arg4 = (int) -1 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = (int)jarg4; 
    ((rdSDFast const *)arg1)->formJacobianEuler(arg2,arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4, jlong jarg5) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    int arg4 ;
    double *arg5 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = (int)jarg4; 
    arg5 = *(double **)&jarg5; 
    ((rdSDFast const *)arg1)->transform(arg2,(double const (*))arg3,arg4,arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1transformPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdSDFast const *)arg1)->transformPosition(arg2,(double const (*))arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertQuaternionsToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdSDFast const *)arg1)->convertQuaternionsToAngles(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertQuaternionsToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    rdStorage *arg2 = (rdStorage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(rdStorage **)&jarg2; 
    ((rdSDFast const *)arg1)->convertQuaternionsToAngles(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertAnglesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdSDFast const *)arg1)->convertAnglesToQuaternions(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertAnglesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    rdStorage *arg2 = (rdStorage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(rdStorage **)&jarg2; 
    ((rdSDFast const *)arg1)->convertAnglesToQuaternions(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertRadiansToDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdSDFast const *)arg1)->convertRadiansToDegrees(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertRadiansToDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    rdStorage *arg2 = (rdStorage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(rdStorage **)&jarg2; 
    ((rdSDFast const *)arg1)->convertRadiansToDegrees(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertDegreesToRadians_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdSDFast const *)arg1)->convertDegreesToRadians(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertDegreesToRadians_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    rdStorage *arg2 = (rdStorage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(rdStorage **)&jarg2; 
    ((rdSDFast const *)arg1)->convertDegreesToRadians(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertAnglesToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double (*arg5)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = *(double (**)[3])&jarg5; 
    ((rdSDFast const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,(double (*)[3])arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertAnglesToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double *arg5 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = *(double **)&jarg5; 
    ((rdSDFast const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertDirectionCosinesToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double (*arg2)[3] ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double (**)[3])&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    ((rdSDFast const *)arg1)->convertDirectionCosinesToAngles((double (*)[3])arg2,arg3,arg4,arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertDirectionCosinesToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    ((rdSDFast const *)arg1)->convertDirectionCosinesToAngles(arg2,arg3,arg4,arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertDirectionCosinesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double (*arg2)[3] ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double (**)[3])&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    ((rdSDFast const *)arg1)->convertDirectionCosinesToQuaternions((double (*)[3])arg2,arg3,arg4,arg5,arg6);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertDirectionCosinesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    ((rdSDFast const *)arg1)->convertDirectionCosinesToQuaternions(arg2,arg3,arg4,arg5,arg6);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertQuaternionsToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double (*arg6)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = *(double (**)[3])&jarg6; 
    ((rdSDFast const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,(double (*)[3])arg6);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertQuaternionsToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
    rdSDFast *arg1 = (rdSDFast *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double *arg6 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdSDFast **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = *(double **)&jarg6; 
    ((rdSDFast const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,arg6);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1SDUForce(JNIEnv *jenv, jclass jcls) {
    (void)jenv;
    (void)jcls;
    rdSDFast::SDUForce();
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdActuatedModel_1SDFast_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    rdActuatorSet *arg1 = (rdActuatorSet *) 0 ;
    rdContactForceSet *arg2 = (rdContactForceSet *) 0 ;
    rdActuatedModel_SDFast *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatorSet **)&jarg1; 
    arg2 = *(rdContactForceSet **)&jarg2; 
    result = (rdActuatedModel_SDFast *)new rdActuatedModel_SDFast((rdActuatorSet const *)arg1,(rdContactForceSet const *)arg2);
    
    *(rdActuatedModel_SDFast **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1rdActuatedModel_1SDFast_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    rdActuatorSet *arg2 = (rdActuatorSet *) 0 ;
    rdContactForceSet *arg3 = (rdContactForceSet *) 0 ;
    rdActuatedModel_SDFast *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = *(rdActuatorSet **)&jarg2; 
    arg3 = *(rdContactForceSet **)&jarg3; 
    result = (rdActuatedModel_SDFast *)new rdActuatedModel_SDFast((std::string const &)*arg1,arg2,arg3);
    
    *(rdActuatedModel_SDFast **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdActuatedModel_1SDFast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    result = (int)((rdActuatedModel_SDFast const *)arg1)->getNX();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getNA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    result = (int)((rdActuatedModel_SDFast const *)arg1)->getNA();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getNP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    result = (int)((rdActuatedModel_SDFast const *)arg1)->getNP();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    result = (int)((rdActuatedModel_SDFast const *)arg1)->getNY();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getNYP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    result = (int)((rdActuatedModel_SDFast const *)arg1)->getNYP();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getActuatorName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdActuatedModel_SDFast const *)arg1)->getActuatorName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdActuatedModel_SDFast const *)arg1)->getControlName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdActuatedModel_SDFast const *)arg1)->getStateName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((rdActuatedModel_SDFast const *)arg1)->getPseudoStateName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getActuatorIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdActuatedModel_SDFast const *)arg1)->getActuatorIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdActuatedModel_SDFast const *)arg1)->getControlIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdActuatedModel_SDFast const *)arg1)->getStateIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((rdActuatedModel_SDFast const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getActuatorSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    rdActuatorSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    result = (rdActuatorSet *)(arg1)->getActuatorSet();
    
    *(rdActuatorSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getContactForceSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    rdContactForceSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    result = (rdContactForceSet *)(arg1)->getContactForceSet();
    
    *(rdContactForceSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->setControl(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    (arg1)->setControl((std::string const &)*arg2,arg3);
    
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setControls((double const (*))arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getControl((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getControl(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdActuatedModel_SDFast const *)arg1)->getControls(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setStates((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdActuatedModel_SDFast const *)arg1)->getStates(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getState(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getState((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setPseudoStates((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdActuatedModel_SDFast const *)arg1)->getPseudoStates(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getPseudoState(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getPseudoState((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1setInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setInitialPseudoStates((double const (*))arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getInitialPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getInitialPseudoState(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getInitialPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getInitialPseudoState((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdActuatedModel_SDFast const *)arg1)->getInitialPseudoStates(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setInitialStates((double const (*))arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getInitialState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getInitialState(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getInitialState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getInitialState((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((rdActuatedModel_SDFast const *)arg1)->getInitialStates(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    (arg1)->computeActuation();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1computeActuatorStateDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->computeActuatorStateDerivatives(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1applyActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->applyActuatorForce(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1applyActuatorForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    (arg1)->applyActuatorForces();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1setActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->setActuatorForce(arg2,arg3);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getActuatorForce(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getActuatorStress(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getActuatorStress(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getActuatorSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getActuatorSpeed(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getActuatorPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getActuatorPower(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    (arg1)->computeContact();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1applyContactForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->applyContactForce(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1applyContactForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    (arg1)->applyContactForces();
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getContactBodyA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)((rdActuatedModel_SDFast const *)arg1)->getContactBodyA(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getContactBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)((rdActuatedModel_SDFast const *)arg1)->getContactBodyB(arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1setContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->setContactPointA(arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdActuatedModel_SDFast const *)arg1)->getContactPointA(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1setContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->setContactPointB(arg2,(double const (*))arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdActuatedModel_SDFast const *)arg1)->getContactPointB(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getContactForce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdActuatedModel_SDFast const *)arg1)->getContactForce(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getContactNormalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    double *arg5 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    ((rdActuatedModel_SDFast const *)arg1)->getContactNormalForce(arg2,arg3,arg4,arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getContactTangentForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    double *arg5 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    ((rdActuatedModel_SDFast const *)arg1)->getContactTangentForce(arg2,arg3,arg4,arg5);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getContactStiffness(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdActuatedModel_SDFast const *)arg1)->getContactStiffness(arg2,(double const (*))arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getContactViscosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    ((rdActuatedModel_SDFast const *)arg1)->getContactViscosity(arg2,(double const (*))arg3,arg4);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getContactFrictionCorrection(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    ((rdActuatedModel_SDFast const *)arg1)->getContactFrictionCorrection(arg2,arg3);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getContactForce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getContactForce(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getContactSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getContactSpeed(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1getContactPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((rdActuatedModel_SDFast const *)arg1)->getContactPower(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    double *arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1deriv_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    jint jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    double arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    result = (int)(arg1)->deriv(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdActuatedModel_1SDFast_1deriv_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
    jint jresult = 0 ;
    rdActuatedModel_SDFast *arg1 = (rdActuatedModel_SDFast *) 0 ;
    double arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(rdActuatedModel_SDFast **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    result = (int)(arg1)->deriv(arg2,arg3,arg4,arg5,arg6);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1suPipeline40(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    result = (int)((suPipeline40 const *)arg1)->getNX();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getNA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    result = (int)((suPipeline40 const *)arg1)->getNA();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    result = (int)((suPipeline40 const *)arg1)->getNY();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getActuatorName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((suPipeline40 const *)arg1)->getActuatorName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((suPipeline40 const *)arg1)->getControlName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = (int)jarg2; 
    result = ((suPipeline40 const *)arg1)->getStateName(arg2);
    
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getActuatorIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((suPipeline40 const *)arg1)->getActuatorIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((suPipeline40 const *)arg1)->getControlIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (int)((suPipeline40 const *)arg1)->getStateIndex((std::string const &)*arg2);
    
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->setControl(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    (arg1)->setControl((std::string const &)*arg2,arg3);
    
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setControls((double const (*))arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    result = (double)((suPipeline40 const *)arg1)->getControl((std::string const &)*arg2);
    
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((suPipeline40 const *)arg1)->getControl(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((suPipeline40 const *)arg1)->getControls(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setInitialStates((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((suPipeline40 const *)arg1)->getInitialStates(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getInitialState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((suPipeline40 const *)arg1)->getInitialState(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setStates((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    ((suPipeline40 const *)arg1)->getStates(arg2);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((suPipeline40 const *)arg1)->getState(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    (arg1)->setConfiguration((double const (*))arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    double *arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    (arg1)->setConfiguration((double const (*))arg2,(double const (*))arg3);
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    suScaleSet *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = *(suScaleSet **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "suScaleSet const & reference is null");
        return 0;
    }
    result = (bool)(arg1)->scale((suScaleSet const &)*arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setIncludePipelineActuators(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    (arg1)->setIncludePipelineActuators(arg2);
    
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getIncludePipelineActuators(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    result = (bool)((suPipeline40 const *)arg1)->getIncludePipelineActuators();
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    (arg1)->computeActuation();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1applyActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->applyActuatorForce(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1applyActuatorForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    (arg1)->applyActuatorForces();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    (arg1)->setActuatorForce(arg2,arg3);
    
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((suPipeline40 const *)arg1)->getActuatorForce(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getActuatorSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((suPipeline40 const *)arg1)->getActuatorSpeed(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getActuatorPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)((suPipeline40 const *)arg1)->getActuatorPower(arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    (arg1)->computeContact();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1applyContactForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->applyContactForce(arg2);
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1applyContactForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    (arg1)->applyContactForces();
    
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1deriv(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    jint jresult = 0 ;
    suPipeline40 *arg1 = (suPipeline40 *) 0 ;
    double arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40 **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    result = (int)(arg1)->deriv(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1suPipeline40Workflow(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    rdActuatorSet *arg2 = (rdActuatorSet *) 0 ;
    rdContactForceSet *arg3 = (rdContactForceSet *) 0 ;
    suPipeline40Workflow *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = *(rdActuatorSet **)&jarg2; 
    arg3 = *(rdContactForceSet **)&jarg3; 
    result = (suPipeline40Workflow *)new suPipeline40Workflow((std::string const &)*arg1,arg2,arg3);
    
    *(suPipeline40Workflow **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1suPipeline40Workflow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    suPipeline40Workflow *arg1 = (suPipeline40Workflow *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40Workflow **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40Workflow_1initPipeline(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    suPipeline40Workflow *arg1 = (suPipeline40Workflow *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40Workflow **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return ;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    (arg1)->initPipeline((std::string const &)*arg2,(std::string const &)*arg3);
    
    delete arg2; 
    delete arg3; 
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40Workflow_1deriv(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    jint jresult = 0 ;
    suPipeline40Workflow *arg1 = (suPipeline40Workflow *) 0 ;
    double arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suPipeline40Workflow **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    result = (int)(arg1)->deriv(arg2,arg3,arg4,arg5);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1suS26(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    rdContactForceSet *arg2 = (rdContactForceSet *) 0 ;
    suS26 *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = *(rdContactForceSet **)&jarg2; 
    result = (suS26 *)new suS26((std::string const &)*arg1,arg2);
    
    *(suS26 **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1suS26(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    suS26 *arg1 = (suS26 *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suS26 **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suS26_1constructGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    suS26 *arg1 = (suS26 *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(suS26 **)&jarg1; 
    (arg1)->constructGeometry();
    
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suS26_1RegisterTypes(JNIEnv *jenv, jclass jcls) {
    (void)jenv;
    (void)jcls;
    suS26::RegisterTypes();
    
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdMaterialTordObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdObject **)&baseptr = *(rdMaterial **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdVisiblePropertiesTordObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdObject **)&baseptr = *(rdVisibleProperties **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdTransformTordObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdObject **)&baseptr = *(rdTransform **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdVisibleObjectTordObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdObject **)&baseptr = *(rdVisibleObject **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdBodyTordVisibleObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdVisibleObject **)&baseptr = *(rdBody **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdSetBodiesTordObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdObject **)&baseptr = *(rdSet<rdBody > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdSetMaterialsTordObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdObject **)&baseptr = *(rdSet<rdMaterial > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdMaterialSetTordSetMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdSet<rdMaterial > **)&baseptr = *(rdMaterialSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdActuatorTordObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdObject **)&baseptr = *(rdActuator **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdSetActuatorsTordObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdObject **)&baseptr = *(rdSet<rdActuator > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdActuatorSetTordSetActuators(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdSet<rdActuator > **)&baseptr = *(rdActuatorSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdContactForceSetTordActuatorSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdActuatorSet **)&baseptr = *(rdContactForceSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdStorageTordObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdObject **)&baseptr = *(rdStorage **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdModelTordObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdObject **)&baseptr = *(rdModel **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdSDFastTordModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdModel **)&baseptr = *(rdSDFast **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdActuatedModel_1SDFastTordSDFast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdSDFast **)&baseptr = *(rdActuatedModel_SDFast **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGsuPipeline40TordActuatedModel_1SDFast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(rdActuatedModel_SDFast **)&baseptr = *(suPipeline40 **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGsuPipeline40WorkflowTosuPipeline40(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(suPipeline40 **)&baseptr = *(suPipeline40Workflow **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGsuS26TosuPipeline40Workflow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(suPipeline40Workflow **)&baseptr = *(suS26 **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

