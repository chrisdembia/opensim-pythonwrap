/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class Marker extends OpenSimObject {
  private long swigCPtr;

  public Marker(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.Marker_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Marker obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimModelJNI.delete_Marker(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static Marker safeDownCast(OpenSimObject obj) {
    long cPtr = opensimModelJNI.Marker_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new Marker(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimModelJNI.Marker_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimModelJNI.Marker_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimModelJNI.Marker_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Marker(cPtr, false);
  }

  public String getConcreteClassName() {
    return opensimModelJNI.Marker_getConcreteClassName(swigCPtr, this);
  }

  public Marker() {
    this(opensimModelJNI.new_Marker__SWIG_0(), true);
  }

  public Marker(Marker aMarker) {
    this(opensimModelJNI.new_Marker__SWIG_1(Marker.getCPtr(aMarker), aMarker), true);
  }

  public static void deleteMarker(Marker aMarker) {
    opensimModelJNI.Marker_deleteMarker(Marker.getCPtr(aMarker), aMarker);
  }

  public void copyData(Marker aMarker) {
    opensimModelJNI.Marker_copyData(swigCPtr, this, Marker.getCPtr(aMarker), aMarker);
  }

  public void updateFromMarker(Marker aMarker) {
    opensimModelJNI.Marker_updateFromMarker(swigCPtr, this, Marker.getCPtr(aMarker), aMarker);
  }

  public void getOffset(SWIGTYPE_p_SimTK__Vec3 rOffset) {
    opensimModelJNI.Marker_getOffset__SWIG_0(swigCPtr, this, SWIGTYPE_p_SimTK__Vec3.getCPtr(rOffset));
  }

  public SWIGTYPE_p_SimTK__Vec3 getOffset() {
    return new SWIGTYPE_p_SimTK__Vec3(opensimModelJNI.Marker_getOffset__SWIG_1(swigCPtr, this), false);
  }

  public void getOffset(double[] rOffset) {
    opensimModelJNI.Marker_getOffset__SWIG_2(swigCPtr, this, rOffset);
  }

  public boolean setOffset(SWIGTYPE_p_SimTK__Vec3 aOffset) {
    return opensimModelJNI.Marker_setOffset__SWIG_0(swigCPtr, this, SWIGTYPE_p_SimTK__Vec3.getCPtr(aOffset));
  }

  public boolean setOffset(double[] aOffset) {
    return opensimModelJNI.Marker_setOffset__SWIG_1(swigCPtr, this, aOffset);
  }

  public boolean getOffsetUseDefault() {
    return opensimModelJNI.Marker_getOffsetUseDefault(swigCPtr, this);
  }

  public boolean getFixed() {
    return opensimModelJNI.Marker_getFixed(swigCPtr, this);
  }

  public boolean setFixed(boolean aFixed) {
    return opensimModelJNI.Marker_setFixed(swigCPtr, this, aFixed);
  }

  public boolean getFixedUseDefault() {
    return opensimModelJNI.Marker_getFixedUseDefault(swigCPtr, this);
  }

  public String getBodyName() {
    return opensimModelJNI.Marker_getBodyName(swigCPtr, this);
  }

  public boolean setBodyName(String aName) {
    return opensimModelJNI.Marker_setBodyName(swigCPtr, this, aName);
  }

  public boolean getBodyNameUseDefault() {
    return opensimModelJNI.Marker_getBodyNameUseDefault(swigCPtr, this);
  }

  public boolean setBodyNameUseDefault(boolean aValue) {
    return opensimModelJNI.Marker_setBodyNameUseDefault(swigCPtr, this, aValue);
  }

  public Body getBody() {
    return new Body(opensimModelJNI.Marker_getBody(swigCPtr, this), false);
  }

  public void changeBody(Body aBody) {
    opensimModelJNI.Marker_changeBody(swigCPtr, this, Body.getCPtr(aBody), aBody);
  }

  public void scale(SWIGTYPE_p_SimTK__Vec3 aScaleFactors) {
    opensimModelJNI.Marker_scale(swigCPtr, this, SWIGTYPE_p_SimTK__Vec3.getCPtr(aScaleFactors));
  }

  public void connectMarkerToModel(Model aModel) {
    opensimModelJNI.Marker_connectMarkerToModel(swigCPtr, this, Model.getCPtr(aModel), aModel);
  }

  public void updateGeometry() {
    opensimModelJNI.Marker_updateGeometry(swigCPtr, this);
  }

  public VisibleObject getDisplayer() {
    long cPtr = opensimModelJNI.Marker_getDisplayer(swigCPtr, this);
    return (cPtr == 0) ? null : new VisibleObject(cPtr, false);
  }

  public VisibleObject updDisplayer() {
    long cPtr = opensimModelJNI.Marker_updDisplayer(swigCPtr, this);
    return (cPtr == 0) ? null : new VisibleObject(cPtr, false);
  }

  public void removeSelfFromDisplay() {
    opensimModelJNI.Marker_removeSelfFromDisplay(swigCPtr, this);
  }

  public boolean isVirtual() {
    return opensimModelJNI.Marker_isVirtual(swigCPtr, this);
  }

  public void setVirtual(boolean aTrueFalse) {
    opensimModelJNI.Marker_setVirtual(swigCPtr, this, aTrueFalse);
  }

}
