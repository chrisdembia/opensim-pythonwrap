/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class WrapObject extends OpenSimObject {
  private long swigCPtr;

  public WrapObject(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.WrapObject_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(WrapObject obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimModelJNI.delete_WrapObject(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static WrapObject safeDownCast(OpenSimObject obj) {
    long cPtr = opensimModelJNI.WrapObject_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new WrapObject(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimModelJNI.WrapObject_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimModelJNI.WrapObject_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimModelJNI.WrapObject_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new WrapObject(cPtr, false);
  }

  public String getConcreteClassName() {
    return opensimModelJNI.WrapObject_getConcreteClassName(swigCPtr, this);
  }

  public void setPropertyIndex_display_preference(SWIGTYPE_p_PropertyIndex value) {
    opensimModelJNI.WrapObject_PropertyIndex_display_preference_set(swigCPtr, this, SWIGTYPE_p_PropertyIndex.getCPtr(value));
  }

  public SWIGTYPE_p_PropertyIndex getPropertyIndex_display_preference() {
    return new SWIGTYPE_p_PropertyIndex(opensimModelJNI.WrapObject_PropertyIndex_display_preference_get(swigCPtr, this), true);
  }

  public void copyProperty_display_preference(WrapObject source) {
    opensimModelJNI.WrapObject_copyProperty_display_preference(swigCPtr, this, WrapObject.getCPtr(source), source);
  }

  public SWIGTYPE_p_OpenSim__PropertyT_int_t getProperty_display_preference() {
    return new SWIGTYPE_p_OpenSim__PropertyT_int_t(opensimModelJNI.WrapObject_getProperty_display_preference(swigCPtr, this), false);
  }

  public SWIGTYPE_p_OpenSim__PropertyT_int_t updProperty_display_preference() {
    return new SWIGTYPE_p_OpenSim__PropertyT_int_t(opensimModelJNI.WrapObject_updProperty_display_preference(swigCPtr, this), false);
  }

  public int get_display_preference(int i) {
    return opensimModelJNI.WrapObject_get_display_preference__SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_int upd_display_preference(int i) {
    return new SWIGTYPE_p_int(opensimModelJNI.WrapObject_upd_display_preference__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_display_preference(int i, int value) {
    opensimModelJNI.WrapObject_set_display_preference__SWIG_0(swigCPtr, this, i, value);
  }

  public int append_display_preference(int value) {
    return opensimModelJNI.WrapObject_append_display_preference(swigCPtr, this, value);
  }

  public void constructProperty_display_preference(int initValue) {
    opensimModelJNI.WrapObject_constructProperty_display_preference(swigCPtr, this, initValue);
  }

  public int get_display_preference() {
    return opensimModelJNI.WrapObject_get_display_preference__SWIG_1(swigCPtr, this);
  }

  public SWIGTYPE_p_int upd_display_preference() {
    return new SWIGTYPE_p_int(opensimModelJNI.WrapObject_upd_display_preference__SWIG_1(swigCPtr, this), false);
  }

  public void set_display_preference(int value) {
    opensimModelJNI.WrapObject_set_display_preference__SWIG_1(swigCPtr, this, value);
  }

  public void setPropertyIndex_color(SWIGTYPE_p_PropertyIndex value) {
    opensimModelJNI.WrapObject_PropertyIndex_color_set(swigCPtr, this, SWIGTYPE_p_PropertyIndex.getCPtr(value));
  }

  public SWIGTYPE_p_PropertyIndex getPropertyIndex_color() {
    return new SWIGTYPE_p_PropertyIndex(opensimModelJNI.WrapObject_PropertyIndex_color_get(swigCPtr, this), true);
  }

  public void copyProperty_color(WrapObject source) {
    opensimModelJNI.WrapObject_copyProperty_color(swigCPtr, this, WrapObject.getCPtr(source), source);
  }

  public SWIGTYPE_p_OpenSim__PropertyT_double_t getProperty_color() {
    return new SWIGTYPE_p_OpenSim__PropertyT_double_t(opensimModelJNI.WrapObject_getProperty_color(swigCPtr, this), false);
  }

  public SWIGTYPE_p_OpenSim__PropertyT_double_t updProperty_color() {
    return new SWIGTYPE_p_OpenSim__PropertyT_double_t(opensimModelJNI.WrapObject_updProperty_color(swigCPtr, this), false);
  }

  public double get_color(int i) {
    return opensimModelJNI.WrapObject_get_color(swigCPtr, this, i);
  }

  public SWIGTYPE_p_double upd_color(int i) {
    return new SWIGTYPE_p_double(opensimModelJNI.WrapObject_upd_color(swigCPtr, this, i), false);
  }

  public void set_color(int i, double value) {
    opensimModelJNI.WrapObject_set_color(swigCPtr, this, i, value);
  }

  public int append_color(double value) {
    return opensimModelJNI.WrapObject_append_color(swigCPtr, this, value);
  }

  public void copyData(WrapObject aWrapObject) {
    opensimModelJNI.WrapObject_copyData(swigCPtr, this, WrapObject.getCPtr(aWrapObject), aWrapObject);
  }

  public void scale(SWIGTYPE_p_SimTK__Vec3 aScaleFactors) {
    opensimModelJNI.WrapObject_scale(swigCPtr, this, SWIGTYPE_p_SimTK__Vec3.getCPtr(aScaleFactors));
  }

  public void connectToModelAndBody(Model aModel, Body aBody) {
    opensimModelJNI.WrapObject_connectToModelAndBody(swigCPtr, this, Model.getCPtr(aModel), aModel, Body.getCPtr(aBody), aBody);
  }

  public Body getBody() {
    return new Body(opensimModelJNI.WrapObject_getBody(swigCPtr, this), false);
  }

  public SWIGTYPE_p_double getXYZBodyRotation() {
    long cPtr = opensimModelJNI.WrapObject_getXYZBodyRotation(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public SWIGTYPE_p_double getTranslation() {
    long cPtr = opensimModelJNI.WrapObject_getTranslation(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public boolean getActive() {
    return opensimModelJNI.WrapObject_getActive(swigCPtr, this);
  }

  public boolean getActiveUseDefault() {
    return opensimModelJNI.WrapObject_getActiveUseDefault(swigCPtr, this);
  }

  public String getQuadrantName() {
    return opensimModelJNI.WrapObject_getQuadrantName(swigCPtr, this);
  }

  public boolean getQuadrantNameUseDefault() {
    return opensimModelJNI.WrapObject_getQuadrantNameUseDefault(swigCPtr, this);
  }

  public void setQuadrantName(String aName) {
    opensimModelJNI.WrapObject_setQuadrantName(swigCPtr, this, aName);
  }

  public SWIGTYPE_p_SimTK__Transform getTransform() {
    return new SWIGTYPE_p_SimTK__Transform(opensimModelJNI.WrapObject_getTransform(swigCPtr, this), false);
  }

  public String getWrapTypeName() {
    return opensimModelJNI.WrapObject_getWrapTypeName(swigCPtr, this);
  }

  public String getDimensionsString() {
    return opensimModelJNI.WrapObject_getDimensionsString(swigCPtr, this);
  }

  public VisibleObject getDisplayer() {
    long cPtr = opensimModelJNI.WrapObject_getDisplayer(swigCPtr, this);
    return (cPtr == 0) ? null : new VisibleObject(cPtr, false);
  }

  public void updateGeometry() {
    opensimModelJNI.WrapObject_updateGeometry(swigCPtr, this);
  }

  public final static class WrapQuadrant {
    public final static WrapObject.WrapQuadrant allQuadrants = new WrapObject.WrapQuadrant("allQuadrants");
    public final static WrapObject.WrapQuadrant negativeX = new WrapObject.WrapQuadrant("negativeX");
    public final static WrapObject.WrapQuadrant positiveX = new WrapObject.WrapQuadrant("positiveX");
    public final static WrapObject.WrapQuadrant negativeY = new WrapObject.WrapQuadrant("negativeY");
    public final static WrapObject.WrapQuadrant positiveY = new WrapObject.WrapQuadrant("positiveY");
    public final static WrapObject.WrapQuadrant negativeZ = new WrapObject.WrapQuadrant("negativeZ");
    public final static WrapObject.WrapQuadrant positiveZ = new WrapObject.WrapQuadrant("positiveZ");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static WrapQuadrant swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + WrapQuadrant.class + " with value " + swigValue);
    }

    private WrapQuadrant(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private WrapQuadrant(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private WrapQuadrant(String swigName, WrapQuadrant swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static WrapQuadrant[] swigValues = { allQuadrants, negativeX, positiveX, negativeY, positiveY, negativeZ, positiveZ };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class WrapAction {
    public final static WrapObject.WrapAction noWrap = new WrapObject.WrapAction("noWrap");
    public final static WrapObject.WrapAction insideRadius = new WrapObject.WrapAction("insideRadius");
    public final static WrapObject.WrapAction wrapped = new WrapObject.WrapAction("wrapped");
    public final static WrapObject.WrapAction mandatoryWrap = new WrapObject.WrapAction("mandatoryWrap");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static WrapAction swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + WrapAction.class + " with value " + swigValue);
    }

    private WrapAction(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private WrapAction(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private WrapAction(String swigName, WrapAction swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static WrapAction[] swigValues = { noWrap, insideRadius, wrapped, mandatoryWrap };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
