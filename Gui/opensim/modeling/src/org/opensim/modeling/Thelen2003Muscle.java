/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class Thelen2003Muscle extends ActivationFiberLengthMuscle {
  private long swigCPtr;

  public Thelen2003Muscle(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.Thelen2003Muscle_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Thelen2003Muscle obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimModelJNI.delete_Thelen2003Muscle(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static Thelen2003Muscle safeDownCast(OpenSimObject obj) {
    long cPtr = opensimModelJNI.Thelen2003Muscle_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new Thelen2003Muscle(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimModelJNI.Thelen2003Muscle_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimModelJNI.Thelen2003Muscle_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimModelJNI.Thelen2003Muscle_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Thelen2003Muscle(cPtr, false);
  }

  public String getConcreteClassName() {
    return opensimModelJNI.Thelen2003Muscle_getConcreteClassName(swigCPtr, this);
  }

  public Thelen2003Muscle() {
    this(opensimModelJNI.new_Thelen2003Muscle__SWIG_0(), true);
  }

  public Thelen2003Muscle(String aName, double aMaxIsometricForce, double aOptimalFiberLength, double aTendonSlackLength, double aPennationAngle) {
    this(opensimModelJNI.new_Thelen2003Muscle__SWIG_1(aName, aMaxIsometricForce, aOptimalFiberLength, aTendonSlackLength, aPennationAngle), true);
  }

  public Thelen2003Muscle(Thelen2003Muscle aMuscle) {
    this(opensimModelJNI.new_Thelen2003Muscle__SWIG_2(Thelen2003Muscle.getCPtr(aMuscle), aMuscle), true);
  }

  public void copyData(Thelen2003Muscle aMuscle) {
    opensimModelJNI.Thelen2003Muscle_copyData(swigCPtr, this, Thelen2003Muscle.getCPtr(aMuscle), aMuscle);
  }

  public double getActivationTimeConstant() {
    return opensimModelJNI.Thelen2003Muscle_getActivationTimeConstant(swigCPtr, this);
  }

  public double getActivationMinimumValue() {
    return opensimModelJNI.Thelen2003Muscle_getActivationMinimumValue(swigCPtr, this);
  }

  public double getDeactivationTimeConstant() {
    return opensimModelJNI.Thelen2003Muscle_getDeactivationTimeConstant(swigCPtr, this);
  }

  public double getFmaxTendonStrain() {
    return opensimModelJNI.Thelen2003Muscle_getFmaxTendonStrain(swigCPtr, this);
  }

  public double getFmaxFiberStrain() {
    return opensimModelJNI.Thelen2003Muscle_getFmaxFiberStrain(swigCPtr, this);
  }

  public double getKshapeActive() {
    return opensimModelJNI.Thelen2003Muscle_getKshapeActive(swigCPtr, this);
  }

  public double getKshapePassive() {
    return opensimModelJNI.Thelen2003Muscle_getKshapePassive(swigCPtr, this);
  }

  public double getAf() {
    return opensimModelJNI.Thelen2003Muscle_getAf(swigCPtr, this);
  }

  public double getFlen() {
    return opensimModelJNI.Thelen2003Muscle_getFlen(swigCPtr, this);
  }

  public double getForceVelocityExtrapolationThreshold() {
    return opensimModelJNI.Thelen2003Muscle_getForceVelocityExtrapolationThreshold(swigCPtr, this);
  }

  public boolean setActivationTimeConstant(double aActivationTimeConstant) {
    return opensimModelJNI.Thelen2003Muscle_setActivationTimeConstant(swigCPtr, this, aActivationTimeConstant);
  }

  public boolean setActivationMinimumValue(double aActivationMinValue) {
    return opensimModelJNI.Thelen2003Muscle_setActivationMinimumValue(swigCPtr, this, aActivationMinValue);
  }

  public boolean setDeactivationTimeConstant(double aDeactivationTimeConstant) {
    return opensimModelJNI.Thelen2003Muscle_setDeactivationTimeConstant(swigCPtr, this, aDeactivationTimeConstant);
  }

  public boolean setFmaxTendonStrain(double aFmaxTendonStrain) {
    return opensimModelJNI.Thelen2003Muscle_setFmaxTendonStrain(swigCPtr, this, aFmaxTendonStrain);
  }

  public boolean setFmaxFiberStrain(double aFmaxMuscleStrain) {
    return opensimModelJNI.Thelen2003Muscle_setFmaxFiberStrain(swigCPtr, this, aFmaxMuscleStrain);
  }

  public boolean setKshapeActive(double aKShapeActive) {
    return opensimModelJNI.Thelen2003Muscle_setKshapeActive(swigCPtr, this, aKShapeActive);
  }

  public boolean setKshapePassive(double aKshapePassive) {
    return opensimModelJNI.Thelen2003Muscle_setKshapePassive(swigCPtr, this, aKshapePassive);
  }

  public boolean setAf(double aAf) {
    return opensimModelJNI.Thelen2003Muscle_setAf(swigCPtr, this, aAf);
  }

  public boolean setFlen(double aFlen) {
    return opensimModelJNI.Thelen2003Muscle_setFlen(swigCPtr, this, aFlen);
  }

  public boolean setForceVelocityExtrapolationThreshold(double aFvThresh) {
    return opensimModelJNI.Thelen2003Muscle_setForceVelocityExtrapolationThreshold(swigCPtr, this, aFvThresh);
  }

  public double computeActuation(SWIGTYPE_p_SimTK__State s) {
    return opensimModelJNI.Thelen2003Muscle_computeActuation(swigCPtr, this, SWIGTYPE_p_SimTK__State.getCPtr(s));
  }

  public void computeInitialFiberEquilibrium(SWIGTYPE_p_SimTK__State s) {
    opensimModelJNI.Thelen2003Muscle_computeInitialFiberEquilibrium(swigCPtr, this, SWIGTYPE_p_SimTK__State.getCPtr(s));
  }

  public double computeIsometricForce(SWIGTYPE_p_SimTK__State s, double activation) {
    return opensimModelJNI.Thelen2003Muscle_computeIsometricForce(swigCPtr, this, SWIGTYPE_p_SimTK__State.getCPtr(s), activation);
  }

}
