/*
 * Copyright (c)  2005-2010, Stanford University
 * Use of the OpenSim software in source form is permitted provided that the following
 * conditions are met:
 * 	1. The software is used only for non-commercial research and education. It may not
 *     be used in relation to any commercial activity.
 * 	2. The software is not distributed or redistributed.  Software distribution is allowed
 *     only through https://simtk.org/home/opensim.
 * 	3. Use of the OpenSim software or derivatives must be acknowledged in all publications,
 *      presentations, or documents describing work in which OpenSim or derivatives are used.
 * 	4. Credits to developers may not be removed from executables
 *     created from modifications of the source.
 * 	5. Modifications of source code must retain the above copyright notice, this list of
 *     conditions and the following disclaimer.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 *  SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 *  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 *  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 *  OR BUSINESS INTERRUPTION) OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 * PositionEditorCustomPanel.java
 *
 * Created on September 26, 2010, 2:22 AM
 */

package org.opensim.view.editors;

import java.text.ParseException;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.opensim.utils.Vec3;

/**
 *
 * @author  ayman
 */
public class PositionEditorCustomPanel extends javax.swing.JPanel implements ChangeListener{
    
    Vec3 dPoint = null;
    private PositionEditor editor;
    /** Creates new form PositionEditorCustomPanel */
    public PositionEditorCustomPanel(PositionEditor editor) {
        initComponents();   
        jSpinnerX.addChangeListener(this);
        this.setEditor(editor);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jSpinnerX = new javax.swing.JSpinner();
        jSpinnerX.setModel( new SpinnerNumberModel(0., -100.0, 100.0, 0.001));
        jSpinnerY = new javax.swing.JSpinner();
        jSpinnerY.setModel( new SpinnerNumberModel(0., -100.0, 100.0, 0.001));
        jSpinnerZ = new javax.swing.JSpinner();
        jSpinnerZ.setModel( new SpinnerNumberModel(0., -100.0, 100.0, 0.001));

        jSpinnerX.setFont(new java.awt.Font("Arial", 0, 11));
        jSpinnerX.setValue(getVec3().get()[0]);
        jSpinnerX.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jSpinnerXFocusLost(evt);
            }
        });
        jSpinnerX.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerXStateChanged(evt);
            }
        });

        jSpinnerY.setFont(new java.awt.Font("Arial", 0, 11));
        jSpinnerY.setValue(getVec3().get()[0]);
        jSpinnerY.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jSpinnerYFocusLost(evt);
            }
        });

        jSpinnerZ.setFont(new java.awt.Font("Arial", 0, 11));
        jSpinnerZ.setModel( new SpinnerNumberModel(0., -10.0, 10.0, 0.01));
        jSpinnerZ.setValue(getVec3().get()[0]);
        jSpinnerZ.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jSpinnerZFocusLost(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jSpinnerX, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSpinnerY, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSpinnerZ, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jSpinnerY, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jSpinnerX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jSpinnerZ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinnerXStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerXStateChanged
        try {
// TODO add your handling code here:
            jSpinnerX.commitEdit();
            //System.out.println("jSpinnerXStateChanged"+getVec3().toString());
            editor.setValue(getVec3());
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_jSpinnerXStateChanged

    private void jSpinnerZFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSpinnerZFocusLost
        try {
// TODO add your handling code here:
            jSpinnerZ.commitEdit();
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_jSpinnerZFocusLost

    private void jSpinnerYFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSpinnerYFocusLost
        try {
// TODO add your handling code here:
            jSpinnerY.commitEdit();
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_jSpinnerYFocusLost

    private void jSpinnerXFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSpinnerXFocusLost
        try {
// TODO add your handling code here:
            jSpinnerX.commitEdit();
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jSpinnerXFocusLost

    void setVec3(Vec3 d) {
        dPoint=new Vec3(d.get());
        jSpinnerX.setValue(d.get(0));
        jSpinnerY.setValue(d.get(1));
        jSpinnerZ.setValue(d.get(2));
    }

    Vec3 getVec3() {
        return new Vec3((Double)jSpinnerX.getValue(), (Double)jSpinnerY.getValue(), (Double)jSpinnerZ.getValue());
    }

    public void stateChanged(ChangeEvent e) {
        if (editor!=null)
            editor.setValue(getVec3());
    }

    public PositionEditor getEditor() {
        return editor;
    }

    public void setEditor(PositionEditor editor) {
        this.editor = editor;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JSpinner jSpinnerX;
    javax.swing.JSpinner jSpinnerY;
    javax.swing.JSpinner jSpinnerZ;
    // End of variables declaration//GEN-END:variables
    
}
