/*
 * EditOneMotionObjectPanel.java
 *
 * Created on January 30, 2010, 1:37 PM
 */

package org.opensim.view.experimentaldata;

import java.util.Vector;
import javax.swing.JComboBox;
import org.openide.DialogDescriptor;
import org.opensim.modeling.ArrayInt;
import org.opensim.modeling.ArrayStr;
import org.opensim.modeling.Body;
import org.opensim.modeling.BodySet;
import org.opensim.modeling.Model;
import org.opensim.modeling.Storage;

/**
 *
 * @author  ayman
 */
public class EditOneMotionObjectPanel extends javax.swing.JPanel {
    MotionObjectPointForce motionForce = null;
    AnnotatedMotion aMotion;
    Model aModel;
    
    boolean initializing=true;
    ArrayStr lbls;
    private DialogDescriptor dDialog;
    boolean changeToUniqueNames=false;  // If true we should be using column numbers exclusively
    boolean pointSpecified=false;
    boolean torqueSpecified=false;
    
    /** Creates new form EditOneMotionObjectPanel */
    public EditOneMotionObjectPanel(MotionObjectPointForce motionObject, AnnotatedMotion dMotion, Model model) {
        motionForce = motionObject;
        motionForce = (MotionObjectPointForce)motionObject;
        aMotion = dMotion;
        aModel = model;
        lbls=aMotion.getColumnLabels();
        //model = aModel;
        initComponents();
         
        ForceNameTextField.setText(motionObject.getName());
        initComboBoxes();
        
          
        updateAvailabilityFromCheckboxSelections();
        initializing=false;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelExternalLoadsApplicationDescription = new javax.swing.JLabel();
        buttonGroupForceType = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        EditOneForcePanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        BodiesComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        ForceNameTextField = new javax.swing.JTextField();
        jRadioButtonApplyPointForce = new javax.swing.JRadioButton();
        jRadioButtonApplyBodyForce = new javax.swing.JRadioButton();
        jComboBoxPY = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxPZ = new javax.swing.JComboBox();
        jComboBoxPX = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxFX = new javax.swing.JComboBox();
        jComboBoxFY = new javax.swing.JComboBox();
        jComboBoxFZ = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        ForceExpressedBodiesComboBox = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jComponentComboBox = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jCheckBoxTorque = new javax.swing.JCheckBox();
        PointExpressedBodiesComboBox = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jComboBoxTX = new javax.swing.JComboBox();
        jComboBoxTY = new javax.swing.JComboBox();
        jComboBoxTZ = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();

        jLabelExternalLoadsApplicationDescription.setText("jLabel1"); // NOI18N

        jLabel2.setText("Point Expressed in"); // NOI18N

        jLabel5.setText("Apply to"); // NOI18N
        jLabel5.setToolTipText("Used for simulation, unused for visualization");

        BodiesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        BodiesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BodiesComboBoxActionPerformed(evt);
            }
        });
        BodiesComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                BodiesComboBoxFocusLost(evt);
            }
        });

        jLabel3.setText("Object Name"); // NOI18N

        ForceNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForceNameTextFieldActionPerformed(evt);
            }
        });
        ForceNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ForceNameTextFieldFocusLost(evt);
            }
        });

        buttonGroupForceType.add(jRadioButtonApplyPointForce);
        jRadioButtonApplyPointForce.setText("Point Force"); // NOI18N
        jRadioButtonApplyPointForce.setActionCommand("PointForce"); // NOI18N
        jRadioButtonApplyPointForce.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonApplyPointForce.setEnabled(false);
        jRadioButtonApplyPointForce.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jRadioButtonApplyPointForce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonApplyPointForceActionPerformed(evt);
            }
        });

        buttonGroupForceType.add(jRadioButtonApplyBodyForce);
        jRadioButtonApplyBodyForce.setSelected(true);
        jRadioButtonApplyBodyForce.setText("Body Force (at Center of Mass)"); // NOI18N
        jRadioButtonApplyBodyForce.setToolTipText("Show as Force acting at a body's COM"); // NOI18N
        jRadioButtonApplyBodyForce.setActionCommand("BodyForce"); // NOI18N
        jRadioButtonApplyBodyForce.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonApplyBodyForce.setEnabled(false);
        jRadioButtonApplyBodyForce.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jRadioButtonApplyBodyForce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonApplyBodyForceActionPerformed(evt);
            }
        });

        jComboBoxPY.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxPY.setEnabled(false);
        jComboBoxPY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jLabel6.setText("Point Columns"); // NOI18N

        jComboBoxPZ.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxPZ.setEnabled(false);
        jComboBoxPZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jComboBoxPX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxPX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPXActionPerformed(evt);
            }
        });

        jLabel4.setText("Force Columns"); // NOI18N

        jComboBoxFX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ground_force_px", "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxFX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFXActionPerformed(evt);
            }
        });

        jComboBoxFY.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ground_force_py", "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxFY.setEnabled(false);
        jComboBoxFY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jComboBoxFZ.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ground_force_pz", "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxFZ.setEnabled(false);
        jComboBoxFZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jLabel1.setText("Force Expressed in"); // NOI18N

        ForceExpressedBodiesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ForceExpressedBodiesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForceExpressedBodiesComboBoxActionPerformed(evt);
            }
        });
        ForceExpressedBodiesComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ForceExpressedBodiesComboBoxFocusLost(evt);
            }
        });

        jLabel7.setText("Component");

        jComponentComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "x", "y", "z" }));
        jComponentComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forceComponentChanged(evt);
            }
        });

        jLabel8.setText("Point Expressed in");

        jCheckBoxTorque.setText("Applies Torque");
        jCheckBoxTorque.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxTorque.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckBoxTorque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTorqueActionPerformed(evt);
            }
        });

        PointExpressedBodiesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        PointExpressedBodiesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PointExpressedBodiesComboBoxActionPerformed(evt);
            }
        });
        PointExpressedBodiesComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                PointExpressedBodiesComboBoxFocusLost(evt);
            }
        });

        jLabel9.setText("Torque Columns");

        jComboBoxTX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxTX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTXActionPerformed(evt);
            }
        });

        jComboBoxTY.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxTY.setEnabled(false);
        jComboBoxTY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTYupdateForceFromPanel(evt);
            }
        });

        jComboBoxTZ.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxTZ.setEnabled(false);
        jComboBoxTZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTZupdateForceFromPanel(evt);
            }
        });

        jLabel10.setText("(visualization only)");

        org.jdesktop.layout.GroupLayout EditOneForcePanelLayout = new org.jdesktop.layout.GroupLayout(EditOneForcePanel);
        EditOneForcePanel.setLayout(EditOneForcePanelLayout);
        EditOneForcePanelLayout.setHorizontalGroup(
            EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(EditOneForcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(EditOneForcePanelLayout.createSequentialGroup()
                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(EditOneForcePanelLayout.createSequentialGroup()
                                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel3)
                                    .add(jLabel5))
                                .add(13, 13, 13)
                                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, BodiesComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, ForceNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(EditOneForcePanelLayout.createSequentialGroup()
                                .add(11, 11, 11)
                                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(EditOneForcePanelLayout.createSequentialGroup()
                                        .add(jRadioButtonApplyBodyForce)
                                        .add(18, 18, 18)
                                        .add(jRadioButtonApplyPointForce))
                                    .add(EditOneForcePanelLayout.createSequentialGroup()
                                        .add(118, 118, 118)
                                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jComboBoxFX, 0, 152, Short.MAX_VALUE)
                                            .add(jComboBoxPX, 0, 152, Short.MAX_VALUE))))
                                .add(9, 9, 9)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(EditOneForcePanelLayout.createSequentialGroup()
                                .add(jLabel7)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jComponentComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, EditOneForcePanelLayout.createSequentialGroup()
                                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jComboBoxPY, 0, 138, Short.MAX_VALUE)
                                    .add(jComboBoxFY, 0, 138, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jComboBoxPZ, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jComboBoxFZ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 152, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                    .add(EditOneForcePanelLayout.createSequentialGroup()
                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(EditOneForcePanelLayout.createSequentialGroup()
                                .add(17, 17, 17)
                                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel9)
                                    .add(jLabel1))
                                .add(21, 21, 21)
                                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, ForceExpressedBodiesComboBox, 0, 152, Short.MAX_VALUE)
                                    .add(jComboBoxTX, 0, 152, Short.MAX_VALUE))
                                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(EditOneForcePanelLayout.createSequentialGroup()
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jComboBoxTY, 0, 137, Short.MAX_VALUE)
                                        .add(6, 6, 6))
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, EditOneForcePanelLayout.createSequentialGroup()
                                        .add(48, 48, 48)
                                        .add(jLabel8)
                                        .add(13, 13, 13))))
                            .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(jCheckBoxTorque)
                                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel4)
                                    .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(PointExpressedBodiesComboBox, 0, 156, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBoxTZ, 0, 156, Short.MAX_VALUE))))
                .addContainerGap())
        );
        EditOneForcePanelLayout.setVerticalGroup(
            EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(EditOneForcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ForceNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(BodiesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .add(27, 27, 27)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jRadioButtonApplyBodyForce)
                    .add(jRadioButtonApplyPointForce)
                    .add(jLabel7)
                    .add(jComponentComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel10))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBoxFX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxFZ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxFY, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBoxPZ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxPX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxPY, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCheckBoxTorque)
                .add(2, 2, 2)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(jComboBoxTX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxTY, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxTZ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ForceExpressedBodiesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1)
                    .add(jLabel8)
                    .add(PointExpressedBodiesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(EditOneForcePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(EditOneForcePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void PointExpressedBodiesComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PointExpressedBodiesComboBoxFocusLost
// TODO add your handling code here:
          updateForceFromPanel();
    }//GEN-LAST:event_PointExpressedBodiesComboBoxFocusLost

    private void PointExpressedBodiesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PointExpressedBodiesComboBoxActionPerformed
// TODO add your handling code here:
          updateForceFromPanel();        
    }//GEN-LAST:event_PointExpressedBodiesComboBoxActionPerformed

    private void ForceExpressedBodiesComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ForceExpressedBodiesComboBoxFocusLost
// TODO add your handling code here:
          updateForceFromPanel();
    }//GEN-LAST:event_ForceExpressedBodiesComboBoxFocusLost

    private void ForceExpressedBodiesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForceExpressedBodiesComboBoxActionPerformed
// TODO add your handling code here:
        updateForceFromPanel();
    }//GEN-LAST:event_ForceExpressedBodiesComboBoxActionPerformed
        
    private void jComboBoxPXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPXActionPerformed
        int idx =((JComboBox)evt.getSource()).getSelectedIndex();
        if (idx >=1 && idx <lbls.getSize()-2){
            jComboBoxPY.setSelectedIndex(idx+1);
            jComboBoxPZ.setSelectedIndex(idx+2);
        }
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
// TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxPXActionPerformed
    
    private void jComboBoxFXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFXActionPerformed
// TODO add your handling code here:
        // Populate next two dropdown from the following 2 columns
        int idx =((JComboBox)evt.getSource()).getSelectedIndex();
        motionForce.setStartIndexInFileNotIncludingTime(idx-1);
        if (idx >=1 && idx <lbls.getSize()-2){
            jComboBoxFY.setSelectedIndex(idx+1);
            jComboBoxFZ.setSelectedIndex(idx+2);
        }
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
        
    }//GEN-LAST:event_jComboBoxFXActionPerformed
            
    private void updateForceFromPanel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateForceFromPanel
// TODO add your handling code here:
        //updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
    }//GEN-LAST:event_updateForceFromPanel
            
    private void jRadioButtonApplyPointForceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonApplyPointForceActionPerformed
// TODO add your handling code here:
        updateAvailabilityFromCheckboxSelections();
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
        
    }//GEN-LAST:event_jRadioButtonApplyPointForceActionPerformed
    
    private void jRadioButtonApplyBodyForceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonApplyBodyForceActionPerformed
        updateAvailabilityFromCheckboxSelections();
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
// TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonApplyBodyForceActionPerformed
    
    private void BodiesComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BodiesComboBoxFocusLost
        updateForceFromPanel();
    }//GEN-LAST:event_BodiesComboBoxFocusLost
    
    private void BodiesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BodiesComboBoxActionPerformed
        updateForceFromPanel();
    }//GEN-LAST:event_BodiesComboBoxActionPerformed
    
    private void ForceNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ForceNameTextFieldFocusLost
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
    }//GEN-LAST:event_ForceNameTextFieldFocusLost
    
    private void ForceNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForceNameTextFieldActionPerformed
        if (checkValid()) updateForceFromPanel();
    }//GEN-LAST:event_ForceNameTextFieldActionPerformed

    private void forceComponentChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forceComponentChanged
        // TODO add your handling code here:
         motionForce.setForceComponent((String)jComponentComboBox.getSelectedItem());
         updateForceFromPanel();
         //System.out.println("Setting component to "+(String)jComponentComboBox.getSelectedItem());
    }//GEN-LAST:event_forceComponentChanged

private void jCheckBoxTorqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTorqueActionPerformed
        updateAvailabilityFromCheckboxSelections();
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
// TODO add your handling code here:
}//GEN-LAST:event_jCheckBoxTorqueActionPerformed

private void jComboBoxTXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTXActionPerformed
        int idx =((JComboBox)evt.getSource()).getSelectedIndex();
        if (idx >=1 && idx <lbls.getSize()-2){
            jComboBoxTY.setSelectedIndex(idx+1);
            jComboBoxTZ.setSelectedIndex(idx+2);
        }
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
// TODO add your handling code here:
}//GEN-LAST:event_jComboBoxTXActionPerformed

private void jComboBoxTYupdateForceFromPanel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTYupdateForceFromPanel
// TODO add your handling code here:
        //updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
}//GEN-LAST:event_jComboBoxTYupdateForceFromPanel

private void jComboBoxTZupdateForceFromPanel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTZupdateForceFromPanel
// TODO add your handling code here:
        //updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
}//GEN-LAST:event_jComboBoxTZupdateForceFromPanel
    // Initialize GUI Panel from a externalForce
    private void initComboBoxes() {
        // Body name combobox
        
        BodySet bodySet = aModel.getBodySet();
        populateBodyList(bodySet, BodiesComboBox);
         BodiesComboBox.setSelectedItem(motionForce.getForceAppliedToBody());
         PointExpressedBodiesComboBox.setSelectedItem(motionForce.getPointExpressedInBody());
         ForceExpressedBodiesComboBox.setSelectedItem(motionForce.getForceExpressedInBodyName());
        // All other drop downs, populate with column names except time.
        Vector<String> colmnLabels = lbls.toVector();
        colmnLabels.set(0,""); // no default column & time shouldn't be permitted anyway'
        String[] colNames = new String[colmnLabels.size()];
        colmnLabels.toArray(colNames);
        // Force dropdowns
        jComboBoxFX.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxFY.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxFZ.setModel(new javax.swing.DefaultComboBoxModel(colNames));

        //externalForce.getForceFunctionNames(forceFunctionNames);
         if (motionForce.appliesForce()){
            String forceId = motionForce.getForceIdentifier();
            setComboBoxSelection(jComboBoxFX, forceId, 0);
            setComboBoxSelection(jComboBoxFY, forceId, 1);
            setComboBoxSelection(jComboBoxFZ, forceId, 2);
        }
        
        // Point dropdowns
        jComboBoxPX.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxPY.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxPZ.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        //externalForce.getPointFunctionNames(pointFunctionNames);
        if (motionForce.specifiesPoint()){
            String pointId = motionForce.getPointIdentifier();
            setComboBoxSelection(jComboBoxPX, pointId, 0);
            setComboBoxSelection(jComboBoxPY, pointId, 1);
            setComboBoxSelection(jComboBoxPZ, pointId, 2);
            jRadioButtonApplyPointForce.setSelected(true);
        } else
            jRadioButtonApplyBodyForce.setSelected(true);
       //externalForce.getTorqueFunctionNames(torqueFunctionNames);
        populateBodyList(bodySet, ForceExpressedBodiesComboBox);
        populateBodyList(bodySet, PointExpressedBodiesComboBox);
        
        String dbg1 = motionForce.getForceExpressedInBodyName();
        ForceExpressedBodiesComboBox.setSelectedItem(motionForce.getForceExpressedInBodyName());
        
        String dbg2 = motionForce.getPointExpressedInBody();
        PointExpressedBodiesComboBox.setSelectedItem(motionForce.getPointExpressedInBody());
        //System.out.println("Component="+motionForce.getForceComponent());
        jComponentComboBox.setSelectedItem(motionForce.getForceComponent());
        jComboBoxTX.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxTY.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxTZ.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        torqueSpecified = motionForce.isSpecifyTorque();
        if (torqueSpecified){
            String torqueId = motionForce.getTorqueIdentifier();
            setComboBoxSelection(jComboBoxTX, torqueId, 0);
            setComboBoxSelection(jComboBoxTY, torqueId, 1);
            setComboBoxSelection(jComboBoxTZ, torqueId, 2);
            jCheckBoxTorque.setSelected(true);
        }
    }

    private void populateBodyList(final BodySet bodySet, JComboBox comboBox) {
        comboBox.removeAllItems();
        String[] bNames = new String[bodySet.getSize()];

        for(int i=0; i<bodySet.getSize(); i++){
            comboBox.addItem(bodySet.get(i).getName());
            bNames[i]=bodySet.get(i).getName();
        }
        comboBox.setModel(new javax.swing.DefaultComboBoxModel(bNames));
    }
    
    private void setComboBoxSelection(final JComboBox jcombox, final String objIdentifier, final int j) throws NumberFormatException {
        ArrayInt indices = aMotion.getColumnIndicesForIdentifier(objIdentifier);
        if (indices.getSize()!=3) return;
        if (indices.getitem(j)== -1) return;
        //String[] suffixes = new String[]{"x", "y", "z"};
        jcombox.setSelectedItem(lbls.getitem(indices.getitem(j)));
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox BodiesComboBox;
    private javax.swing.JPanel EditOneForcePanel;
    private javax.swing.JComboBox ForceExpressedBodiesComboBox;
    private javax.swing.JTextField ForceNameTextField;
    private javax.swing.JComboBox PointExpressedBodiesComboBox;
    private javax.swing.ButtonGroup buttonGroupForceType;
    private javax.swing.JCheckBox jCheckBoxTorque;
    private javax.swing.JComboBox jComboBoxFX;
    private javax.swing.JComboBox jComboBoxFY;
    private javax.swing.JComboBox jComboBoxFZ;
    private javax.swing.JComboBox jComboBoxPX;
    private javax.swing.JComboBox jComboBoxPY;
    private javax.swing.JComboBox jComboBoxPZ;
    private javax.swing.JComboBox jComboBoxTX;
    private javax.swing.JComboBox jComboBoxTY;
    private javax.swing.JComboBox jComboBoxTZ;
    private javax.swing.JComboBox jComponentComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelExternalLoadsApplicationDescription;
    private javax.swing.JRadioButton jRadioButtonApplyBodyForce;
    private javax.swing.JRadioButton jRadioButtonApplyPointForce;
    // End of variables declaration//GEN-END:variables
    
    // Update ExternalForce based on selection in the GUI Panel
    private void updateForceFromPanel() {
        if (initializing) return;
        String sel = (buttonGroupForceType.getSelection().getActionCommand());
        if (sel.equalsIgnoreCase("BodyForce")){
            motionForce.setObjectType(ExperimentalDataItemType.BodyForceData);
        }
        else
            motionForce.setObjectType(ExperimentalDataItemType.PointForceData);
        
        jComboBoxPX.setEnabled(motionForce.specifiesPoint());
        jComboBoxPY.setEnabled(motionForce.specifiesPoint());
        jComboBoxPZ.setEnabled(motionForce.specifiesPoint());

        String forceName=ForceNameTextField.getText();
        if (forceName != null && forceName.length()!=0)
            motionForce.setName(forceName);
        
        String forceBodyame = (String) BodiesComboBox.getSelectedItem();
        if (forceBodyame != null && forceBodyame.length()!=0){
            if (!initializing){
                motionForce.setForceAppliedToBody(forceBodyame);
                if (!motionForce.specifiesPoint()){
                    Body b = aModel.getBodySet().get(forceBodyame);
                    double[] com = new double[]{0., 0., 0.};
                    b.getCenterOfMass(com);
                    motionForce.setPoint(com);
                }
                else {
                    // Assign point based on user selection if valid
                    motionForce.setPointIdentifier(makeIdentifier(
                    (String)jComboBoxPX.getSelectedItem(),
                    (String)jComboBoxPY.getSelectedItem(), 
                    (String)jComboBoxPZ.getSelectedItem()));
                }
            }
        }
        // Set either forcefunctions or force and pointFunctions if ForceCheckBox is on
        {
            // get first selected item and make sure it has a common prefix with other 2 use the prefix as forceIdentifier
            motionForce.setForceIdentifier(makeIdentifier(
                    (String)jComboBoxFX.getSelectedItem(),
                    (String)jComboBoxFY.getSelectedItem(), 
                    (String)jComboBoxFZ.getSelectedItem()));
            // if point force also allow for setPointFunctionNames
            String cmd=buttonGroupForceType.getSelection().getActionCommand();
            if (cmd.equals("PointForce")){
                motionForce.setPointIdentifier(makeIdentifier(
                    (String)jComboBoxPX.getSelectedItem(),
                    (String)jComboBoxPY.getSelectedItem(), 
                    (String)jComboBoxPZ.getSelectedItem()));
            } else
                ;//if (!initializing) externalForce.clearPointFunctions();
        } 
        
        String selected = (String) ForceExpressedBodiesComboBox.getSelectedItem();
        if (selected !=null)
            motionForce.setForceExpressedInBodyName(selected);
        //selected = (String) PointExpressedBodiesComboBox.getSelectedItem();
        
        motionForce.setForceComponent((String)jComponentComboBox.getSelectedItem());
        
        String selectPointExpressedBody = (String) this.PointExpressedBodiesComboBox.getSelectedItem();
        if (selectPointExpressedBody !=null)
            motionForce.setPointExpressedInBody(selectPointExpressedBody);
        
        motionForce.setSpecifyTorque(torqueSpecified);
        if (torqueSpecified){
             motionForce.setTorqueIdentifier(makeIdentifier(
                    (String)jComboBoxTX.getSelectedItem(),
                    (String)jComboBoxTY.getSelectedItem(), 
                    (String)jComboBoxTZ.getSelectedItem()));
        }
        
    }
    // Convenience method to enable/disable buttons and dropdowns based on user selections
    // for check-boxes, radio-buttons
    private void updateAvailabilityFromCheckboxSelections() {
        String cmd = buttonGroupForceType.getSelection().getActionCommand();
        jRadioButtonApplyPointForce.setEnabled(true);
        jRadioButtonApplyBodyForce.setEnabled(true);
        jLabelExternalLoadsApplicationDescription.setText("");
        if (cmd.equals("BodyForce")){
            jComboBoxFX.setEnabled(true);
            jComboBoxFY.setEnabled(true);
            jComboBoxFZ.setEnabled(true);
            jComboBoxPX.setEnabled(false);
            jComboBoxPY.setEnabled(false);
            jComboBoxPZ.setEnabled(false);
            //PointIsGlobalCheckBox.setEnabled(false);
        } else {  // Point Force: need to specify everything
            jComboBoxFX.setEnabled(true);
            jComboBoxFY.setEnabled(true);
            jComboBoxFZ.setEnabled(true);
            jComboBoxPX.setEnabled(true);
            jComboBoxPY.setEnabled(true);
            jComboBoxPZ.setEnabled(true);
            jLabelExternalLoadsApplicationDescription.setText("Point is converted to local frame using external loads kinematics.");
        }
        torqueSpecified = jCheckBoxTorque.isSelected();
        jComboBoxTX.setEnabled(torqueSpecified);
        jComboBoxTY.setEnabled(torqueSpecified);
        jComboBoxTZ.setEnabled(torqueSpecified);
        if (dDialog!= null) dDialog.setValid(checkValid());
    }
    
    public void setDDialog(DialogDescriptor dDialog) {
        this.dDialog = dDialog;
    }
    
    private boolean checkValid() {
        // If checkbox is picked
        if (ForceNameTextField.getText().length() == 0) {
            return false;
        }
        if (jComboBoxFX.getSelectedItem().equals("")
                || jComboBoxFY.getSelectedItem().equals("")
                || jComboBoxFZ.getSelectedItem().equals("")) {
            return false;
        }
        String cmd = buttonGroupForceType.getSelection().getActionCommand();
        if (cmd.equals("PointForce")) {
            if (jComboBoxPX.getSelectedItem().equals("")
                    || jComboBoxPY.getSelectedItem().equals("")
                    || jComboBoxPZ.getSelectedItem().equals("")) {
                return false;
            }

        }
        if (torqueSpecified){
            if (jComboBoxTX.getSelectedItem().equals("")
                    || jComboBoxTY.getSelectedItem().equals("")
                    || jComboBoxTZ.getSelectedItem().equals("")) {
                return false;
            }
        }
        return true;
    }
    /**
     * We should expect these strings to have common prefix except for last letter
     * we should handle error conditions gracefully
     */
    private String makeIdentifier(String stringX, String stringY, String stringZ) {
        if (stringX.length()<2) return "";
        String candidate= stringX.substring(0, stringX.length()-1);
        if (stringY.startsWith(candidate) && stringZ.startsWith(candidate))
            return candidate;
        else
            return "";
    }
}
