/*
 * MotionSliderJPanel.java
 *
 * Created on January 12, 2007, 11:28 AM
 */

package org.opensim.motionviewer;

import java.util.Observable;
import java.util.Observer;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.JSlider;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.opensim.modeling.AbstractCoordinate;
import org.opensim.modeling.CoordinateSet;
import org.opensim.modeling.SimmMotionData;
import org.opensim.view.MotionDisplayer;
import org.opensim.view.MotionEvent;
import org.opensim.view.pub.MotionsDB;
import org.opensim.view.pub.ViewDB;

/**
 *
 * @author  Ayman
 * The panel for motion playback in main toolbar.
 * The panel wil observer ViewDB so that it can respond to changes in current model, events ...
 */
public class MotionSliderJPanel extends javax.swing.JPanel implements Observer, ChangeListener {
   
    SimmMotionData simmMotionData;
    DefaultBoundedRangeModel sliderModel = new DefaultBoundedRangeModel();
    MotionDisplayer     displayer;
    int                 currentFrame=0;
    boolean             wrapMotion=false;
    Timer               animationTimer;
    long                animationSpeed=100L;
    SpinnerModel        smodel = new SpinnerNumberModel(100, 10, 500, 10);
    
   /** Creates new form MotionSliderJPanel */
   public MotionSliderJPanel() {
      initComponents();
      //jMotionSlider.addChangeListener(this);
      MotionsDB.getInstance().addObserver(this);
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jReverseButton = new javax.swing.JButton();
        jStopButton = new javax.swing.JButton();
        jPlayButton = new javax.swing.JButton();
        jMotionSlider = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jTimeTextField = new javax.swing.JTextField();
        jSpeedSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jMotionNameLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jWrapToggleButton = new javax.swing.JToggleButton();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jReverseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/motionviewer/images/reverse.gif")));
        jReverseButton.setPreferredSize(new java.awt.Dimension(50, 25));

        jStopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/motionviewer/images/stop.gif")));
        jStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStopButtonActionPerformed(evt);
            }
        });

        jPlayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/motionviewer/images/play.gif")));
        jPlayButton.setMaximumSize(new java.awt.Dimension(50, 25));
        jPlayButton.setMinimumSize(new java.awt.Dimension(50, 25));
        jPlayButton.setPreferredSize(new java.awt.Dimension(50, 25));
        jPlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPlayButtonActionPerformed(evt);
            }
        });

        jMotionSlider.setMajorTickSpacing(50);
        jMotionSlider.setMinorTickSpacing(5);
        jMotionSlider.setPaintTicks(true);
        jMotionSlider.setPaintTrack(false);
        jMotionSlider.setModel(sliderModel
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Motion:");

        jSpeedSpinner.setModel(smodel);
        jSpeedSpinner.setToolTipText("animation speed ");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Speed");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/motionviewer/images/step.gif")));
        jButton1.setMaximumSize(new java.awt.Dimension(50, 25));
        jButton1.setMinimumSize(new java.awt.Dimension(50, 25));
        jButton1.setPreferredSize(new java.awt.Dimension(50, 25));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAdvanceButtonActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/motionviewer/images/reverseStep.gif")));

        jMotionNameLabel.setText("Name");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText("time");

        jWrapToggleButton.setText("wrap");
        jWrapToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jWrapToggleButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jMotionNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTimeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jMotionSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 202, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPlayButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jStopButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jReverseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jWrapToggleButton)
                .add(63, 63, 63)
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSpeedSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(316, 316, 316))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jMotionSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jPlayButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jStopButton))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jButton2)
                            .add(jReverseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jWrapToggleButton)
                            .add(jLabel1)
                            .add(jSpeedSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(jLabel4)
                            .add(jMotionNameLabel)
                            .add(jTimeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStopButtonActionPerformed
// TODO add your handling code here:
        animationTimer.cancel();
    }//GEN-LAST:event_jStopButtonActionPerformed

    private void jWrapToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jWrapToggleButtonActionPerformed
// TODO add your handling code here:
        wrapMotion= !wrapMotion;
    }//GEN-LAST:event_jWrapToggleButtonActionPerformed

    private void jAdvanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAdvanceButtonActionPerformed
// TODO add your handling code here:
       currentFrame = advanceFrame(currentFrame);
       applyFrame(currentFrame);
    }//GEN-LAST:event_jAdvanceButtonActionPerformed

    private void jPlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPlayButtonActionPerformed
// TODO add your handling code here:
        applyFrame(currentFrame);
        animationTimer = new Timer();
        animationTimer.scheduleAtFixedRate(new TimerTask() {
            public void run() {
                currentFrame = advanceFrame(currentFrame);
                applyFrame(currentFrame);
            }
        }, ((Integer)smodel.getValue()).longValue(), ((Integer)smodel.getValue()).longValue());
    }//GEN-LAST:event_jPlayButtonActionPerformed
   // Observable is MotionsDB
   public void update(Observable o, Object arg) {
      // Recover motion info, update toolbar accordingly
       if (o instanceof MotionsDB){
           MotionsDB mdb = (MotionsDB)o;
           MotionEvent evt = (MotionEvent)arg;
           if (evt.getOperation()==MotionEvent.Operation.Open ||
                   evt.getOperation()==MotionEvent.Operation.SetCurrent){
               // new motion is loaded or is set current. Update panel display
               updateDisplay(evt.getMotion());
               this.simmMotionData=evt.getMotion();
               displayer = new MotionDisplayer(evt.getMotion(), evt.getModel());
               currentFrame=0;
           }
       }
   }
   /**
    * update the panel to reflect current motion's name, range, ...etc.
    */
    private void updateDisplay(SimmMotionData simmMotionData) {
        jMotionNameLabel.setText(simmMotionData.getName());
        jTimeTextField.setText(String.valueOf(simmMotionData.getRangeMin()));
        sliderModel.setMinimum(0);
        sliderModel.setMaximum(simmMotionData.getNumberOfFrames()-1);
        sliderModel.setValue(0);
        sliderModel.setExtent(simmMotionData.getNumberOfFrames()-1);
        jMotionSlider.setModel(sliderModel);
        jTimeTextField.setText(String.valueOf(simmMotionData.getRangeMin()));
    }

    private void applyFrame(int currentFrame) {
        // Apply gcs from file then update model display!
        CoordinateSet coords = displayer.getModel().getDynamicsEngine().getCoordinateSet();
        for(int i=0; i<coords.getSize(); i++){
            AbstractCoordinate co = coords.get(i);
            if (displayer.getIndexInStorage(co.getName())!=-1){
                double value = simmMotionData.getValue(co.getName(), currentFrame);
                co.setValue(value);
                //System.out.println("Setting coord:"+co.getName()+" to value:"+value+" at frame:"+currentFrame);
            }
        }
        jMotionSlider.setValue(currentFrame);
        jTimeTextField.setText(String.valueOf(simmMotionData.getValue("time", currentFrame)));
        ViewDB.getInstance().getModelVisuals(displayer.getModel()).updateModelDisplay(displayer.getModel());
        ViewDB.getInstance().repaintAll();
        sliderModel.setValue(currentFrame);
    }

    private int advanceFrame(int currentFrame) {
        if (currentFrame<=simmMotionData.getNumberOfFrames()-2)
            return currentFrame+1;
        else //restart only if wrap is on
            return (wrapMotion)?0:currentFrame;
    }

    public void stateChanged(ChangeEvent e) {
        // Get frame number from slider (if not adjusting) and set model to it
        if (e.getSource()==jMotionSlider){
            if (!((JSlider)e.getSource()).getValueIsAdjusting()){
                currentFrame = ((JSlider)e.getSource()).getValue();
                applyFrame(currentFrame);
            }
        }
    }
   
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jMotionNameLabel;
    private javax.swing.JSlider jMotionSlider;
    private javax.swing.JButton jPlayButton;
    private javax.swing.JButton jReverseButton;
    private javax.swing.JSpinner jSpeedSpinner;
    private javax.swing.JButton jStopButton;
    private javax.swing.JTextField jTimeTextField;
    private javax.swing.JToggleButton jWrapToggleButton;
    // End of variables declaration//GEN-END:variables
   
}
