/*
 * MotionControlJPanel.java
 *
 * Created on January 12, 2007, 11:28 AM
 */

package org.opensim.motionviewer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.util.Hashtable;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JLabel;
import javax.swing.Timer;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.opensim.motionviewer.MotionEvent.Operation;

/**
 *
 * @author  Ayman
 * The panel for motion playback in main toolbar.
 * The panel will observer MotionsDB so that it can respond to changes in current model, events ...
 */
public class MotionControlJPanel extends javax.swing.JPanel 
        implements ChangeListener,  // For motion slider
                   Observer {       // For MotionsDB
   
   Timer               animationTimer=null;
   SpinnerModel        smodel = new SpinnerNumberModel(1.0, 0.1, 10.0, 0.1);
   boolean             motionLoaded=false;
   MasterMotionModel   masterMotion;
   private int         rangeResolution;
   private int         timerRate = 50;

   private boolean internalTrigger=false;

   /* Old timer callbacks used for advancing each frame... replaced with real time playback
   private class PlayActionListener implements ActionListener {
      public void actionPerformed(ActionEvent evt) {
         masterMotion.advance();
         // Kill self if done and wrapMotion is off
         if (masterMotion.finished(1)){
            animationTimer.stop();
            animationTimer=null;
         }
      }
   }
   private class PlayReverseActionListener implements ActionListener {
      public void actionPerformed(ActionEvent evt) {
          masterMotion.back();
          // Kill self if done and wrapMotion is off
          if (masterMotion.finished(-1)){
             animationTimer.stop();
             animationTimer=null;
          }
      }
   }
   */

   // ActionListener for the timer which is used to play motion forwards/backwards in such a way that
   // advances the model's time based on the real elapsed time (times the factor specified by the smodel spinner)
   private class RealTimePlayActionListener implements ActionListener {
      private boolean firstAction=true;
      private long lastActionTime;
      private int direction;

      public RealTimePlayActionListener(int direction) { this.direction = direction; }

      public void actionPerformed(ActionEvent evt) {
         if(firstAction) {
            firstAction = false;
            lastActionTime = System.currentTimeMillis();
            masterMotion.advanceTime(0);
         } else {
            long currentTime = System.currentTimeMillis();
            double factor = (double)direction*0.001*(double)(((Double)smodel.getValue()).doubleValue());
            masterMotion.advanceTime(factor*(currentTime-lastActionTime));
            lastActionTime = currentTime;
         }

         // Kill self if done and wrapMotion is off
         if (masterMotion.finished(direction)){
            animationTimer.stop();
            animationTimer=null;
         }
      }
   }
   
   /**
    * Creates new form MotionControlJPanel
    */
   public MotionControlJPanel() {
      masterMotion = new MasterMotionModel();   // initialize the object backing the GUI.

      initComponents();
      rangeResolution = jMotionSlider.getMaximum(); // assume resolution was set up as max value of slider in form designer

      masterMotion.addChangeListener(this);
      jMotionSlider.addChangeListener(this);             // listen to changes in the slider itself.
      MotionsDB.getInstance().addObserver(this);

      updatePanelDisplay();
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {
      jReverseButton = new javax.swing.JButton();
      jStopButton = new javax.swing.JButton();
      jPlayButton = new javax.swing.JButton();
      jMotionSlider = new javax.swing.JSlider();
      jLabel2 = new javax.swing.JLabel();
      jTimeTextField = new javax.swing.JTextField();
      jSpeedSpinner = new javax.swing.JSpinner();
      jLabel1 = new javax.swing.JLabel();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jMotionNameLabel = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jWrapToggleButton = new javax.swing.JToggleButton();

      setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
      jReverseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/motionviewer/images/reverse.gif")));
      jReverseButton.setPreferredSize(new java.awt.Dimension(50, 25));
      jReverseButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jPlayReverseButtonActionPerformed(evt);
         }
      });

      jStopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/motionviewer/images/stop.gif")));
      jStopButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jStopButtonActionPerformed(evt);
         }
      });

      jPlayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/motionviewer/images/play.gif")));
      jPlayButton.setMaximumSize(new java.awt.Dimension(25, 25));
      jPlayButton.setMinimumSize(new java.awt.Dimension(25, 25));
      jPlayButton.setPreferredSize(new java.awt.Dimension(25, 25));
      jPlayButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jPlayButtonActionPerformed(evt);
         }
      });

      jMotionSlider.setMajorTickSpacing(1000);
      jMotionSlider.setMaximum(10000);
      jMotionSlider.setMinorTickSpacing(200);
      jMotionSlider.setPaintLabels(true);
      jMotionSlider.setPaintTicks(true);
      jMotionSlider.setPaintTrack(false);
      jMotionSlider.setValue(0);

      jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
      jLabel2.setText("Motion:");

      jTimeTextField.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jTimeTextFieldActionPerformed(evt);
         }
      });
      jTimeTextField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
         public void propertyChange(java.beans.PropertyChangeEvent evt) {
            jTimeTextFieldPropertyChange(evt);
         }
      });
      jTimeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusLost(java.awt.event.FocusEvent evt) {
            jTimeTextFieldFocusLost(evt);
         }
      });

      jSpeedSpinner.setModel(smodel);
      jSpeedSpinner.setToolTipText("animation speed ");

      jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
      jLabel1.setText("rate:");

      jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/motionviewer/images/step.gif")));
      jButton1.setMaximumSize(new java.awt.Dimension(50, 25));
      jButton1.setMinimumSize(new java.awt.Dimension(50, 25));
      jButton1.setPreferredSize(new java.awt.Dimension(50, 25));
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jAdvanceButtonActionPerformed(evt);
         }
      });

      jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/motionviewer/images/reverseStep.gif")));
      jButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jBackButtonActionPerformed(evt);
         }
      });

      jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
      jLabel4.setText("time");

      jWrapToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/motionviewer/images/wrap.gif")));
      jWrapToggleButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jWrapToggleButtonActionPerformed(evt);
         }
      });

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(jLabel2)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jMotionNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel4)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jTimeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jMotionSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 202, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPlayButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jStopButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jReverseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jWrapToggleButton)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel1)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jSpeedSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
               .add(jMotionSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                     .add(jPlayButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(jStopButton)
                     .add(jReverseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(jButton2)
                     .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(jWrapToggleButton)
                     .add(jLabel1)
                     .add(jSpeedSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                  .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                     .add(jLabel2)
                     .add(jLabel4)
                     .add(jMotionNameLabel)
                     .add(jTimeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

   private void jTimeTextFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTimeTextFieldPropertyChange
   // Listen to "value" changes
      handleUserTimeChange();
// TODO add your handling code here:
   }//GEN-LAST:event_jTimeTextFieldPropertyChange
   
   private void jTimeTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTimeTextFieldFocusLost
// TODO add your handling code here:
      handleUserTimeChange();
   }//GEN-LAST:event_jTimeTextFieldFocusLost
   
   private void jTimeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTimeTextFieldActionPerformed
      handleUserTimeChange();
// TODO add your handling code here:
   }//GEN-LAST:event_jTimeTextFieldActionPerformed
   
   private void jBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBackButtonActionPerformed
      if (isMotionLoaded()){
         masterMotion.back();
      }
   }//GEN-LAST:event_jBackButtonActionPerformed
   
   private void jPlayReverseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPlayReverseButtonActionPerformed
      if (animationTimer!=null){
         animationTimer.stop();
         animationTimer=null;
      }
      if (isMotionLoaded() && animationTimer==null){
          if (masterMotion.finished(-1)){
              // reset motion if at end already
              masterMotion.setTime(masterMotion.getEndTime());
          }
         animationTimer = new Timer(timerRate, new RealTimePlayActionListener(-1));
         animationTimer.start();
      }
   }//GEN-LAST:event_jPlayReverseButtonActionPerformed
   
    private void jStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStopButtonActionPerformed
       if (isMotionLoaded() && animationTimer != null){
          animationTimer.stop();
          animationTimer = null;
       }
    }//GEN-LAST:event_jStopButtonActionPerformed
    
    private void jWrapToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jWrapToggleButtonActionPerformed
       
       masterMotion.setWrapMotion(!masterMotion.isWrapMotion());
    }//GEN-LAST:event_jWrapToggleButtonActionPerformed
    
    private void jAdvanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAdvanceButtonActionPerformed
       if (isMotionLoaded()){
          masterMotion.advance();
        }
    }//GEN-LAST:event_jAdvanceButtonActionPerformed
    
    private void jPlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPlayButtonActionPerformed
      if (animationTimer!=null){
         animationTimer.stop();
         animationTimer=null;
      }
      if (isMotionLoaded() && animationTimer==null){
          if (masterMotion.finished(1)){
              // reset motion if at end already
              masterMotion.setTime(masterMotion.getStartTime());
          }
          animationTimer = new Timer(timerRate, new RealTimePlayActionListener(1));
          animationTimer.start();
      }
    }//GEN-LAST:event_jPlayButtonActionPerformed
    
    
    public void stateChanged(ChangeEvent e) 
    {
       if (isMotionLoaded()){
          if (e.getSource().equals(masterMotion) && !internalTrigger){
             internalTrigger=true;
             jMotionSlider.setValue(getSliderValueForTime(masterMotion.getCurrentTime()));
             internalTrigger=false;
             setTimeTextField(masterMotion.getCurrentTime());
          } else if (e.getSource().equals(jMotionSlider) && !internalTrigger){
             internalTrigger=true;
             masterMotion.setTime(getTimeForSliderValue(jMotionSlider.getValue()));
             internalTrigger=false;
             setTimeTextField(masterMotion.getCurrentTime());
          }
       }
    }
    
    public boolean isMotionLoaded() {
       return motionLoaded;
    }
    
    private void handleUserTimeChange() {
       if (isMotionLoaded()){
          //get frame corresponding to enetered time
          double userTime = 0.0;
          try {
             userTime = Double.valueOf(jTimeTextField.getText());
          }catch (NumberFormatException e){
             userTime = 0.0;
          }
          masterMotion.setTime(userTime);
       }
    }

   Hashtable makeLabels(int n, double startTime, double endTime) {
      Hashtable<Integer, JLabel> labels = new Hashtable<Integer, JLabel>(5);
      for(int i=0; i<n; i++){
         double alpha=(double)i/(n-1);
         String label = Double.toString(startTime+alpha*(endTime-startTime));
         if (label.length()>5) label=label.substring(0, 5);
         labels.put((int)(alpha*rangeResolution), new JLabel(label));
      }
      return labels;
   }

   /**
    * update the panel to reflect current motion's name, range, ...etc.
    */
   private void updatePanelDisplay() {
      if (masterMotion==null || masterMotion.getNumMotions()==0){
         jMotionNameLabel.setText("");
         setTimeTextField(0);
         Hashtable labels = makeLabels(5, 0, 1);
         jMotionSlider.setLabelTable(labels);        
      }
      else {
         if (masterMotion.getNumMotions()>=1){
            jMotionNameLabel.setText(masterMotion.getDisplayName());
            setTimeTextField(masterMotion.getStartTime());
            Hashtable labels = makeLabels(5, masterMotion.getStartTime(), masterMotion.getEndTime());
            jMotionSlider.setLabelTable(labels);
         }
      }
   }
   
   // Observable is MotionsDB
   public void update(Observable o, Object arg) {
      // Recover motion info, update toolbar accordingly
      if (o instanceof MotionsDB){
         MotionsDB mdb = (MotionsDB)o;
         if (!(arg instanceof MotionEvent)) // time should be ignored here
             return;
         MotionEvent evt = (MotionEvent)arg;
         if (evt.getOperation() == Operation.Open || evt.getOperation() == Operation.SetCurrent){
            // new motion is loaded or is set current. Update panel display
            motionLoaded = true;   // enable buttons as needed
            masterMotion.add(evt.getModel(), evt.getMotion());
            updatePanelDisplay();
         }
         else if (evt.getOperation() == Operation.Clear){
            motionLoaded = false;
            masterMotion.clear();
            updatePanelDisplay();
         }
         else if (evt.getOperation() == Operation.AddSyncMotion)
         {
            motionLoaded = true;
            masterMotion.addMerge(evt.getModel(), evt.getMotion());
            updatePanelDisplay();
         }
      }
   }
   
   private void setTimeTextField(double time)
   {
      DecimalFormat df = new DecimalFormat("0.000");
      jTimeTextField.setText(df.format(time));
   }

   private int getSliderValueForTime(double time)
   {
      if(masterMotion==null || masterMotion.getStartTime() == masterMotion.getEndTime()) 
         return 0;
      else {
         double alpha = (time-masterMotion.getStartTime())/(masterMotion.getEndTime()-masterMotion.getStartTime());
         return (int)(alpha*rangeResolution);
      }
   }

   private double getTimeForSliderValue(int sliderValue)
   {
      if(masterMotion==null) return 0;
      double alpha = (double)sliderValue/rangeResolution;
      return masterMotion.getStartTime() + alpha * (masterMotion.getEndTime()-masterMotion.getStartTime());
   }
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jMotionNameLabel;
   private javax.swing.JSlider jMotionSlider;
   private javax.swing.JButton jPlayButton;
   private javax.swing.JButton jReverseButton;
   private javax.swing.JSpinner jSpeedSpinner;
   private javax.swing.JButton jStopButton;
   private javax.swing.JTextField jTimeTextField;
   private javax.swing.JToggleButton jWrapToggleButton;
   // End of variables declaration//GEN-END:variables

}
