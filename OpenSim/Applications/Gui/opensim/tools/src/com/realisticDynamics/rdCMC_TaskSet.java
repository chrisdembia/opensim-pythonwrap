/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.realisticDynamics;
import org.opensim.modeling.*;

public class rdCMC_TaskSet extends SetOfTasks {
  private long swigCPtr;

  protected rdCMC_TaskSet(long cPtr, boolean cMemoryOwn) {
    super(cmcJNI.SWIGrdCMC_TaskSetUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(rdCMC_TaskSet obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      cmcJNI.delete_rdCMC_TaskSet(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public rdCMC_TaskSet() {
    this(cmcJNI.new_rdCMC_TaskSet__SWIG_0(), true);
  }

  public rdCMC_TaskSet(String aFileName) {
    this(cmcJNI.new_rdCMC_TaskSet__SWIG_1(aFileName), true);
  }

  public void setModel(Model aModel) {
    cmcJNI.rdCMC_TaskSet_setModel(swigCPtr, Model.getCPtr(aModel));
  }

  public Model getModel() {
    long cPtr = cmcJNI.rdCMC_TaskSet_getModel(swigCPtr);
    return (cPtr == 0) ? null : new Model(cPtr, false);
  }

  public void setParametersBasedOnName() {
    cmcJNI.rdCMC_TaskSet_setParametersBasedOnName(swigCPtr);
  }

  public void setFunctions(SWIGTYPE_p_OpenSim__FunctionSet aFuncSet) {
    cmcJNI.rdCMC_TaskSet_setFunctions(swigCPtr, SWIGTYPE_p_OpenSim__FunctionSet.getCPtr(aFuncSet));
  }

  public void setFunctionsForVelocity(SWIGTYPE_p_OpenSim__FunctionSet aFuncSet) {
    cmcJNI.rdCMC_TaskSet_setFunctionsForVelocity(swigCPtr, SWIGTYPE_p_OpenSim__FunctionSet.getCPtr(aFuncSet));
  }

  public void setFunctionsForAcceleration(SWIGTYPE_p_OpenSim__FunctionSet aFuncSet) {
    cmcJNI.rdCMC_TaskSet_setFunctionsForAcceleration(swigCPtr, SWIGTYPE_p_OpenSim__FunctionSet.getCPtr(aFuncSet));
  }

  public ArrayDouble getTaskPositions(double aT) {
    return new ArrayDouble(cmcJNI.rdCMC_TaskSet_getTaskPositions(swigCPtr, aT), false);
  }

  public ArrayDouble getTaskVelocities(double aT) {
    return new ArrayDouble(cmcJNI.rdCMC_TaskSet_getTaskVelocities(swigCPtr, aT), false);
  }

  public ArrayDouble getTaskAccelerations(double aT) {
    return new ArrayDouble(cmcJNI.rdCMC_TaskSet_getTaskAccelerations(swigCPtr, aT), false);
  }

  public ArrayDouble getPositionGains() {
    return new ArrayDouble(cmcJNI.rdCMC_TaskSet_getPositionGains(swigCPtr), false);
  }

  public ArrayDouble getVelocityGains() {
    return new ArrayDouble(cmcJNI.rdCMC_TaskSet_getVelocityGains(swigCPtr), false);
  }

  public ArrayDouble getAccelerationGains() {
    return new ArrayDouble(cmcJNI.rdCMC_TaskSet_getAccelerationGains(swigCPtr), false);
  }

  public ArrayDouble getPositionErrorsLast() {
    return new ArrayDouble(cmcJNI.rdCMC_TaskSet_getPositionErrorsLast(swigCPtr), false);
  }

  public ArrayDouble getPositionErrors() {
    return new ArrayDouble(cmcJNI.rdCMC_TaskSet_getPositionErrors(swigCPtr), false);
  }

  public ArrayDouble getVelocityErrorsLast() {
    return new ArrayDouble(cmcJNI.rdCMC_TaskSet_getVelocityErrorsLast(swigCPtr), false);
  }

  public ArrayDouble getVelocityErrors() {
    return new ArrayDouble(cmcJNI.rdCMC_TaskSet_getVelocityErrors(swigCPtr), false);
  }

  public ArrayDouble getWeights() {
    return new ArrayDouble(cmcJNI.rdCMC_TaskSet_getWeights(swigCPtr), false);
  }

  public ArrayDouble getDesiredAccelerations() {
    return new ArrayDouble(cmcJNI.rdCMC_TaskSet_getDesiredAccelerations(swigCPtr), false);
  }

  public ArrayDouble getAccelerations() {
    return new ArrayDouble(cmcJNI.rdCMC_TaskSet_getAccelerations(swigCPtr), false);
  }

  public void recordErrorsAsLastErrors() {
    cmcJNI.rdCMC_TaskSet_recordErrorsAsLastErrors(swigCPtr);
  }

  public void computeErrors(double aT) {
    cmcJNI.rdCMC_TaskSet_computeErrors(swigCPtr, aT);
  }

  public void computeDesiredAccelerations(double aT) {
    cmcJNI.rdCMC_TaskSet_computeDesiredAccelerations__SWIG_0(swigCPtr, aT);
  }

  public void computeDesiredAccelerations(double aTCurrent, double aTFuture) {
    cmcJNI.rdCMC_TaskSet_computeDesiredAccelerations__SWIG_1(swigCPtr, aTCurrent, aTFuture);
  }

  public void computeAccelerations() {
    cmcJNI.rdCMC_TaskSet_computeAccelerations(swigCPtr);
  }

}
