/*
 * JPlotterPanel.java
 *
 * Created on April 9, 2007, 1:39 PM
 */

package org.opensim.plotter;

import java.awt.BorderLayout;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.opensim.modeling.ArrayStr;
import org.opensim.modeling.Storage;
import org.opensim.utils.FileUtils;

/**
 *
 * @author  Ayman
 */
public class JPlotterPanel extends javax.swing.JPanel
         implements java.awt.event.ActionListener, 
        java.awt.event.MouseListener, 
        java.awt.event.KeyListener, 
        javax.swing.event.TreeSelectionListener, 
        java.awt.event.InputMethodListener {
   
   private PlotterModel plotterModel = new PlotterModel();
   public enum PlotDataSource {FileSource, AnalysisSource};
   JPlotterQuantitySelectorPopupList xPopup = null;
   JPlotterQuantitySelectorPopupList yPopup = null;
   private PlotDataSource source=PlotDataSource.FileSource;
   String currentCurveTitle="";
   private boolean autoGeneratedCurveTitle=true;
   private boolean autoMinX=true;
   private boolean autoMaxX=true;
   private boolean autoGeneratedPlotTitle=true;
   boolean  validXY=false;
   Vector<TreePath> selectedPathsVector = new Vector<TreePath>(4);   // Cache used to accumulate user selection of the tree
   PlotCurve currentCurve=null;     //used for update
   /**
    * Creates new form JPlotterPanel
    */
   public JPlotterPanel() {
      initComponents();
      jTopChartingPanel.setLayout(new BorderLayout());
      xPopup = new JPlotterQuantitySelectorPopupList(jXQtyTextField, this, true);
      yPopup = new JPlotterQuantitySelectorPopupList(jYQtyTextField, this, false);
      jPlotsTree.addTreeSelectionListener(this);

      jPlotterDeletePlotButton.setEnabled(false);
      jPlotterUpdatePlotButton.setEnabled(false);
      updatePlotterFrameVisibilities();
      // Add in blank figure by default
      jTopChartingPanel.add(plotterModel.getCurrentPlot().getChartPanel());
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {
      sourceButtonGroup = new javax.swing.ButtonGroup();
      jPlotterMenuBar = new javax.swing.JMenuBar();
      jPlotterFileMenu = new javax.swing.JMenu();
      jLoadFileToPlotterMenuItem = new javax.swing.JMenuItem();
      jSplitPane1 = new javax.swing.JSplitPane();
      jTopChartingPanel = new javax.swing.JPanel();
      jPlotControlPanel = new javax.swing.JPanel();
      jPlotNavigationPanel = new javax.swing.JPanel();
      jScrollPane1 = new javax.swing.JScrollPane();
      jPlotsTree = new javax.swing.JTree();
      jPanel1 = new javax.swing.JPanel();
      jPlotterAddPlotButton = new javax.swing.JButton();
      jPlotterUpdatePlotButton = new javax.swing.JButton();
      jPlotterDeletePlotButton = new javax.swing.JButton();
      jPlotSpecPanel = new javax.swing.JPanel();
      jAnalysisSourceRadioButton = new javax.swing.JRadioButton();
      jLabel6 = new javax.swing.JLabel();
      jFileSourceRadioButton = new javax.swing.JRadioButton();
      jLabel2 = new javax.swing.JLabel();
      jCurveNameTextField = new javax.swing.JTextField();
      jPanel9 = new javax.swing.JPanel();
      xQuantityButton = new javax.swing.JButton();
      jXQtyTextField = new javax.swing.JTextField();
      jLabel9 = new javax.swing.JLabel();
      jDomainStartTextField = new javax.swing.JTextField();
      jLabel10 = new javax.swing.JLabel();
      jDomainEndTextField = new javax.swing.JTextField();
      jPanel10 = new javax.swing.JPanel();
      jLabel4 = new javax.swing.JLabel();
      jOffsetTextField = new javax.swing.JTextField();
      jRectifyCheckBox = new javax.swing.JCheckBox();
      jLabel3 = new javax.swing.JLabel();
      jScaleTextField = new javax.swing.JTextField();
      jButton2 = new javax.swing.JButton();
      jYQtyTextField = new javax.swing.JTextField();
      jButton5 = new javax.swing.JButton();
      jLabel7 = new javax.swing.JLabel();
      jBrowse4FileButton = new javax.swing.JButton();
      jPlotTitlePanel = new javax.swing.JPanel();
      jPlotLabelJLabel = new javax.swing.JLabel();
      jPlotNameTextField = new javax.swing.JTextField();

      jPlotterFileMenu.setText("File");
      jPlotterFileMenu.setToolTipText("load into or save data from plotter.");
      jLoadFileToPlotterMenuItem.setText("Load File...");
      jLoadFileToPlotterMenuItem.setToolTipText("File with data to plot");
      jLoadFileToPlotterMenuItem.addActionListener(this);

      jPlotterFileMenu.add(jLoadFileToPlotterMenuItem);

      jPlotterMenuBar.add(jPlotterFileMenu);

      jSplitPane1.setDividerLocation(150);
      jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
      jSplitPane1.setAutoscrolls(true);
      jSplitPane1.setDoubleBuffered(true);
      jSplitPane1.setOneTouchExpandable(true);
      org.jdesktop.layout.GroupLayout jTopChartingPanelLayout = new org.jdesktop.layout.GroupLayout(jTopChartingPanel);
      jTopChartingPanel.setLayout(jTopChartingPanelLayout);
      jTopChartingPanelLayout.setHorizontalGroup(
         jTopChartingPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(0, 657, Short.MAX_VALUE)
      );
      jTopChartingPanelLayout.setVerticalGroup(
         jTopChartingPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(0, 149, Short.MAX_VALUE)
      );
      jSplitPane1.setLeftComponent(jTopChartingPanel);

      jPlotControlPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jPlotNavigationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Plots list"));
      jScrollPane1.setAutoscrolls(true);
      jScrollPane1.setHorizontalScrollBar(null);
      jPlotsTree.setModel(plotterModel.getPlotTreeModel());
      jScrollPane1.setViewportView(jPlotsTree);

      jPlotterAddPlotButton.setText("Add");
      jPlotterAddPlotButton.addActionListener(this);

      jPlotterUpdatePlotButton.setText("Update");
      jPlotterUpdatePlotButton.addActionListener(this);

      jPlotterDeletePlotButton.setText("Delete");
      jPlotterDeletePlotButton.addActionListener(this);

      org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel1Layout.createSequentialGroup()
            .add(jPlotterAddPlotButton)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPlotterUpdatePlotButton)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPlotterDeletePlotButton)
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jPlotterAddPlotButton)
               .add(jPlotterUpdatePlotButton)
               .add(jPlotterDeletePlotButton))
            .add(6, 6, 6))
      );

      org.jdesktop.layout.GroupLayout jPlotNavigationPanelLayout = new org.jdesktop.layout.GroupLayout(jPlotNavigationPanel);
      jPlotNavigationPanel.setLayout(jPlotNavigationPanelLayout);
      jPlotNavigationPanelLayout.setHorizontalGroup(
         jPlotNavigationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, jPlotNavigationPanelLayout.createSequentialGroup()
            .addContainerGap()
            .add(jPlotNavigationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
               .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
               .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
      );
      jPlotNavigationPanelLayout.setVerticalGroup(
         jPlotNavigationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, jPlotNavigationPanelLayout.createSequentialGroup()
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
      );

      jPlotSpecPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Curve add/update"));
      sourceButtonGroup.add(jAnalysisSourceRadioButton);
      jAnalysisSourceRadioButton.setText("Analysis");
      jAnalysisSourceRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jAnalysisSourceRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

      jLabel6.setText("Source");

      sourceButtonGroup.add(jFileSourceRadioButton);
      jFileSourceRadioButton.setSelected(true);
      jFileSourceRadioButton.setText("File");
      jFileSourceRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jFileSourceRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

      jLabel2.setText("Curve Name");

      jCurveNameTextField.setText("Curve label goes here");
      jCurveNameTextField.addActionListener(this);

      jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Domain (X)"));
      xQuantityButton.setText("X-Quantity >");
      xQuantityButton.addKeyListener(this);
      xQuantityButton.addMouseListener(this);

      jLabel9.setText("Start");

      jDomainStartTextField.addActionListener(this);
      jDomainStartTextField.addInputMethodListener(this);
      jDomainStartTextField.addKeyListener(this);

      jLabel10.setText("End");

      jDomainEndTextField.addActionListener(this);

      org.jdesktop.layout.GroupLayout jPanel9Layout = new org.jdesktop.layout.GroupLayout(jPanel9);
      jPanel9.setLayout(jPanel9Layout);
      jPanel9Layout.setHorizontalGroup(
         jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel9Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
               .add(jPanel9Layout.createSequentialGroup()
                  .add(jLabel9)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
               .add(jPanel9Layout.createSequentialGroup()
                  .add(xQuantityButton)
                  .add(18, 18, 18)))
            .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(jPanel9Layout.createSequentialGroup()
                  .add(jDomainStartTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(jLabel10)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(jDomainEndTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 89, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addContainerGap())
               .add(jXQtyTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)))
      );
      jPanel9Layout.setVerticalGroup(
         jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel9Layout.createSequentialGroup()
            .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jXQtyTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(xQuantityButton))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel9)
               .add(jLabel10)
               .add(jDomainStartTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(jDomainEndTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
      );

      jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Range(Y)"));
      jLabel4.setText("Offset");

      jRectifyCheckBox.setText("Rectify");
      jRectifyCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jRectifyCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

      jLabel3.setText("Scale");

      jButton2.setText("Y-Quantity >");
      jButton2.addMouseListener(this);

      jButton5.setText("Filter...");

      jLabel7.setText("Current value  (e.g. model:muscleGroup)");

      org.jdesktop.layout.GroupLayout jPanel10Layout = new org.jdesktop.layout.GroupLayout(jPanel10);
      jPanel10.setLayout(jPanel10Layout);
      jPanel10Layout.setHorizontalGroup(
         jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel10Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(jPanel10Layout.createSequentialGroup()
                  .add(jLabel3)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(jScaleTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .add(13, 13, 13)
                  .add(jLabel4)
                  .add(4, 4, 4)
                  .add(jOffsetTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(jRectifyCheckBox))
               .add(jPanel10Layout.createSequentialGroup()
                  .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                     .add(jButton5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .add(jButton2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .add(17, 17, 17)
                  .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jLabel7)
                     .add(jYQtyTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE))))
            .addContainerGap())
      );
      jPanel10Layout.setVerticalGroup(
         jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel10Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel7)
               .add(jButton5))
            .add(8, 8, 8)
            .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jButton2)
               .add(jYQtyTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel3)
               .add(jScaleTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(jLabel4)
               .add(jOffsetTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(jRectifyCheckBox))
            .add(29, 29, 29))
      );

      jBrowse4FileButton.setText("Browse...");
      jBrowse4FileButton.addActionListener(this);

      org.jdesktop.layout.GroupLayout jPlotSpecPanelLayout = new org.jdesktop.layout.GroupLayout(jPlotSpecPanel);
      jPlotSpecPanel.setLayout(jPlotSpecPanelLayout);
      jPlotSpecPanelLayout.setHorizontalGroup(
         jPlotSpecPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPlotSpecPanelLayout.createSequentialGroup()
            .addContainerGap()
            .add(jPlotSpecPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
               .add(jPlotSpecPanelLayout.createSequentialGroup()
                  .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .add(15, 15, 15))
               .add(jPlotSpecPanelLayout.createSequentialGroup()
                  .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
            .add(jPlotSpecPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(jPlotSpecPanelLayout.createSequentialGroup()
                  .add(jAnalysisSourceRadioButton)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(jFileSourceRadioButton)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(jBrowse4FileButton)
                  .addContainerGap())
               .add(jCurveNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)))
         .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      );
      jPlotSpecPanelLayout.setVerticalGroup(
         jPlotSpecPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPlotSpecPanelLayout.createSequentialGroup()
            .add(jPlotSpecPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jCurveNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(jLabel2))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPlotSpecPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel6)
               .add(jAnalysisSourceRadioButton)
               .add(jFileSourceRadioButton)
               .add(jBrowse4FileButton))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );

      jPlotTitlePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Headers"));
      jPlotLabelJLabel.setText("Plot Title");

      jPlotNameTextField.setText("Plot label goes here");
      jPlotNameTextField.setToolTipText("Figure Title");
      jPlotNameTextField.addActionListener(this);

      org.jdesktop.layout.GroupLayout jPlotTitlePanelLayout = new org.jdesktop.layout.GroupLayout(jPlotTitlePanel);
      jPlotTitlePanel.setLayout(jPlotTitlePanelLayout);
      jPlotTitlePanelLayout.setHorizontalGroup(
         jPlotTitlePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPlotTitlePanelLayout.createSequentialGroup()
            .add(jPlotLabelJLabel)
            .add(22, 22, 22)
            .add(jPlotNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 308, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPlotTitlePanelLayout.setVerticalGroup(
         jPlotTitlePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPlotTitlePanelLayout.createSequentialGroup()
            .add(jPlotTitlePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jPlotLabelJLabel)
               .add(jPlotNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
      );

      org.jdesktop.layout.GroupLayout jPlotControlPanelLayout = new org.jdesktop.layout.GroupLayout(jPlotControlPanel);
      jPlotControlPanel.setLayout(jPlotControlPanelLayout);
      jPlotControlPanelLayout.setHorizontalGroup(
         jPlotControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPlotControlPanelLayout.createSequentialGroup()
            .addContainerGap()
            .add(jPlotControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
               .add(jPlotTitlePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .add(jPlotSpecPanel, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPlotNavigationPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(1, 1, 1))
      );
      jPlotControlPanelLayout.setVerticalGroup(
         jPlotControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPlotControlPanelLayout.createSequentialGroup()
            .addContainerGap()
            .add(jPlotControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
               .add(org.jdesktop.layout.GroupLayout.LEADING, jPlotNavigationPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .add(org.jdesktop.layout.GroupLayout.LEADING, jPlotControlPanelLayout.createSequentialGroup()
                  .add(jPlotTitlePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(jPlotSpecPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 284, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
      );
      jSplitPane1.setRightComponent(jPlotControlPanel);

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
      );
   }

   // Code for dispatching events from components to event handlers.

   public void actionPerformed(java.awt.event.ActionEvent evt) {
      if (evt.getSource() == jLoadFileToPlotterMenuItem) {
         JPlotterPanel.this.jLoadFileToPlotterMenuItemActionPerformed(evt);
      }
      else if (evt.getSource() == jPlotterAddPlotButton) {
         JPlotterPanel.this.jPlotterAddCurveButtonActionPerformed(evt);
      }
      else if (evt.getSource() == jPlotterUpdatePlotButton) {
         JPlotterPanel.this.jPlotterUpdatePlotButtonActionPerformed(evt);
      }
      else if (evt.getSource() == jPlotterDeletePlotButton) {
         JPlotterPanel.this.jPlotterDeletePlotButtonActionPerformed(evt);
      }
      else if (evt.getSource() == jCurveNameTextField) {
         JPlotterPanel.this.jCurveNameTextFieldActionPerformed(evt);
      }
      else if (evt.getSource() == jDomainStartTextField) {
         JPlotterPanel.this.jDomainStartTextFieldActionPerformed(evt);
      }
      else if (evt.getSource() == jDomainEndTextField) {
         JPlotterPanel.this.jDomainEndTextFieldActionPerformed(evt);
      }
      else if (evt.getSource() == jPlotNameTextField) {
         JPlotterPanel.this.jPlotNameTextFieldActionPerformed(evt);
      }
      else if (evt.getSource() == jBrowse4FileButton) {
         JPlotterPanel.this.jBrowse4FileButtonActionPerformed(evt);
      }
   }

   public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
      if (evt.getSource() == jDomainStartTextField) {
         JPlotterPanel.this.jDomainStartTextFieldCaretPositionChanged(evt);
      }
   }

   public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
   }

   public void keyPressed(java.awt.event.KeyEvent evt) {
   }

   public void keyReleased(java.awt.event.KeyEvent evt) {
      if (evt.getSource() == xQuantityButton) {
         JPlotterPanel.this.xQuantityButtonKeyReleased(evt);
      }
   }

   public void keyTyped(java.awt.event.KeyEvent evt) {
      if (evt.getSource() == jDomainStartTextField) {
         JPlotterPanel.this.jDomainStartTextFieldKeyTyped(evt);
      }
   }

   public void mouseClicked(java.awt.event.MouseEvent evt) {
   }

   public void mouseEntered(java.awt.event.MouseEvent evt) {
   }

   public void mouseExited(java.awt.event.MouseEvent evt) {
   }

   public void mousePressed(java.awt.event.MouseEvent evt) {
      if (evt.getSource() == jButton2) {
         JPlotterPanel.this.yQuantityButtonMousePressed(evt);
      }
   }

   public void mouseReleased(java.awt.event.MouseEvent evt) {
      if (evt.getSource() == xQuantityButton) {
         JPlotterPanel.this.xQuantityButtonMouseReleased(evt);
      }
      else if (evt.getSource() == jButton2) {
         JPlotterPanel.this.yQuantityButtonMouseReleased(evt);
      }
   }// </editor-fold>//GEN-END:initComponents

   private void jBrowse4FileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBrowse4FileButtonActionPerformed
      // Browse for Storage or Motion file (for now) and preprocess the file if needed for plotting
      String dataFilename = FileUtils.getInstance().browseForFilename(".sto, .mot", "Files containing data to plot", true);
      if (dataFilename != null){
         getPlotterModel().addFileStorage(new Storage(dataFilename));
      }
// TODO add your handling code here:
   }//GEN-LAST:event_jBrowse4FileButtonActionPerformed

   private void jDomainStartTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jDomainStartTextFieldKeyTyped
      autoMinX=false;
// TODO add your handling code here:
   }//GEN-LAST:event_jDomainStartTextFieldKeyTyped

   private void jDomainStartTextFieldCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jDomainStartTextFieldCaretPositionChanged
      autoMinX=false;
// TODO add your handling code here:
   }//GEN-LAST:event_jDomainStartTextFieldCaretPositionChanged

   private void jDomainEndTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDomainEndTextFieldActionPerformed
// TODO add your handling code here:
      autoMaxX=false;
   }//GEN-LAST:event_jDomainEndTextFieldActionPerformed

   private void jDomainStartTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDomainStartTextFieldActionPerformed
// TODO add your handling code here:
      autoMinX=false;
   }//GEN-LAST:event_jDomainStartTextFieldActionPerformed

   private void jPlotterDeletePlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPlotterDeletePlotButtonActionPerformed
// TODO add your handling code here:
      // Make a cache so that object deletion does not mess up the selections array
      // we're working on.
      Object[] cache = new Object[selectedPathsVector.size()];
      selectedPathsVector.copyInto(cache);
      for(int i=0;i<cache.length; i++){
         TreePath nextPath = (TreePath)cache[i]; // Since the array shrinks!
         Object[] pathObjects = nextPath.getPath();
         int depth =pathObjects.length-1;
         DefaultMutableTreeNode node = (DefaultMutableTreeNode)pathObjects[depth];
         if (node instanceof PlotNode){
            Plot figToDelete = ((Plot)node.getUserObject());
            System.out.println("Delete figure named "+figToDelete.getTitle());
            plotterModel.deletePlot(figToDelete);
         } else if (node instanceof PlotCurveNode){
            PlotCurve cvToDelete = ((PlotCurve)node.getUserObject());
            plotterModel.deleteCurve(cvToDelete);
            System.out.println("Delete Curve named "+cvToDelete.getLegend());
         } else
            System.out.println("Cant delete non-curve non-figure objects");
         
      }
   }//GEN-LAST:event_jPlotterDeletePlotButtonActionPerformed

   private void jPlotterUpdatePlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPlotterUpdatePlotButtonActionPerformed
// TODO add your handling code here:
      // Single Curve is selected, populate the dialog from the Curve and keep a pointer to it for update
      // get Settings and update the curve. The trick is to do it without delete, insert so that colors are kept
         String title =jPlotNameTextField.getText();
      try {
         plotterModel.updateCurve(currentCurve, title, getSettings(), xPopup.getStorageToUse(), xPopup.getColumnToUse(), yPopup.getStorageToUse(), yPopup.getColumnToUse());
         // Find node and make it selected        
         PlotCurveNode cvnode=((PlotTreeModel)plotterModel.getPlotTreeModel()).findCurveNode(currentCurve);
         TreeNode[] nodes = ((PlotTreeModel)plotterModel.getPlotTreeModel()).getPathToRoot(cvnode);
         TreePath path = new TreePath(nodes); 
         jPlotsTree.setSelectionPath(path);
      } catch (PlotterException ex) {
         ex.printStackTrace();
      }
      
   }//GEN-LAST:event_jPlotterUpdatePlotButtonActionPerformed

   private void jPlotNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPlotNameTextFieldActionPerformed
// TODO add your handling code here:
      autoGeneratedPlotTitle=false;
   }//GEN-LAST:event_jPlotNameTextFieldActionPerformed

   private void jCurveNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCurveNameTextFieldActionPerformed
// TODO add your handling code here:
      autoGeneratedCurveTitle=false;   // user modified the text field don't intervene!'
   }//GEN-LAST:event_jCurveNameTextFieldActionPerformed

   private void xQuantityButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_xQuantityButtonMouseReleased
       if(evt.isPopupTrigger()) {
         xPopup.updateList(plotterModel, sourceButtonGroup.getSelection()==jFileSourceRadioButton.getModel());
         xPopup.show(evt.getComponent(), evt.getX(), evt.getY());
       }
// TODO add your handling code here:
   }//GEN-LAST:event_xQuantityButtonMouseReleased

   private void xQuantityButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_xQuantityButtonKeyReleased
// TODO add your handling code here:
   }//GEN-LAST:event_xQuantityButtonKeyReleased

   private void yQuantityButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yQuantityButtonMouseReleased
       if(evt.isPopupTrigger()) {
         yPopup.updateList(plotterModel, sourceButtonGroup.getSelection()==jFileSourceRadioButton.getModel());
         yPopup.show(evt.getComponent(), evt.getX(), evt.getY());
         
       }
// TODO add your handling code here:
   }//GEN-LAST:event_yQuantityButtonMouseReleased

   private void yQuantityButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yQuantityButtonMousePressed
// TODO add your handling code here:
     yQuantityButtonMouseReleased(evt);
   }//GEN-LAST:event_yQuantityButtonMousePressed
   
   private void jPlotterAddCurveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPlotterAddCurveButtonActionPerformed
// TODO add your handling code here:
      String title = jPlotNameTextField.getText();
      PlotCurve plotCurve=null;
      try {
         plotCurve = plotterModel.addCurve(title, getSettings(), xPopup.getStorageToUse(), xPopup.getColumnToUse(), yPopup.getStorageToUse(), yPopup.getColumnToUse());
         // Find node and make it selected        
         PlotCurveNode cvnode=((PlotTreeModel)plotterModel.getPlotTreeModel()).findCurveNode(plotCurve);
         TreeNode[] nodes = ((PlotTreeModel)plotterModel.getPlotTreeModel()).getPathToRoot(cvnode);
         TreePath path = new TreePath(nodes); 
         jPlotsTree.setSelectionPath(path);
         
      } catch (PlotterException ex) {
         // Popup a dialog explaining what went wrong
         JOptionPane.showMessageDialog(this, ex.getMessage());
      }
      this.doLayout();
      repaint();
   }//GEN-LAST:event_jPlotterAddCurveButtonActionPerformed
   
   private void jLoadFileToPlotterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLoadFileToPlotterMenuItemActionPerformed
// TODO add your handling code here:
      // Browse for Storage or Motion file (for now) and preprocess the file if needed for plotting
      String dataFilename = FileUtils.getInstance().browseForFilename(".sto, .mot", "Files containing data to plot", true);
      if (dataFilename != null){
         getPlotterModel().addFileStorage(new Storage(dataFilename));
      }
   }//GEN-LAST:event_jLoadFileToPlotterMenuItemActionPerformed
   

   public PlotterModel getPlotterModel() {
      return plotterModel;
   }

   private PlotCurveSettings getSettings() {
      return new PlotCurveSettings(this);
   }
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JRadioButton jAnalysisSourceRadioButton;
   private javax.swing.JButton jBrowse4FileButton;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton5;
   private javax.swing.JTextField jCurveNameTextField;
   private javax.swing.JTextField jDomainEndTextField;
   private javax.swing.JTextField jDomainStartTextField;
   private javax.swing.JRadioButton jFileSourceRadioButton;
   private javax.swing.JLabel jLabel10;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel9;
   private javax.swing.JMenuItem jLoadFileToPlotterMenuItem;
   private javax.swing.JTextField jOffsetTextField;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel10;
   private javax.swing.JPanel jPanel9;
   private javax.swing.JPanel jPlotControlPanel;
   private javax.swing.JLabel jPlotLabelJLabel;
   private javax.swing.JTextField jPlotNameTextField;
   private javax.swing.JPanel jPlotNavigationPanel;
   private javax.swing.JPanel jPlotSpecPanel;
   private javax.swing.JPanel jPlotTitlePanel;
   private javax.swing.JTree jPlotsTree;
   private javax.swing.JButton jPlotterAddPlotButton;
   private javax.swing.JButton jPlotterDeletePlotButton;
   private javax.swing.JMenu jPlotterFileMenu;
   private javax.swing.JMenuBar jPlotterMenuBar;
   private javax.swing.JButton jPlotterUpdatePlotButton;
   private javax.swing.JCheckBox jRectifyCheckBox;
   private javax.swing.JTextField jScaleTextField;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JSplitPane jSplitPane1;
   private javax.swing.JPanel jTopChartingPanel;
   private javax.swing.JTextField jXQtyTextField;
   private javax.swing.JTextField jYQtyTextField;
   private javax.swing.ButtonGroup sourceButtonGroup;
   private javax.swing.JButton xQuantityButton;
   // End of variables declaration//GEN-END:variables
   
   public String getPlotName()
   {
      return jPlotNameTextField.getText();
   }

   public PlotDataSource getSource() {
      return source;
   }

   public void setSource(PlotDataSource source) {
      this.source = source;
   }

   private void updatePlotTitle() {
      
   }

   private void updateCurveTitle() {
      if (isAutoGeneratedCurveTitle()){
         currentCurveTitle=yPopup.getColumnToUse()+" vs. "+xPopup.getColumnToUse();
         jCurveNameTextField.setText(currentCurveTitle);
      }
   }

   public boolean isAutoGeneratedCurveTitle() {
      return autoGeneratedCurveTitle;
   }

   public void setAutoGeneratedCurveTitle(boolean autoGeneratedCurveTitle) {
      this.autoGeneratedCurveTitle = autoGeneratedCurveTitle;
   }

   public boolean isAutoGeneratedPlotTitle() {
      return autoGeneratedPlotTitle;
   }

   public void setAutoGeneratedPlotTitle(boolean autoGeneratedPlotTitle) {
      this.autoGeneratedPlotTitle = autoGeneratedPlotTitle;
   }

   public String getCurveName() {
      return jCurveNameTextField.getText();
   }
   /**
    * This method is to be invoked after X or Y selection (and probably a few other situations)
    * to update 
    *    - X,Y-selection text-box 
    *    - default curve name if not modified by user
    *    - X-bounds
    */
   public void updatePlotterFrameVisibilities()
   {
      // For now anything in x,y text fields is taken as valid, instead we should do more 
      // validation that quantities indicated do exist.
      boolean validX = !(jXQtyTextField.getText().equals(""));
      if (validX){
         if (autoMinX)
            jDomainStartTextField.setText(String.valueOf(xPopup.getXMin()));
         if (autoMaxX)            
            jDomainEndTextField.setText(String.valueOf(xPopup.getXMax()));       
      }
      boolean validY = !(jYQtyTextField.getText().equals(""));
      validXY = validX && validY;
      if (!validXY){
         // Disable Add
         jPlotterAddPlotButton.setEnabled(false);
         return;
      }
      jPlotterAddPlotButton.setEnabled(true);
      updatePlotTitle();
      updateCurveTitle();
      
   }
   /**
    * TreeSelectionListener implementation
    */
   public void valueChanged(TreeSelectionEvent e) {
      getCurrentTreeSelection(e);
      
      jPlotterDeletePlotButton.setEnabled(false);
      jPlotterUpdatePlotButton.setEnabled(false);
      if (selectedPathsVector.size()==0)
         return;

      // Make sure we have a curve before enabling update
      if (selectedPathsVector.size()==1){
         TreeNode lastNode=(TreeNode)selectedPathsVector.get(0).getLastPathComponent();
         if (lastNode instanceof PlotCurveNode){
            // Populate dialog
            PlotCurve cv = (PlotCurve)((PlotCurveNode)lastNode).getUserObject();
            updateFrameFromCurve(cv);
            jPlotterUpdatePlotButton.setEnabled(true);
            jPlotterDeletePlotButton.setEnabled(true);
         }
      }
      else {   // Enable delete if only curves are selected as we can't delete full plots now'
         boolean allCurves=true;
         for(int i=0; i<selectedPathsVector.size() && allCurves; i++){
            TreeNode lastNode=(TreeNode)selectedPathsVector.get(i).getLastPathComponent();
            allCurves =(lastNode instanceof PlotCurveNode);
         }
         jPlotterDeletePlotButton.setEnabled(allCurves);
      }
   }

   private void getCurrentTreeSelection(TreeSelectionEvent e) {
      TreePath[] selectedPaths = e.getPaths();
      for(int i=0;i<selectedPaths.length;i++){
         if (e.isAddedPath(i)){
            selectedPathsVector.add(selectedPaths[i]);
         }
         else {   //Removed
            selectedPathsVector.remove(selectedPaths[i]);         
         }
      }
      //System.out.println("Current selection size ="+selectedPathsVector.size());
   }
   
   void setMinX(double minX)
   {
      jDomainStartTextField.setText(String.valueOf(minX));
   }
   
   double getMinX()
   {
      return Double.parseDouble(jDomainStartTextField.getText());
   }
   
   void setMaxX(double maxX)
   {
      jDomainEndTextField.setText(String.valueOf(maxX));
   }
   
   double getMaxX()
   {
      return Double.parseDouble(jDomainEndTextField.getText());
   }

   double getScaleFactor() {
      String text=jScaleTextField.getText();
      if (text.compareTo("")==0) return 1.0;
      return Double.parseDouble(text);
   }

   double getOffset() {
      String text=jOffsetTextField.getText();
      if (text.compareTo("")==0) return 0.0;
      return Double.parseDouble(text);
   }

   boolean getRectify() {
      return jRectifyCheckBox.isSelected();
   }

   private void updateFrameFromCurve(PlotCurve cv) {
      // Populate Curve name, filters
      currentCurve=cv;
      jPlotNameTextField.setText(plotterModel.getPlotForCurve(cv).getTitle());
      
      // set title based on figure title
      jCurveNameTextField.setText(cv.getLegend());
      jDomainStartTextField.setText(String.valueOf(cv.getSettings().getXMin()));
      jDomainEndTextField.setText(String.valueOf(cv.getSettings().getXMax()));
      ArrayStr arx = cv.getDomainStorage().getColumnLabels();
      jXQtyTextField.setText(cv.getDomainStorage().getName()+":"+arx.getitem(cv.getDomainStorageIndex()+1));
      ArrayStr ary = cv.getRangeStorage().getColumnLabels();
      jYQtyTextField.setText(cv.getRangeStorage().getName()+":"+arx.getitem(cv.getRangeStorageIndex()+1));
      jRectifyCheckBox.setSelected(false);
      jOffsetTextField.setText("");
      jScaleTextField.setText("");
      Vector<PlotDataFilter> filters = cv.getSettings().getFilters();
      for(int i=0; i<filters.size(); i++){
         if (filters.get(i) instanceof PlotOffsetFilter)
            jOffsetTextField.setText(String.valueOf(((PlotOffsetFilter)filters.get(i)).value));
         if (filters.get(i) instanceof PlotScaleFilter)
            jScaleTextField.setText(String.valueOf(((PlotScaleFilter)filters.get(i)).value));
         if (filters.get(i) instanceof PlotRectifyFilter)
            jRectifyCheckBox.setSelected(true);
         
      }
   }
   
   private void reset()
   {
      currentCurve=null;
      jCurveNameTextField.setText("Curve label goes here");
      jDomainStartTextField.setText("");
      jDomainEndTextField.setText("");
      jRectifyCheckBox.setSelected(false);
      jOffsetTextField.setText("");
      jScaleTextField.setText("");
      jDomainStartTextField.setText("");
      jDomainEndTextField.setText("");
      jXQtyTextField.setText("");
      jYQtyTextField.setText("");
   }

   public void showTimeCurves(String title, String plot, Storage residualsStore, String[] names) {
      PlotCurve plotCurve=null;
      try {
         for(int i=0; i<names.length; i++) {
         plotCurve = plotterModel.addCurve(title, getSettings(), 
                 residualsStore, "time", 
                 residualsStore, names[i]);
         // Find node and make it selected        
         PlotCurveNode cvnode=((PlotTreeModel)plotterModel.getPlotTreeModel()).findCurveNode(plotCurve);
         TreeNode[] nodes = ((PlotTreeModel)plotterModel.getPlotTreeModel()).getPathToRoot(cvnode);
         TreePath path = new TreePath(nodes); 
         jPlotsTree.setSelectionPath(path);
         }
         
      } catch (PlotterException ex) {
         // Popup a dialog explaining what went wrong
         JOptionPane.showMessageDialog(this, ex.getMessage());
      }
     }
   
}
