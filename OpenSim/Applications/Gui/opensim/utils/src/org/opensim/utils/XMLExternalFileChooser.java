package org.opensim.utils;

import java.awt.Component;
import java.awt.Dimension;
import javax.swing.BoxLayout;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.opensim.swingui.FileTextFieldAndChooser;

public class XMLExternalFileChooser extends javax.swing.JPanel {

   public static class Item extends JPanel {
      private JCheckBox writeExternalCheckBox = new JCheckBox();
      private FileTextFieldAndChooser externalFileName = new FileTextFieldAndChooser();
      
      public Item(String name, String defaultExternalFileName) {
         setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
       
         Dimension checkBoxDim = new Dimension(200,20); 
         Dimension fileNameDim = new Dimension(300,20);

         writeExternalCheckBox.setMinimumSize(checkBoxDim);
         writeExternalCheckBox.setPreferredSize(checkBoxDim);
         writeExternalCheckBox.setMaximumSize(checkBoxDim);
         writeExternalCheckBox.setText(name);
         writeExternalCheckBox.setSelected(defaultExternalFileName!=null);
         add(writeExternalCheckBox);
       
         externalFileName.setMinimumSize(fileNameDim);
         externalFileName.setPreferredSize(fileNameDim);
         externalFileName.setMaximumSize(fileNameDim);

         externalFileName.setAssociatedCheckBox(writeExternalCheckBox);
         externalFileName.setTreatEmptyStringAsValid(false);
         externalFileName.setFileName(defaultExternalFileName!=null ? defaultExternalFileName : "", false);

         add(externalFileName);
      }

      public String getName() { return writeExternalCheckBox.getText(); }
      public String getExternalFileName() { return writeExternalCheckBox.isSelected() ? externalFileName.getFileName() : null; }
   }

   // If returns true then was successful (user pressed OK), and sets new values in externalFileNames
   // If returns then user pressed Cancel
   static public boolean promptUser(Item[] items) {
      XMLExternalFileChooser panel = new XMLExternalFileChooser();
      for(int i=0; i<items.length; i++) panel.jPanel1.add(items[i]);
      DialogDescriptor dlg = new DialogDescriptor(panel, "Choose external references in XML file");
      Object answer = DialogDisplayer.getDefault().notify(dlg);
      return answer==NotifyDescriptor.OK_OPTION;
   }

   static public boolean promptUser(String[] names, String[] externalFileNames) {
      assert(names.length == externalFileNames.length);
      XMLExternalFileChooser panel = new XMLExternalFileChooser();
      for(int i=0; i<names.length; i++) panel.addItem(names[i], externalFileNames[i]);
      DialogDescriptor dlg = new DialogDescriptor(panel, "Choose external references in XML file");
      Object answer = DialogDisplayer.getDefault().notify(dlg);
      if(answer==NotifyDescriptor.OK_OPTION) for(int i=0; i<names.length; i++) externalFileNames[i] = panel.getItemExternalFileName(i);
      return answer==NotifyDescriptor.OK_OPTION;
   }

   public XMLExternalFileChooser() {
      initComponents();
   }

   public void addItem(String name, String defaultExternalFileName) {
      jPanel1.add(new XMLExternalFileChooser.Item(name, defaultExternalFileName));
   }

   public String getItemExternalFileName(int i) {
      return ((XMLExternalFileChooser.Item)jPanel1.getComponent(i)).getExternalFileName();
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {
      jTextArea1 = new javax.swing.JTextArea();
      jPanel1 = new javax.swing.JPanel();
      jCheckBox1 = new javax.swing.JCheckBox();

      jTextArea1.setColumns(20);
      jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 11));
      jTextArea1.setLineWrap(true);
      jTextArea1.setRows(5);
      jTextArea1.setText("The settings below can be optionally written to external files, allowing multiple trials to share the same settings.\nSelect which of the following you would like written to external files, and specify their file names.");
      jTextArea1.setWrapStyleWord(true);
      jTextArea1.setOpaque(false);

      jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      jCheckBox1.setText("Use relative paths");
      jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));
      jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jCheckBox1ActionPerformed(evt);
         }
      });

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
               .add(jTextArea1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
               .add(jCheckBox1))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(jTextArea1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 257, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jCheckBox1)
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

   private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
      System.out.println("Action event "+evt);
   }//GEN-LAST:event_jCheckBox1ActionPerformed
   
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JCheckBox jCheckBox1;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JTextArea jTextArea1;
   // End of variables declaration//GEN-END:variables
   
}
