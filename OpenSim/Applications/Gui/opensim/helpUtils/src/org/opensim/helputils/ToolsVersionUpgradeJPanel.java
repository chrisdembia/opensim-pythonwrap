/*
 * Copyright (c)  2005-2011, Stanford University
 * Use of the OpenSim software in source form is permitted provided that the following
 * conditions are met:
 * 	1. The software is used only for non-commercial research and education. It may not
 *     be used in relation to any commercial activity.
 * 	2. The software is not distributed or redistributed.  Software distribution is allowed 
 *     only through https://simtk.org/home/opensim.
 * 	3. Use of the OpenSim software or derivatives must be acknowledged in all publications,
 *      presentations, or documents describing work in which OpenSim or derivatives are used.
 * 	4. Credits to developers may not be removed from executables
 *     created from modifications of the source.
 * 	5. Modifications of source code must retain the above copyright notice, this list of
 *     conditions and the following disclaimer. 
 * 
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 *  SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 *  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 *  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 *  OR BUSINESS INTERRUPTION) OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * ToolsVersionUpgradeJPanel.java
 *
 * Created on July 21, 2007, 9:37 AM
 */

package org.opensim.helputils;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JCheckBox;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.opensim.swingui.FileTextFieldAndChooser;
import org.opensim.utils.FileUtils;

/**
 *
 * @author  Ayman
 */
public class ToolsVersionUpgradeJPanel extends javax.swing.JPanel 
        implements ChangeListener{
    
    private String inputFileName="";
    private String outputFileName="";
    private boolean writeDefaults = false;

    private boolean markInDegrees=false;
    /**
     * Creates new form ToolsVersionUpgradeJPanel
     */
    public ToolsVersionUpgradeJPanel() {
        initComponents();
        oldVersionfileTextFieldAndChooser.setExtensionsAndDescription(".xml,.osim,.sto", "OpenSim model, setup or storage file");
        oldVersionfileTextFieldAndChooser.setCheckIfFileExists(true);
        oldVersionfileTextFieldAndChooser.setTreatEmptyStringAsValid(false);
        oldVersionfileTextFieldAndChooser.addChangeListener(this);
        oldVersionfileTextFieldAndChooser.setFileName("");
        newVersionfileTextFieldAndChooser.setExtensionsAndDescription(".xml,.osim,.sto", "Updated OpenSim file");
        newVersionfileTextFieldAndChooser.setSaveMode(true);
        newVersionfileTextFieldAndChooser.setTreatEmptyStringAsValid(false);
        newVersionfileTextFieldAndChooser.addChangeListener(this);
        newVersionfileTextFieldAndChooser.setFileName("");
        updateBasedOnExtension("");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jWriteDefaultsCheckBox = new javax.swing.JCheckBox();
        angleUnitsButtonGroup = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        newVersionfileTextFieldAndChooser = new org.opensim.swingui.FileTextFieldAndChooser();
        oldVersionfileTextFieldAndChooser = new org.opensim.swingui.FileTextFieldAndChooser();
        jLabel4 = new javax.swing.JLabel();
        jMarkFileInDegreesCheckBox = new javax.swing.JCheckBox();

        jWriteDefaultsCheckBox.setSelected(true);
        jWriteDefaultsCheckBox.setText("Write \"defaults\" section (if apprpriate)");
        jWriteDefaultsCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jWriteDefaultsCheckBox.setEnabled(false);
        jWriteDefaultsCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jWriteDefaultsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jWriteDefaultsCheckBoxActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jLabel3.setText("Updated file");

        newVersionfileTextFieldAndChooser.setToolTipText("location of .jnt file");
        newVersionfileTextFieldAndChooser.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                newVersionfileTextFieldAndChooserStateChanged(evt);
            }
        });

        oldVersionfileTextFieldAndChooser.setToolTipText("location of .jnt file");
        oldVersionfileTextFieldAndChooser.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                oldVersionfileTextFieldAndChooserStateChanged(evt);
            }
        });

        jLabel4.setText("Old version file");

        jMarkFileInDegreesCheckBox.setText("Mark file as in degrees");
        jMarkFileInDegreesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jMarkFileInDegreesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jMarkFileInDegreesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMarkFileInDegreesCheckBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(218, 218, 218)
                        .add(jMarkFileInDegreesCheckBox))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(jLabel4))
                        .add(11, 11, 11)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(oldVersionfileTextFieldAndChooser, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                            .add(newVersionfileTextFieldAndChooser, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel4))
                    .add(oldVersionfileTextFieldAndChooser, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel3)
                    .add(newVersionfileTextFieldAndChooser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(15, 15, 15)
                .add(jMarkFileInDegreesCheckBox)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newVersionfileTextFieldAndChooserStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_newVersionfileTextFieldAndChooserStateChanged
// TODO add your handling code here:
        outputFileName = newVersionfileTextFieldAndChooser.getFileName();        
    }//GEN-LAST:event_newVersionfileTextFieldAndChooserStateChanged

    private void jMarkFileInDegreesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMarkFileInDegreesCheckBoxActionPerformed
// TODO add your handling code here:
       setMarkInDegrees(jMarkFileInDegreesCheckBox.isSelected());
    }//GEN-LAST:event_jMarkFileInDegreesCheckBoxActionPerformed

    private void oldVersionfileTextFieldAndChooserStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_oldVersionfileTextFieldAndChooserStateChanged
// TODO add your handling code here:
        inputFileName = oldVersionfileTextFieldAndChooser.getFileName();
        updateBasedOnExtension(getExtension());
    }//GEN-LAST:event_oldVersionfileTextFieldAndChooserStateChanged

    private void jWriteDefaultsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jWriteDefaultsCheckBoxActionPerformed
// TODO add your handling code here:
      JCheckBox defaultsCheckbox = (JCheckBox)evt.getSource();
      writeDefaults = defaultsCheckbox.isSelected();
    }//GEN-LAST:event_jWriteDefaultsCheckBoxActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup angleUnitsButtonGroup;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JCheckBox jMarkFileInDegreesCheckBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox jWriteDefaultsCheckBox;
    private org.opensim.swingui.FileTextFieldAndChooser newVersionfileTextFieldAndChooser;
    private org.opensim.swingui.FileTextFieldAndChooser oldVersionfileTextFieldAndChooser;
    // End of variables declaration//GEN-END:variables
    String getOldFilename()
    {
       String osimfile = oldVersionfileTextFieldAndChooser.getFileName();
        if (osimfile==null || osimfile.length()==0)
           return null;
       // Appennd ".osim if not there"
       boolean validFile = (osimfile.endsWith(".osim")||osimfile.endsWith(".xml")||osimfile.endsWith(".sto"));
       oldVersionfileTextFieldAndChooser.setFileIsValid(validFile);
       if (validFile) updateBasedOnExtension(getExtension());
        return osimfile;
    }

   public void stateChanged(ChangeEvent e) {
      // Listen to file name change
      Object obj = e.getSource();
      if (obj instanceof FileTextFieldAndChooser){
         if (obj.equals(oldVersionfileTextFieldAndChooser)){
            // If a non empty string is available in the jOpenSimFilenameTextField try to use it, otherwsie makeup one.
            String oldFilename= getOldFilename();
            if (oldFilename==null || !oldVersionfileTextFieldAndChooser.getFileIsValid()) return;
            inputFileName = oldFilename;
            // Here we have a real jnt file, make up a name for the .osim file if none specified
            outputFileName = oldFilename;
            // Here we know we have a valid name, show the name as default
            newVersionfileTextFieldAndChooser.setFileName(outputFileName);

            newVersionfileTextFieldAndChooser.setFileFilter(FileUtils.getFileFilter(getExtension(), "Output file"));
         }
      }
   }

   ActionListener getActionListener() {
      return new ActionListener(){
         public void actionPerformed(ActionEvent e) {
            Object sourceButton= e.getSource();
            int x=0;
          }
         
      };
   }

    public String getInputFileName() {
        return inputFileName;
    }

    public String getOutputFileName() {
        return outputFileName;
    }

    public boolean isWriteDefaults() {
        return writeDefaults;
    }

    public boolean isMarkInDegrees() {
        return markInDegrees;
    }

    public void setMarkInDegrees(boolean markInDegrees) {
        this.markInDegrees = markInDegrees;
    }
    String getExtension()
    {
        String extension=".*";
        int lastDotLocation  = inputFileName.lastIndexOf(".");
        if (lastDotLocation!=-1)
            extension = inputFileName.substring(lastDotLocation);
        return extension;
    }

    private void updateBasedOnExtension(String extension) {
        jMarkFileInDegreesCheckBox.setEnabled(false);
        jWriteDefaultsCheckBox.setEnabled(false);
        if (extension.toLowerCase().equals(".sto")){
            jMarkFileInDegreesCheckBox.setEnabled(true);
        }
        else if(extension.toLowerCase().equals(".xml") || extension.toLowerCase().equals(".osim")){
            jWriteDefaultsCheckBox.setEnabled(true);            
        }
    }
}
