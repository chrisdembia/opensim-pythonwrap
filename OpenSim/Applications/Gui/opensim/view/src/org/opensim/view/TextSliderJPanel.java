/*
 * Copyright (c)  2005-2008, Stanford University
 * Use of the OpenSim software in source form is permitted provided that the following
 * conditions are met:
 * 	1. The software is used only for non-commercial research and education. It may not
 *     be used in relation to any commercial activity.
 * 	2. The software is not distributed or redistributed.  Software distribution is allowed 
 *     only through https://simtk.org/home/opensim.
 * 	3. Use of the OpenSim software or derivatives must be acknowledged in all publications,
 *      presentations, or documents describing work in which OpenSim or derivatives are used.
 * 	4. Credits to developers may not be removed from executables
 *     created from modifications of the source.
 * 	5. Modifications of source code must retain the above copyright notice, this list of
 *     conditions and the following disclaimer. 
 * 
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 *  SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 *  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 *  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 *  OR BUSINESS INTERRUPTION) OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 *  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * TextSliderJPanel.java
 *
 * Created on November 28, 2006, 1:34 PM
 */

package org.opensim.view;

import javax.swing.DefaultBoundedRangeModel;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author  Ayman
 *
 * A slider with a model and a text field that supports:
 * 1. Regular slider use that updates the text field with the value.
 * 2. Setting the value directly from the text field (potential problem is if users type in
 *      an out of range value but this can be handled with a dialog). Default behavior is 
 *      to have slider stuck on one end without error indication but we should change that if needed.
 */
public class TextSliderJPanel extends javax.swing.JPanel implements ChangeListener {
    
    private DoubleRangeModel sliderModel;
    private double accurateValue;   // Value set by user directly
    private int textMaxLength=5;
    // A flag indicating if the value is really from Slider
    // if true then sliderModel.getValue() -> transform should be used
    // otherwise accurateValue should be used.
    private boolean fromSlider=false;   
    
    /** Creates new form TextSliderJPanel */
    public TextSliderJPanel() {
        initComponents();
        getJXSlider().addChangeListener(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {
      jXTextField = new javax.swing.JTextField();
      jXSlider = new javax.swing.JSlider();

      jXTextField.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jXTextFieldActionPerformed(evt);
         }
      });
      jXTextField.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusLost(java.awt.event.FocusEvent evt) {
            jXTextFieldFocusLost(evt);
         }
      });

      jXSlider.setMajorTickSpacing(20);
      jXSlider.setMinorTickSpacing(10);
      jXSlider.setPaintTicks(true);

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .add(jXTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jXSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jXSlider, 0, 0, Short.MAX_VALUE)
         .add(jXTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
      );
   }// </editor-fold>//GEN-END:initComponents

    private void jXTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jXTextFieldFocusLost
        JTextField src = (JTextField) evt.getSource();
        updateValueFromTextField(src);
// TODO add your handling code here:
    }//GEN-LAST:event_jXTextFieldFocusLost
    /**
     * Common place to update the actual value maintained by the Slider and its Model when 
     * Editing of the text field is finished.
     */
    private void updateValueFromTextField(final JTextField src) throws NumberFormatException {
        setFromSlider(false);
        accurateValue = Double.parseDouble(src.getText());
        getJXSlider().removeChangeListener(this);
        sliderModel.setDValue(accurateValue);
        getJXSlider().addChangeListener(this);
    }

    private void jXTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXTextFieldActionPerformed
// TODO add your handling code here:
        JTextField src = (JTextField) evt.getSource();
        updateValueFromTextField(src);
        
    }//GEN-LAST:event_jXTextFieldActionPerformed

    public boolean isFromSlider() {
        return fromSlider;
    }

    public void setFromSlider(boolean fromSlider) {
        this.fromSlider = fromSlider;
    }
    
    public void setRange(double d, double d0) {
        sliderModel = new DoubleRangeModel(d, d0);
        getJXSlider().setModel(sliderModel);        
    }
    /**
     * Set current value from text field. May not correspond to a tickmark.
     */
    void setInitialValue(double d)
    {
        // Make the slider match d
        // Remove the listener first so that the text is not updated incorrectly
        getJXSlider().removeChangeListener(this);
        sliderModel.setDValue(d);
        setFormattedText(d);
        accurateValue = d;
        getJXSlider().addChangeListener(this);
    }

     public double getTheValue()
    {
        // Make the slider match d
         if (isFromSlider())
             return ((DoubleRangeModel)getJXSlider().getModel()).getDValue();
         else
             return accurateValue;
    }

     public void stateChanged(ChangeEvent e) {
        if (this.getJXSlider() != e.getSource())
            return;
        setFormattedText(sliderModel.getDValue());
        setFromSlider(true);
    }
    /**
     * A change listener for the panel. This listens to changes in slider only.
     * Changes in text field should cause changes in slider and so should be 
     * caught too?
     */
    public void addChangeListener(ChangeListener l) {
        this.getJXSlider().addChangeListener(l);
    }
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JSlider jXSlider;
   private javax.swing.JTextField jXTextField;
   // End of variables declaration//GEN-END:variables
   /**
     * A class representing the model for a Slider that ranges over double 
     * values rather than integers 
     */
    class DoubleRangeModel extends DefaultBoundedRangeModel
    {
        private double dMin, dMax;    
        
        public DoubleRangeModel(double d, double d0) {
           dMin =((double)((int)(d*10000)))/10000;    
           dMax= ((double)((int)(d0*10000)))/10000;
        }
        
        public void setDValue(double n) {
            
            super.setValue((int)((n-dMin)/(dMax-dMin)*100));
        }

        public boolean getValueIsAdjusting() {
            boolean retValue;
            retValue = super.getValueIsAdjusting();
            setFromSlider(true);
            return retValue;
        }

        public double getDValue() {
            int retValue;
            
            retValue = super.getValue();
            double dValue = ((double)retValue)/100.0*(dMax-dMin)+dMin;
            // Truncate to 2 significant digits, though should be a better way
            //return ((int)(dValue*100.))/100.0;
            return dValue;
        }
     }

    public javax.swing.JSlider getJXSlider() {
        return jXSlider;
    }

    private void setFormattedText(double d) {
        String dString=String.valueOf(d);
        if (dString.length()>textMaxLength)
            jXTextField.setText(dString.substring(0,textMaxLength));
        else
            jXTextField.setText(dString);
    }

    public void setTextMaxLength(int textMaxLength) {
        this.textMaxLength = textMaxLength;
    }
}

