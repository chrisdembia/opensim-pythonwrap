/*
 * EditPreferencesJPanel.java
 *
 * Created on February 13, 2007, 4:32 PM
 */

package org.opensim.view.actions;

import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.opensim.utils.TheApp;

/**
 *
 * @author  Ayman. Edit user preferences. So far no validation is done on the type 
 * and/or content of what the user types, and cancel doesn't function.
 *
 * @todo: 1. Assert type correctness (hard because types are not maintained by the backing Preferences object
 *        2. Provide type specific editors so that FileBrowser, ColorChooser etc. can be used.
 */
public class EditPreferencesJPanel extends javax.swing.JPanel {
   
   DefaultTableModel preferencesTableModelInstance;
   /** Creates new form EditPreferencesJPanel */
   public EditPreferencesJPanel() throws BackingStoreException {
      initComponents();
      initContent();
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {
      jScrollPane1 = new javax.swing.JScrollPane();
      jTable1 = new javax.swing.JTable();

      jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("User Preferences"));
      jTable1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
      jTable1.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {

         },
         new String [] {
            "Option", "Value"
         }
      ) {
         Class[] types = new Class [] {
            java.lang.String.class, java.lang.String.class
         };
         boolean[] canEdit = new boolean [] {
            false, true
         };

         public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
         }

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
         }
      });
      jScrollPane1.setViewportView(jTable1);

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

   private void initContent() throws BackingStoreException {
      // Get preferences from TheApp instance and display them
      String[] options = Preferences.userNodeForPackage(TheApp.class).keys();
      for(int i=0; i< options.length; i++){
         ((DefaultTableModel)jTable1.getModel()).addRow(
                 new Object[]{
                        options[i], 
                        Preferences.userNodeForPackage(TheApp.class).get(options[i], "")});         
      }
      
   }
   
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JTable jTable1;
   // End of variables declaration//GEN-END:variables
   
   
   public void apply()
   {
      TableModel data = jTable1.getModel();
      // Cycle thru and set preferences 
      for(int i=0; i< data.getRowCount(); i++){
         String key = (String)data.getValueAt(i, 0);
         String value = (String)data.getValueAt(i, 1);
           Preferences.userNodeForPackage(TheApp.class).put(key, value);         
      }
   }
   
}
