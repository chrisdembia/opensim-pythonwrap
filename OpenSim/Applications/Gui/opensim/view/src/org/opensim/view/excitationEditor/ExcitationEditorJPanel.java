/*
 * ExcitationEditorJPanel.java
 *
 * Created on January 29, 2008, 1:43 PM
 */

package org.opensim.view.excitationEditor;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Frame;
import java.awt.Shape;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.IntervalXYDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.opensim.modeling.ArrayStr;
import org.opensim.modeling.Control;
import org.opensim.modeling.ControlLinear;
import org.opensim.modeling.ControlLinearNode;
import org.opensim.modeling.ControlSet;
import org.opensim.modeling.SetControlNodes;
import org.opensim.utils.DialogUtils;
import org.opensim.utils.OpenSimDialog;
import org.opensim.view.functionEditor.FunctionPanel;
import org.opensim.view.functionEditor.FunctionXYSeries;

/**
 *
 * @author  Ayman
 */
public class ExcitationEditorJPanel extends javax.swing.JPanel implements TreeSelectionListener {
    
    ControlSet controlSet;
    ControlSet backupControlSet;
    JFrame frame;
    ExcitationTreeModel treeModel;
    Vector<TreePath> selectedPathsVector = new Vector<TreePath>(4);   // Cache used to accumulate user selection of the tree
    boolean somethingSelected=false;
    ExcitationsGridJPanel excitationGridPanel = new ExcitationsGridJPanel();
    /** Creates new form ExcitationEditorJPanel */
    public ExcitationEditorJPanel(JFrame owner) {
        frame = owner;
        DefaultMutableTreeNode root=new DefaultMutableTreeNode("Excitation columns");
        treeModel = new ExcitationTreeModel(root);
        initComponents();
        root.setUserObject(excitationGridPanel);
        jExcitationsTree.addTreeSelectionListener(this);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jSplitPane1 = new javax.swing.JSplitPane();
        jLeftPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jExcitationsTree = new javax.swing.JTree();
        jLayoutControlPanel = new javax.swing.JPanel();
        jMoveUpButton = new javax.swing.JButton();
        jMoveDownButton = new javax.swing.JButton();
        jInsertButton = new javax.swing.JButton();
        jDeleteButton = new javax.swing.JButton();
        jRightPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jValue2ApplyTextField = new javax.swing.JTextField();
        jApplyValueToSelectedButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jBackupAllButton = new javax.swing.JButton();
        jRestoreAllButton = new javax.swing.JButton();
        jRemoveNodesButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jExScrollPane = new javax.swing.JScrollPane();

        jButton5.setText("Apply");
        jLabel1.setText("Set to");
        jButton8.setText("Advanced...");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(200, 200, 200)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(372, Short.MAX_VALUE))
        );

        setName("Excitation Editor");
        jSplitPane1.setDividerSize(7);
        jSplitPane1.setOneTouchExpandable(true);
        jLeftPanel.setLayout(new java.awt.BorderLayout());

        jExcitationsTree.setDragEnabled(true);
        jExcitationsTree.setModel(treeModel);
        jExcitationsTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jExcitationsTreeMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jExcitationsTreeMouseReleased(evt);
            }
        });

        jScrollPane1.setViewportView(jExcitationsTree);

        jLeftPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jMoveUpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/view/icons/upArrow.png")));
        jMoveUpButton.setBorderPainted(false);
        jMoveUpButton.setContentAreaFilled(false);
        jMoveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMoveUpButtonActionPerformed(evt);
            }
        });

        jMoveDownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/view/icons/downArrow.png")));
        jMoveDownButton.setBorderPainted(false);
        jMoveDownButton.setContentAreaFilled(false);
        jMoveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMoveDownButtonActionPerformed(evt);
            }
        });

        jInsertButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/view/icons/add.png")));
        jInsertButton.setBorderPainted(false);
        jInsertButton.setContentAreaFilled(false);

        jDeleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/view/icons/delete.png")));
        jDeleteButton.setBorderPainted(false);
        jDeleteButton.setContentAreaFilled(false);
        jDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jLayoutControlPanelLayout = new org.jdesktop.layout.GroupLayout(jLayoutControlPanel);
        jLayoutControlPanel.setLayout(jLayoutControlPanelLayout);
        jLayoutControlPanelLayout.setHorizontalGroup(
            jLayoutControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jLayoutControlPanelLayout.createSequentialGroup()
                .add(jMoveUpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jMoveDownButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jInsertButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jDeleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayoutControlPanelLayout.setVerticalGroup(
            jLayoutControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jLayoutControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jMoveUpButton)
                .add(jMoveDownButton)
                .add(jInsertButton)
                .add(jDeleteButton))
        );
        jLeftPanel.add(jLayoutControlPanel, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setLeftComponent(jLeftPanel);

        jRightPanel.setLayout(new java.awt.BorderLayout());

        jLabel2.setText("Set selected to");

        jApplyValueToSelectedButton.setText("Apply");
        jApplyValueToSelectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jApplyValueToSelectedButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Set type to");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jBackupAllButton.setText("Backup");

        jRestoreAllButton.setText("Restore");

        jRemoveNodesButton.setText("Remove Selected");
        jRemoveNodesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRemoveNodesButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jLabel3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jValue2ApplyTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jApplyValueToSelectedButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(jRemoveNodesButton))
                            .add(jComboBox1, 0, 259, Short.MAX_VALUE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jBackupAllButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 207, Short.MAX_VALUE)
                        .add(jRestoreAllButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jValue2ApplyTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jApplyValueToSelectedButton)
                    .add(jRemoveNodesButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 22, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jBackupAllButton)
                    .add(jRestoreAllButton)))
        );
        jTabbedPane1.addTab("Multi-Edit", jPanel1);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 355, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 96, Short.MAX_VALUE)
        );
        jTabbedPane1.addTab("Advanced", jPanel2);

        jRightPanel.add(jTabbedPane1, java.awt.BorderLayout.SOUTH);

        jExScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jExScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jRightPanel.add(jExScrollPane, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jRightPanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jRemoveNodesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRemoveNodesButtonActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jRemoveNodesButtonActionPerformed

    private void jExcitationsTreeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jExcitationsTreeMouseReleased
// TODO add your handling code here:
       if (evt.isPopupTrigger())
        invokeTreePopupIfNeeded(evt.getX(), evt.getY());

    }//GEN-LAST:event_jExcitationsTreeMouseReleased

    private void jExcitationsTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jExcitationsTreeMousePressed
       if (evt.isPopupTrigger())
        invokeTreePopupIfNeeded(evt.getX(), evt.getY());
// TODO add your handling code here:
    }//GEN-LAST:event_jExcitationsTreeMousePressed

    private void jApplyValueToSelectedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jApplyValueToSelectedButtonActionPerformed
// TODO add your handling code here:
        // Cycle thru all excitation panels and apply operation
        String valueString=jValue2ApplyTextField.getText();
        double valueDouble = Double.valueOf(valueString);
        excitationGridPanel.applyValueToSelectedNodes(valueDouble);
    }//GEN-LAST:event_jApplyValueToSelectedButtonActionPerformed

    private void jDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteButtonActionPerformed
// TODO add your handling code here:
         if (somethingSelected){
            // Cache nodes to delete separately since deletion of nodes causes the current array of selection to change on us
            Vector<TreeNode> pendingNodesVector=new Vector<TreeNode>(4);
            for(int i=0; i< selectedPathsVector.size(); i++){
                TreePath nextPath=selectedPathsVector.get(i);
                TreeNode lastNode=(TreeNode)nextPath.getLastPathComponent();
                ExcitationObject eo = (ExcitationObject) ((DefaultMutableTreeNode)lastNode).getUserObject();
                if (eo != null){
                    pendingNodesVector.add(lastNode);
                }
            }
             for(int i=0; i< pendingNodesVector.size(); i++){
                TreeNode lastNode=(TreeNode)pendingNodesVector.get(i);  
                int idx = treeModel.getIndexOfChild(lastNode.getParent(),lastNode);
                assert(idx!=-1);
                excitationGridPanel.removeFunction(idx, 0);
                treeModel.removeNodeFromParent((MutableTreeNode) lastNode);
            }
            //frame.pack();
         }       
    }//GEN-LAST:event_jDeleteButtonActionPerformed

    private void jMoveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMoveDownButtonActionPerformed
        if (somethingSelected){
            // 
            Vector<TreeNode> pendingNodesVector=new Vector<TreeNode>(4);
            for(int i=0; i< selectedPathsVector.size(); i++){
                TreePath nextPath=selectedPathsVector.get(i);
                TreeNode lastNode=(TreeNode)nextPath.getLastPathComponent();
                ExcitationObject eo = (ExcitationObject) ((DefaultMutableTreeNode)lastNode).getUserObject();
                if (eo != null){
                    pendingNodesVector.add(lastNode);
                }
            }
            // For each column, find selected entries, sort top to bottom and move one step up
            DefaultMutableTreeNode root  = (DefaultMutableTreeNode) treeModel.getRoot();
            for(int i=0; i<root.getChildCount(); i++){
                // get Column's node
                DefaultMutableTreeNode columnNode = (DefaultMutableTreeNode) treeModel.getChild(root, i);
                ArrayList<Integer> selectedIdices = new ArrayList<Integer>();
                for(int j=0; j<columnNode.getChildCount(); j++){
                    DefaultMutableTreeNode exciationNode = (DefaultMutableTreeNode) treeModel.getChild(columnNode, j);
                    if (pendingNodesVector.contains(exciationNode)) 
                        selectedIdices.add(new Integer(j));
                }
                if (selectedIdices.size()==0)   // Nothing to move up
                    continue;
                Collections.sort(selectedIdices);
                // Skip contiguous list starting at last child;
                int lastAllowedNode = columnNode.getChildCount()-1;
                for(int k=selectedIdices.size()-1; k>=0; k--){
                    if (selectedIdices.get(k).intValue()==lastAllowedNode){
                        lastAllowedNode--;
                        continue;
                    }
                    // An index that can be moved up
                    int currentPosition = selectedIdices.get(k).intValue();
                    if (currentPosition==columnNode.getChildCount()-1) continue;
                    TreeNode nodeToMove =  columnNode.getChildAt(currentPosition+1);
                    treeModel.removeNodeFromParent((MutableTreeNode)nodeToMove);
                    treeModel.insertNodeInto((MutableTreeNode) nodeToMove, (MutableTreeNode) columnNode, currentPosition);
                    excitationGridPanel.exchangePlots(currentPosition, currentPosition+1, 0);
               }
            }
             for(int i=0; i<selectedPathsVector.size(); i++){
                TreePath nextPath=selectedPathsVector.get(i);
               // Keep selected in sync.
                jExcitationsTree.addSelectionPath(nextPath);
            }
            //frame.pack();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_jMoveDownButtonActionPerformed

    private void jMoveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMoveUpButtonActionPerformed
// TODO add your handling code here:
        if (somethingSelected){
            // move node dn in parent unless last node.
            //System.out.println("Size="+selectedPathsVector.size());
            // package it as a Move down
            Vector<TreeNode> pendingNodesVector=new Vector<TreeNode>(4);
            for(int i=0; i< selectedPathsVector.size(); i++){
                TreePath nextPath=selectedPathsVector.get(i);
                TreeNode lastNode=(TreeNode)nextPath.getLastPathComponent();
                ExcitationObject eo = (ExcitationObject) ((DefaultMutableTreeNode)lastNode).getUserObject();
                if (eo != null){
                    pendingNodesVector.add(lastNode);
                }
            }
            // For each column, find selected entries, sort top to bottom and move one step up
            DefaultMutableTreeNode root  = (DefaultMutableTreeNode) treeModel.getRoot();
            for(int i=0; i<root.getChildCount(); i++){
                // get Column's node
                DefaultMutableTreeNode columnNode = (DefaultMutableTreeNode) treeModel.getChild(root, i);
                ArrayList<Integer> selectedIdices = new ArrayList<Integer>();
                for(int j=0; j<columnNode.getChildCount(); j++){
                    DefaultMutableTreeNode exciationNode = (DefaultMutableTreeNode) treeModel.getChild(columnNode, j);
                    if (pendingNodesVector.contains(exciationNode)) 
                        selectedIdices.add(new Integer(j));
                }
                if (selectedIdices.size()==0)   // Nothing to move up
                    continue;
                Collections.sort(selectedIdices);
                // Skip contiguous list starting at 0;
                for(int k=0; k<selectedIdices.size(); k++){
                    if (selectedIdices.get(k).intValue()==k)
                        continue;
                    // An index that can be moved up
                    int currentPosition = selectedIdices.get(k).intValue();
                    TreeNode nodeToMove =  columnNode.getChildAt(currentPosition-1);
                    treeModel.removeNodeFromParent((MutableTreeNode)nodeToMove);
                    treeModel.insertNodeInto((MutableTreeNode) nodeToMove, (MutableTreeNode) columnNode, currentPosition);
                    excitationGridPanel.exchangePlots(currentPosition, currentPosition-1, root.getIndex(columnNode));
               }
            }

             for(int i=0; i<selectedPathsVector.size(); i++){
                TreePath nextPath=selectedPathsVector.get(i);
               // Keep selected in sync.
                jExcitationsTree.addSelectionPath(nextPath);
            }
            //frame.pack();
        }
    }//GEN-LAST:event_jMoveUpButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jApplyValueToSelectedButton;
    private javax.swing.JButton jBackupAllButton;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JButton jDeleteButton;
    private javax.swing.JScrollPane jExScrollPane;
    private javax.swing.JTree jExcitationsTree;
    private javax.swing.JButton jInsertButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jLayoutControlPanel;
    private javax.swing.JPanel jLeftPanel;
    private javax.swing.JButton jMoveDownButton;
    private javax.swing.JButton jMoveUpButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jRemoveNodesButton;
    private javax.swing.JButton jRestoreAllButton;
    private javax.swing.JPanel jRightPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jValue2ApplyTextField;
    // End of variables declaration//GEN-END:variables

   /** 
     * Creates an overlaid chart.
     *
     * @return The chart.
     */
    private void createExcitationColumnPanel(int colIndex, String[] names) {

        // create plot ...
        DefaultMutableTreeNode columnNode = new DefaultMutableTreeNode("Column "+String.valueOf(colIndex));
        treeModel.insertNodeInto(columnNode, (DefaultMutableTreeNode) treeModel.getRoot(), colIndex);
        /*
         XYItemRenderer renderer1 = new XYLineAndShapeRenderer(true, false);
        //renderer1.setToolTipGenerator(new StandardXYToolTipGenerator(
        //        StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,
        //        new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0.00")));
        //renderer1.setSeriesStroke(0, new BasicStroke(4.0f, 
        //        BasicStroke.CAP_ROUND, BasicStroke.JOIN_BEVEL));
        renderer1.setSeriesPaint(0, Color.blue);
        
        NumberAxis domainAxis = new NumberAxis("time");
        domainAxis.setAutoRangeIncludesZero(false);
        Control firstControl = controlSet.get(0);
        //double temp=firstControl.getFirstTime();
        //domainAxis.setLowerMargin(firstControl.getFirstTime());
        //temp=firstControl.getLastTime();
        //domainAxis.setUpperMargin(firstControl.getLastTime());
        ValueAxis rangeAxis = new NumberAxis("");
        
        //renderer2.setToolTipGenerator(new StandardXYToolTipGenerator(
        //        StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,
        //        new SimpleDateFormat("d-MMM-yyyy"), new DecimalFormat("0.00")));
        
        //cplot = new OpenSimCombinedDomainXYPlot(domainAxis);
        IntervalXYDataset data = createDataset(firstControl);
        XYItemRenderer renderer = new XYLineAndShapeRenderer(true, true);
        renderer.setSeriesPaint(0, Color.blue);
        XYPlot plot1 = new XYPlot(data, null, new NumberAxis(""), 
                renderer);
        
        plot1.setBackgroundPaint(Color.lightGray);
        plot1.setDomainGridlinePaint(Color.white);
        plot1.setRangeGridlinePaint(Color.white);
        ExcitationObject excitationNode = new ExcitationObject(plot1, firstControl.getName());
        treeModel.insertNodeInto(excitationNode, columnNode, 0);
        excitationNode.setUserObject(excitationNode);

        cplot.add(plot1, 0);

        */
        excitationGridPanel.addColumn();
        columnNode.setUserObject(excitationGridPanel.getExcitationColumn(colIndex));
        if (names==null){ // Do all controls
            for(int i=0; i<15/*controlSet.getSize()/2*/; i++){
                Control nextControl = controlSet.get(i);
                addExcitation(columnNode, nextControl, colIndex);
            } 
        }
        else {
            for(int i=0; i<names.length; i++){
                Control nextControl = controlSet.get(names[i]);
                addExcitation(columnNode, nextControl, colIndex);
            } 
            
        }
        validate();
    }

    public void addExcitation(final DefaultMutableTreeNode columnNode, final Control nextControl, final int colIndex) {
        // add a second dataset and renderer...
        FunctionPanel nextExcitationPanel = createPanel(ControlLinear.safeDownCast(nextControl)); // Create function from control!
        ExcitationObject excitationNode= new ExcitationObject(nextExcitationPanel, nextControl.getName());
        excitationNode.setUserObject(excitationNode);
        treeModel.appendChild(excitationNode, columnNode);
        excitationGridPanel.addFunction(colIndex, nextExcitationPanel, ControlLinear.safeDownCast(nextControl));
    }


    /**
     * Creates a panel for the demo (used by SuperDemo.java).
     * 
     * @return A panel.
     *
    public static ChartPanel createTopPanel() {
        JFreeChart chart = createCombinedChart();
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setMinimumDrawHeight(controlSet.getSize()*25+50);    // Force at least something to show per each muscle
        return chartPanel;
    }*/

    void populate(ControlSet obj) {
       backupControlSet = new ControlSet(obj);
       controlSet = obj;
      
       int numColumns= ((DefaultMutableTreeNode)treeModel.getRoot()).getChildCount();
       createExcitationColumnPanel(numColumns, null);
       excitationGridPanel.setControlSet(obj);
       jExScrollPane.setViewportView(excitationGridPanel);
       //Rectangle r=panel.getBounds();
       //jRightPanel.add(excitationGridPanel,java.awt.BorderLayout.CENTER);
       //Dimension d = new Dimension(300,600);
       //excitationGridPanel.setPreferredSize(d);
       //jRightPanel.invalidate();
       frame.setExtendedState(Frame.MAXIMIZED_VERT);
       //frame.doLayout();
       frame.validate();
    }

    private static IntervalXYDataset createDataset(Control nextControl) {
        
        XYSeries series1 = new XYSeries("V");
        ControlLinear cl = ControlLinear.safeDownCast(nextControl);
        SetControlNodes cv=cl.getControlValues();
        for (int i=0; i< cv.getSize(); i++)
            series1.add(cv.get(i).getTime(), cv.get(i).getValue());
        cv=cl.getControlMinValues();
        
        XYSeries seriesMin = new XYSeries("Min");
         for (int i=0; i< cv.getSize(); i++)
            seriesMin.add(cv.get(i).getTime(), cv.get(i).getValue());
        cv=cl.getControlMaxValues();
        
        XYSeries seriesMax = new XYSeries("Max");
        for (int i=0; i< cv.getSize(); i++)
            seriesMax.add(cv.get(i).getTime(), cv.get(i).getValue());

        XYSeriesCollection ret= new XYSeriesCollection(series1);
        ret.addSeries(seriesMin);
        ret.addSeries(seriesMax);
        
        return ret;
    }

    public void valueChanged(TreeSelectionEvent e) {
       TreePath[] selectedPaths = e.getPaths();
      somethingSelected=false;
      for(int i=0;i<selectedPaths.length;i++){
         ExcitationObject eo = null;
         TreeNode lastNode=(TreeNode)selectedPaths[i].getLastPathComponent();
         if (((DefaultMutableTreeNode)lastNode).getUserObject() instanceof ExcitationObject){
            eo = (ExcitationObject) ((DefaultMutableTreeNode)lastNode).getUserObject();
         }
         if (e.isAddedPath(i)){
             if (eo != null){
                selectedPathsVector.add(selectedPaths[i]);
                eo.markSelected(true);
                somethingSelected=true;
             }
         } else {   //Removed
             if (eo != null){
                selectedPathsVector.remove(selectedPaths[i]);
                eo.markSelected(false);
             }
         }
      }
      if (somethingSelected){
          
      }
   }
   
   static String filterExcitationName(String fullName)
   {
       String filtered = fullName;
       if (fullName.contains(".")){
           filtered = filtered.substring(0, fullName.indexOf('.')); 
       }
       return filtered;
   }
   
   static FunctionPanel createPanel(ControlLinear excitation)
   {
         XYSeriesCollection seriesCollection = new XYSeriesCollection();
         FunctionXYSeries xySeries = new FunctionXYSeries("excitation");
         ControlLinear cl = ControlLinear.safeDownCast(excitation);
         SetControlNodes cnodes = cl.getControlValues();
         for (int i=0; i<cnodes.getSize(); i++) {
            ControlLinearNode clnode = cnodes.get(i);
            xySeries.add(new XYDataItem(clnode.getTime(), clnode.getValue()));
         }
         
         seriesCollection.addSeries(xySeries);
         JFreeChart chart = ChartFactory.createXYLineChart(
            "",
            "",
            "",
            seriesCollection,
            org.jfree.chart.plot.PlotOrientation.VERTICAL,
            true,
            true,
            false);
         XYPlot xyPlot = chart.getXYPlot();
         XYDataset xyDataset = xyPlot.getDataset();
         ExcitationRenderer renderer = new ExcitationRenderer(excitation);
         Shape circle = new Ellipse2D.Float(-3, -3, 6, 6);
         renderer.setBaseShapesVisible(true);
         renderer.setBaseShapesFilled(true);
         renderer.setSeriesShape(0, circle);
         renderer.setBaseSeriesVisibleInLegend(false);
         renderer.setDrawOutlines(true);
         renderer.setUseFillPaint(true);
         renderer.setSeriesStroke(0, new BasicStroke(1.5f));
         renderer.setSeriesOutlineStroke(0, new BasicStroke(1.0f));
         renderer.setFunctionPaint(0, Color.BLUE);
         renderer.setFunctionDefaultFillPaint(0, Color.WHITE);
         renderer.setFunctionHighlightFillPaint(0, Color.YELLOW);
         ValueAxis va = xyPlot.getRangeAxis();
         if (va instanceof NumberAxis) {
            NumberAxis na = (NumberAxis) va;
            na.setAutoRangeIncludesZero(false);
            na.setAutoRangeStickyZero(false);
            xyPlot.setRangeAxis(na);
            na.setNumberFormatOverride(new DecimalFormat("0.0000"));
         }
         xyPlot.setRenderer(renderer);
         FunctionPanel dPanel =  new FunctionPanel(chart);
          dPanel.setMinimumDrawHeight(100);
         //ExcitationJPanel exPanel= new ExcitationJPanel(dPanel, excitation.getName(), false);
         return dPanel;
   }
   
   private void invokeTreePopupIfNeeded(int evtX, int evtY) {
      final TreePath clickedElement = jExcitationsTree.getPathForLocation(evtX, evtY);
      JPopupMenu contextMenu = new JPopupMenu();
      if (clickedElement.getLastPathComponent().equals(treeModel.getRoot()) && controlSet!=null){
          // allow addition of a new column
            JMenuItem addColMenuItem = new JMenuItem("Add Column...");
            addColMenuItem.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent e) {
                    // Bring up the filter dialog populated by list of names from current control set
                    ArrayStr names = new ArrayStr();
                    controlSet.getNames(names);
                    FilterableStringArray namesSource = new FilterableStringArray(names);
                    NameFilterJPanel filterPanel = new NameFilterJPanel(namesSource, false);
                    OpenSimDialog selectionDlg=DialogUtils.createDialogForPanelWithParent(frame, filterPanel, "Select Excitations");
                    DialogUtils.addStandardButtons(selectionDlg);
                    selectionDlg.setModal(true);
                    selectionDlg.setVisible(true);
                    
                    if (selectionDlg.getDialogReturnValue()==selectionDlg.OK_OPTION) {
                        String[] selNames = new String[filterPanel.getNumSelected()];
                        System.arraycopy(filterPanel.getSelected(), 0, selNames, 0, filterPanel.getNumSelected());
                        int numColumns= ((DefaultMutableTreeNode)treeModel.getRoot()).getChildCount();
                        createExcitationColumnPanel(numColumns, selNames);
                     }

                    //DialogDescriptor filterDialog = new DialogDescriptor(filterPanel, "Filter Excitations");
                    //DialogDisplayer.getDefault().createDialog(filterDialog).setVisible(true);

                }});
          contextMenu.add(addColMenuItem );
      }
      String clickedElementName;
      if (clickedElement != null){
         Object[] pathObjects = clickedElement.getPath();
         int depth =pathObjects.length-1;
         final DefaultMutableTreeNode node = (DefaultMutableTreeNode)pathObjects[depth];
         /*
         PlotCurve cv=null;
         Plot dPlot=null;
         if (node instanceof PlotNode){ // Chart properties
            dPlot = ((Plot)node.getUserObject());
         } else if (node instanceof PlotCurveNode){
            cv = ((PlotCurve)node.getUserObject());
         }
         final PlotCurve cv2=cv; // keep a final reference to object so action listeners are happy
         
         JPopupMenu curvePopup = new JPopupMenu();
         if (cv ==null){ // A whole plot is picked
            JMenuItem propMenuItem = new JMenuItem("Properties...");
            propMenuItem.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent e) {
                       plotterModel.getCurrentPlot().getChartPanel().doEditChartProperties();
                }});
            curvePopup.add(propMenuItem);
            JMenuItem exportMenuItem = new JMenuItem("Export Data...");
            exportMenuItem.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent e) {
                       plotterModel.getCurrentPlot().exportDataToFile(frame);
                }});
            curvePopup.add(exportMenuItem);            
            curvePopup.show(jPlotsTree, evtX, evtY);
            return;
         }
         JMenuItem infoMenuItem = new JMenuItem("Info...");
         // Info button
         infoMenuItem.addActionListener(new ActionListener(){
                public void actionPerformed(ActionEvent e) {
                   if (cv2!=null)
                     displayCurveInfo(cv2);
                }

               private void displayCurveInfo(final PlotCurve cv2) {
                     // Make label of curve name, domain name, range name
                  String displayRangeName = "";
                  if (cv2.getRangeNames().length>1){
                     displayRangeName = getRangeNamesAsString("+", cv2.getRangeNames());
                  }
                  else
                     displayRangeName = cv2.getRangeNames()[0];

                  NotifyDescriptor.Message dlg =
                          new NotifyDescriptor.Message(cv2.getCurveSeries().getDescription());
                  DialogDisplayer.getDefault().notify(dlg);
               }});
         curvePopup.add(infoMenuItem);
          curvePopup.show(jPlotsTree, evtX, evtY);
          **/
      }
      contextMenu.show(jExcitationsTree, evtX, evtY);
   }

}
