package org.opensim.view;

import java.awt.Color;
import java.io.Serializable;
import javax.swing.JColorChooser;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.ChangeEvent;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.opensim.modeling.OpenSimObject;
import org.opensim.view.OpenSimObjectModel;
import vtk.vtkProperty;

/**
 * Top component which displays something.
 */
final class EditObjectTopComponent extends TopComponent implements javax.swing.event.ChangeListener {
    
    private static EditObjectTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    
    private static final String PREFERRED_ID = "EditObjectTopComponent";
    OpenSimCanvas   canvas;
    OpenSimObject   object;
    vtkProperty     saveProperty;
    OpenSimObjectModel objectProperties;
    JTreeTable      jPropertyTable;
   
    private EditObjectTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(EditObjectTopComponent.class, "CTL_EditObjectTopComponent"));
        setToolTipText(NbBundle.getMessage(EditObjectTopComponent.class, "HINT_EditObjectTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
        OpacitySlider.addChangeListener(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        PropertyEditPanel = new javax.swing.JPanel();
        VisualEditPanel = new javax.swing.JPanel();
        OpacityLabel = new javax.swing.JLabel();
        ObjectNameLabel = new javax.swing.JLabel();
        ObjectNameText = new javax.swing.JTextField();
        OpacitySlider = new javax.swing.JSlider();
        ColorLabel = new javax.swing.JLabel();
        jChooseColorBtn = new javax.swing.JButton();
        ObjectTypeLabel = new javax.swing.JLabel();
        ObjectTypeText = new javax.swing.JTextField();

        org.jdesktop.layout.GroupLayout PropertyEditPanelLayout = new org.jdesktop.layout.GroupLayout(PropertyEditPanel);
        PropertyEditPanel.setLayout(PropertyEditPanelLayout);
        PropertyEditPanelLayout.setHorizontalGroup(
            PropertyEditPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 307, Short.MAX_VALUE)
        );
        PropertyEditPanelLayout.setVerticalGroup(
            PropertyEditPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 239, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(OpacityLabel, "Opacity:");

        org.openide.awt.Mnemonics.setLocalizedText(ObjectNameLabel, "Object Name:");

        ObjectNameText.setEditable(false);
        ObjectNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ObjectNameTextActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(ColorLabel, "Color:");

        org.openide.awt.Mnemonics.setLocalizedText(jChooseColorBtn, "Choose...");
        jChooseColorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jChooseColorBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(ObjectTypeLabel, "Object Type");

        ObjectTypeText.setEditable(false);
        ObjectTypeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ObjectTypeTextActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout VisualEditPanelLayout = new org.jdesktop.layout.GroupLayout(VisualEditPanel);
        VisualEditPanel.setLayout(VisualEditPanelLayout);
        VisualEditPanelLayout.setHorizontalGroup(
            VisualEditPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(VisualEditPanelLayout.createSequentialGroup()
                .add(VisualEditPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ObjectNameLabel)
                    .add(ObjectTypeLabel)
                    .add(OpacityLabel)
                    .add(VisualEditPanelLayout.createSequentialGroup()
                        .add(ColorLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jChooseColorBtn)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(VisualEditPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(OpacitySlider, 0, 0, Short.MAX_VALUE)
                    .add(ObjectTypeText)
                    .add(ObjectNameText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        VisualEditPanelLayout.setVerticalGroup(
            VisualEditPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(VisualEditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(VisualEditPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ObjectNameLabel)
                    .add(ObjectNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(VisualEditPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ObjectTypeLabel)
                    .add(ObjectTypeText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(VisualEditPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(VisualEditPanelLayout.createSequentialGroup()
                        .add(OpacityLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(VisualEditPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jChooseColorBtn)
                            .add(ColorLabel)))
                    .add(OpacitySlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(PropertyEditPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(VisualEditPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(VisualEditPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(PropertyEditPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ObjectTypeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ObjectTypeTextActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_ObjectTypeTextActionPerformed

    private void jChooseColorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChooseColorBtnActionPerformed
// TODO add your handling code here:
        JColorChooser objectColorChooser = new JColorChooser();
        Color newColor = objectColorChooser.showDialog(canvas, "Select new background color", canvas.getBackground());
        if (newColor != null){
            float[] colorComponents = newColor.getRGBComponents(null);
            double[] dColorComponents = new double[]{colorComponents[0], colorComponents[1], colorComponents[2]};
            canvas.setObjectColor(object, dColorComponents);
            canvas.repaint();
        }
    }//GEN-LAST:event_jChooseColorBtnActionPerformed

    private void ObjectNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ObjectNameTextActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_ObjectNameTextActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ColorLabel;
    private javax.swing.JLabel ObjectNameLabel;
    private javax.swing.JTextField ObjectNameText;
    private javax.swing.JLabel ObjectTypeLabel;
    private javax.swing.JTextField ObjectTypeText;
    private javax.swing.JLabel OpacityLabel;
    private javax.swing.JSlider OpacitySlider;
    private javax.swing.JPanel PropertyEditPanel;
    private javax.swing.JPanel VisualEditPanel;
    private javax.swing.JButton jChooseColorBtn;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized EditObjectTopComponent getDefault() {
        if (instance == null) {
            instance = new EditObjectTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the EditObjectTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized EditObjectTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find EditObject component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof EditObjectTopComponent) {
            return (EditObjectTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
        // TODO add custom code on component opening
    }
    
    public void componentClosed() {
        // TODO add custom code on component closing
    }
    
    /** replaces this in object stream */
    public Object writeReplace() {
        return new ResolvableHelper();
    }
    
    protected String preferredID() {
        return PREFERRED_ID;
    }
    
    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            return EditObjectTopComponent.getDefault();
        }
    }
    
    protected void setContext(OpenSimCanvas aCanvas)
    {
        this.object = aCanvas.getSelectedObject();
        this.canvas = aCanvas;
        initialize();
    }
    
    public void stateChanged(ChangeEvent e) {
        // Handle change in opacity slider
        int newOpacity = ((javax.swing.JSlider)e.getSource()).getValue();
        canvas.setObjectOpacity(object, (double)newOpacity/100.0);
        canvas.repaint();
    }

    private void initialize() {
        ObjectNameText.setText(object.getName());
        ObjectTypeText.setText(object.getType());
        saveProperty = new vtkProperty();
        canvas.getObjectProperties(object, saveProperty);
        OpacitySlider.getModel().setValue((int) (saveProperty.GetOpacity()*100));
        // Now the properties
        objectProperties = new OpenSimObjectModel(object, true, canvas.getModel().getName());
        jPropertyTable = new JTreeTable(objectProperties);
        PropertyEditPanel.add(jPropertyTable);
    }

}
