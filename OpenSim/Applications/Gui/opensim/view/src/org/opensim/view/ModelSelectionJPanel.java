/*
 * ModelSelectionJPanel.java
 *
 * Created on May 21, 2007, 2:55 PM
 */

package org.opensim.view;

import java.util.Observable;
import java.util.Observer;
import javax.swing.JComboBox;
import org.opensim.modeling.Model;
import org.opensim.view.pub.OpenSimDB;

/**
 *
 * @author  Ayman
 */
public class ModelSelectionJPanel extends javax.swing.JPanel implements Observer{
   
   private static String noModelString="No Models";
   /** Creates new form ModelSelectionJPanel */
   public ModelSelectionJPanel() {
      initComponents();
      OpenSimDB.getInstance().addObserver(this);
      update();
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabelForCurrentModelComboBox = new javax.swing.JLabel();
        jCurrentModelComboBox = new javax.swing.JComboBox();

        setMaximumSize(new java.awt.Dimension(151, 32));
        setMinimumSize(new java.awt.Dimension(151, 32));
        jLabelForCurrentModelComboBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabelForCurrentModelComboBox.setLabelFor(jCurrentModelComboBox);
        jLabelForCurrentModelComboBox.setText("Model");
        jLabelForCurrentModelComboBox.setMaximumSize(new java.awt.Dimension(37, 32));
        jLabelForCurrentModelComboBox.setMinimumSize(new java.awt.Dimension(37, 32));
        jLabelForCurrentModelComboBox.setPreferredSize(new java.awt.Dimension(37, 32));

        jCurrentModelComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No Models" }));
        jCurrentModelComboBox.setToolTipText("Current Model");
        jCurrentModelComboBox.setMaximumSize(new java.awt.Dimension(100, 20));
        jCurrentModelComboBox.setMinimumSize(new java.awt.Dimension(100, 20));
        jCurrentModelComboBox.setPreferredSize(new java.awt.Dimension(100, 20));
        jCurrentModelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCurrentModelSelectActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabelForCurrentModelComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCurrentModelComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabelForCurrentModelComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jCurrentModelComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

   private void jCurrentModelSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCurrentModelSelectActionPerformed
      Object selected = ((JComboBox)evt.getSource()).getSelectedItem();
      if (selected instanceof String || selected ==null)  // No model
         return;
      Model selectedModel = (Model) selected;
      if (OpenSimDB.getInstance().getCurrentModel()!=selectedModel){
         OpenSimDB.getInstance().deleteObserver(this);
         OpenSimDB.getInstance().setCurrentModel(selectedModel);
         OpenSimDB.getInstance().addObserver(this);
      }
// TODO add your handling code here:
   }//GEN-LAST:event_jCurrentModelSelectActionPerformed
   // This should be invoked only if the user changes model from dropdown   // The events we care about are a model becoming current or a model getting deleted so that there's no more
   // current model'
   public void update(Observable o, Object arg) {
       if (o instanceof OpenSimDB){
         // if current model is being switched due to open/close or change current then
         // update list of coordinates
         if (arg instanceof ModelEvent) {
              final ModelEvent evt = (ModelEvent)arg;
               if (evt.getOperation()==ModelEvent.Operation.SetCurrent){
                 update(); // update the list 
                 // The reason we get the Model is because otherwise 
                 // setSelectedItem triggers another round of DB updates!
                  jCurrentModelComboBox.getModel().setSelectedItem(evt.getModel());
               }
               else if (evt.getOperation()==ModelEvent.Operation.Close &&
                        OpenSimDB.getInstance().getCurrentModel()==null){
                 update();
               }
         }
      } 
  }

   private void update() {
      Object[] models = OpenSimDB.getInstance().getAllModels();
      jCurrentModelComboBox.setEnabled(models.length!=0);
      if (models.length==0){
         jCurrentModelComboBox.removeAllItems();
         jCurrentModelComboBox.addItem(noModelString);
         // disable components
         jLabelForCurrentModelComboBox.setEnabled(false);
         jCurrentModelComboBox.setEnabled(false);
      }
      else {
         // Populate
         jCurrentModelComboBox.removeAllItems();
         for(int i=0; i<models.length; i++){
            jCurrentModelComboBox.addItem((Model)models[i]);
         }
         // enable components
         jLabelForCurrentModelComboBox.setEnabled(true);
         jCurrentModelComboBox.setEnabled(true);
      }
   }
   
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jCurrentModelComboBox;
    private javax.swing.JLabel jLabelForCurrentModelComboBox;
    // End of variables declaration//GEN-END:variables

}
