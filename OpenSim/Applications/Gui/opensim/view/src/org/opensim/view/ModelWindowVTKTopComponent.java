package org.opensim.view;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.prefs.Preferences;
import javax.swing.Action;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import org.openide.awt.UndoRedo;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.opensim.modeling.AbstractModel;
import org.opensim.utils.TheApp;
import vtk.vtkFileOutputWindow;

/**
 * Top component which displays something.
 */
public class ModelWindowVTKTopComponent extends TopComponent
{
    
    private static final long serialVersionUID = 1L;
    private static int ct = 0; //A counter used to provide names for new models
    private String tabDisplayName;
    Preferences prefs;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    public ModelWindowVTKTopComponent() {
        initComponents();
        setTabDisplayName(NbBundle.getMessage(
                        ModelWindowVTKTopComponent.class,
                        "UnsavedModelNameFormat",
                        new Object[] { new Integer(ct++) }
                ));
//        SwingUtilities.invokeLater(new Runnable(){
 //           public void run() {
                 setName(tabDisplayName);
//            }});
        
        // Set preferred directory for the TopComponent (to be used for all saving, loading, ...
        prefs = Preferences.userNodeForPackage(TheApp.class);
        vtkFileOutputWindow fow = new vtkFileOutputWindow();
        fow.SetFileName("vtklog.log");
        if (fow != null)
           fow.SetInstance(fow);        
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {
      jRefitModelButton = new javax.swing.JButton();
      jModelWiondowToolBar = new javax.swing.JToolBar();
      jTakeSnapshotButton = new javax.swing.JButton();
      jFrontViewButton = new javax.swing.JButton();
      jSideViewButton = new javax.swing.JButton();
      jTopViewButton = new javax.swing.JButton();
      openSimCanvas1 = new OpenSimCanvas();

      org.openide.awt.Mnemonics.setLocalizedText(jRefitModelButton, "Refit");
      jRefitModelButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jRefitModelButtonActionPerformed(evt);
         }
      });

      setLayout(new java.awt.BorderLayout());

      jTakeSnapshotButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/view/camera.gif")));
      jTakeSnapshotButton.setMaximumSize(new java.awt.Dimension(32, 21));
      jTakeSnapshotButton.setPreferredSize(new java.awt.Dimension(32, 21));
      jTakeSnapshotButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jTakeSnapshotButtonActionPerformed(evt);
         }
      });

      jModelWiondowToolBar.add(jTakeSnapshotButton);

      jFrontViewButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/view/front.gif")));
      jFrontViewButton.setMaximumSize(new java.awt.Dimension(32, 21));
      jFrontViewButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jFrontViewButtonActionPerformed(evt);
         }
      });

      jModelWiondowToolBar.add(jFrontViewButton);

      jSideViewButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/view/side.gif")));
      jSideViewButton.setMaximumSize(new java.awt.Dimension(32, 21));
      jSideViewButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jSideViewButtonActionPerformed(evt);
         }
      });

      jModelWiondowToolBar.add(jSideViewButton);

      jTopViewButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/opensim/view/top.gif")));
      jTopViewButton.setMaximumSize(new java.awt.Dimension(32, 21));
      jTopViewButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jTopViewButtonActionPerformed(evt);
         }
      });

      jModelWiondowToolBar.add(jTopViewButton);

      add(jModelWiondowToolBar, java.awt.BorderLayout.NORTH);

      add(openSimCanvas1, java.awt.BorderLayout.CENTER);

   }// </editor-fold>//GEN-END:initComponents

   private void jFrontViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFrontViewButtonActionPerformed
// TODO add your handling code here:
      openSimCanvas1.applyCameraX();
   }//GEN-LAST:event_jFrontViewButtonActionPerformed

   private void jSideViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSideViewButtonActionPerformed
// TODO add your handling code here:
      openSimCanvas1.applyCameraZ();
   }//GEN-LAST:event_jSideViewButtonActionPerformed

   private void jTopViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTopViewButtonActionPerformed
// TODO add your handling code here:
      openSimCanvas1.applyCameraY();
   }//GEN-LAST:event_jTopViewButtonActionPerformed

    private void jTakeSnapshotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTakeSnapshotButtonActionPerformed
// TODO add your handling code here:
       String defaultDir="";
       defaultDir = Preferences.userNodeForPackage(TheApp.class).get("WorkDirectory", defaultDir);
        final JFileChooser dlog = new JFileChooser(defaultDir);
        
        if (dlog.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String fullPath = dlog.getSelectedFile().getAbsolutePath();
            if (! fullPath.toLowerCase().endsWith(".tiff")){
                fullPath = dlog.getSelectedFile().getAbsolutePath()+".tiff";
            }
            getCanvas().HardCopy(fullPath, 1);
        }
    }//GEN-LAST:event_jTakeSnapshotButtonActionPerformed

    private void jRefitModelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRefitModelButtonActionPerformed
// TODO add your handling code here:
        getCanvas().resetCamera();
        getCanvas().Render();
    }//GEN-LAST:event_jRefitModelButtonActionPerformed

    private void processMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_processMousePressed
// TODO add your handling code here:
        if(evt.getClickCount()==1){
            getCanvas().selectObject(evt);
        }
        if(evt.getClickCount()==2){
            getCanvas().handleDoubleClick(evt);
        }
        super.processEvent(evt);
    }//GEN-LAST:event_processMousePressed
    
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jFrontViewButton;
   private javax.swing.JToolBar jModelWiondowToolBar;
   private javax.swing.JButton jRefitModelButton;
   private javax.swing.JButton jSideViewButton;
   private javax.swing.JButton jTakeSnapshotButton;
   private javax.swing.JButton jTopViewButton;
   private OpenSimCanvas openSimCanvas1;
   // End of variables declaration//GEN-END:variables
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }
        
    public String preferredID() {
        return "Model";
    }     
    
    public String getDisplayName()
    {
        return tabDisplayName;
    }
    
    /**
     * Potentially there could be multiple canvases inserted into this top component,
     * Use an accessor method just incase 
     */
    public org.opensim.view.OpenSimCanvas getCanvas() {
        return openSimCanvas1;
    }
    
    public Action[] getActions(){
        ViewReplicateAction act1 = new ViewReplicateAction();   // New...
        ViewEditAction act2 = new ViewEditAction(); //Edit...
                         
        return (new Action[]{act1,act2});
    };

    protected void componentActivated() {
        super.componentActivated();
        ViewDB.getInstance().setCurrentModelWindow(this);
    }

    /**
     * update the view to reflect changes in whole model visibility. 
     */
    void updateDisplayedModels() {
        ArrayList<SingleModelVisuals> modelsToDisplay = ViewDB.getInstance().getModelVisuals();
        Iterator<SingleModelVisuals> modelVisualIter = modelsToDisplay.iterator();
        while(modelVisualIter.hasNext()){
            SingleModelVisuals nextModelVis = modelVisualIter.next();
            getCanvas().setModelVisibility(nextModelVis, nextModelVis.isVisible());
        }
        repaint();
    }
    /**
     * Window closing, remove self from ViewDB
     **/
    protected void componentClosed() {
        super.componentClosed();
        ViewDB.getInstance().removeWindow(this);
    }

    public void setTabDisplayName(String tabDisplayName) {
        this.tabDisplayName = tabDisplayName;
    }
}
