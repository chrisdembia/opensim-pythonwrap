package org.opensim.view;

import java.awt.Dimension;
import java.io.Serializable;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JDesktopPane;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.opensim.common.OpenSimDB;
import org.opensim.common.newModelEvent;
import org.opensim.modeling.SimmModel;

/**
 * Top component which displays something.
 */
final class ModelWindowVTKTopComponent extends TopComponent implements Observer  {
    
    private static final long serialVersionUID = 1L;
    
    private static ModelWindowVTKTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    
    private static final String PREFERRED_ID = "ModelWindowVTKTopComponent";
    
    private ModelWindowVTKTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ModelWindowVTKTopComponent.class, "CTL_ModelWindowVTKTopComponent"));
        setToolTipText(NbBundle.getMessage(ModelWindowVTKTopComponent.class, "HINT_ModelWindowVTKTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
        OpenSimDB.getInstance().addObserver(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jModelWiondowToolBar = new javax.swing.JToolBar();
        jRefitModelButton = new javax.swing.JButton();
        jTakeSnapshotButton = new javax.swing.JButton();
        jAnimationSlider = new javax.swing.JSlider();
        openSimCanvas1 = new org.opensim.view.OpenSimCanvas();

        setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jRefitModelButton, "Refit");
        jModelWiondowToolBar.add(jRefitModelButton);

        org.openide.awt.Mnemonics.setLocalizedText(jTakeSnapshotButton, "SnapShot");
        jModelWiondowToolBar.add(jTakeSnapshotButton);

        jModelWiondowToolBar.add(jAnimationSlider);

        add(jModelWiondowToolBar, java.awt.BorderLayout.NORTH);

        add(openSimCanvas1, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider jAnimationSlider;
    private javax.swing.JToolBar jModelWiondowToolBar;
    private javax.swing.JButton jRefitModelButton;
    private javax.swing.JButton jTakeSnapshotButton;
    private org.opensim.view.OpenSimCanvas openSimCanvas1;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized ModelWindowVTKTopComponent getDefault() {
        if (instance == null) {
            instance = new ModelWindowVTKTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the ModelWindowVTKTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ModelWindowVTKTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find ModelWindowVTK component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ModelWindowVTKTopComponent) {
            return (ModelWindowVTKTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }
    
    public void componentOpened() {
        // TODO add custom code on component opening
    }
    
    public void componentClosed() {
        // TODO add custom code on component closing
    }
    
    /** replaces this in object stream */
    public Object writeReplace() {
        return new ResolvableHelper();
    }
    
    protected String preferredID() {
        return PREFERRED_ID;
    }
    
    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            return ModelWindowVTKTopComponent.getDefault();
        }
    }

    public void update(Observable o, Object arg) {
               // Observable is OpenSimDB
        if (arg instanceof newModelEvent){
            newModelEvent evnt = (newModelEvent)arg;
            
            SimmModel dNewModel = evnt.getModel();
            
            // Create a frame for the new Model
            openSimCanvas1.loadModel(dNewModel);
 
        }
    }
}
