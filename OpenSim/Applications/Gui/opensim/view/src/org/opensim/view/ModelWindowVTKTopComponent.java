package org.opensim.view;

import java.util.Observable;
import java.util.Observer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.opensim.common.OpenSimDB;
import org.opensim.common.ModelEvent;
import org.opensim.modeling.SimmModel;

/**
 * Top component which displays something.
 */
public class ModelWindowVTKTopComponent extends TopComponent implements Observer  {
    
    private static final long serialVersionUID = 1L;
    private static int ct = 0; //A counter used to provide names for new models
    private String displayName;
    SimmModel myModel;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
        
    public ModelWindowVTKTopComponent(SimmModel dModel) {
        myModel = dModel;
        initComponents();
        displayName = NbBundle.getMessage(
                        ModelWindowVTKTopComponent.class,
                        "UnsavedModelNameFormat",
                        new Object[] { new Integer(ct++) }
                );

        //setName(displayName);
        //setToolTipText(NbBundle.getMessage(ModelWindowVTKTopComponent.class, "HINT_ModelWindowVTKTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jTakeSnapshotButton = new javax.swing.JButton();
        jRefitModelButton = new javax.swing.JButton();
        jModelWiondowToolBar = new javax.swing.JToolBar();
        jAnimationSlider = new javax.swing.JSlider();
        openSimCanvas1 = new org.opensim.view.OpenSimCanvas();

        org.openide.awt.Mnemonics.setLocalizedText(jTakeSnapshotButton, "SnapShot");
        jTakeSnapshotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTakeSnapshotButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jRefitModelButton, "Refit");
        jRefitModelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRefitModelButtonActionPerformed(evt);
            }
        });

        setLayout(new java.awt.BorderLayout());

        setName(getDisplayName());
        jModelWiondowToolBar.add(jAnimationSlider);

        add(jModelWiondowToolBar, java.awt.BorderLayout.NORTH);

        openSimCanvas1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                processMousePressed(evt);
            }
        });

        add(openSimCanvas1, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    private void jTakeSnapshotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTakeSnapshotButtonActionPerformed
// TODO add your handling code here:
        final JFileChooser dlog = new JFileChooser();
        
        if (dlog.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            openSimCanvas1.HardCopy(dlog.getSelectedFile().getAbsolutePath()+".tiff", 1);
        }
    }//GEN-LAST:event_jTakeSnapshotButtonActionPerformed

    private void jRefitModelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRefitModelButtonActionPerformed
// TODO add your handling code here:
        openSimCanvas1.resetCamera();
        openSimCanvas1.Render();
    }//GEN-LAST:event_jRefitModelButtonActionPerformed

    private void processMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_processMousePressed
// TODO add your handling code here:
        super.processEvent(evt);
    }//GEN-LAST:event_processMousePressed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider jAnimationSlider;
    private javax.swing.JToolBar jModelWiondowToolBar;
    private javax.swing.JButton jRefitModelButton;
    private javax.swing.JButton jTakeSnapshotButton;
    private org.opensim.view.OpenSimCanvas openSimCanvas1;
    // End of variables declaration//GEN-END:variables
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }
    
    public void componentOpened() {
        // TODO add custom code on component opening
    }
    
 public boolean canClose(){
        // TODO add custom code on component closing
        // Closing the model should warn about unsaved changes and if confirmed remove it from OpenSimDB
        // For now we'll warn anyway
        int confirm = JOptionPane.showConfirmDialog(this, "Do you want to close model "+myModel.getName()+" ?");
        if (confirm == JOptionPane.YES_OPTION){
            int observersCount = OpenSimDB.getInstance().countObservers();
            OpenSimDB.getInstance().removeModel(myModel);
            return super.canClose();
        }
        else
            return false;
    }
    
    public String preferredID() {
        return "Model";
    }     
    
    public String getDisplayName()
    {
        if (myModel != null)
            return myModel.getName();
        else
            return displayName;
    }
    
    public void update(Observable o, Object arg) {
               // Observable is OpenSimDB
        if (arg instanceof ModelEvent){
            // Create a frame for the new Model
            if (((ModelEvent)arg).getModel() == myModel)
                openSimCanvas1.loadModel(myModel);
       }
    }
}
