package org.opensim.view;

import java.io.File;
import java.util.Observable;
import java.util.Observer;
import java.util.prefs.Preferences;
import javax.swing.Action;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.openide.awt.UndoRedo;
import org.openide.util.NbBundle;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;
import org.opensim.modeling.SimmModel;
import org.opensim.modeling.SimtkAnimationCallback;
import org.opensim.utils.TheApp;
import vtk.vtkFileOutputWindow;
/**
 * Top component which displays something.
 */
public class ModelWindowVTKTopComponent extends TopComponent implements 
                Observer
{
    
    private static final long serialVersionUID = 1L;
    private static int ct = 0; //A counter used to provide names for new models
    private String displayName;
    private SimmModel model;
    Preferences prefs;
    private SimmModel[] otherModels;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
        
    public ModelWindowVTKTopComponent(SimmModel dModel) {
        model = dModel;
        otherModels = new SimmModel[0];
        initComponents();
        
        // Associate window with a model and a canvas so that other platform users can key on that
        associateLookup (Lookups.singleton (this));

        displayName = NbBundle.getMessage(
                        ModelWindowVTKTopComponent.class,
                        "UnsavedModelNameFormat",
                        new Object[] { new Integer(ct++) }
                );
        // setName has to be invoked from the awt 
        SwingUtilities.invokeLater(new Runnable(){
            public void run() {
                 setName(getDisplayName());
            }});
        
        // Set preferred directory for the TopComponent (to be used for all saving, loading, ...
        prefs = Preferences.userNodeForPackage(TheApp.class);
        File f = new File(getModel().getInputFileName());
        if (f.getParent()!= null)
            prefs.put("Preferred Directory", f.getParent());
        
         vtkFileOutputWindow fow = new vtkFileOutputWindow();
         fow.SetFileName("vtklog.log");
         if (fow != null)
            fow.SetInstance(fow);

        
     }
   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jRefitModelButton = new javax.swing.JButton();
        jModelWiondowToolBar = new javax.swing.JToolBar();
        jTakeSnapshotButton = new javax.swing.JButton();
        openSimCanvas1 = new org.opensim.view.OpenSimCanvas();
        openSimCanvas1.setOwnerWindow(this);

        org.openide.awt.Mnemonics.setLocalizedText(jRefitModelButton, "Refit");
        jRefitModelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRefitModelButtonActionPerformed(evt);
            }
        });

        setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jTakeSnapshotButton, "SnapShot");
        jTakeSnapshotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTakeSnapshotButtonActionPerformed(evt);
            }
        });

        jModelWiondowToolBar.add(jTakeSnapshotButton);

        add(jModelWiondowToolBar, java.awt.BorderLayout.NORTH);

        openSimCanvas1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                processMousePressed(evt);
            }
        });

        add(openSimCanvas1, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    private void jTakeSnapshotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTakeSnapshotButtonActionPerformed
// TODO add your handling code here:
       String defaultDir="";
       defaultDir = Preferences.userNodeForPackage(TheApp.class).get("WorkDirectory", defaultDir);
        final JFileChooser dlog = new JFileChooser(defaultDir);
        
        if (dlog.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String fullPath = dlog.getSelectedFile().getAbsolutePath();
            if (! fullPath.toLowerCase().endsWith(".tiff")){
                fullPath = dlog.getSelectedFile().getAbsolutePath()+".tiff";
            }
            getCanvas().HardCopy(fullPath, 1);
        }
    }//GEN-LAST:event_jTakeSnapshotButtonActionPerformed

    private void jRefitModelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRefitModelButtonActionPerformed
// TODO add your handling code here:
        getCanvas().resetCamera();
        getCanvas().Render();
    }//GEN-LAST:event_jRefitModelButtonActionPerformed

    private void processMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_processMousePressed
// TODO add your handling code here:
        if(evt.getClickCount()==1){
            getCanvas().selectObject(evt);
        }
        if(evt.getClickCount()==2){
            getCanvas().handleDoubleClick(evt);
        }
        super.processEvent(evt);
    }//GEN-LAST:event_processMousePressed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar jModelWiondowToolBar;
    private javax.swing.JButton jRefitModelButton;
    private javax.swing.JButton jTakeSnapshotButton;
    private org.opensim.view.OpenSimCanvas openSimCanvas1;
    // End of variables declaration//GEN-END:variables
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }
    
    /**
     * Check if the window can be closed before it's too late (Vetoable)
     */
    public boolean canClose(){
        // TODO add custom code on component closing

        int confirm = JOptionPane.showConfirmDialog(this, "Do you want to save model "+getModel().getName()+" ?");
        if (confirm == JOptionPane.YES_OPTION || confirm ==JOptionPane.NO_OPTION){
            if (confirm == JOptionPane.YES_OPTION){
                getModel().print(""); // Model comes from file that can't be changed anyway!, when we do saveAs we'll make a fresh copy'
            }
            OpenSimDB.getInstance().removeModel(getModel());
            ViewDB.getInstance().removeModel(getModel());
            return super.canClose();
        }
        else
            return false;
    }
    
    public String preferredID() {
        return "Model";
    }     
    
    public String getDisplayName()
    {
        if (getModel() != null)
            return getModel().getName();
        else
            return displayName;
    }
    
    public void update(Observable o, Object arg) {
               // Observable is OpenSimDB
        if (arg instanceof ModelEvent){
            ModelEvent ev = (ModelEvent)arg;
            // Create a frame for the new Model
            if (ev.getModel() == getModel()){
                if(ev.getOperation() == ModelEvent.Operation.Open){
                    getCanvas().loadModel(getModel(), false);
                    componentActivated();
                }
                else if(ev.getOperation() == ModelEvent.Operation.UpdateDisplay){
                    getCanvas().updateModelDisplay();
                }
            }
       }
    }    
    /**
     * Potentially there could be multiple canvases inserted into this top component,
     * Use an accessor method just incase 
     */
    public org.opensim.view.OpenSimCanvas getCanvas() {
        return openSimCanvas1;
    }
    
    public Action[] getActions(){
        Action act = new LoadGaitModelAction();
        return (new Action[]{act});
    };

    protected void componentActivated() {
        super.componentActivated();
        ViewDB.getInstance().setCurrentModelWindow(this);
    }

    public SimmModel getModel() {
        return model;
    }

    public UndoRedo getUndoRedo() {
        UndoRedo retValue;
        
        retValue = super.getUndoRedo();
        return retValue;
    }    
}
