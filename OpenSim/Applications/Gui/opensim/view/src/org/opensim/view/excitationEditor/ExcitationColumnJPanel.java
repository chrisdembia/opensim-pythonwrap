/*
 * ExcitationColumnJPanel.java
 *
 * Created on February 13, 2008, 11:56 AM
 */

package org.opensim.view.excitationEditor;

import java.awt.Dimension;
import java.util.Vector;
import org.opensim.modeling.ControlLinear;
import org.opensim.modeling.Function;
import org.opensim.view.functionEditor.FunctionPanel;

/**
 *
 * @author  Ayman
 */
public class ExcitationColumnJPanel extends javax.swing.JPanel {
    
    Vector<ExcitationPanel> cache= new Vector<ExcitationPanel>(4);
    // When adding panels, the only way to specify location is adding them as JComponents at index. 
    // this number accounts for components other than ExcitationPanels in 
    int componentOffset=1;  
    //Vector<ExcitationPanelListener> listeners = new Vector<ExcitationPanelListener>(4);
    /** Creates new form ExcitationColumnJPanel */
    public ExcitationColumnJPanel() {
        initComponents();
        //setPreferredSize(new Dimension(100, 300));
    }
        
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jColumnNameLabel = new javax.swing.JLabel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        setToolTipText("\"Column of Excitations\"");
        setAutoscrolls(true);
        setName("name");
        jColumnNameLabel.setText("jColumnLabel");
        add(jColumnNameLabel);

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jColumnNameLabel;
    // End of variables declaration//GEN-END:variables
    
    void exchange(int position1, int position2)
    {
        // Need to remove and insert
        int lower, upper;
        if(position1<position2){
            upper = position1;
            lower = position2;
        }
        else {
            upper = position2;
            lower = position1;            
        }
            
        ExcitationPanel p1 = getPanel(lower);
        ExcitationPanel p2 = getPanel(upper);
        this.remove(p1);
        this.remove(p2);
        this.add(p1, upper+1);
        this.add(p2, lower+1);
        validate();
    }

    void removePanel(int row) {
        ExcitationPanel fp = cache.get(row);
        int index = cache.indexOf(fp);
        remove(fp);
        //listeners.removeElementAt(index); // wouldn'r hurt to remove listener from panel as well'
        validate();
    }
    
    void removePanel(ExcitationPanel aPanel) {
         remove(aPanel);
        //listeners.removeElementAt(index); // wouldn'r hurt to remove listener from panel as well'
        validate();
    }
    
    public ExcitationPanel getPanel(int row)
    {
        return (ExcitationPanel) getComponents()[row+1];
    }
    
    void set(int row, ExcitationPanel panel)
    {
        add(panel);
        if (cache.size()<row+1){  // We should make sure cache.size()
            cache.add(panel);
        }
        cache.set(row, panel);
    }
    
    void append(ExcitationPanel excitationPanel, ControlLinear excitation, Vector<Function> functionsToEdit)
    {
        excitationPanel.setPreferredSize(new Dimension(300, 100));
        add(excitationPanel);
        cache.add(excitationPanel);
        // Create listener and add it too
        ExcitationPanelListener listener= new ExcitationPanelListener(excitationPanel, excitation, functionsToEdit);
        //listeners.add(listener);
        excitationPanel.addFunctionPanelListener(listener);
    }
    public ExcitationColumnJPanel(String[] names) {
        initComponents();
        //setPreferredSize(new Dimension(100, 300));
    }
    
    public void applyValueToSelectedNodes(double valueDouble) {
        for(int i=0; i<cache.size(); i++)
            cache.get(i).setSelectedNodesToValue(0, valueDouble);
    }
    
    public void removeSelectedNodes() {
        
        for(int i=0; i<cache.size(); i++)
            cache.get(i).deleteSelectedNodes();
    }

    public String toString() {
        return jColumnNameLabel.getText();
    }

    void setLabel(String colLabel) {
        jColumnNameLabel.setText(colLabel);
    }
}
