/*
 * ExcitationColumnJPanel.java
 *
 * Created on February 13, 2008, 11:56 AM
 */

package org.opensim.view.excitationEditor;

import java.awt.Component;
import java.awt.Dimension;
import java.util.Vector;
import org.opensim.modeling.ControlLinear;
import org.opensim.view.functionEditor.FunctionPanel;
import org.opensim.view.functionEditor.FunctionPanelListener;

/**
 *
 * @author  Ayman
 */
public class ExcitationColumnJPanel extends javax.swing.JPanel {
    
    Vector<FunctionPanel> cache= new Vector<FunctionPanel>(4);
    Vector<ExcitationPanelListener> listeners = new Vector<ExcitationPanelListener>(4);
    /** Creates new form ExcitationColumnJPanel */
    public ExcitationColumnJPanel() {
        initComponents();
        //setPreferredSize(new Dimension(100, 300));
    }
        
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        setToolTipText("\"Column of Excitations\"");
        setAutoscrolls(true);
        setName("name");
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    void exchange(int position1, int position2)
    {
        // Need to remove and insert
        int lower, upper;
        if(position1<position2){
            upper = position1;
            lower = position2;
        }
        else {
            upper = position2;
            lower = position1;            
        }
            
        FunctionPanel p1 = getPanel(lower);
        FunctionPanel p2 = getPanel(upper);
        this.remove(p1);
        this.remove(p2);
        this.add(p1, upper);
        this.add(p2, lower);
        validate();
    }

    void removePanel(int row) {
        FunctionPanel fp = cache.get(row);
        int index = cache.indexOf(fp);
        remove(fp);
        listeners.removeElementAt(index); // wouldn'r hurt to remove listener from panel as well'
        validate();
    }
    
    public FunctionPanel getPanel(int row)
    {
        return (FunctionPanel) getComponents()[row];
    }
    
    void set(int row, FunctionPanel panel)
    {
        add(panel);
        if (cache.size()<row+1){  // We should make sure cache.size()
            cache.add(panel);
        }
        cache.set(row, panel);
    }
    
    void append(FunctionPanel excitationPanel, ControlLinear excitation)
    {
        excitationPanel.setPreferredSize(new Dimension(300, 100));
        add(excitationPanel);
        cache.add(excitationPanel);
        // Create listener and add it too
        ExcitationPanelListener listener= new ExcitationPanelListener(excitationPanel, excitation);
        listeners.add(listener);
        excitationPanel.addFunctionPanelListener(listener);
    }
    public ExcitationColumnJPanel(String[] names) {
        initComponents();
        //setPreferredSize(new Dimension(100, 300));
    }
    
    public void applyValueToSelectedNodes(double valueDouble) {
        for(int i=0; i<listeners.size(); i++)
            listeners.get(i).setSelectedNodesToValue(0, valueDouble);
    }
}
