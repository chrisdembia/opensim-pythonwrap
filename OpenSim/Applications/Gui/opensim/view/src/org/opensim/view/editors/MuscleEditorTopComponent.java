package org.opensim.view.editors;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.Serializable;
import java.lang.String;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import java.text.NumberFormat;
import org.openide.ErrorManager;
import org.openide.nodes.Node;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.opensim.modeling.AbstractActuator;
import org.opensim.modeling.Model;
import org.opensim.modeling.AbstractWrapObject;
import org.opensim.modeling.CoordinateSet;
import org.opensim.modeling.MuscleViaPoint;
import org.opensim.modeling.WrapEllipsoid;
import org.opensim.modeling.BodySet;
import org.opensim.modeling.Function;
import org.opensim.modeling.OpenSimObject;
import org.opensim.modeling.Property;
import org.opensim.modeling.PropertySet;
import org.opensim.modeling.SetMuscleWrap;
import org.opensim.modeling.MusclePointSet;
import org.opensim.modeling.ArrayMusclePoint;
import org.opensim.modeling.SetWrapObject;
import org.opensim.modeling.SimmDarrylMuscle;
import org.opensim.modeling.MusclePoint;
import org.opensim.modeling.MusclePointSet;
import org.opensim.modeling.AbstractMuscle;
import org.opensim.view.ExplorerTopComponent;
import org.opensim.view.NameChangedEvent;
import org.opensim.view.nodes.OneMuscleNode;
import org.opensim.view.pub.OpenSimDB;

/**
 * Top component which displays the Muscle Editor window.
 */
final class MuscleEditorTopComponent extends TopComponent {
   
   private static MuscleEditorTopComponent instance;
   private AbstractActuator act; // the actuator that is currently shown in the Muscle Editor window
   private AbstractActuator actSaved; // the state that gets restored when "reset" is pressed
   private static Dimension AttachmentsPref = new Dimension(100, 100);
   private static Dimension ForcePref = new Dimension(100, 100);
   private static Dimension DynamicPref = new Dimension(100, 100);
   private static Dimension FunctionsPref = new Dimension(100, 100);
   private static Dimension WrapPref = new Dimension(100, 100);
   private static Dimension CurrentPathPref = new Dimension(100, 100);
   private static String[] wrapMethodNames = new String[] {"midpoint", "axial", "hybrid"};
   
   /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
   
   private static final String PREFERRED_ID = "MuscleEditorTopComponent";
   
   private MuscleEditorTopComponent() {
      initComponents();
      setName(NbBundle.getMessage(MuscleEditorTopComponent.class, "CTL_MuscleEditorTopComponent"));
      setToolTipText(NbBundle.getMessage(MuscleEditorTopComponent.class, "HINT_MuscleEditorTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {
      MuscleNameLabel = new javax.swing.JLabel();
      MuscleNameTextField = new javax.swing.JTextField();
      MuscleTypeLabel = new javax.swing.JLabel();
      MuscleTypeComboBox = new javax.swing.JComboBox();
      ApplyButton = new javax.swing.JButton();
      ResetButton = new javax.swing.JButton();
      ParametersTabbedPanel = new javax.swing.JTabbedPane();
      AttachmentsTab = new javax.swing.JScrollPane();
      AttachmentsPanel = new javax.swing.JPanel();
      ForceTab = new javax.swing.JScrollPane();
      ForcePanel = new javax.swing.JPanel();
      DynamicTab = new javax.swing.JScrollPane();
      DynamicPanel = new javax.swing.JPanel();
      FunctionsTab = new javax.swing.JScrollPane();
      FunctionsPanel = new javax.swing.JPanel();
      WrappingTab = new javax.swing.JScrollPane();
      WrapPanel = new javax.swing.JPanel();
      CurrentPathTab = new javax.swing.JScrollPane();
      CurrentPathPanel = new javax.swing.JPanel();

      org.openide.awt.Mnemonics.setLocalizedText(MuscleNameLabel, "name:");

      MuscleNameTextField.setText("glut_med1_r");
      MuscleNameTextField.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            MuscleNameTextFieldActionPerformed(evt);
         }
      });
      MuscleNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusLost(java.awt.event.FocusEvent evt) {
            MuscleNameTextFieldFocusLost(evt);
         }
      });

      MuscleTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      org.openide.awt.Mnemonics.setLocalizedText(MuscleTypeLabel, "type:");

      MuscleTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DarrylMuscle", "Item 1", "Item 2", "Item 3", "Item 4" }));

      org.openide.awt.Mnemonics.setLocalizedText(ApplyButton, "apply");
      ApplyButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            ApplyButtonActionPerformed(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(ResetButton, "reset");
      ResetButton.setMaximumSize(new java.awt.Dimension(63, 25));
      ResetButton.setMinimumSize(new java.awt.Dimension(63, 25));
      ResetButton.setPreferredSize(new java.awt.Dimension(63, 25));
      ResetButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            ResetButtonActionPerformed(evt);
         }
      });

      AttachmentsPanel.setLayout(null);

      AttachmentsPanel.setBackground(new java.awt.Color(200, 200, 255));
      AttachmentsTab.setViewportView(AttachmentsPanel);

      ParametersTabbedPanel.addTab("attachments", AttachmentsTab);

      ForcePanel.setLayout(null);

      ForcePanel.setBackground(new java.awt.Color(200, 255, 200));
      ForceTab.setViewportView(ForcePanel);

      ParametersTabbedPanel.addTab("force", ForceTab);

      DynamicPanel.setLayout(null);

      DynamicPanel.setBackground(new java.awt.Color(255, 200, 200));
      DynamicTab.setViewportView(DynamicPanel);

      ParametersTabbedPanel.addTab("dynamic", DynamicTab);

      FunctionsPanel.setLayout(null);

      FunctionsPanel.setBackground(new java.awt.Color(200, 255, 255));
      FunctionsTab.setViewportView(FunctionsPanel);

      ParametersTabbedPanel.addTab("functions", FunctionsTab);

      WrapPanel.setLayout(null);

      WrapPanel.setBackground(new java.awt.Color(255, 200, 255));
      WrappingTab.setViewportView(WrapPanel);

      ParametersTabbedPanel.addTab("wrapping", WrappingTab);

      CurrentPathPanel.setLayout(null);

      CurrentPathPanel.setBackground(new java.awt.Color(255, 255, 200));
      CurrentPathTab.setViewportView(CurrentPathPanel);

      ParametersTabbedPanel.addTab("current path", CurrentPathTab);

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
               .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                  .addContainerGap()
                  .add(ParametersTabbedPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE))
               .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                  .addContainerGap()
                  .add(ResetButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 290, Short.MAX_VALUE)
                  .add(ApplyButton))
               .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                  .add(14, 14, 14)
                  .add(MuscleNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(MuscleNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 185, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(MuscleTypeLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(MuscleTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .add(18, 18, 18)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(MuscleNameLabel)
               .add(MuscleNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(MuscleTypeLabel)
               .add(MuscleTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(19, 19, 19)
            .add(ParametersTabbedPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(ResetButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(ApplyButton))
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents
   
   private void MuscleNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_MuscleNameTextFieldFocusLost
      act.setName(MuscleNameTextField.getText());
      OpenSimDB.getInstance().setChanged();
      NameChangedEvent evnt = new NameChangedEvent(act);
      OpenSimDB.getInstance().notifyObservers(evnt);
   }//GEN-LAST:event_MuscleNameTextFieldFocusLost
   
   private void MuscleNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MuscleNameTextFieldActionPerformed
      act.setName(MuscleNameTextField.getText());
      OpenSimDB.getInstance().setChanged();
      NameChangedEvent evnt = new NameChangedEvent(act);
      OpenSimDB.getInstance().notifyObservers(evnt);
   }//GEN-LAST:event_MuscleNameTextFieldActionPerformed
   
   private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
      AbstractMuscle asm = AbstractMuscle.safeDownCast(act);
      AbstractMuscle asmSaved = AbstractMuscle.safeDownCast(actSaved);
      asm.copyData(asmSaved);
      asm.setName(asmSaved.getName()); // TODO: what about other properties of parent classes?
      OpenSimDB.getInstance().setChanged();
      NameChangedEvent evnt = new NameChangedEvent(act); // TODO: what about other changes to the muscle?
      OpenSimDB.getInstance().notifyObservers(evnt);
      setupComponent(act);
   }//GEN-LAST:event_ResetButtonActionPerformed
   
   private void ApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyButtonActionPerformed
      act.setName(MuscleNameTextField.getText());
      OpenSimDB.getInstance().setChanged();
      NameChangedEvent evnt = new NameChangedEvent(act);
      OpenSimDB.getInstance().notifyObservers(evnt);
      actSaved = AbstractMuscle.safeDownCast(act.copy());
      actSaved.setName(act.getName()); // TODO: what about other properties of parent classes?
   }//GEN-LAST:event_ApplyButtonActionPerformed
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton ApplyButton;
   private javax.swing.JPanel AttachmentsPanel;
   private javax.swing.JScrollPane AttachmentsTab;
   private javax.swing.JPanel CurrentPathPanel;
   private javax.swing.JScrollPane CurrentPathTab;
   private javax.swing.JPanel DynamicPanel;
   private javax.swing.JScrollPane DynamicTab;
   private javax.swing.JPanel ForcePanel;
   private javax.swing.JScrollPane ForceTab;
   private javax.swing.JPanel FunctionsPanel;
   private javax.swing.JScrollPane FunctionsTab;
   private javax.swing.JLabel MuscleNameLabel;
   private javax.swing.JTextField MuscleNameTextField;
   private javax.swing.JComboBox MuscleTypeComboBox;
   private javax.swing.JLabel MuscleTypeLabel;
   private javax.swing.JTabbedPane ParametersTabbedPanel;
   private javax.swing.JButton ResetButton;
   private javax.swing.JPanel WrapPanel;
   private javax.swing.JScrollPane WrappingTab;
   // End of variables declaration//GEN-END:variables
   
   /**
    * Gets default instance. Do not use directly: reserved for *.settings files only,
    * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
    * To obtain the singleton instance, use {@link findInstance}.
    */
   public static synchronized MuscleEditorTopComponent getDefault() {
      if (instance == null) {
         instance = new MuscleEditorTopComponent();
      }
      return instance;
   }
   
   /**
    * Obtain the MuscleEditorTopComponent instance. Never call {@link #getDefault} directly!
    */
   public static synchronized MuscleEditorTopComponent findInstance() {
      TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
      if (win == null) {
         ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find MuscleEditor component. It will not be located properly in the window system.");
         return getDefault();
      }
      if (win instanceof MuscleEditorTopComponent) {
         return (MuscleEditorTopComponent)win;
      }
      ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
      return getDefault();
   }
   
   public int getPersistenceType() {
      return TopComponent.PERSISTENCE_ALWAYS;
   }
   
   public void AttachmentActionPerformed(java.awt.event.ActionEvent evt, int attachmentNum, int coordNum) {
      AbstractMuscle asm = AbstractMuscle.safeDownCast(act);
      MusclePointSet ssmp = asm.getAttachmentSet();
      double newValue = Double.parseDouble(evt.getActionCommand());
      ssmp.get(attachmentNum).getAttachment().set(coordNum, newValue);
      asm.invalidatePath();
      setupCurrentPathPanel(asm);
   }
   
   public void AttachmentFocusLost(java.awt.event.FocusEvent evt, int attachmentNum, int coordNum) {
      AbstractMuscle asm = AbstractMuscle.safeDownCast(act);
      MusclePointSet ssmp = asm.getAttachmentSet();
      double newValue = Double.parseDouble(((javax.swing.JTextField)evt.getComponent()).getText());
      ssmp.get(attachmentNum).getAttachment().set(coordNum, newValue);
      asm.invalidatePath();
      setupCurrentPathPanel(asm);
   }
   
   public void componentOpened() {
      Node[] selected = ExplorerTopComponent.findInstance().getExplorerManager().getSelectedNodes();
      // Action shouldn't be available otherwise'
      OneMuscleNode muscleNode = (OneMuscleNode) selected[0];
      act = (AbstractActuator)muscleNode.getOpensimObject();
      actSaved = AbstractMuscle.safeDownCast(act.copy());
      setupComponent(act);
   }
   
   public void setupCurrentPathPanel(AbstractMuscle asm) {
      CurrentPathPanel.removeAll();
      
      // Put the points in the current path in the CurrentPath tab
      ArrayMusclePoint asmp = asm.getCurrentPath();
      NumberFormat nf = NumberFormat.getInstance();
      nf.setMaximumFractionDigits(5); // TODO
      nf.setMinimumFractionDigits(5); // TODO
      int X = 30;
      int Y = 40;
      
      // Set up the muscle-independent labels
      javax.swing.JLabel currentPathXLabel = new javax.swing.JLabel();
      currentPathXLabel.setText("X");
      currentPathXLabel.setBounds(X + 20, Y - 30, 8, 16);
      javax.swing.JLabel currentPathYLabel = new javax.swing.JLabel();
      currentPathYLabel.setText("Y");
      currentPathYLabel.setBounds(X + 80, Y - 30, 8, 16);
      javax.swing.JLabel currentPathZLabel = new javax.swing.JLabel();
      currentPathZLabel.setText("Z");
      currentPathZLabel.setBounds(X + 140, Y - 30, 8, 16);
      javax.swing.JLabel currentPathBodyLabel = new javax.swing.JLabel();
      currentPathBodyLabel.setText("body");
      currentPathBodyLabel.setBounds(X + 210, Y - 30, 30, 16);
      javax.swing.JLabel currentPathSelLabel = new javax.swing.JLabel();
      currentPathSelLabel.setText("type");
      currentPathSelLabel.setBounds(X + 290, Y - 30, 30, 16);
      CurrentPathPanel.add(currentPathXLabel);
      CurrentPathPanel.add(currentPathYLabel);
      CurrentPathPanel.add(currentPathZLabel);
      CurrentPathPanel.add(currentPathBodyLabel);
      CurrentPathPanel.add(currentPathSelLabel);
      
      int n = asmp.getSize();
      double x1 = asmp.get(0).getAttachment().getitem(0);
      double y1 = asmp.get(0).getAttachment().getitem(1);
      double z1 = asmp.get(0).getAttachment().getitem(2);
      //double x2 = asmp.get(1).getAttachment().getitem(0);
      //double y2 = asmp.get(1).getAttachment().getitem(1);
      //double z2 = asmp.get(1).getAttachment().getitem(2);
      //String w1 = asmp.get(1).getWrapObject().getName();
      //String w2 = asmp.get(3).getWrapObject().getName();
      
      int i;
      for (i = 0; i < asmp.getSize(); i++) {
         boolean isWrapPoint = false;
         if (asmp.get(i).getWrapObject() != null)
            isWrapPoint = true;
         javax.swing.JLabel indexLabel = new javax.swing.JLabel();
         javax.swing.JLabel xField = new javax.swing.JLabel();
         javax.swing.JLabel yField = new javax.swing.JLabel();
         javax.swing.JLabel zField = new javax.swing.JLabel();
         javax.swing.JLabel bodyLabel = new javax.swing.JLabel();
         javax.swing.JLabel typeLabel = new javax.swing.JLabel();
         indexLabel.setText(String.valueOf(i+1) + ".");
         xField.setText(nf.format(asmp.get(i).getAttachment().getitem(0)));
         yField.setText(nf.format(asmp.get(i).getAttachment().getitem(1)));
         zField.setText(nf.format(asmp.get(i).getAttachment().getitem(2)));
         bodyLabel.setText(asmp.get(i).getBodyName());
         if (isWrapPoint)
            typeLabel.setText("wrap" + " (" + asmp.get(i).getWrapObject().getName() + ")");
         else {
            if (MuscleViaPoint.safeDownCast(asmp.get(i)) == null)
               typeLabel.setText("fixed");
            else
               typeLabel.setText("via");
         }
         int height = Y + i * 22;
         int width = 60;
         indexLabel.setBounds(X - 20, height, 20, 21);
         xField.setBounds(X, height, width, 21);
         yField.setBounds(X + width + 1, height, width, 21);
         zField.setBounds(X + 2*width + 2, height, width, 21);
         bodyLabel.setBounds(X + 3*width + 10, height, 90, 21);
         typeLabel.setBounds(X + 3*width + 110, height, 120, 21);
         CurrentPathPanel.add(indexLabel);
         CurrentPathPanel.add(xField);
         CurrentPathPanel.add(yField);
         CurrentPathPanel.add(zField);
         CurrentPathPanel.add(bodyLabel);
         CurrentPathPanel.add(typeLabel);
      }
      CurrentPathPref.width = 400;
      CurrentPathPref.height = Y + asmp.getSize() * 22;
      CurrentPathPanel.setPreferredSize(AttachmentsPref);
      CurrentPathPanel.revalidate();
   }
   
   public void setupWrapPanel(AbstractMuscle asm) {
      WrapPanel.removeAll();
      
      // Set up the Wrap Panel
      int i, j, wCount = 0;
      int numAttachments = asm.getAttachmentSet().getSize();
      int X = 30;
      int Y = 40;
      BodySet bodies = asm.getModel().getDynamicsEngine().getBodySet();
      
      SetMuscleWrap smw = asm.getWrapSet();
      String[] startPointNames = new String[numAttachments + 1];
      startPointNames[0] = new String("start");
      String[] endPointNames = new String[numAttachments + 1];
      endPointNames[numAttachments] = new String("end");
      for (i = 0; i < numAttachments; i++) {
         startPointNames[i+1] = String.valueOf(i+1);
         endPointNames[i] = String.valueOf(i+1);
      }
      int numWrapObjects = 0;
      for (i = 0; i < bodies.getSize(); i++) {
         numWrapObjects += bodies.get(i).getWrapObjectSet().getSize();
      }
      String[] wrapObjectNames = new String[numWrapObjects];
      for (i = 0, wCount = 0; i < bodies.getSize(); i++) {
         SetWrapObject wrapObjects = bodies.get(i).getWrapObjectSet();
         for (j = 0; j < wrapObjects.getSize(); j++)
            wrapObjectNames[wCount++] = new String(wrapObjects.get(j).getName());
      }
      
      // Set up the muscle-independent labels
      javax.swing.JLabel wrapObjectLabel = new javax.swing.JLabel();
      wrapObjectLabel.setText("object");
      wrapObjectLabel.setBounds(70, 10, 50, 16);
      javax.swing.JLabel wrapMethodLabel = new javax.swing.JLabel();
      wrapMethodLabel.setText("method");
      wrapMethodLabel.setBounds(170, 10, 50, 16);
      javax.swing.JLabel wrapStartLabel = new javax.swing.JLabel();
      wrapStartLabel.setText("start");
      wrapStartLabel.setBounds(260, 10, 40, 16);
      javax.swing.JLabel wrapEndLabel = new javax.swing.JLabel();
      wrapEndLabel.setText("end");
      wrapEndLabel.setBounds(320, 10, 30, 16);
      WrapPanel.add(wrapObjectLabel);
      WrapPanel.add(wrapMethodLabel);
      WrapPanel.add(wrapStartLabel);
      WrapPanel.add(wrapEndLabel);
      
      for (i = 0; i < smw.getSize(); i++) {
         boolean isEllipsoid = false;
         AbstractWrapObject awo = smw.get(i).getWrapObject();
         WrapEllipsoid we = WrapEllipsoid.safeDownCast(awo);
         if (we != null)
            isEllipsoid = true;
         javax.swing.JLabel indexLabel = new javax.swing.JLabel();
         javax.swing.JComboBox objComboBox = new javax.swing.JComboBox();
         javax.swing.JComboBox methodComboBox = null;
         if (isEllipsoid == true)
            methodComboBox = new javax.swing.JComboBox();
         javax.swing.JComboBox startComboBox = new javax.swing.JComboBox();
         javax.swing.JComboBox endComboBox = new javax.swing.JComboBox();
         indexLabel.setText(String.valueOf(i+1));
         objComboBox.setModel(new javax.swing.DefaultComboBoxModel(wrapObjectNames));
         objComboBox.setSelectedIndex(findElement(wrapObjectNames, smw.get(i).getWrapObjectName()));
         if (isEllipsoid == true) {
            methodComboBox.setModel(new javax.swing.DefaultComboBoxModel(wrapMethodNames));
            methodComboBox.setSelectedIndex(findElement(wrapMethodNames, smw.get(i).getMethodName()));
         }
         startComboBox.setModel(new javax.swing.DefaultComboBoxModel(startPointNames));
         int start = smw.get(i).getStartPoint();
         if (start < 0)
            startComboBox.setSelectedIndex(0);
         else
            startComboBox.setSelectedIndex(findElement(startPointNames, String.valueOf(start)));
         endComboBox.setModel(new javax.swing.DefaultComboBoxModel(endPointNames));
         int end = smw.get(i).getEndPoint();
         if (end < 0)
            endComboBox.setSelectedIndex(endComboBox.getItemCount()-1);
         else
            endComboBox.setSelectedIndex(findElement(endPointNames, String.valueOf(end)));
         indexLabel.setBounds(X - 20, Y + i * 22, 20, 21);
         objComboBox.setBounds(X, Y + i * 22, 120, 21);
         if (isEllipsoid == true)
            methodComboBox.setBounds(X + 130, Y + i * 22, 80, 21);
         startComboBox.setBounds(X + 220, Y + i * 22, 50, 21);
         endComboBox.setBounds(X + 280, Y + i * 22, 50, 21);
         WrapPanel.add(indexLabel);
         WrapPanel.add(objComboBox);
         if (isEllipsoid == true)
            WrapPanel.add(methodComboBox);
         WrapPanel.add(startComboBox);
         WrapPanel.add(endComboBox);
      }
      
      WrapPref.width = 350;
      WrapPref.height = Y + 20 + smw.getSize() * 22;
      WrapPanel.setPreferredSize(WrapPref);
      WrapPanel.revalidate();
   }
   
   public void setupComponent(AbstractActuator act) {
      // Remove all previous GUI components from the panels.
      // If the type of actuator changed since the last time
      // the panels were set up, there could be different
      // numbers and types of components.
      AttachmentsPanel.removeAll();
      ForcePanel.removeAll();
      DynamicPanel.removeAll();
      FunctionsPanel.removeAll();
      
      MuscleNameTextField.setText(act.getName());
      PropertySet ps = act.getPropertySet();
      NumberFormat nf = NumberFormat.getInstance();
      nf.setMaximumFractionDigits(5); // TODO
      nf.setMinimumFractionDigits(5); // TODO
      int i, j;
      AbstractMuscle asm = AbstractMuscle.safeDownCast(act);
      if (asm != null) {
         int dCount = 0, fCount = 0, iCount = 0, aCount = 0, wCount = 0;
         for (i = 0; i < ps.getSize(); i++) {
            Property p;
            try {
               p = ps.get(i);
               // for testing, add doubles to Force panel and Dynamic panel
               if (p.getType() == org.opensim.modeling.Property.PropertyType.Dbl) {
                  javax.swing.JLabel propLabel = new javax.swing.JLabel();
                  propLabel.setText(p.getName());
                  propLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                  propLabel.setBounds(20, 22 + dCount * 22, 180, 16);
                  propLabel.setToolTipText(p.getComment());
                  javax.swing.JTextField propField = new javax.swing.JTextField();
                  propField.setBounds(210, 20 + dCount * 22, 120, 21);
                  propField.setText(p.toString());
                  propField.setToolTipText(p.getComment());
                  DynamicPanel.add(propLabel);
                  DynamicPanel.add(propField);
                  ////////////////////////////
                  javax.swing.JLabel propLabel2 = new javax.swing.JLabel();
                  propLabel2.setText(p.getName());
                  propLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
                  propLabel2.setBounds(20, 22 + dCount * 22, 180, 16);
                  propLabel2.setToolTipText(p.getComment());
                  javax.swing.JTextField propField2 = new javax.swing.JTextField();
                  propField2.setBounds(210, 20 + dCount * 22, 120, 21);
                  propField2.setText(p.toString());
                  propField2.setToolTipText(p.getComment());
                  ForcePanel.add(propLabel2);
                  ForcePanel.add(propField2);
                  ////////////////////////////
                  dCount++;
               } else if (p.getType() == org.opensim.modeling.Property.PropertyType.Int) {
                  // for testing...
                  javax.swing.JLabel propLabel = new javax.swing.JLabel();
                  propLabel.setText(p.getName());
                  propLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                  propLabel.setBounds(20, 22 + iCount * 22, 180, 16);
                  propLabel.setToolTipText(p.getComment());
                  javax.swing.JTextField propField = new javax.swing.JTextField();
                  propField.setBounds(210, 20 + iCount * 22, 120, 21);
                  propField.setText(p.toString());
                  propField.setToolTipText(p.getComment());
                  //ForcePanel.add(propLabel);
                  //ForcePanel.add(propField);
                  iCount++;
               } else if (p.getType() == org.opensim.modeling.Property.PropertyType.ObjPtr) {
                  OpenSimObject obj = p.getValueObjPtr();
                  Function func = Function.safeDownCast(obj);
                  if (func != null) {
                     javax.swing.JLabel propLabel = new javax.swing.JLabel();
                     propLabel.setText(p.getName());
                     propLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                     propLabel.setBounds(20, 22 + fCount * 22, 200, 16);
                     propLabel.setToolTipText(p.getComment());
                     javax.swing.JButton propButton = new javax.swing.JButton();
                     propButton.setBounds(230, 20 + fCount * 22, 60, 21);
                     propButton.setText("edit");
                     FunctionsPanel.add(propLabel);
                     FunctionsPanel.add(propButton);
                     fCount++;
                  }
               }
            } catch (IOException ex) {
               ex.printStackTrace();
            }
         }
         
         // Put the attachment points in the attachments tab
         MusclePointSet ssmp = asm.getAttachmentSet();
         int X = 30;
         int Y = 40;
         BodySet bodies = asm.getModel().getDynamicsEngine().getBodySet();
         String[] bodyNames = new String[bodies.getSize()];
         for (i = 0; i < bodies.getSize(); i++)
            bodyNames[i] = new String(bodies.get(i).getName());
         CoordinateSet coordinates = asm.getModel().getDynamicsEngine().getCoordinateSet();
         String[] coordinateNames = new String[coordinates.getSize()];
         for (i = 0; i < coordinates.getSize(); i++)
            coordinateNames[i] = new String(coordinates.get(i).getName());

         // Set up the muscle-independent labels
         boolean anyViaPoints = false;
         javax.swing.JLabel attachmentXLabel = new javax.swing.JLabel();
         attachmentXLabel.setText("X");
         attachmentXLabel.setBounds(X + 20, Y - 30, 8, 16);
         javax.swing.JLabel attachmentYLabel = new javax.swing.JLabel();
         attachmentYLabel.setText("Y");
         attachmentYLabel.setBounds(X + 80, Y - 30, 8, 16);
         javax.swing.JLabel attachmentZLabel = new javax.swing.JLabel();
         attachmentZLabel.setText("Z");
         attachmentZLabel.setBounds(X + 140, Y - 30, 8, 16);
         javax.swing.JLabel attachmentBodyLabel = new javax.swing.JLabel();
         attachmentBodyLabel.setText("body");
         attachmentBodyLabel.setBounds(X + 210, Y - 30, 30, 16);
         javax.swing.JLabel attachmentSelLabel = new javax.swing.JLabel();
         attachmentSelLabel.setText("sel");
         attachmentSelLabel.setBounds(X + 290, Y - 30, 25, 16);
         javax.swing.JLabel coordLabel = new javax.swing.JLabel();
         coordLabel.setText("coordinate");
         coordLabel.setBounds(X + 360, Y - 30, 60, 16);
         javax.swing.JLabel rangeMinLabel = new javax.swing.JLabel();
         rangeMinLabel.setText("min");
         rangeMinLabel.setBounds(X + 475, Y - 30, 60, 16);
         javax.swing.JLabel rangeMaxLabel = new javax.swing.JLabel();
         rangeMaxLabel.setText("max");
         rangeMaxLabel.setBounds(X + 545, Y - 30, 60, 16);
         AttachmentsPanel.add(attachmentXLabel);
         AttachmentsPanel.add(attachmentYLabel);
         AttachmentsPanel.add(attachmentZLabel);
         AttachmentsPanel.add(attachmentBodyLabel);
         AttachmentsPanel.add(attachmentSelLabel);
         AttachmentsPanel.add(coordLabel);
         AttachmentsPanel.add(rangeMinLabel);
         AttachmentsPanel.add(rangeMaxLabel);
         
         for (i = 0; i < ssmp.getSize(); i++) {
            MuscleViaPoint via = MuscleViaPoint.safeDownCast(ssmp.get(i));
            javax.swing.JLabel indexLabel = null;
            indexLabel = new javax.swing.JLabel();
            indexLabel.setText(String.valueOf(aCount+1) + ".");
            
            javax.swing.JTextField xField = new javax.swing.JTextField();
            javax.swing.JTextField yField = new javax.swing.JTextField();
            javax.swing.JTextField zField = new javax.swing.JTextField();
            javax.swing.JComboBox comboBox = new javax.swing.JComboBox();
            javax.swing.JCheckBox selectBox = new javax.swing.JCheckBox();
            javax.swing.JComboBox coordComboBox = null;
            javax.swing.JTextField rangeMinField = null;
            javax.swing.JTextField rangeMaxField = null;
            if (via != null) {
               anyViaPoints = true;
               coordComboBox = new javax.swing.JComboBox();
               rangeMinField = new javax.swing.JTextField();
               rangeMaxField = new javax.swing.JTextField();
            }
            
            int height = Y + i * 22;
            int width = 60;
            
            comboBox.setModel(new javax.swing.DefaultComboBoxModel(bodyNames));
            comboBox.setSelectedIndex(findElement(bodyNames, ssmp.get(i).getBodyName()));
            if (via != null) {
               coordComboBox.setModel(new javax.swing.DefaultComboBoxModel(coordinateNames));
               coordComboBox.setSelectedIndex(findElement(coordinateNames, via.getCoordinateName()));
               rangeMinField.setText(nf.format(via.getRange().getitem(0)));
               rangeMaxField.setText(nf.format(via.getRange().getitem(1)));
               coordComboBox.setBounds(X + 3*width + 140, height, 130, 21);
               rangeMinField.setBounds(X + 3*width + 280, height, 60, 21);
               rangeMaxField.setBounds(X + 3*width + 345, height, 60, 21);
            }

            indexLabel.setBounds(X - 20, height, 20, 21);
            xField.setBounds(X, height, width, 21);
            yField.setBounds(X + width + 1, height, width, 21);
            zField.setBounds(X + 2*width + 2, height, width, 21);
            comboBox.setBounds(X + 3*width + 10, height, 90, 21);
            selectBox.setBounds(X + 3*width + 110, height, 21, 21);
            xField.setText(nf.format(ssmp.get(i).getAttachment().getitem(0)));
            yField.setText(nf.format(ssmp.get(i).getAttachment().getitem(1)));
            zField.setText(nf.format(ssmp.get(i).getAttachment().getitem(2)));
            AttachmentsPanel.add(indexLabel);
            aCount++;

            final int num = i;
            xField.addActionListener(new java.awt.event.ActionListener() {
               public void actionPerformed(java.awt.event.ActionEvent evt) {
                  AttachmentActionPerformed(evt, num, 0);
               }
            });
            xField.addFocusListener(new java.awt.event.FocusAdapter() {
               public void focusLost(java.awt.event.FocusEvent evt) {
                  AttachmentFocusLost(evt, num, 0);
               }
            });
            yField.addActionListener(new java.awt.event.ActionListener() {
               public void actionPerformed(java.awt.event.ActionEvent evt) {
                  AttachmentActionPerformed(evt, num, 1);
               }
            });
            yField.addFocusListener(new java.awt.event.FocusAdapter() {
               public void focusLost(java.awt.event.FocusEvent evt) {
                  AttachmentFocusLost(evt, num, 1);
               }
            });
            zField.addActionListener(new java.awt.event.ActionListener() {
               public void actionPerformed(java.awt.event.ActionEvent evt) {
                  AttachmentActionPerformed(evt, num, 2);
               }
            });
            zField.addFocusListener(new java.awt.event.FocusAdapter() {
               public void focusLost(java.awt.event.FocusEvent evt) {
                  AttachmentFocusLost(evt, num, 2);
               }
            });
            AttachmentsPanel.add(xField);
            AttachmentsPanel.add(yField);
            AttachmentsPanel.add(zField);
            AttachmentsPanel.add(comboBox);
            AttachmentsPanel.add(selectBox);
            if (via != null) {
               AttachmentsPanel.add(coordComboBox);
               AttachmentsPanel.add(rangeMinField);
               AttachmentsPanel.add(rangeMaxField);
            }
         }
         
         setupWrapPanel(asm);
         setupCurrentPathPanel(asm);
         
         if (anyViaPoints)
            AttachmentsPref.width = 630;
         else
            AttachmentsPref.width = 350;
         AttachmentsPref.height = Y + ssmp.getSize() * 22;
         AttachmentsPanel.setPreferredSize(AttachmentsPref);
         AttachmentsPanel.revalidate();
         
         ForcePref.width = 350;
         ForcePref.height = 30 + dCount * 22;
         ForcePanel.setPreferredSize(ForcePref);
         ForcePanel.revalidate();
         
         DynamicPref.width = 350;
         DynamicPref.height = 30 + dCount * 22;
         DynamicPanel.setPreferredSize(DynamicPref);
         DynamicPanel.revalidate();
         
         FunctionsPref.width = 350;
         FunctionsPref.height = 30 + fCount * 22;
         FunctionsPanel.setPreferredSize(FunctionsPref);
         FunctionsPanel.revalidate();
      }
      
      this.revalidate();
      this.repaint();
   }
   
   public void componentClosed() {
      // TODO add custom code on component closing
   }
   
   /** replaces this in object stream */
   public Object writeReplace() {
      return new ResolvableHelper();
   }
   
   protected String preferredID() {
      return PREFERRED_ID;
   }
   
   private int findElement(String[] nameList, String name) {
      int i;
      for (i = 0; i < nameList.length; i++)
         if (nameList[i].equals(name))
            return i;
      return -1;
   }
   
   final static class ResolvableHelper implements Serializable {
      private static final long serialVersionUID = 1L;
      public Object readResolve() {
         return MuscleEditorTopComponent.getDefault();
      }
   }
   
}
