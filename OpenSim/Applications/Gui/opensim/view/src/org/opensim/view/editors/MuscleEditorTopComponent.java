package org.opensim.view.editors;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.Serializable;
import java.lang.String;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import java.text.NumberFormat;
import org.openide.ErrorManager;
import org.openide.nodes.Node;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.opensim.modeling.AbstractActuator;
import org.opensim.modeling.AbstractModel;
import org.opensim.modeling.AbstractWrapObject;
import org.opensim.modeling.SimmMuscleViaPoint;
import org.opensim.modeling.WrapEllipsoid;
import org.opensim.modeling.BodySet;
import org.opensim.modeling.Function;
import org.opensim.modeling.OpenSimObject;
import org.opensim.modeling.Property;
import org.opensim.modeling.PropertySet;
import org.opensim.modeling.SetMuscleWrap;
import org.opensim.modeling.SetSimmMusclePoint;
import org.opensim.modeling.ArraySimmMusclePoint;
import org.opensim.modeling.SetWrapObject;
import org.opensim.modeling.SimmDarrylMuscle;
import org.opensim.modeling.SimmMusclePoint;
import org.opensim.modeling.SimmMusclePointSet;
import org.opensim.modeling.AbstractSimmMuscle;
import org.opensim.view.ExplorerTopComponent;
import org.opensim.view.NameChangedEvent;
import org.opensim.view.nodes.OneMuscleNode;
import org.opensim.view.pub.OpenSimDB;

/**
 * Top component which displays the Muscle Editor window.
 */
final class MuscleEditorTopComponent extends TopComponent {
   
   private static MuscleEditorTopComponent instance;
   private AbstractActuator act; // the actuator that is currently shown in the Muscle Editor window
   private AbstractActuator actSaved; // the state that gets restored when "reset" is pressed
   private static Dimension AttachmentsPref = new Dimension(100, 100);
   private static Dimension ForcePref = new Dimension(100, 100);
   private static Dimension DynamicPref = new Dimension(100, 100);
   private static Dimension FunctionsPref = new Dimension(100, 100);
   private static Dimension WrapPref = new Dimension(100, 100);
   private static Dimension CurrentPathPref = new Dimension(100, 100);
   private static String[] wrapMethodNames = new String[] {"midpoint", "axial", "hybrid"};
   
   /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
   
   private static final String PREFERRED_ID = "MuscleEditorTopComponent";
   
   private MuscleEditorTopComponent() {
      initComponents();
      setName(NbBundle.getMessage(MuscleEditorTopComponent.class, "CTL_MuscleEditorTopComponent"));
      setToolTipText(NbBundle.getMessage(MuscleEditorTopComponent.class, "HINT_MuscleEditorTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {
      MuscleNameLabel = new javax.swing.JLabel();
      MuscleNameTextField = new javax.swing.JTextField();
      MuscleTypeLabel = new javax.swing.JLabel();
      MuscleTypeComboBox = new javax.swing.JComboBox();
      ApplyButton = new javax.swing.JButton();
      ResetButton = new javax.swing.JButton();
      ParametersTabbedPanel = new javax.swing.JTabbedPane();
      AttachmentsTab = new javax.swing.JScrollPane();
      AttachmentsPanel = new javax.swing.JPanel();
      AttachmentXLabel = new javax.swing.JLabel();
      AttachmentYLabel = new javax.swing.JLabel();
      AttachmentZLabel = new javax.swing.JLabel();
      AttachmentBodyLabel = new javax.swing.JLabel();
      AttachmentSelectedLabel = new javax.swing.JLabel();
      ForceTab = new javax.swing.JScrollPane();
      ForcePanel = new javax.swing.JPanel();
      DynamicTab = new javax.swing.JScrollPane();
      DynamicPanel = new javax.swing.JPanel();
      FunctionsTab = new javax.swing.JScrollPane();
      FunctionsPanel = new javax.swing.JPanel();
      WrappingTab = new javax.swing.JScrollPane();
      WrapPanel = new javax.swing.JPanel();
      WrapObjectLabel = new javax.swing.JLabel();
      WrapMethodLabel = new javax.swing.JLabel();
      WrapRangeStartLabel = new javax.swing.JLabel();
      WrapRangeEndLabel = new javax.swing.JLabel();
      CurrentPathTab = new javax.swing.JScrollPane();
      CurrentPathPanel = new javax.swing.JPanel();
      CurrentPathXLabel1 = new javax.swing.JLabel();
      CurrentPathYLabel1 = new javax.swing.JLabel();
      CurrentPathZLabel1 = new javax.swing.JLabel();
      CurrentPathBodyLabel1 = new javax.swing.JLabel();
      CurrentPathTypeLabel = new javax.swing.JLabel();

      org.openide.awt.Mnemonics.setLocalizedText(MuscleNameLabel, "name:");

      MuscleNameTextField.setText("glut_med1_r");

      MuscleTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      org.openide.awt.Mnemonics.setLocalizedText(MuscleTypeLabel, "type:");

      MuscleTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DarrylMuscle", "Item 1", "Item 2", "Item 3", "Item 4" }));

      org.openide.awt.Mnemonics.setLocalizedText(ApplyButton, "apply");
      ApplyButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            ApplyButtonActionPerformed(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(ResetButton, "reset");
      ResetButton.setMaximumSize(new java.awt.Dimension(63, 25));
      ResetButton.setMinimumSize(new java.awt.Dimension(63, 25));
      ResetButton.setPreferredSize(new java.awt.Dimension(63, 25));
      ResetButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            ResetButtonActionPerformed(evt);
         }
      });

      AttachmentsPanel.setLayout(null);

      AttachmentsPanel.setBackground(new java.awt.Color(200, 200, 255));
      org.openide.awt.Mnemonics.setLocalizedText(AttachmentXLabel, "X");
      AttachmentsPanel.add(AttachmentXLabel);
      AttachmentXLabel.setBounds(50, 10, 8, 16);

      org.openide.awt.Mnemonics.setLocalizedText(AttachmentYLabel, "Y");
      AttachmentsPanel.add(AttachmentYLabel);
      AttachmentYLabel.setBounds(110, 10, 7, 16);

      org.openide.awt.Mnemonics.setLocalizedText(AttachmentZLabel, "Z");
      AttachmentsPanel.add(AttachmentZLabel);
      AttachmentZLabel.setBounds(170, 10, 7, 16);

      org.openide.awt.Mnemonics.setLocalizedText(AttachmentBodyLabel, "body");
      AttachmentsPanel.add(AttachmentBodyLabel);
      AttachmentBodyLabel.setBounds(240, 10, 27, 16);

      org.openide.awt.Mnemonics.setLocalizedText(AttachmentSelectedLabel, "sel");
      AttachmentsPanel.add(AttachmentSelectedLabel);
      AttachmentSelectedLabel.setBounds(320, 10, 16, 16);

      AttachmentsTab.setViewportView(AttachmentsPanel);

      ParametersTabbedPanel.addTab("attachments", AttachmentsTab);

      ForcePanel.setLayout(null);

      ForcePanel.setBackground(new java.awt.Color(200, 255, 200));
      ForceTab.setViewportView(ForcePanel);

      ParametersTabbedPanel.addTab("force", ForceTab);

      DynamicPanel.setLayout(null);

      DynamicPanel.setBackground(new java.awt.Color(255, 200, 200));
      DynamicTab.setViewportView(DynamicPanel);

      ParametersTabbedPanel.addTab("dynamic", DynamicTab);

      FunctionsPanel.setLayout(null);

      FunctionsPanel.setBackground(new java.awt.Color(200, 255, 255));
      FunctionsTab.setViewportView(FunctionsPanel);

      ParametersTabbedPanel.addTab("functions", FunctionsTab);

      WrapPanel.setLayout(null);

      WrapPanel.setBackground(new java.awt.Color(255, 200, 255));
      org.openide.awt.Mnemonics.setLocalizedText(WrapObjectLabel, "object");
      WrapPanel.add(WrapObjectLabel);
      WrapObjectLabel.setBounds(70, 10, 35, 16);

      org.openide.awt.Mnemonics.setLocalizedText(WrapMethodLabel, "  method");
      WrapPanel.add(WrapMethodLabel);
      WrapMethodLabel.setBounds(170, 10, 51, 16);

      org.openide.awt.Mnemonics.setLocalizedText(WrapRangeStartLabel, "start");
      WrapPanel.add(WrapRangeStartLabel);
      WrapRangeStartLabel.setBounds(260, 10, 26, 16);

      org.openide.awt.Mnemonics.setLocalizedText(WrapRangeEndLabel, "end");
      WrapPanel.add(WrapRangeEndLabel);
      WrapRangeEndLabel.setBounds(320, 10, 21, 16);

      WrappingTab.setViewportView(WrapPanel);

      ParametersTabbedPanel.addTab("wrapping", WrappingTab);

      CurrentPathPanel.setLayout(null);

      CurrentPathPanel.setBackground(new java.awt.Color(255, 255, 200));
      org.openide.awt.Mnemonics.setLocalizedText(CurrentPathXLabel1, "X");
      CurrentPathPanel.add(CurrentPathXLabel1);
      CurrentPathXLabel1.setBounds(50, 10, 8, 16);

      org.openide.awt.Mnemonics.setLocalizedText(CurrentPathYLabel1, "Y");
      CurrentPathPanel.add(CurrentPathYLabel1);
      CurrentPathYLabel1.setBounds(110, 10, 7, 16);

      org.openide.awt.Mnemonics.setLocalizedText(CurrentPathZLabel1, "Z");
      CurrentPathPanel.add(CurrentPathZLabel1);
      CurrentPathZLabel1.setBounds(170, 10, 7, 16);

      org.openide.awt.Mnemonics.setLocalizedText(CurrentPathBodyLabel1, "body");
      CurrentPathPanel.add(CurrentPathBodyLabel1);
      CurrentPathBodyLabel1.setBounds(240, 10, 27, 16);

      org.openide.awt.Mnemonics.setLocalizedText(CurrentPathTypeLabel, "type");
      CurrentPathPanel.add(CurrentPathTypeLabel);
      CurrentPathTypeLabel.setBounds(320, 10, 30, 16);
      CurrentPathTypeLabel.getAccessibleContext().setAccessibleName("type");

      CurrentPathTab.setViewportView(CurrentPathPanel);

      ParametersTabbedPanel.addTab("current path", CurrentPathTab);

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
               .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                  .addContainerGap()
                  .add(ParametersTabbedPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE))
               .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                  .addContainerGap()
                  .add(ResetButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 290, Short.MAX_VALUE)
                  .add(ApplyButton))
               .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                  .add(14, 14, 14)
                  .add(MuscleNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(MuscleNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 185, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(MuscleTypeLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(MuscleTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .add(18, 18, 18)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(MuscleNameLabel)
               .add(MuscleNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(MuscleTypeLabel)
               .add(MuscleTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(19, 19, 19)
            .add(ParametersTabbedPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(ResetButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(ApplyButton))
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

   private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
      //act = actSaved;
      setupComponent(act);
   }//GEN-LAST:event_ResetButtonActionPerformed

   private void ApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyButtonActionPerformed
      act.setName(MuscleNameTextField.getText());
      OpenSimDB.getInstance().setChanged();
      NameChangedEvent evnt = new NameChangedEvent(act);
      OpenSimDB.getInstance().notifyObservers(evnt);
      actSaved = AbstractSimmMuscle.safeDownCast(act.copy());
   }//GEN-LAST:event_ApplyButtonActionPerformed

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton ApplyButton;
   private javax.swing.JLabel AttachmentBodyLabel;
   private javax.swing.JLabel AttachmentSelectedLabel;
   private javax.swing.JLabel AttachmentXLabel;
   private javax.swing.JLabel AttachmentYLabel;
   private javax.swing.JLabel AttachmentZLabel;
   private javax.swing.JPanel AttachmentsPanel;
   private javax.swing.JScrollPane AttachmentsTab;
   private javax.swing.JLabel CurrentPathBodyLabel1;
   private javax.swing.JPanel CurrentPathPanel;
   private javax.swing.JScrollPane CurrentPathTab;
   private javax.swing.JLabel CurrentPathTypeLabel;
   private javax.swing.JLabel CurrentPathXLabel1;
   private javax.swing.JLabel CurrentPathYLabel1;
   private javax.swing.JLabel CurrentPathZLabel1;
   private javax.swing.JPanel DynamicPanel;
   private javax.swing.JScrollPane DynamicTab;
   private javax.swing.JPanel ForcePanel;
   private javax.swing.JScrollPane ForceTab;
   private javax.swing.JPanel FunctionsPanel;
   private javax.swing.JScrollPane FunctionsTab;
   private javax.swing.JLabel MuscleNameLabel;
   private javax.swing.JTextField MuscleNameTextField;
   private javax.swing.JComboBox MuscleTypeComboBox;
   private javax.swing.JLabel MuscleTypeLabel;
   private javax.swing.JTabbedPane ParametersTabbedPanel;
   private javax.swing.JButton ResetButton;
   private javax.swing.JLabel WrapMethodLabel;
   private javax.swing.JLabel WrapObjectLabel;
   private javax.swing.JPanel WrapPanel;
   private javax.swing.JLabel WrapRangeEndLabel;
   private javax.swing.JLabel WrapRangeStartLabel;
   private javax.swing.JScrollPane WrappingTab;
   // End of variables declaration//GEN-END:variables
   
   /**
    * Gets default instance. Do not use directly: reserved for *.settings files only,
    * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
    * To obtain the singleton instance, use {@link findInstance}.
    */
   public static synchronized MuscleEditorTopComponent getDefault() {
      if (instance == null) {
         instance = new MuscleEditorTopComponent();
      }
      return instance;
   }
   
   /**
    * Obtain the MuscleEditorTopComponent instance. Never call {@link #getDefault} directly!
    */
   public static synchronized MuscleEditorTopComponent findInstance() {
      TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
      if (win == null) {
         ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find MuscleEditor component. It will not be located properly in the window system.");
         return getDefault();
      }
      if (win instanceof MuscleEditorTopComponent) {
         return (MuscleEditorTopComponent)win;
      }
      ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
      return getDefault();
   }
   
   public int getPersistenceType() {
      return TopComponent.PERSISTENCE_ALWAYS;
   }
   
   public void componentOpened() {
      Node[] selected = ExplorerTopComponent.findInstance().getExplorerManager().getSelectedNodes();
      // Action shouldn't be available otherwise'
      OneMuscleNode muscleNode = (OneMuscleNode) selected[0];
      act = (AbstractActuator)muscleNode.getOpensimObject();
      actSaved = AbstractSimmMuscle.safeDownCast(act.copy());
      setupComponent(act);
   }

   public void setupComponent(AbstractActuator act) {
      MuscleNameTextField.setText(act.getName());
      PropertySet ps = act.getPropertySet();
      NumberFormat nf = NumberFormat.getInstance();
      nf.setMaximumFractionDigits(5); // TODO
      nf.setMinimumFractionDigits(5); // TODO
      int i, j;
      AbstractSimmMuscle asm = AbstractSimmMuscle.safeDownCast(act);
      if (asm != null) {
         int dCount = 0, fCount = 0, iCount = 0, aCount = 0, wCount = 0;
         for (i = 0; i < ps.getSize(); i++) {
            Property p;
            try {
               p = ps.get(i);
               // for testing, add doubles to Force panel and Dynamic panel
               if (p.getType() == org.opensim.modeling.Property.PropertyType.Dbl) {
                  javax.swing.JLabel propLabel = new javax.swing.JLabel();
                  propLabel.setText(p.getName());
                  propLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                  propLabel.setBounds(20, 22 + dCount * 22, 180, 16);
                  propLabel.setToolTipText(p.getComment());
                  javax.swing.JTextField propField = new javax.swing.JTextField();
                  propField.setBounds(210, 20 + dCount * 22, 120, 21);
                  propField.setText(p.toString());
                  propField.setToolTipText(p.getComment());
                  DynamicPanel.add(propLabel);
                  DynamicPanel.add(propField);
                  ////////////////////////////
                  javax.swing.JLabel propLabel2 = new javax.swing.JLabel();
                  propLabel2.setText(p.getName());
                  propLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
                  propLabel2.setBounds(20, 22 + dCount * 22, 180, 16);
                  propLabel2.setToolTipText(p.getComment());
                  javax.swing.JTextField propField2 = new javax.swing.JTextField();
                  propField2.setBounds(210, 20 + dCount * 22, 120, 21);
                  propField2.setText(p.toString());
                  propField2.setToolTipText(p.getComment());
                  ForcePanel.add(propLabel2);
                  ForcePanel.add(propField2);
                  ////////////////////////////
                  dCount++;
               } else if (p.getType() == org.opensim.modeling.Property.PropertyType.Int) {
                  // for testing...
                  javax.swing.JLabel propLabel = new javax.swing.JLabel();
                  propLabel.setText(p.getName());
                  propLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                  propLabel.setBounds(20, 22 + iCount * 22, 180, 16);
                  propLabel.setToolTipText(p.getComment());
                  javax.swing.JTextField propField = new javax.swing.JTextField();
                  propField.setBounds(210, 20 + iCount * 22, 120, 21);
                  propField.setText(p.toString());
                  propField.setToolTipText(p.getComment());
                  //ForcePanel.add(propLabel);
                  //ForcePanel.add(propField);
                  iCount++;
               } else if (p.getType() == org.opensim.modeling.Property.PropertyType.ObjPtr) {
                  OpenSimObject obj = p.getValueObjPtr();
                  Function func = Function.safeDownCast(obj);
                  if (func != null) {
                     javax.swing.JLabel propLabel = new javax.swing.JLabel();
                     propLabel.setText(p.getName());
                     propLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                     propLabel.setBounds(20, 22 + fCount * 22, 200, 16);
                     propLabel.setToolTipText(p.getComment());
                     javax.swing.JButton propButton = new javax.swing.JButton();
                     propButton.setBounds(230, 20 + fCount * 22, 60, 21);
                     propButton.setText("edit");
                     FunctionsPanel.add(propLabel);
                     FunctionsPanel.add(propButton);
                     fCount++;
                  }
               }
            } catch (IOException ex) {
               ex.printStackTrace();
            }
         }

         // Put the attachment points in the attachments tab
         SetSimmMusclePoint ssmp = asm.getAttachmentSet();
         int X = 30;
         int Y = 40;
         BodySet bodies = asm.getModel().getDynamicsEngine().getBodySet();
         String[] bodyNames = new String[bodies.getSize()];
         for (i = 0; i < bodies.getSize(); i++)
            bodyNames[i] = new String(bodies.get(i).getName());
         for (i = 0; i < ssmp.getSize(); i++) {
            boolean isWrapPoint = false;
            if (ssmp.get(i).getWrapObject() != null)
               isWrapPoint = true;
            javax.swing.JLabel indexLabel = null;
            if (isWrapPoint == false) {
               indexLabel = new javax.swing.JLabel();
               indexLabel.setText(String.valueOf(aCount+1));
            }
            javax.swing.JTextField xField = new javax.swing.JTextField();
            javax.swing.JTextField yField = new javax.swing.JTextField();
            javax.swing.JTextField zField = new javax.swing.JTextField();
            javax.swing.JComboBox comboBox = new javax.swing.JComboBox();
            javax.swing.JCheckBox selectBox = new javax.swing.JCheckBox();
            comboBox.setModel(new javax.swing.DefaultComboBoxModel(bodyNames));
            comboBox.setSelectedIndex(findElement(bodyNames, ssmp.get(i).getBodyName()));
            if (isWrapPoint == true) {
               xField.setEnabled(false);
               yField.setEnabled(false);
               zField.setEnabled(false);
               comboBox.setEnabled(false);
               selectBox.setEnabled(false);
            }
            int height = Y + i * 22;
            int width = 60;
            if (isWrapPoint == false)
               indexLabel.setBounds(X - 20, height, 20, 21);
            xField.setBounds(X, height, width, 21);
            yField.setBounds(X + width + 1, height, width, 21);
            zField.setBounds(X + 2*width + 2, height, width, 21);
            comboBox.setBounds(X + 3*width + 10, height, 90, 21);
            selectBox.setBounds(X + 3*width + 110, height, 21, 21);
            xField.setText(nf.format(ssmp.get(i).getAttachment().getitem(0)));
            yField.setText(nf.format(ssmp.get(i).getAttachment().getitem(1)));
            zField.setText(nf.format(ssmp.get(i).getAttachment().getitem(2)));
            if (isWrapPoint == false) {
               AttachmentsPanel.add(indexLabel);
               aCount++;
            }
            AttachmentsPanel.add(xField);
            AttachmentsPanel.add(yField);
            AttachmentsPanel.add(zField);
            AttachmentsPanel.add(comboBox);
            AttachmentsPanel.add(selectBox);
         }

         SetMuscleWrap smw = asm.getWrapSet();
         String[] startPointNames = new String[aCount + 1];
         startPointNames[0] = new String("start");
         String[] endPointNames = new String[aCount + 1];
         endPointNames[aCount] = new String("end");
         for (i = 0; i < aCount; i++) {
            startPointNames[i+1] = String.valueOf(i+1);
            endPointNames[i] = String.valueOf(i+1);
         }
         int numWrapObjects = 0;
         for (i = 0; i < bodies.getSize(); i++) {
            numWrapObjects += bodies.get(i).getWrapObjectSet().getSize();
         }
         String[] wrapObjectNames = new String[numWrapObjects];
         for (i = 0, wCount = 0; i < bodies.getSize(); i++) {
            SetWrapObject wrapObjects = bodies.get(i).getWrapObjectSet();
            for (j = 0; j < wrapObjects.getSize(); j++)
               wrapObjectNames[wCount++] = new String(wrapObjects.get(j).getName());
         }
         for (i = 0; i < smw.getSize(); i++) {
            boolean isEllipsoid = false;
            AbstractWrapObject awo = smw.get(i).getWrapObject();
            WrapEllipsoid we = WrapEllipsoid.safeDownCast(awo);
            if (we != null)
               isEllipsoid = true;
            javax.swing.JLabel indexLabel = new javax.swing.JLabel();
            javax.swing.JComboBox objComboBox = new javax.swing.JComboBox();
            javax.swing.JComboBox methodComboBox = null;
            if (isEllipsoid == true)
               methodComboBox = new javax.swing.JComboBox();
            javax.swing.JComboBox startComboBox = new javax.swing.JComboBox();
            javax.swing.JComboBox endComboBox = new javax.swing.JComboBox();
            indexLabel.setText(String.valueOf(i+1));
            objComboBox.setModel(new javax.swing.DefaultComboBoxModel(wrapObjectNames));
            objComboBox.setSelectedIndex(findElement(wrapObjectNames, smw.get(i).getWrapObjectName()));
            if (isEllipsoid == true) {
               methodComboBox.setModel(new javax.swing.DefaultComboBoxModel(wrapMethodNames));
               methodComboBox.setSelectedIndex(findElement(wrapMethodNames, smw.get(i).getMethodName()));
            }
            startComboBox.setModel(new javax.swing.DefaultComboBoxModel(startPointNames));
            int start = smw.get(i).getStartPoint();
            if (start < 0)
               startComboBox.setSelectedIndex(0);
            else
               startComboBox.setSelectedIndex(findElement(startPointNames, String.valueOf(start)));
            endComboBox.setModel(new javax.swing.DefaultComboBoxModel(endPointNames));
            int end = smw.get(i).getEndPoint();
            if (end < 0)
               endComboBox.setSelectedIndex(endComboBox.getItemCount()-1);
            else
               endComboBox.setSelectedIndex(findElement(endPointNames, String.valueOf(end)));
            indexLabel.setBounds(10, 40 + i * 22, 20, 21);
            objComboBox.setBounds(30, 40 + i * 22, 120, 21);
            if (isEllipsoid == true)
               methodComboBox.setBounds(160, 40 + i * 22, 80, 21);
            startComboBox.setBounds(250, 40 + i * 22, 50, 21);
            endComboBox.setBounds(310, 40 + i * 22, 50, 21);
            WrapPanel.add(indexLabel);
            WrapPanel.add(objComboBox);
            if (isEllipsoid == true)
               WrapPanel.add(methodComboBox);
            WrapPanel.add(startComboBox);
            WrapPanel.add(endComboBox);
         }

         // Put the points in the current path in the CurrentPath tab
         ArraySimmMusclePoint asmp = asm.getCurrentPath();
         for (i = 0; i < asmp.getSize(); i++) {
            boolean isWrapPoint = false;
            if (asmp.get(i).getWrapObject() != null)
               isWrapPoint = true;
            javax.swing.JLabel indexLabel = new javax.swing.JLabel();
            javax.swing.JLabel xField = new javax.swing.JLabel();
            javax.swing.JLabel yField = new javax.swing.JLabel();
            javax.swing.JLabel zField = new javax.swing.JLabel();
            javax.swing.JLabel bodyLabel = new javax.swing.JLabel();
            javax.swing.JLabel typeLabel = new javax.swing.JLabel();
            indexLabel.setText(String.valueOf(i+1));
            xField.setText(nf.format(asmp.get(i).getAttachment().getitem(0)));
            yField.setText(nf.format(asmp.get(i).getAttachment().getitem(1)));
            zField.setText(nf.format(asmp.get(i).getAttachment().getitem(2)));
            bodyLabel.setText(asmp.get(i).getBodyName());
            if (isWrapPoint)
               typeLabel.setText("wrap" + " (" + asmp.get(i).getWrapObject().getName() + ")");
            else {
               if (SimmMuscleViaPoint.safeDownCast(asmp.get(i)) == null)
                  typeLabel.setText("fixed");
               else
                  typeLabel.setText("via");
            }
            X = 30;
            Y = 40;
            int height = Y + i * 22;
            int width = 60;
            indexLabel.setBounds(X - 20, height, 20, 21);
            xField.setBounds(X, height, width, 21);
            yField.setBounds(X + width + 1, height, width, 21);
            zField.setBounds(X + 2*width + 2, height, width, 21);
            bodyLabel.setBounds(X + 3*width + 10, height, 90, 21);
            typeLabel.setBounds(X + 3*width + 110, height, 120, 21);
            CurrentPathPanel.add(indexLabel);
            CurrentPathPanel.add(xField);
            CurrentPathPanel.add(yField);
            CurrentPathPanel.add(zField);
            CurrentPathPanel.add(bodyLabel);
            CurrentPathPanel.add(typeLabel);
         }

         AttachmentsPref.width = 350;
         AttachmentsPref.height = Y + ssmp.getSize() * 22;
         AttachmentsPanel.setPreferredSize(AttachmentsPref);
         AttachmentsPanel.revalidate();

         ForcePref.width = 350;
         ForcePref.height = 30 + dCount * 22;
         ForcePanel.setPreferredSize(ForcePref);
         ForcePanel.revalidate();

         DynamicPref.width = 350;
         DynamicPref.height = 30 + dCount * 22;
         DynamicPanel.setPreferredSize(DynamicPref);
         DynamicPanel.revalidate();

         FunctionsPref.width = 350;
         FunctionsPref.height = 30 + fCount * 22;
         FunctionsPanel.setPreferredSize(FunctionsPref);
         FunctionsPanel.revalidate();

         WrapPref.width = 350;
         WrapPref.height = 60 + smw.getSize() * 22;
         WrapPanel.setPreferredSize(WrapPref);
         WrapPanel.revalidate();

         CurrentPathPref.width = 400;
         CurrentPathPref.height = Y + asmp.getSize() * 22;
         CurrentPathPanel.setPreferredSize(AttachmentsPref);
         CurrentPathPanel.revalidate();
      }
      
      this.revalidate();
      this.repaint();
   }
   
   public void componentClosed() {
      // TODO add custom code on component closing
   }
   
   /** replaces this in object stream */
   public Object writeReplace() {
      return new ResolvableHelper();
   }
   
   protected String preferredID() {
      return PREFERRED_ID;
   }

   private int findElement(String[] nameList, String name) {
      int i;
      for (i = 0; i < nameList.length; i++)
         if (nameList[i].equals(name))
            return i;
      return -1;
   }
   
   final static class ResolvableHelper implements Serializable {
      private static final long serialVersionUID = 1L;
      public Object readResolve() {
         return MuscleEditorTopComponent.getDefault();
      }
   }
   
}
