/*
 * EditOneForceJPanel.java
 *
 * Created on January 30, 2010, 1:37 PM
 */

package org.opensim.tracking;

import java.util.Observable;
import java.util.Vector;
import javax.swing.JComboBox;
import org.openide.DialogDescriptor;
import org.opensim.modeling.ArrayStr;
import org.opensim.modeling.BodySet;
import org.opensim.modeling.Model;
import org.opensim.modeling.PrescribedForce;
import org.opensim.modeling.Storage;

/**
 *
 * @author  ayman
 */
public class EditOneForceJPanel extends javax.swing.JPanel {
    PrescribedForce prescribedForce;
    Storage forceStorage=null;
    Model model;
    boolean initializing;
    ArrayStr lbls;
    private DialogDescriptor dDialog;
    boolean uniqueNames=false;  // If true we should be using column numbers exclusively
    
    /** Creates new form EditOneForceJPanel */
    public EditOneForceJPanel(PrescribedForce force, Storage storage, Model aModel) {
        prescribedForce = force;
        forceStorage = new Storage(storage);
        uniqueNames = forceStorage.makeStorageLabelsUnique();
        
        lbls=forceStorage.getColumnLabels();
        model = aModel;
        initializing=true;
        initComponents();
        ForceNameTextField.setText(force.getName());
        initComboBoxes();
        updateAvailabilityFromCheckboxSelections();
        initializing=false;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabelExternalLoadsApplicationDescription = new javax.swing.JLabel();
        buttonGroupForceType = new javax.swing.ButtonGroup();
        EditOneForcePanel = new javax.swing.JPanel();
        PointIsGlobalCheckBox = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        BodiesComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        ForceNameTextField = new javax.swing.JTextField();
        ForceIsGlobalCheckBox = new javax.swing.JCheckBox();
        jRadioButtonApplyPointForce = new javax.swing.JRadioButton();
        jRadioButtonApplyBodyForce = new javax.swing.JRadioButton();
        jComboBoxPY = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxPZ = new javax.swing.JComboBox();
        jComboBoxPX = new javax.swing.JComboBox();
        jCheckBoxForce = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxFX = new javax.swing.JComboBox();
        jComboBoxFY = new javax.swing.JComboBox();
        jComboBoxFZ = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jComboBoxTZ = new javax.swing.JComboBox();
        jComboBoxTY = new javax.swing.JComboBox();
        jComboBoxTX = new javax.swing.JComboBox();
        jCheckBoxTorque = new javax.swing.JCheckBox();

        jLabelExternalLoadsApplicationDescription.setText("jLabel1");

        PointIsGlobalCheckBox.setText("Point is global");
        PointIsGlobalCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        PointIsGlobalCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        PointIsGlobalCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PointIsGlobalCheckBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Applied to");

        BodiesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        BodiesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BodiesComboBoxActionPerformed(evt);
            }
        });
        BodiesComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                BodiesComboBoxFocusLost(evt);
            }
        });

        jLabel3.setText("Force Name");

        ForceNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForceNameTextFieldActionPerformed(evt);
            }
        });
        ForceNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ForceNameTextFieldFocusLost(evt);
            }
        });

        ForceIsGlobalCheckBox.setText("Force is global");
        ForceIsGlobalCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ForceIsGlobalCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ForceIsGlobalCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForceIsGlobalCheckBoxActionPerformed(evt);
            }
        });

        buttonGroupForceType.add(jRadioButtonApplyPointForce);
        jRadioButtonApplyPointForce.setSelected(true);
        jRadioButtonApplyPointForce.setText("Point Force");
        jRadioButtonApplyPointForce.setActionCommand("PointForce");
        jRadioButtonApplyPointForce.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonApplyPointForce.setEnabled(false);
        jRadioButtonApplyPointForce.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jRadioButtonApplyPointForce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonApplyPointForceActionPerformed(evt);
            }
        });

        buttonGroupForceType.add(jRadioButtonApplyBodyForce);
        jRadioButtonApplyBodyForce.setText("Body Force");
        jRadioButtonApplyBodyForce.setActionCommand("BodyForce");
        jRadioButtonApplyBodyForce.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButtonApplyBodyForce.setEnabled(false);
        jRadioButtonApplyBodyForce.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jRadioButtonApplyBodyForce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonApplyBodyForceActionPerformed(evt);
            }
        });

        jComboBoxPY.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxPY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jLabel6.setText("Point Columns");

        jComboBoxPZ.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxPZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jComboBoxPX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxPX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPXActionPerformed(evt);
            }
        });

        jCheckBoxForce.setText("Applies Force");
        jCheckBoxForce.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxForce.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckBoxForce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxForceActionPerformed(evt);
            }
        });

        jLabel4.setText("Force Columns");

        jComboBoxFX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ground_force_px", "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxFX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFXActionPerformed(evt);
            }
        });

        jComboBoxFY.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ground_force_py", "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxFY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jComboBoxFZ.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ground_force_pz", "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxFZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jLabel7.setText("Torque Columns");

        jComboBoxTZ.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxTZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jComboBoxTY.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxTY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateForceFromPanel(evt);
            }
        });

        jComboBoxTX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxTX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTXActionPerformed(evt);
            }
        });

        jCheckBoxTorque.setText("Applies Torque");
        jCheckBoxTorque.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxTorque.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckBoxTorque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTorqueActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout EditOneForcePanelLayout = new org.jdesktop.layout.GroupLayout(EditOneForcePanel);
        EditOneForcePanel.setLayout(EditOneForcePanelLayout);
        EditOneForcePanelLayout.setHorizontalGroup(
            EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(EditOneForcePanelLayout.createSequentialGroup()
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(EditOneForcePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(EditOneForcePanelLayout.createSequentialGroup()
                                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(EditOneForcePanelLayout.createSequentialGroup()
                                        .add(17, 17, 17)
                                        .add(jLabel7))
                                    .add(ForceIsGlobalCheckBox))
                                .add(35, 35, 35)
                                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(EditOneForcePanelLayout.createSequentialGroup()
                                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBoxTX, 0, 125, Short.MAX_VALUE)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBoxPX, 0, 125, Short.MAX_VALUE)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBoxFX, 0, 125, Short.MAX_VALUE))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(EditOneForcePanelLayout.createSequentialGroup()
                                                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBoxPY, 0, 107, Short.MAX_VALUE)
                                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBoxFY, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .add(8, 8, 8))
                                            .add(EditOneForcePanelLayout.createSequentialGroup()
                                                .add(jComboBoxTY, 0, 109, Short.MAX_VALUE)
                                                .add(6, 6, 6))))
                                    .add(PointIsGlobalCheckBox)))
                            .add(jCheckBoxTorque)))
                    .add(EditOneForcePanelLayout.createSequentialGroup()
                        .add(21, 21, 21)
                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel4)
                            .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(EditOneForcePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jCheckBoxForce))
                    .add(EditOneForcePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(jLabel5))
                        .add(13, 13, 13)
                        .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, BodiesComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, ForceNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(EditOneForcePanelLayout.createSequentialGroup()
                        .add(39, 39, 39)
                        .add(jRadioButtonApplyPointForce)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jRadioButtonApplyBodyForce)
                        .add(12, 12, 12)))
                .add(0, 0, 0)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jComboBoxPZ, 0, 109, Short.MAX_VALUE)
                    .add(jComboBoxTZ, 0, 109, Short.MAX_VALUE)
                    .add(jComboBoxFZ, 0, 109, Short.MAX_VALUE))
                .addContainerGap())
        );
        EditOneForcePanelLayout.setVerticalGroup(
            EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(EditOneForcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ForceNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(BodiesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCheckBoxForce)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jRadioButtonApplyPointForce)
                    .add(jRadioButtonApplyBodyForce))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel4)
                    .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jComboBoxFX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jComboBoxFY, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jComboBoxFZ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(jComboBoxPZ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxPX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxPY, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(21, 21, 21)
                .add(jCheckBoxTorque)
                .add(2, 2, 2)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(jComboBoxTZ, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxTX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxTY, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EditOneForcePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ForceIsGlobalCheckBox)
                    .add(PointIsGlobalCheckBox)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(EditOneForcePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(EditOneForcePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void jComboBoxTXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTXActionPerformed
        int idx =((JComboBox)evt.getSource()).getSelectedIndex();
        if (idx >=1 && idx <lbls.getSize()-2){
            jComboBoxTY.setSelectedIndex(idx+1);
            jComboBoxTZ.setSelectedIndex(idx+2);
        }
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
// TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxTXActionPerformed
    
    private void jComboBoxPXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPXActionPerformed
        int idx =((JComboBox)evt.getSource()).getSelectedIndex();
        if (idx >=1 && idx <lbls.getSize()-2){
            jComboBoxPY.setSelectedIndex(idx+1);
            jComboBoxPZ.setSelectedIndex(idx+2);
        }
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
// TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxPXActionPerformed
    
    private void jComboBoxFXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFXActionPerformed
// TODO add your handling code here:
        // Populate next two dropdown from the following 2 columns
        int idx =((JComboBox)evt.getSource()).getSelectedIndex();
        if (idx >=1 && idx <lbls.getSize()-2){
            jComboBoxFY.setSelectedIndex(idx+1);
            jComboBoxFZ.setSelectedIndex(idx+2);
        }
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
        
    }//GEN-LAST:event_jComboBoxFXActionPerformed
    
    private void PointIsGlobalCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PointIsGlobalCheckBoxActionPerformed
        updateAvailabilityFromCheckboxSelections();
        updateForceFromPanel();
        // TODO add your handling code here:
    }//GEN-LAST:event_PointIsGlobalCheckBoxActionPerformed
    
    private void ForceIsGlobalCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForceIsGlobalCheckBoxActionPerformed
        updateAvailabilityFromCheckboxSelections();
        updateForceFromPanel();
// TODO add your handling code here:
    }//GEN-LAST:event_ForceIsGlobalCheckBoxActionPerformed
    
    private void updateForceFromPanel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateForceFromPanel
// TODO add your handling code here:
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
    }//GEN-LAST:event_updateForceFromPanel
    
    private void jCheckBoxForceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxForceActionPerformed
// TODO add your handling code here:
        updateAvailabilityFromCheckboxSelections();
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
        
    }//GEN-LAST:event_jCheckBoxForceActionPerformed
    
    private void jCheckBoxTorqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTorqueActionPerformed
        updateAvailabilityFromCheckboxSelections();
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
// TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxTorqueActionPerformed
    
    private void jRadioButtonApplyPointForceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonApplyPointForceActionPerformed
// TODO add your handling code here:
        updateAvailabilityFromCheckboxSelections();
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
        
    }//GEN-LAST:event_jRadioButtonApplyPointForceActionPerformed
    
    private void jRadioButtonApplyBodyForceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonApplyBodyForceActionPerformed
        updateAvailabilityFromCheckboxSelections();
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
// TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonApplyBodyForceActionPerformed
    
    private void BodiesComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BodiesComboBoxFocusLost
        updateForceFromPanel();
    }//GEN-LAST:event_BodiesComboBoxFocusLost
    
    private void BodiesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BodiesComboBoxActionPerformed
        updateForceFromPanel();
    }//GEN-LAST:event_BodiesComboBoxActionPerformed
    
    private void ForceNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ForceNameTextFieldFocusLost
        updateForceFromPanel();
        if (dDialog!= null) dDialog.setValid(checkValid());
    }//GEN-LAST:event_ForceNameTextFieldFocusLost
    
    private void ForceNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForceNameTextFieldActionPerformed
        if (checkValid()) updateForceFromPanel();
    }//GEN-LAST:event_ForceNameTextFieldActionPerformed
    // Initialize GUI Panel from a prescribedForce
    private void initComboBoxes() {
        // Body name combobox
        BodySet bodySet = model.getBodySet();
        BodiesComboBox.removeAllItems();
        for(int i=0; i<bodySet.getSize(); i++) BodiesComboBox.addItem(bodySet.get(i).getName());
        String debug=prescribedForce.getBodyName();
        BodiesComboBox.setSelectedItem(prescribedForce.getBodyName());
        // All other drop downs, populate with column names except time.
        Vector<String> colmnLabels = lbls.toVector();
        colmnLabels.set(0,""); // no default column & time shouldn't be permitted anyway'
        String[] colNames = new String[colmnLabels.size()];
        colmnLabels.toArray(colNames);
        // Force dropdowns
        jComboBoxFX.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxFY.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxFZ.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jCheckBoxForce.setSelected(false);
        ArrayStr forceFunctionNames = new ArrayStr();
        prescribedForce.getForceFunctionNames(forceFunctionNames);
        if (forceFunctionNames.getSize()==3){
            setComboBoxSelection(jComboBoxFX, forceFunctionNames, 0);
            setComboBoxSelection(jComboBoxFY, forceFunctionNames, 1);
            setComboBoxSelection(jComboBoxFZ, forceFunctionNames, 2);
            jCheckBoxForce.setSelected(true);
        }
        // Point dropdowns
        jComboBoxPX.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxPY.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxPZ.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        ArrayStr pointFunctionNames = new ArrayStr();
        prescribedForce.getPointFunctionNames(pointFunctionNames);
        if (pointFunctionNames.getSize()==3){
            setComboBoxSelection(jComboBoxPX, pointFunctionNames, 0);
            setComboBoxSelection(jComboBoxPY, pointFunctionNames, 1);
            setComboBoxSelection(jComboBoxPZ, pointFunctionNames, 2);
            jRadioButtonApplyPointForce.setSelected(true);
        } else
            jRadioButtonApplyBodyForce.setSelected(true);
        //Torques
        jComboBoxTX.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxTY.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jComboBoxTZ.setModel(new javax.swing.DefaultComboBoxModel(colNames));
        jCheckBoxTorque.setSelected(false);
        ArrayStr torqueFunctionNames = new ArrayStr();
        prescribedForce.getTorqueFunctionNames(torqueFunctionNames);
        if (torqueFunctionNames.getSize()==3){
            setComboBoxSelection(jComboBoxTX, torqueFunctionNames, 0);
            setComboBoxSelection(jComboBoxTY, torqueFunctionNames, 1);
            setComboBoxSelection(jComboBoxTZ, torqueFunctionNames, 2);
            jCheckBoxTorque.setSelected(true);
        }
        // Checkboxes and radio butons
        ForceIsGlobalCheckBox.setSelected(prescribedForce.getForceIsInGlobalFrame());
        PointIsGlobalCheckBox.setSelected(prescribedForce.getPointIsInGlobalFrame());
    }
    
    private void setComboBoxSelection(final JComboBox jcombox, final ArrayStr forceFunctionNames, final int j) throws NumberFormatException {
        if (forceFunctionNames.getitem(j).startsWith("#")){
            int idx=Integer.parseInt(forceFunctionNames.getitem(j).substring(1));
            jcombox.setSelectedIndex(idx);
        } else
            jcombox.setSelectedItem(forceFunctionNames.getitem(j));
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox BodiesComboBox;
    private javax.swing.JPanel EditOneForcePanel;
    private javax.swing.JCheckBox ForceIsGlobalCheckBox;
    private javax.swing.JTextField ForceNameTextField;
    private javax.swing.JCheckBox PointIsGlobalCheckBox;
    private javax.swing.ButtonGroup buttonGroupForceType;
    private javax.swing.JCheckBox jCheckBoxForce;
    private javax.swing.JCheckBox jCheckBoxTorque;
    private javax.swing.JComboBox jComboBoxFX;
    private javax.swing.JComboBox jComboBoxFY;
    private javax.swing.JComboBox jComboBoxFZ;
    private javax.swing.JComboBox jComboBoxPX;
    private javax.swing.JComboBox jComboBoxPY;
    private javax.swing.JComboBox jComboBoxPZ;
    private javax.swing.JComboBox jComboBoxTX;
    private javax.swing.JComboBox jComboBoxTY;
    private javax.swing.JComboBox jComboBoxTZ;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelExternalLoadsApplicationDescription;
    private javax.swing.JRadioButton jRadioButtonApplyBodyForce;
    private javax.swing.JRadioButton jRadioButtonApplyPointForce;
    // End of variables declaration//GEN-END:variables
    
    // Update prescribedForce based on selection in the GUI Panel
    private void updateForceFromPanel() {
        String forceName=ForceNameTextField.getText();
        if (forceName != null && forceName.length()!=0)
            if (!initializing) prescribedForce.setName(forceName);
        
        String forceBodyame = (String) BodiesComboBox.getSelectedItem();
        if (forceBodyame != null && forceBodyame.length()!=0)
            if (!initializing) prescribedForce.setBodyName(forceBodyame);
        
        // Set either forcefunctions or force and pointFunctions if ForceCheckBox is on
        if (jCheckBoxForce.isSelected()){
            ArrayStr functionNames = new ArrayStr();
            functionNames.append(makeFunctionName(jComboBoxFX));
            functionNames.append(makeFunctionName(jComboBoxFY));
            functionNames.append(makeFunctionName(jComboBoxFZ));
            if (!initializing) prescribedForce.setForceFunctionNames(functionNames, forceStorage);
            
            // if point force also allow for setPointFunctionNames
            String cmd=buttonGroupForceType.getSelection().getActionCommand();
            if (cmd.equals("PointForce")){
                ArrayStr pointFunctionNames = new ArrayStr();
                pointFunctionNames.append(makeFunctionName(jComboBoxPX));
                pointFunctionNames.append(makeFunctionName(jComboBoxPY));
                pointFunctionNames.append(makeFunctionName(jComboBoxPZ));
                if (!initializing) prescribedForce.setPointFunctionNames(pointFunctionNames, forceStorage);
            } else
                if (!initializing) prescribedForce.clearPointFunctions();
        } else {
            // Clear all
            if (!initializing) {
                prescribedForce.clearPointFunctions();
                prescribedForce.clearForceFunctions();
            }
        }
        // Set torquefunctions if TorqueCheckBox is on
        if (jCheckBoxTorque.isSelected()){
            ArrayStr torqueFunctionNames = new ArrayStr();
            torqueFunctionNames.append(makeFunctionName(jComboBoxTX));
            torqueFunctionNames.append(makeFunctionName(jComboBoxTY));
            torqueFunctionNames.append(makeFunctionName(jComboBoxTZ));
            if (!initializing) prescribedForce.setTorqueFunctionNames(torqueFunctionNames, forceStorage);
        } else
            if (!initializing) prescribedForce.clearTorqueFunctions();
        if (!initializing) prescribedForce.setForceIsInGlobalFrame(ForceIsGlobalCheckBox.isSelected());
        if (!initializing) prescribedForce.setPointIsInGlobalFrame(PointIsGlobalCheckBox.isSelected());
    }
    // Convenience method to enable/disable buttons and dropdowns based on user selections
    // for check-boxes, radio-buttons
    private void updateAvailabilityFromCheckboxSelections() {
        boolean applyForce=jCheckBoxForce.isSelected();
        String cmd = buttonGroupForceType.getSelection().getActionCommand();
        jRadioButtonApplyPointForce.setEnabled(applyForce);
        jRadioButtonApplyBodyForce.setEnabled(applyForce);
        jLabelExternalLoadsApplicationDescription.setText("");
        if (cmd.equals("BodyForce")){
            jComboBoxFX.setEnabled(applyForce);
            jComboBoxFY.setEnabled(applyForce);
            jComboBoxFZ.setEnabled(applyForce);
            jComboBoxPX.setEnabled(false);
            jComboBoxPY.setEnabled(false);
            jComboBoxPZ.setEnabled(false);
            PointIsGlobalCheckBox.setEnabled(false);
        } else {  // Point Force: need to specify everything
            jComboBoxFX.setEnabled(applyForce);
            jComboBoxFY.setEnabled(applyForce);
            jComboBoxFZ.setEnabled(applyForce);
            jComboBoxPX.setEnabled(applyForce);
            jComboBoxPY.setEnabled(applyForce);
            jComboBoxPZ.setEnabled(applyForce);
            PointIsGlobalCheckBox.setEnabled(true);
            jLabelExternalLoadsApplicationDescription.setText("Point is converted to local frame using external loads kinematics.");
        }
        
        // Now torque
        boolean applyTorque =jCheckBoxTorque.isSelected();
        jComboBoxTX.setEnabled(applyTorque);
        jComboBoxTY.setEnabled(applyTorque);
        jComboBoxTZ.setEnabled(applyTorque);
        if (dDialog!= null) dDialog.setValid(checkValid());
    }
    
    public void setDDialog(DialogDescriptor dDialog) {
        this.dDialog = dDialog;
    }
    
    private boolean checkValid() {
        // If checkbox is picked
        if (!jCheckBoxTorque.isSelected() && !jCheckBoxForce.isSelected()) return false;
        if (ForceNameTextField.getText().length()==0) return false;
        if (jCheckBoxForce.isSelected()){
            if (jComboBoxFX.getSelectedItem().equals("") ||
                    jComboBoxFY.getSelectedItem().equals("") ||
                    jComboBoxFZ.getSelectedItem().equals("")){
                return false;
            }
            String cmd=buttonGroupForceType.getSelection().getActionCommand();
            if (cmd.equals("PointForce")){
                if (jComboBoxPX.getSelectedItem().equals("") ||
                        jComboBoxPY.getSelectedItem().equals("") ||
                        jComboBoxPZ.getSelectedItem().equals("")){
                    return false;
                }
                
            }
        }
        if (jCheckBoxTorque.isSelected()){
            if (jComboBoxTX.getSelectedItem().equals("") ||
                    jComboBoxTY.getSelectedItem().equals("") ||
                    jComboBoxTZ.getSelectedItem().equals(""))
                return false;
        }
        return true;
    }
    public boolean  makeStorageLabelsUnique(Storage aStore) {
        ArrayStr lbls = aStore.getColumnLabels();
        String offending="";
        boolean changedLabels=false;
        for(int i=0; i< lbls.getSize(); i++){
            boolean isUnique= (lbls.findIndex(lbls.getitem(i))==i);
            if (!isUnique){ // Make new names
                offending =lbls.getitem(i);
                boolean exist=true;
                String newName =offending;
                changedLabels = true;
                int c=1;
                while(exist){
                    newName = offending+"("+String.valueOf(c)+")";
                    exist= (lbls.findIndex(newName)!=-1);
                    c++;
                }
                lbls.setitem(i, newName);
            }
        }
        return (!changedLabels);
    }
    String makeFunctionName(JComboBox combox){
        if (uniqueNames){
            return ((String)combox.getSelectedItem());
        }
        else 
            return ("#"+String.valueOf(combox.getSelectedIndex()));
    }
}
