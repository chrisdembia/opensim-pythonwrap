package org.opensim.tracking;

import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.opensim.modeling.ArrayDouble;
import org.opensim.modeling.ArrayStr;
import org.opensim.modeling.SimmScalingParams;

public final class ScalingVisualPanel extends workflowVisualPanelBase {
    
    String manualScaleFile;
    ArrayStr scalingOrder;
    String subjectPath;
    static boolean initialized=false; // Keep track if the page was visited before to min overhead
    
    /**
     * Creates new form ScalingVisualPanel
     */
    public ScalingVisualPanel() {
        initComponents();
        
    }
    
    public String getName() {
        return "Scale generic model";
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScalingMethodSelectPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        scaleMethodSelect = new javax.swing.JComboBox();
        preserveMass = new javax.swing.JCheckBox();
        jMeasurementScalePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        markerTrialTextField = new javax.swing.JTextField();
        jBrowse4TrcButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jFromTimeTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jToTimeTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jMeasurementsFileTextField = new javax.swing.JTextField();
        jBrowse4MeasButton = new javax.swing.JButton();
        jEditMeasButton = new javax.swing.JButton();
        jSaveScalesCheckBox = new javax.swing.JCheckBox();
        saveScalesTextField = new javax.swing.JTextField();
        jBrowse4ScalesButton = new javax.swing.JButton();
        jManualScalePanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jManualScaleTextField = new javax.swing.JTextField();
        jBrowse4ScaleButton = new javax.swing.JButton();
        jEditScalesButton = new javax.swing.JButton();
        jOutputPanel = new javax.swing.JPanel();
        saveOpenSimTextField1 = new javax.swing.JTextField();
        saveSIMMmslTextField1 = new javax.swing.JTextField();
        saveSIMMJntTextField1 = new javax.swing.JTextField();
        jBrowse4OpenSim1 = new javax.swing.JButton();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBoxSavemsl1 = new javax.swing.JCheckBox();
        jCheckBoxSaveopensim1 = new javax.swing.JCheckBox();
        jBrowse4Jnt1 = new javax.swing.JButton();
        jBrowse4Msl1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jMessageTextArea = new javax.swing.JTextArea();

        jScalingMethodSelectPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Scaling method"));
        jLabel1.setText("Scaling method");

        scaleMethodSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Manual", "Measurements", "Manual+Measurements", "Measurements+Manual" }));
        scaleMethodSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScalingMethodSelectionHandler(evt);
            }
        });

        preserveMass.setText("Preserve mass distribution");
        preserveMass.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        preserveMass.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout jScalingMethodSelectPanelLayout = new org.jdesktop.layout.GroupLayout(jScalingMethodSelectPanel);
        jScalingMethodSelectPanel.setLayout(jScalingMethodSelectPanelLayout);
        jScalingMethodSelectPanelLayout.setHorizontalGroup(
            jScalingMethodSelectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScalingMethodSelectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScalingMethodSelectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScalingMethodSelectPanelLayout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(scaleMethodSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(preserveMass))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        jScalingMethodSelectPanelLayout.setVerticalGroup(
            jScalingMethodSelectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScalingMethodSelectPanelLayout.createSequentialGroup()
                .add(jScalingMethodSelectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(scaleMethodSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(preserveMass))
        );

        jMeasurementScalePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Scale based on anatomical markers")));
        jLabel2.setText("Trial file name");

        markerTrialTextField.setText("*.trc");

        jBrowse4TrcButton.setText("Browse...");
        jBrowse4TrcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBrowse4TrcButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("use time from ");

        jLabel4.setText("to");

        jLabel5.setText("Measurements");

        jMeasurementsFileTextField.setText("*.xml");
        jMeasurementsFileTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMeasurementsFileTextFieldActionPerformed(evt);
            }
        });

        jBrowse4MeasButton.setText("Browse...");
        jBrowse4MeasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBrowse4MeasButtonActionPerformed(evt);
            }
        });

        jEditMeasButton.setText("Edit...");

        jSaveScalesCheckBox.setText("Save scales");
        jSaveScalesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jSaveScalesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        saveScalesTextField.setText("*.xml");

        jBrowse4ScalesButton.setText("Browse...");
        jBrowse4ScalesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBrowse4ScalesButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jMeasurementScalePanelLayout = new org.jdesktop.layout.GroupLayout(jMeasurementScalePanel);
        jMeasurementScalePanel.setLayout(jMeasurementScalePanelLayout);
        jMeasurementScalePanelLayout.setHorizontalGroup(
            jMeasurementScalePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jMeasurementScalePanelLayout.createSequentialGroup()
                .add(jMeasurementScalePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jSaveScalesCheckBox)
                    .add(jMeasurementScalePanelLayout.createSequentialGroup()
                        .add(jMeasurementScalePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jMeasurementScalePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(jLabel3)
                                .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jLabel5))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jMeasurementScalePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jMeasurementScalePanelLayout.createSequentialGroup()
                                .add(jFromTimeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel4)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jToTimeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jMeasurementScalePanelLayout.createSequentialGroup()
                                .add(jMeasurementScalePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jMeasurementsFileTextField)
                                    .add(saveScalesTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                    .add(markerTrialTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jMeasurementScalePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jMeasurementScalePanelLayout.createSequentialGroup()
                                        .add(jBrowse4MeasButton, 0, 0, Short.MAX_VALUE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                                    .add(jBrowse4ScalesButton, 0, 0, Short.MAX_VALUE)
                                    .add(jBrowse4TrcButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, Short.MAX_VALUE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jEditMeasButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(8, Short.MAX_VALUE))
        );
        jMeasurementScalePanelLayout.setVerticalGroup(
            jMeasurementScalePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jMeasurementScalePanelLayout.createSequentialGroup()
                .add(jMeasurementScalePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(jEditMeasButton)
                    .add(jBrowse4MeasButton)
                    .add(jMeasurementsFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jMeasurementScalePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(markerTrialTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jBrowse4TrcButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jMeasurementScalePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jLabel4)
                    .add(jFromTimeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jToTimeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jMeasurementScalePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jSaveScalesCheckBox)
                    .add(saveScalesTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jBrowse4ScalesButton))
                .addContainerGap())
        );

        jManualScalePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Specify scale factors directly")));
        jLabel6.setText("Scale factors");

        jManualScaleTextField.setText("*.xml");

        jBrowse4ScaleButton.setText("Browse...");
        jBrowse4ScaleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBrowse4ScaleButtonActionPerformed(evt);
            }
        });

        jEditScalesButton.setText("Edit...");

        org.jdesktop.layout.GroupLayout jManualScalePanelLayout = new org.jdesktop.layout.GroupLayout(jManualScalePanel);
        jManualScalePanel.setLayout(jManualScalePanelLayout);
        jManualScalePanelLayout.setHorizontalGroup(
            jManualScalePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jManualScalePanelLayout.createSequentialGroup()
                .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jManualScaleTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 125, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jBrowse4ScaleButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jEditScalesButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jManualScalePanelLayout.setVerticalGroup(
            jManualScalePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jManualScalePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel6)
                .add(jManualScaleTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jBrowse4ScaleButton)
                .add(jEditScalesButton))
        );

        jOutputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Output files"));

        jBrowse4OpenSim1.setText("Browse...");
        jBrowse4OpenSim1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBrowse4OpenSim1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("SIMM jnt");
        jCheckBox2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox2.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jCheckBoxSavemsl1.setText("SIMM msl");
        jCheckBoxSavemsl1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxSavemsl1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jCheckBoxSaveopensim1.setText("OpenSim");
        jCheckBoxSaveopensim1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBoxSaveopensim1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jBrowse4Jnt1.setText("Browse...");
        jBrowse4Jnt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBrowse4Jnt1ActionPerformed(evt);
            }
        });

        jBrowse4Msl1.setText("Browse...");
        jBrowse4Msl1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBrowse4Msl1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jOutputPanelLayout = new org.jdesktop.layout.GroupLayout(jOutputPanel);
        jOutputPanel.setLayout(jOutputPanelLayout);
        jOutputPanelLayout.setHorizontalGroup(
            jOutputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jOutputPanelLayout.createSequentialGroup()
                .add(jOutputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jOutputPanelLayout.createSequentialGroup()
                        .add(jOutputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jCheckBox2)
                            .add(jCheckBoxSavemsl1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jOutputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(saveSIMMJntTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                            .add(saveSIMMmslTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)))
                    .add(jOutputPanelLayout.createSequentialGroup()
                        .add(jCheckBoxSaveopensim1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(saveOpenSimTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)))
                .add(jOutputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jOutputPanelLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jOutputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jBrowse4Jnt1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jBrowse4OpenSim1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jOutputPanelLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jBrowse4Msl1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jOutputPanelLayout.setVerticalGroup(
            jOutputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jOutputPanelLayout.createSequentialGroup()
                .add(jOutputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jCheckBoxSaveopensim1)
                    .add(saveOpenSimTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jBrowse4OpenSim1))
                .add(4, 4, 4)
                .add(jOutputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jCheckBox2)
                    .add(saveSIMMJntTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jBrowse4Jnt1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jOutputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jCheckBoxSavemsl1)
                    .add(saveSIMMmslTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jBrowse4Msl1))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setBorder(null);
        jScrollPane1.setForeground(new java.awt.Color(204, 0, 51));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setEnabled(false);
        jScrollPane1.setFocusable(false);
        jMessageTextArea.setBackground(new java.awt.Color(224, 223, 227));
        jMessageTextArea.setColumns(20);
        jMessageTextArea.setEditable(false);
        jMessageTextArea.setForeground(new java.awt.Color(204, 0, 51));
        jMessageTextArea.setRows(5);
        jMessageTextArea.setBorder(null);
        jMessageTextArea.setFocusable(false);
        jMessageTextArea.setOpaque(false);
        jScrollPane1.setViewportView(jMessageTextArea);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScalingMethodSelectPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jMeasurementScalePanel, 0, 321, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jManualScalePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jOutputPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jScalingMethodSelectPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jMeasurementScalePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 145, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jManualScalePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jOutputPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jBrowse4ScalesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBrowse4ScalesButtonActionPerformed
       final JFileChooser dlog = new JFileChooser(subjectPath);
       if (dlog.showOpenDialog(null) == JFileChooser.APPROVE_OPTION && dlog.getSelectedFile() != null) {
            saveScalesTextField.setText(dlog.getSelectedFile().getAbsolutePath());
       }
// TODO add your handling code here:
    }//GEN-LAST:event_jBrowse4ScalesButtonActionPerformed

    private void jBrowse4TrcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBrowse4TrcButtonActionPerformed
       final JFileChooser dlog = new JFileChooser(subjectPath);
       if (dlog.showOpenDialog(null) == JFileChooser.APPROVE_OPTION && dlog.getSelectedFile() != null) {
            markerTrialTextField.setText(dlog.getSelectedFile().getAbsolutePath());
       }
// TODO add your handling code here:
    }//GEN-LAST:event_jBrowse4TrcButtonActionPerformed

    private void jBrowse4MeasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBrowse4MeasButtonActionPerformed
       final JFileChooser dlog = new JFileChooser(subjectPath);
       if (dlog.showOpenDialog(null) == JFileChooser.APPROVE_OPTION && dlog.getSelectedFile() != null) {
            jMeasurementsFileTextField.setText(dlog.getSelectedFile().getAbsolutePath());
       }
// TODO add your handling code here:
    }//GEN-LAST:event_jBrowse4MeasButtonActionPerformed

    private void jBrowse4Msl1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBrowse4Msl1ActionPerformed
       final JFileChooser dlog = new JFileChooser(subjectPath);
       if (dlog.showOpenDialog(null) == JFileChooser.APPROVE_OPTION && dlog.getSelectedFile() != null) {
            saveSIMMmslTextField1.setText(dlog.getSelectedFile().getAbsolutePath());
            jCheckBoxSavemsl1.setSelected(true);            
       }
// TODO add your handling code here:
    }//GEN-LAST:event_jBrowse4Msl1ActionPerformed

    private void jBrowse4Jnt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBrowse4Jnt1ActionPerformed
       final JFileChooser dlog = new JFileChooser(subjectPath);
       if (dlog.showOpenDialog(null) == JFileChooser.APPROVE_OPTION && dlog.getSelectedFile() != null) {
            saveSIMMJntTextField1.setText(dlog.getSelectedFile().getAbsolutePath());
            jCheckBox2.setSelected(true);
       }
// TODO add your handling code here:
    }//GEN-LAST:event_jBrowse4Jnt1ActionPerformed

    private void jBrowse4OpenSim1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBrowse4OpenSim1ActionPerformed
// TODO add your handling code here:
       final JFileChooser dlog = new JFileChooser(subjectPath);
       if (dlog.showOpenDialog(null) == JFileChooser.APPROVE_OPTION && dlog.getSelectedFile() != null) {
            saveOpenSimTextField1.setText(dlog.getSelectedFile().getAbsolutePath());
            jCheckBoxSaveopensim1.setSelected(true);
       }
    }//GEN-LAST:event_jBrowse4OpenSim1ActionPerformed

    private void ScalingMethodSelectionHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScalingMethodSelectionHandler
// TODO add your handling code here:
        Object obj = evt.getSource();
        if (obj == scaleMethodSelect){
            String selectedMethod = (String) scaleMethodSelect.getSelectedItem();
        
            // Based on scaling "order" that is if Manual, Measurements or mix enable/disable fields in the Panel
            updateBasedOnScalingOrder();
           
        }
    }//GEN-LAST:event_ScalingMethodSelectionHandler

    private void jMeasurementsFileTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMeasurementsFileTextFieldActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jMeasurementsFileTextFieldActionPerformed

    private void jBrowse4ScaleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBrowse4ScaleButtonActionPerformed
        String defaultDir="";
        defaultDir = Preferences.userNodeForPackage(this.getClass()).get("WorkDirectory", defaultDir);

        final JFileChooser dlog = new JFileChooser(defaultDir);

        String scalesFile=null;
        if (dlog.showOpenDialog(null) == JFileChooser.APPROVE_OPTION && dlog.getSelectedFile() != null) {
            manualScaleFile= dlog.getSelectedFile().getAbsolutePath();
            scaleMethodSelect.setSelectedItem("Manual");
            jManualScaleTextField.setText(manualScaleFile);
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jBrowse4ScaleButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBrowse4Jnt1;
    private javax.swing.JButton jBrowse4MeasButton;
    private javax.swing.JButton jBrowse4Msl1;
    private javax.swing.JButton jBrowse4OpenSim1;
    private javax.swing.JButton jBrowse4ScaleButton;
    private javax.swing.JButton jBrowse4ScalesButton;
    private javax.swing.JButton jBrowse4TrcButton;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBoxSavemsl1;
    private javax.swing.JCheckBox jCheckBoxSaveopensim1;
    private javax.swing.JButton jEditMeasButton;
    private javax.swing.JButton jEditScalesButton;
    private javax.swing.JTextField jFromTimeTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jManualScalePanel;
    private javax.swing.JTextField jManualScaleTextField;
    private javax.swing.JPanel jMeasurementScalePanel;
    private javax.swing.JTextField jMeasurementsFileTextField;
    private javax.swing.JTextArea jMessageTextArea;
    private javax.swing.JPanel jOutputPanel;
    private javax.swing.JCheckBox jSaveScalesCheckBox;
    private javax.swing.JPanel jScalingMethodSelectPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jToTimeTextField;
    private javax.swing.JTextField markerTrialTextField;
    private javax.swing.JCheckBox preserveMass;
    private javax.swing.JTextField saveOpenSimTextField1;
    private javax.swing.JTextField saveSIMMJntTextField1;
    private javax.swing.JTextField saveSIMMmslTextField1;
    private javax.swing.JTextField saveScalesTextField;
    private javax.swing.JComboBox scaleMethodSelect;
    // End of variables declaration//GEN-END:variables
     
    public void updatePanel(WorkflowDescriptor aDescriptor)
    {   
        SimmScalingParams scalingParams = aDescriptor.dSubject.getScalingParams();
        if (!initialized){
            scaleMethodSelect.setToolTipText(scalingParams.getPropertySet().get("scaling_order").getComment());
            markerTrialTextField.setToolTipText(scalingParams.getPropertySet().get("marker_trial").getComment());
            jMeasurementsFileTextField.setToolTipText(scalingParams.getPropertySet().get("MeasurementSet").getComment());
            jManualScaleTextField.setToolTipText(scalingParams.getPropertySet().get("ScaleSet").getComment());
            preserveMass.setToolTipText(scalingParams.getPropertySet().get("preserve_mass_distribution").getComment());
            saveScalesTextField.setToolTipText(scalingParams.getPropertySet().get("output_scale_file").getComment());
            initialized = true;
        }
        preserveMass.setSelected(scalingParams.getPreserveMassDist());
        // Map scaling method to dropdown
        scalingOrder = scalingParams.getScalingOrder();
        // use setSelectedITem to fire changes that enable/disable the rest of the panel
        String order = mapScalingOrderToIndex(scalingOrder);
        scaleMethodSelect.setSelectedItem(order);
        
        // Based on scaling "order" that is if Manual, Measurements or mix enable/disable fields in the Panel
        updateBasedOnScalingOrder();
        
        markerTrialTextField.setText(scalingParams.getMarkerFileName());
        ArrayDouble timeRange = scalingParams.getTimeRange();
        if (timeRange.getSize()==2){
            jFromTimeTextField.setText(String.valueOf(timeRange.getitem(0)));
           jToTimeTextField.setText(String.valueOf(timeRange.getitem(1)));
        }
        saveScalesTextField.setText(scalingParams.getOutputScaleFileName());
        jSaveScalesCheckBox.setSelected(scalingParams.getOutputScaleFileName()!="Unassigned");
        // We need to make a name for output files (at least the xml file) for
        // our own sake so that we can open it later.
        subjectPath = aDescriptor.dSubject.getPathToSubject();
        // if OutputModelFileName is null we should use ours
        if (!scalingParams.getOutputModelFileName().equalsIgnoreCase("Unassigned")){
            saveOpenSimTextField1.setText(scalingParams.getOutputModelFileName());
            jCheckBoxSaveopensim1.setSelected(true);
        }
        else{
            // Make up a default name
            String madeUpName = "ScaledModel.osim";
            saveOpenSimTextField1.setText(aDescriptor.dSubject.getPathToSubject()+
                                            FileUtils.addSuffix(madeUpName,"SP"));
        }
        // Joint file
        if (!scalingParams.getOutputJointFileName().equalsIgnoreCase("Unassigned")){
            saveSIMMJntTextField1.setText(scalingParams.getOutputJointFileName());
            jCheckBox2.setSelected(true);
        }
        else{
            // Make up a default name
            String madeUpName = "ScaledSIMMModel.jnt";
            saveSIMMJntTextField1.setText(aDescriptor.dSubject.getPathToSubject()+
                                            FileUtils.addSuffix(madeUpName,"SP"));
        }
        // Muscle file
        if (!scalingParams.getOutputMuscleFileName().equalsIgnoreCase("Unassigned")){
            saveSIMMmslTextField1.setText(scalingParams.getOutputMuscleFileName());
            jCheckBoxSavemsl1.setSelected(true);
        }
        else{
            // Make up a default name
            String madeUpName = "ScaledSIMMModel.msl";
            saveSIMMmslTextField1.setText(aDescriptor.dSubject.getPathToSubject()+
                                            FileUtils.addSuffix(madeUpName,"SP"));
        }
        repaint();
    }

    private String mapScalingOrderToIndex(ArrayStr scalingOrder) {
        String scalingOrderString="";
        for(int i=0; i < scalingOrder.getSize(); i++){
            if (i > 0)
                scalingOrderString = scalingOrderString+"+";
            if (scalingOrder.getitem(i).equalsIgnoreCase("Manual")){
                scalingOrderString = scalingOrderString+"Manual";
            }
            if (scalingOrder.getitem(i).equalsIgnoreCase("Measurements")){
                scalingOrderString = scalingOrderString+"Measurements";
            }
        }
        return scalingOrderString;
    }
   
    private boolean hasManual()
    {
        return ((String)scaleMethodSelect.getSelectedItem()).contains("Manual");
    }
    private boolean hasMeasurements()
    {
        return ((String)scaleMethodSelect.getSelectedItem()).contains("Measurements");
    }

    private void updateBasedOnScalingOrder() {
        boolean includesManual = hasManual();
        boolean includesMeasurements = hasMeasurements();
        
        jManualScalePanel.setEnabled(includesManual);
        jMeasurementScalePanel.setEnabled(includesMeasurements);
        jManualScaleTextField.setEnabled(includesManual);
        jEditScalesButton.setEnabled(includesManual);
        jMeasurementsFileTextField.setEnabled(includesMeasurements);
        jSaveScalesCheckBox.setEnabled(includesMeasurements);
        jFromTimeTextField.setEnabled(includesMeasurements);
        jToTimeTextField.setEnabled(includesMeasurements);
        markerTrialTextField.setEnabled(includesMeasurements);
        saveScalesTextField.setEnabled(includesMeasurements);
        // Now the buttons
        jBrowse4MeasButton.setEnabled(includesMeasurements);
        jBrowse4ScalesButton.setEnabled(includesMeasurements);
        jBrowse4TrcButton.setEnabled(includesMeasurements);
        jEditMeasButton.setEnabled(includesMeasurements);
        jSaveScalesCheckBox.setEnabled(includesMeasurements);
        jEditScalesButton.setEnabled(includesManual);
        jBrowse4ScaleButton.setEnabled(includesManual);
        jCheckBoxSavemsl1.setEnabled(includesManual || includesMeasurements);
        jCheckBox2.setEnabled(includesManual || includesMeasurements);
        jCheckBoxSaveopensim1.setEnabled(includesManual || includesMeasurements);
        saveOpenSimTextField1.setEnabled(includesManual || includesMeasurements);
        saveSIMMJntTextField1.setEnabled(includesManual || includesMeasurements);
        saveSIMMmslTextField1.setEnabled(includesManual || includesMeasurements);
        jBrowse4OpenSim1.setEnabled(includesManual || includesMeasurements);
        jBrowse4Jnt1.setEnabled(includesManual || includesMeasurements);
        jBrowse4Msl1.setEnabled(includesManual || includesMeasurements);
       
    }

    
    void updateWorkflow(WorkflowDescriptor descriptor){
        SimmScalingParams scalingParams = descriptor.dSubject.getScalingParams();
        String order = (String)scaleMethodSelect.getSelectedItem();
        scalingOrder = new ArrayStr("", 2);
        parseOrderIntoStrArr(order, scalingOrder);
        scalingParams.setScalingOrder(scalingOrder);
        boolean includesManual = hasManual();
        boolean includesMeasurements = hasMeasurements();
        if (includesManual){    // Make sure a scale file has been selected
            if(jManualScaleTextField.getText().equals(""))
                this.appendMessage("Manual scaling was selected but no Scales file was presented.");
            else {
                /* Create a ScaleSet based on selected file and set it in Subject.
                //DialogDisplayer.getDefault().notify(
                //    new NotifyDescriptor.Message("Not implemented yet, pending resolution of bug 209."));
                 */
            }
        }
        // Now measurements
        if (includesMeasurements){    // Make sure a scale file has been selected
            if(jManualScaleTextField.getText().equals(""))
                this.appendMessage("Manual scaling was selected but no Scales file was presented.");
            else {
                /*
                // Create a ScaleSet based on selected file and set it in Subject.
                DialogDisplayer.getDefault().notify(
                    new NotifyDescriptor.Message("Not implemented yet, pending resolution of bug 209."));
                 **/
            }
        }
        

    };

    private void parseOrderIntoStrArr(String order, ArrayStr scalingOrder) {
        String temp = order;
        if (temp.contains("+")){
            // Parse up to first +, append to scalingOrder, skip+ and repeat
            while(!temp.equals("")){
                int plusLocation = temp.indexOf('+');
                if (plusLocation==-1){  // No more +
                    scalingOrder.append(temp);
                    break;
                }
                scalingOrder.append(temp.substring(0, plusLocation));
                temp = temp.substring(plusLocation+1);
            }
        }
        else { // Just one 
            if (temp.equals("None"))
                scalingOrder.set(0, "");
            else{
                 scalingOrder.set(0, temp);               
            }
        }
    }

    public void appendMessage(String message) {
        jMessageTextArea.append(message);
        repaint();
    }


}

