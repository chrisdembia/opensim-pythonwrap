package org.opensim.coordinateviewer;

import java.awt.Component;
import java.io.Serializable;
import java.util.Observable;
import java.util.Observer;
import javax.swing.BoxLayout;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.opensim.modeling.CoordinateSet;
import org.opensim.view.pub.OpenSimDB;
import org.opensim.modeling.Model;
import org.opensim.view.ModelEvent;
/**
 * Top component which displays something.
 */
final class CoordinateViewerTopComponent extends TopComponent implements Observer {
   
   private static CoordinateViewerTopComponent instance;
   private Model aModel;
   private CoordinateSet coords;
   javax.swing.JPanel CoordinatesPanel;
   /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
   
   private static final String PREFERRED_ID = "CoordinateViewerTopComponent";
   
   private CoordinateViewerTopComponent() {
      initComponents();
      setName(NbBundle.getMessage(CoordinateViewerTopComponent.class, "CTL_CoordinateViewerTopComponent"));
      setToolTipText(NbBundle.getMessage(CoordinateViewerTopComponent.class, "HINT_CoordinateViewerTopComponent"));
      // Don't know if this should be here or moved to component opened, then we'll need to remove observer in componentClosed'
      OpenSimDB.getInstance().addObserver(this);
//        setIcon(Utilities.loadImage(ICON_PATH, true));
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {
      jLabel1 = new javax.swing.JLabel();
      jModelNameLabel = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jButton1 = new javax.swing.JButton();
      jScrollPane1 = new javax.swing.JScrollPane();
      jPanel1 = new javax.swing.JPanel();
      jButton2 = new javax.swing.JButton();
      jButton3 = new javax.swing.JButton();

      org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Model:");

      org.openide.awt.Mnemonics.setLocalizedText(jModelNameLabel, "model name");

      org.openide.awt.Mnemonics.setLocalizedText(jLabel3, "Group:");

      org.openide.awt.Mnemonics.setLocalizedText(jLabel4, "All");

      org.openide.awt.Mnemonics.setLocalizedText(jButton1, "Select...");

      org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(0, 208, Short.MAX_VALUE)
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(0, 132, Short.MAX_VALUE)
      );
      jScrollPane1.setViewportView(jPanel1);

      org.openide.awt.Mnemonics.setLocalizedText(jButton2, "Save Pose...");

      org.openide.awt.Mnemonics.setLocalizedText(jButton3, "Restore Pose...");

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(layout.createSequentialGroup()
                  .add(jLabel1)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(jModelNameLabel))
               .add(layout.createSequentialGroup()
                  .add(jLabel3)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(jLabel4)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(jButton1)))
            .addContainerGap(73, Short.MAX_VALUE))
         .add(layout.createSequentialGroup()
            .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 109, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
         .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel1)
               .add(jModelNameLabel))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel3)
               .add(jLabel4)
               .add(jButton1))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jButton2)
               .add(jButton3))
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents
    
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jModelNameLabel;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JScrollPane jScrollPane1;
   // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized CoordinateViewerTopComponent getDefault() {
       if (instance == null) {
          instance = new CoordinateViewerTopComponent();
       }
       return instance;
    }
    
    /**
     * Obtain the CoordinateViewerTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized CoordinateViewerTopComponent findInstance() {
       TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
       if (win == null) {
          ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find CoordinateViewer component. It will not be located properly in the window system.");
          return getDefault();
       }
       if (win instanceof CoordinateViewerTopComponent) {
          return (CoordinateViewerTopComponent)win;
       }
       ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
       return getDefault();
    }
    
    public int getPersistenceType() {
       return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
       // TODO add custom code on component opening
       aModel = OpenSimDB.getInstance().getCurrentModel();
       if (aModel==null){
          jModelNameLabel.setText("No current model");
          return;
       }
      //CoordinateTableModel model= new CoordinateTableModel(aModel);
      jModelNameLabel.setText(aModel.getName());
      coords = aModel.getDynamicsEngine().getCoordinateSet();
      // Create CoordinateSliderWithBox for each coordinate and add them to the ScrollPane
      jPanel1.setLayout(new BoxLayout(jPanel1, BoxLayout.Y_AXIS));
      for(int i=0; i<coords.getSize(); i++){
         CoordinateSliderWithBox sliderPanel = new CoordinateSliderWithBox(coords.get(i));
         sliderPanel.setAlignmentX(Component.RIGHT_ALIGNMENT);
         jPanel1.add(sliderPanel);
      }
    }
    
    public void componentClosed() {
       // TODO add custom code on component closing
    }
    
    /** replaces this in object stream */
    public Object writeReplace() {
       return new ResolvableHelper();
    }
    
    protected String preferredID() {
       return PREFERRED_ID;
    }

   public void update(Observable o, Object arg) {
      // Update based on current model.
      if (o instanceof OpenSimDB){
         // if current model is being switched due to open/close or change current then
         // update list of coordinates
         ModelEvent evt = (ModelEvent)arg;
         if (evt.getOperation()==ModelEvent.Operation.SetCurrent){
            jPanel1.removeAll();
            componentOpened();
         }
         // Do we need to handle close separately?
         // save may trigger saving poses and open may trigger loading poses.
      }
   }
    
    final static class ResolvableHelper implements Serializable {
       private static final long serialVersionUID = 1L;
       public Object readResolve() {
          return CoordinateViewerTopComponent.getDefault();
       }
    }

}
