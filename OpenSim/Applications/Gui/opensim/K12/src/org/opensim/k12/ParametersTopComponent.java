package org.opensim.k12;

import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import javax.swing.Box;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.opensim.modeling.Analysis;
import org.opensim.modeling.Coordinate;
import org.opensim.modeling.Model;
import org.opensim.modeling.OpenSimObject;
import org.opensim.swingui.SliderWithTextBox;
import org.opensim.tools.serializers.ToolExecutor;
import org.opensim.tools.serializers.ToolFactory;
import org.opensim.tools.serializers.ToolSerializer;
import org.opensim.tracking.ResultDisplayerInterface;
import org.opensim.view.ModelEvent;
import org.opensim.view.pub.OpenSimDB;
import java.applet.*;
import org.opensim.modeling.Property;
import org.opensim.view.ObjectSetCurrentEvent;
import org.opensim.view.ObjectsDeletedEvent;

//import org.opensim.view.output.TextResultDisplayer;
        
/**
 * Top component which displays something.
 */
final class ParametersTopComponent extends TopComponent 
        implements Observer, ResultDisplayerInterface{
    
    private static ParametersTopComponent instance;
   // private final ExplorerManager manager = new ExplorerManager();
    //private final PropertySheetView psv = new PropertySheetView();
    private double convertRadiansToDegrees = Math.toDegrees(1.0);
    private ResultsDisplayerCallback resultDisplayer;
    private ArrayList<LabOutputInterface> outputChannels = new ArrayList<LabOutputInterface> ();
    private long outputRefreshRate=-1L;   // Default reasonable value should be provided by LabOutputsNode
   /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    
    private static final String PREFERRED_ID = "ParametersTopComponent";
    LabParametersNode parametersNode;
    LabOutputsNode outputsNode;
    ToolSerializer    tool;
    private PlotOutputPanel   plotPanel;
    private String runButtonLabel="Run >";

    private ToolExecutor toolExecutor;

    private URL urlForAudio;
    private AudioClip clip;
    
    private ParametersTopComponent() {
        initComponents();
        //add(psv, BorderLayout.CENTER);
        setName(NbBundle.getMessage(ParametersTopComponent.class, "CTL_ParametersTopComponent"));
        setToolTipText(NbBundle.getMessage(ParametersTopComponent.class, "HINT_ParametersTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        runButton = new javax.swing.JToggleButton();
        resultsPanel = new javax.swing.JPanel();
        knobsPanel = new javax.swing.JPanel();

        org.openide.awt.Mnemonics.setLocalizedText(runButton, "Run >");
        runButton.setToolTipText("Execute tool");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        resultsPanel.setLayout(new javax.swing.BoxLayout(resultsPanel, javax.swing.BoxLayout.Y_AXIS));

        resultsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Results"));

        setLayout(new java.awt.BorderLayout());

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        knobsPanel.setLayout(new javax.swing.BoxLayout(knobsPanel, javax.swing.BoxLayout.Y_AXIS));

        knobsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        add(knobsPanel, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
// TODO add your handling code here:
        if (evt.getSource().equals(runButton)){
            if (runButton.isSelected()){
                runButton.setText("Stop");
                toolExecutor.execute(); // runs in background
                toolExecutor.addObserver(this);
                File file = new File("theme.wav");
                try {
                    clip = Applet.newAudioClip(file.toURL());
                    //clip.loop();
                    clip.play();
                } catch (MalformedURLException ex) {
                    ex.printStackTrace();
                }
            }
            else {
                toolExecutor.deleteObserver(this);
                toolExecutor.cancel();
                runButton.setText(runButtonLabel);
                if (clip!=null) clip.stop();
            }
        }
    }//GEN-LAST:event_runButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel knobsPanel;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JToggleButton runButton;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized ParametersTopComponent getDefault() {
        if (instance == null) {
            instance = new ParametersTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the ParametersTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ParametersTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING, "Cannot find Parameters component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ParametersTopComponent) {
            return (ParametersTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
        // TODO add custom code on component opening
        OpenSimDB.getInstance().addObserver(this);
    }
    
    public void componentClosed() {
        // TODO add custom code on component closing
         OpenSimDB.getInstance().deleteObserver(this);
    }
    
    /** replaces this in object stream */
    public Object writeReplace() {
        return new ResolvableHelper();
    }
    
    protected String preferredID() {
        return PREFERRED_ID;
    }

    void setInputs(LabParametersNode params) {
        parametersNode = params;
        createInputsGUI();
    }

    private void createInputsGUI() {
        // For each parameter in parametersNode, create a slider for it based on corresponding
        // DblBoundedRangeModel
        knobsPanel.removeAll();
        knobsPanel.add(Box.createRigidArea(new Dimension(10,10)));
        Model mdl=OpenSimDB.getInstance().getCurrentModel();
        if (parametersNode!=null ) {
            ArrayList<LabParameter> params = parametersNode.getParameters();
            for(int i=0; i<params.size(); i++){
                LabParameter nextParam = params.get(i);
                if (nextParam.getOpenSimType().equalsIgnoreCase("Coordinate")){
                    Coordinate c = mdl.getCoordinateSet().get(nextParam.getObjectName());
                    assert(c!=null);
                    CoordinateAdaptor ca = new CoordinateAdaptor(c);
                    knobsPanel.add(new SliderWithTextBox(ca,
                            (c.getMotionType()==Coordinate.MotionType.Rotational)?convertRadiansToDegrees:1.0,
                            c.getName()));
                } else if (nextParam.getOpenSimType().equalsIgnoreCase("Model")){
                    //DynamicPropertyAdaptor objAdaptor;
                    try {
                        Property prop=mdl.getPropertySet().get(nextParam.getPropertyName());
                        String displayName = nextParam.getPropertyDisplayName();
                        createGUIForProperty(prop, displayName, mdl, mdl, nextParam.getPropertyComponent(), 
                                nextParam.getRangeMin(), nextParam.getRangeMax(), nextParam.getUserInterface());
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                } else {
                    try {
                        OpenSimObject obj = mdl.getObjectByTypeAndName(nextParam.getOpenSimType(), nextParam.getObjectName());
                        //DynamicPropertyAdaptor objAdaptor;
                        Property prop=obj.getPropertySet().get(nextParam.getPropertyName());
                        String displayName = nextParam.getPropertyDisplayName();
                        createGUIForProperty(prop, displayName, mdl, obj, nextParam.getPropertyComponent(), 
                                nextParam.getRangeMin(), nextParam.getRangeMax(), nextParam.getUserInterface());
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }
        //knobsPanel.add(Box.createVerticalGlue());
        //knobsPanel.add(Box.createRigidArea(new Dimension(10,10)));
        knobsPanel.validate();
    }

    private void createGUIForProperty(final Property prop, final String displayName, final Model mdl,
            final OpenSimObject obj, final int propertyComponent, double min, double max, Object userInterface) {
        if (((String)userInterface).equalsIgnoreCase("Slider")){
            if (prop.getType()==(prop.getType().Dbl)){
                DynamicPropertyAdaptor objAdaptor = new DynamicPropertyAdaptor(obj, mdl, prop, min, max);
                knobsPanel.add(new SliderWithTextBox(objAdaptor,
                        1.0,
                        displayName));
            } else if (prop.getType()==prop.getType().DblVec||
                    prop.getType()==prop.getType().DblArray){
                // Three sliders one per component if none specified
                if (propertyComponent==-1){
                    for(int comp=0; comp<prop.getArraySize(); comp++){
                        DynamicPropertyComponentAdaptor objAdaptor = new DynamicPropertyComponentAdaptor(obj, mdl, prop, comp, min, max);
                        knobsPanel.add(new SliderWithTextBox(objAdaptor,
                                1.0,
                                displayName+"."+String.valueOf(comp)));
                    }
                } else {  // Component was specified
                    DynamicPropertyComponentAdaptor objAdaptor = new DynamicPropertyComponentAdaptor(obj, mdl, prop, propertyComponent, min, max);
                    knobsPanel.add(new SliderWithTextBox(objAdaptor,
                            1.0,
                            displayName));
                }
            }
        }
        return;
    }

    void setRunLabel(String label) {
        runButton.setText(label);
        runButtonLabel = label;
    }

    public void update(Observable o, Object arg) {
        //here we update the run button as needed and clenup when the model is changed or closed
        if (arg==ToolExecutor.Operation.ExecutionFinished){
            //toolExecutor.deleteObserver(this);
            runButton.setText(runButtonLabel);
            runButton.setSelected(false);
            if (clip!=null) clip.stop();

        }
        if (o instanceof OpenSimDB){
            if (arg instanceof ObjectSetCurrentEvent ||
                    arg instanceof ObjectsDeletedEvent ||
                    arg instanceof ModelEvent && ((ModelEvent) arg).getOperation()==ModelEvent.Operation.Close){
                // Current model changed, cleanup!
                knobsPanel.removeAll();
                for (LabOutputInterface nextOutput:outputChannels)
                    nextOutput.cleanup();

                close();
            }
        }
    }

    public ToolExecutor createExecutor(ToolSerializer tool, Model model) throws IOException {
         OpenSimObject obj = OpenSimObject.makeObjectFromFile(tool.getSetupFile());
         toolExecutor = ToolFactory.createExecutor(model, tool.getSetupFile(), obj.getType(), this);
         return toolExecutor;
    }

    void createOutputGUI() {
        // Cycle thru outputs and create corresponding UI 
        if (outputsNode!=null ) {
            ArrayList<LabOutput> outs = outputsNode.getOutputs();
            outputRefreshRate=outputsNode.getRefreshRate();
            //outs.add(new LabOutputTextToWindow());
            for(int i=0; i<outs.size(); i++){
                LabOutput nextOutput = outs.get(i);
                if (nextOutput instanceof LabOutputTextToPanel){
                    TextOutputPanel resultPanel = new TextOutputPanel((LabOutputTextToPanel)nextOutput);
                    outputChannels.add(resultPanel);
                    knobsPanel.add(resultPanel);
                }
                else if (nextOutput instanceof LabOutputPlot) {
                    plotPanel = new PlotOutputPanel((LabOutputPlot)nextOutput, this);
                    //outputChannels.add(resultPanel);
                    //knobsPanel.add(resultPanel);                    
                }
                else if (nextOutput instanceof LabOutputTextToWindow) {
                    outputChannels.add(new LabOutputAnnotationAnchorWindow((LabOutputTextToWindow)nextOutput));
                }
                else if (nextOutput instanceof LabOutputTextToObject) {
                    LabOutputAnnotationAnchorObject newChannel;
                    try {
                        newChannel = new LabOutputAnnotationAnchorObject((LabOutputTextToObject) nextOutput);
                        outputChannels.add(newChannel);
                    } catch (IOException ex) {
                        ex.printStackTrace();
            }
        }
            }
        }
        knobsPanel.validate();
    }

    public void createRunButton() {
         knobsPanel.add(runButton);
         knobsPanel.add(Box.createRigidArea(new Dimension(10,10)));
         knobsPanel.validate();
    }
    public Analysis createAnalysis(Model model) {
        resultDisplayer = new ResultsDisplayerCallback(model);
        for (LabOutputInterface nextOutput:outputChannels)
            resultDisplayer.addOutput(nextOutput);
        if (plotPanel!= null)
        resultDisplayer.addOutput(plotPanel);
        model.addAnalysis(resultDisplayer);
        return resultDisplayer;
    }

    void seOutnputs(LabOutputsNode outs) {
        outputsNode = outs;
        createOutputGUI();
    }
    
    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            return ParametersTopComponent.getDefault();
        }
    }

    public PlotOutputPanel getPlotPanel() {
        return plotPanel;
    }

    public ResultsDisplayerCallback getResultDisplayer() {
        return resultDisplayer;
    }
    
    public void removeAnalysis(Model model) {
        model.removeAnalysis(resultDisplayer, false);
}
    
}
