/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class Schutte1993Muscle extends AbstractMuscle {
  private long swigCPtr;

  public Schutte1993Muscle(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.SWIGStorageUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Schutte1993Muscle obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      opensimModelJNI.delete_Schutte1993Muscle(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public Schutte1993Muscle() {
    this(opensimModelJNI.new_Schutte1993Muscle__SWIG_0(), true);
  }

  public Schutte1993Muscle(Schutte1993Muscle aMuscle) {
    this(opensimModelJNI.new_Schutte1993Muscle__SWIG_1(Schutte1993Muscle.getCPtr(aMuscle), aMuscle), true);
  }

  public OpenSimObject copy() {
    long cPtr = opensimModelJNI.Schutte1993Muscle_copy__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new OpenSimObject(cPtr, false);
  }

  public void copyData(Schutte1993Muscle aMuscle) {
    opensimModelJNI.Schutte1993Muscle_copyData(swigCPtr, this, Schutte1993Muscle.getCPtr(aMuscle), aMuscle);
  }

  public void copyPropertyValues(AbstractActuator aActuator) {
    opensimModelJNI.Schutte1993Muscle_copyPropertyValues(swigCPtr, this, AbstractActuator.getCPtr(aActuator), aActuator);
  }

  public double getMaxIsometricForce() {
    return opensimModelJNI.Schutte1993Muscle_getMaxIsometricForce(swigCPtr, this);
  }

  public double getOptimalFiberLength() {
    return opensimModelJNI.Schutte1993Muscle_getOptimalFiberLength(swigCPtr, this);
  }

  public double getTendonSlackLength() {
    return opensimModelJNI.Schutte1993Muscle_getTendonSlackLength(swigCPtr, this);
  }

  public double getPennationAngleAtOptimalFiberLength() {
    return opensimModelJNI.Schutte1993Muscle_getPennationAngleAtOptimalFiberLength(swigCPtr, this);
  }

  public double getMaxContractionVelocity() {
    return opensimModelJNI.Schutte1993Muscle_getMaxContractionVelocity(swigCPtr, this);
  }

  public double getTimeScale() {
    return opensimModelJNI.Schutte1993Muscle_getTimeScale(swigCPtr, this);
  }

  public double getDamping() {
    return opensimModelJNI.Schutte1993Muscle_getDamping(swigCPtr, this);
  }

  public double getPennationAngle() {
    return opensimModelJNI.Schutte1993Muscle_getPennationAngle(swigCPtr, this);
  }

  public double getFiberLength() {
    return opensimModelJNI.Schutte1993Muscle_getFiberLength(swigCPtr, this);
  }

  public double getNormalizedFiberLength() {
    return opensimModelJNI.Schutte1993Muscle_getNormalizedFiberLength(swigCPtr, this);
  }

  public double getPassiveFiberForce() {
    return opensimModelJNI.Schutte1993Muscle_getPassiveFiberForce(swigCPtr, this);
  }

  public void computeStateDerivatives(double[] rDYDT) {
    opensimModelJNI.Schutte1993Muscle_computeStateDerivatives(swigCPtr, this, rDYDT);
  }

  public void computeEquilibrium() {
    opensimModelJNI.Schutte1993Muscle_computeEquilibrium(swigCPtr, this);
  }

  public void computeActuation() {
    opensimModelJNI.Schutte1993Muscle_computeActuation(swigCPtr, this);
  }

  public void postScale(ScaleSet aScaleSet) {
    opensimModelJNI.Schutte1993Muscle_postScale(swigCPtr, this, ScaleSet.getCPtr(aScaleSet), aScaleSet);
  }

  public void scale(ScaleSet aScaleSet) {
    opensimModelJNI.Schutte1993Muscle_scale(swigCPtr, this, ScaleSet.getCPtr(aScaleSet), aScaleSet);
  }

  public void setup(Model aModel) {
    opensimModelJNI.Schutte1993Muscle_setup(swigCPtr, this, Model.getCPtr(aModel), aModel);
  }

  public Function getActiveForceLengthCurve() {
    long cPtr = opensimModelJNI.Schutte1993Muscle_getActiveForceLengthCurve(swigCPtr, this);
    return (cPtr == 0) ? null : new Function(cPtr, false);
  }

  public Function getPassiveForceLengthCurve() {
    long cPtr = opensimModelJNI.Schutte1993Muscle_getPassiveForceLengthCurve(swigCPtr, this);
    return (cPtr == 0) ? null : new Function(cPtr, false);
  }

  public Function getTendonForceLengthCurve() {
    long cPtr = opensimModelJNI.Schutte1993Muscle_getTendonForceLengthCurve(swigCPtr, this);
    return (cPtr == 0) ? null : new Function(cPtr, false);
  }

  public Function getForceVelocityCurve() {
    long cPtr = opensimModelJNI.Schutte1993Muscle_getForceVelocityCurve(swigCPtr, this);
    return (cPtr == 0) ? null : new Function(cPtr, false);
  }

  public double calcNonzeroPassiveForce(double aNormFiberLength, double aNormFiberVelocity) {
    return opensimModelJNI.Schutte1993Muscle_calcNonzeroPassiveForce(swigCPtr, this, aNormFiberLength, aNormFiberVelocity);
  }

  public double calcFiberVelocity(double aActivation, double aActiveForce, double aVelocityDependentForce) {
    return opensimModelJNI.Schutte1993Muscle_calcFiberVelocity(swigCPtr, this, aActivation, aActiveForce, aVelocityDependentForce);
  }

  public double calcTendonForce(double aNormTendonLength) {
    return opensimModelJNI.Schutte1993Muscle_calcTendonForce(swigCPtr, this, aNormTendonLength);
  }

  public double getStress() {
    return opensimModelJNI.Schutte1993Muscle_getStress(swigCPtr, this);
  }

  public double computeIsometricForce(double activation) {
    return opensimModelJNI.Schutte1993Muscle_computeIsometricForce(swigCPtr, this, activation);
  }

  public double getActivation() {
    return opensimModelJNI.Schutte1993Muscle_getActivation(swigCPtr, this);
  }

  public static boolean isKindOf(String type) {
    return opensimModelJNI.Schutte1993Muscle_isKindOf(type);
  }

  public boolean isA(String type) {
    return opensimModelJNI.Schutte1993Muscle_isA(swigCPtr, this, type);
  }

  public static Schutte1993Muscle safeDownCast(OpenSimObject obj) {
    long cPtr = opensimModelJNI.Schutte1993Muscle_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new Schutte1993Muscle(cPtr, false);
  }

  public void copy(OpenSimObject aObject) {
    opensimModelJNI.Schutte1993Muscle_copy__SWIG_1(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

}
