/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class CoordinateActuator extends Actuator {
  private long swigCPtr;

  public CoordinateActuator(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.SWIGStorageUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(CoordinateActuator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      opensimModelJNI.delete_CoordinateActuator(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public OpenSimObject copy() {
    long cPtr = opensimModelJNI.CoordinateActuator_copy__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new OpenSimObject(cPtr, false);
  }

  public void copyData(CoordinateActuator aGenForce) {
    opensimModelJNI.CoordinateActuator_copyData(swigCPtr, this, CoordinateActuator.getCPtr(aGenForce), aGenForce);
  }

  public void setCoordinate(Coordinate aCoordinate) {
    opensimModelJNI.CoordinateActuator_setCoordinate(swigCPtr, this, Coordinate.getCPtr(aCoordinate), aCoordinate);
  }

  public Coordinate getCoordinate() {
    long cPtr = opensimModelJNI.CoordinateActuator_getCoordinate(swigCPtr, this);
    return (cPtr == 0) ? null : new Coordinate(cPtr, false);
  }

  public void setOptimalForce(double aOptimalForce) {
    opensimModelJNI.CoordinateActuator_setOptimalForce(swigCPtr, this, aOptimalForce);
  }

  public double getOptimalForce() {
    return opensimModelJNI.CoordinateActuator_getOptimalForce(swigCPtr, this);
  }

  public boolean check() {
    return opensimModelJNI.CoordinateActuator_check(swigCPtr, this);
  }

  public boolean isCoordinateValid() {
    return opensimModelJNI.CoordinateActuator_isCoordinateValid(swigCPtr, this);
  }

  public ArrayStr getRecordLabels() {
    return new ArrayStr(opensimModelJNI.CoordinateActuator_getRecordLabels(swigCPtr, this), true);
  }

  public ArrayDouble getRecordValues(SWIGTYPE_p_SimTK__State state) {
    return new ArrayDouble(opensimModelJNI.CoordinateActuator_getRecordValues(swigCPtr, this, SWIGTYPE_p_SimTK__State.getCPtr(state)), true);
  }

  public double getSpeed(SWIGTYPE_p_SimTK__State s) {
    return opensimModelJNI.CoordinateActuator_getSpeed(swigCPtr, this, SWIGTYPE_p_SimTK__State.getCPtr(s));
  }

  public void updateFromXMLNode() {
    opensimModelJNI.CoordinateActuator_updateFromXMLNode(swigCPtr, this);
  }

  public static boolean isKindOf(String type) {
    return opensimModelJNI.CoordinateActuator_isKindOf(type);
  }

  public boolean isA(String type) {
    return opensimModelJNI.CoordinateActuator_isA(swigCPtr, this, type);
  }

  public static CoordinateActuator safeDownCast(OpenSimObject obj) {
    long cPtr = opensimModelJNI.CoordinateActuator_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new CoordinateActuator(cPtr, false);
  }

  public void copy(OpenSimObject aObject) {
    opensimModelJNI.CoordinateActuator_copy__SWIG_1(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

}
