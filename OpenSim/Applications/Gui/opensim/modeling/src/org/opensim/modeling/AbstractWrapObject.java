/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class AbstractWrapObject extends OpenSimObject {
  private long swigCPtr;

  public AbstractWrapObject(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.SWIGStorageUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(AbstractWrapObject obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      opensimModelJNI.delete_AbstractWrapObject(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public OpenSimObject copy() {
    long cPtr = opensimModelJNI.AbstractWrapObject_copy(swigCPtr);
    return (cPtr == 0) ? null : new OpenSimObject(cPtr, false);
  }

  public void copyData(AbstractWrapObject aWrapObject) {
    opensimModelJNI.AbstractWrapObject_copyData(swigCPtr, AbstractWrapObject.getCPtr(aWrapObject));
  }

  public void scale(ArrayDouble aScaleFactors) {
    opensimModelJNI.AbstractWrapObject_scale(swigCPtr, ArrayDouble.getCPtr(aScaleFactors));
  }

  public void setup(AbstractDynamicsEngine aEngine, AbstractBody aBody) {
    opensimModelJNI.AbstractWrapObject_setup(swigCPtr, AbstractDynamicsEngine.getCPtr(aEngine), AbstractBody.getCPtr(aBody));
  }

  public AbstractBody getBody() {
    long cPtr = opensimModelJNI.AbstractWrapObject_getBody(swigCPtr);
    return (cPtr == 0) ? null : new AbstractBody(cPtr, false);
  }

  public SWIGTYPE_p_double getXYZBodyRotation() {
    long cPtr = opensimModelJNI.AbstractWrapObject_getXYZBodyRotation(swigCPtr);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public SWIGTYPE_p_double getTranslation() {
    long cPtr = opensimModelJNI.AbstractWrapObject_getTranslation(swigCPtr);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public boolean getActive() {
    return opensimModelJNI.AbstractWrapObject_getActive(swigCPtr);
  }

  public boolean getActiveUseDefault() {
    return opensimModelJNI.AbstractWrapObject_getActiveUseDefault(swigCPtr);
  }

  public String getQuadrantName() {
    return opensimModelJNI.AbstractWrapObject_getQuadrantName(swigCPtr);
  }

  public boolean getQuadrantNameUseDefault() {
    return opensimModelJNI.AbstractWrapObject_getQuadrantNameUseDefault(swigCPtr);
  }

  public void setQuadrantName(String aName) {
    opensimModelJNI.AbstractWrapObject_setQuadrantName(swigCPtr, aName);
  }

  public String getWrapTypeName() {
    return opensimModelJNI.AbstractWrapObject_getWrapTypeName(swigCPtr);
  }

  public String getDimensionsString() {
    return opensimModelJNI.AbstractWrapObject_getDimensionsString(swigCPtr);
  }

  public int wrapMuscleSegment(SimmMusclePoint aPoint1, SimmMusclePoint aPoint2, MuscleWrap aMuscleWrap, SWIGTYPE_p_OpenSim__WrapResult aWrapResult) {
    return opensimModelJNI.AbstractWrapObject_wrapMuscleSegment(swigCPtr, SimmMusclePoint.getCPtr(aPoint1), SimmMusclePoint.getCPtr(aPoint2), MuscleWrap.getCPtr(aMuscleWrap), SWIGTYPE_p_OpenSim__WrapResult.getCPtr(aWrapResult));
  }

  public int wrapLine(ArrayDouble aPoint1, ArrayDouble aPoint2, MuscleWrap aMuscleWrap, SWIGTYPE_p_OpenSim__WrapResult aWrapResult, SWIGTYPE_p_bool aFlag) {
    return opensimModelJNI.AbstractWrapObject_wrapLine(swigCPtr, ArrayDouble.getCPtr(aPoint1), ArrayDouble.getCPtr(aPoint2), MuscleWrap.getCPtr(aMuscleWrap), SWIGTYPE_p_OpenSim__WrapResult.getCPtr(aWrapResult), SWIGTYPE_p_bool.getCPtr(aFlag));
  }

  public VisibleObject getDisplayer() {
    long cPtr = opensimModelJNI.AbstractWrapObject_getDisplayer(swigCPtr);
    return (cPtr == 0) ? null : new VisibleObject(cPtr, false);
  }

  public void updateGeometry() {
    opensimModelJNI.AbstractWrapObject_updateGeometry(swigCPtr);
  }

  public void peteTest() {
    opensimModelJNI.AbstractWrapObject_peteTest(swigCPtr);
  }

  public final static class WrapQuadrant {
    public final static WrapQuadrant allQuadrants = new WrapQuadrant("allQuadrants");
    public final static WrapQuadrant negativeX = new WrapQuadrant("negativeX");
    public final static WrapQuadrant positiveX = new WrapQuadrant("positiveX");
    public final static WrapQuadrant negativeY = new WrapQuadrant("negativeY");
    public final static WrapQuadrant positiveY = new WrapQuadrant("positiveY");
    public final static WrapQuadrant negativeZ = new WrapQuadrant("negativeZ");
    public final static WrapQuadrant positiveZ = new WrapQuadrant("positiveZ");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static WrapQuadrant swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + WrapQuadrant.class + " with value " + swigValue);
    }

    private WrapQuadrant(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private WrapQuadrant(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private WrapQuadrant(String swigName, WrapQuadrant swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static WrapQuadrant[] swigValues = { allQuadrants, negativeX, positiveX, negativeY, positiveY, negativeZ, positiveZ };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class WrapAction {
    public final static WrapAction noWrap = new WrapAction("noWrap");
    public final static WrapAction insideRadius = new WrapAction("insideRadius");
    public final static WrapAction wrapped = new WrapAction("wrapped");
    public final static WrapAction mandatoryWrap = new WrapAction("mandatoryWrap");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static WrapAction swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + WrapAction.class + " with value " + swigValue);
    }

    private WrapAction(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private WrapAction(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private WrapAction(String swigName, WrapAction swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static WrapAction[] swigValues = { noWrap, insideRadius, wrapped, mandatoryWrap };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
