/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class Thelen2003Muscle extends AbstractMuscle {
  private long swigCPtr;

  public Thelen2003Muscle(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.SWIGStorageUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Thelen2003Muscle obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      opensimModelJNI.delete_Thelen2003Muscle(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public Thelen2003Muscle() {
    this(opensimModelJNI.new_Thelen2003Muscle__SWIG_0(), true);
  }

  public Thelen2003Muscle(Thelen2003Muscle aMuscle) {
    this(opensimModelJNI.new_Thelen2003Muscle__SWIG_1(Thelen2003Muscle.getCPtr(aMuscle), aMuscle), true);
  }

  public OpenSimObject copy() {
    long cPtr = opensimModelJNI.Thelen2003Muscle_copy__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new OpenSimObject(cPtr, false);
  }

  public void copyData(Thelen2003Muscle aMuscle) {
    opensimModelJNI.Thelen2003Muscle_copyData(swigCPtr, this, Thelen2003Muscle.getCPtr(aMuscle), aMuscle);
  }

  public void copyPropertyValues(AbstractActuator aActuator) {
    opensimModelJNI.Thelen2003Muscle_copyPropertyValues(swigCPtr, this, AbstractActuator.getCPtr(aActuator), aActuator);
  }

  public double getMaxIsometricForce() {
    return opensimModelJNI.Thelen2003Muscle_getMaxIsometricForce(swigCPtr, this);
  }

  public double getOptimalFiberLength() {
    return opensimModelJNI.Thelen2003Muscle_getOptimalFiberLength(swigCPtr, this);
  }

  public double getTendonSlackLength() {
    return opensimModelJNI.Thelen2003Muscle_getTendonSlackLength(swigCPtr, this);
  }

  public double getPennationAngleAtOptimalFiberLength() {
    return opensimModelJNI.Thelen2003Muscle_getPennationAngleAtOptimalFiberLength(swigCPtr, this);
  }

  public double getActivationTimeConstant() {
    return opensimModelJNI.Thelen2003Muscle_getActivationTimeConstant(swigCPtr, this);
  }

  public double getDeactivationTimeConstant() {
    return opensimModelJNI.Thelen2003Muscle_getDeactivationTimeConstant(swigCPtr, this);
  }

  public double getVmax() {
    return opensimModelJNI.Thelen2003Muscle_getVmax(swigCPtr, this);
  }

  public double getVmax0() {
    return opensimModelJNI.Thelen2003Muscle_getVmax0(swigCPtr, this);
  }

  public double getFmaxTendonStrain() {
    return opensimModelJNI.Thelen2003Muscle_getFmaxTendonStrain(swigCPtr, this);
  }

  public double getFmaxMuscleStrain() {
    return opensimModelJNI.Thelen2003Muscle_getFmaxMuscleStrain(swigCPtr, this);
  }

  public double getKshapeActive() {
    return opensimModelJNI.Thelen2003Muscle_getKshapeActive(swigCPtr, this);
  }

  public double getKshapePassive() {
    return opensimModelJNI.Thelen2003Muscle_getKshapePassive(swigCPtr, this);
  }

  public double getDamping() {
    return opensimModelJNI.Thelen2003Muscle_getDamping(swigCPtr, this);
  }

  public double getAf() {
    return opensimModelJNI.Thelen2003Muscle_getAf(swigCPtr, this);
  }

  public double getFlen() {
    return opensimModelJNI.Thelen2003Muscle_getFlen(swigCPtr, this);
  }

  public double getPennationAngle() {
    return opensimModelJNI.Thelen2003Muscle_getPennationAngle(swigCPtr, this);
  }

  public double getFiberLength() {
    return opensimModelJNI.Thelen2003Muscle_getFiberLength(swigCPtr, this);
  }

  public double getNormalizedFiberLength() {
    return opensimModelJNI.Thelen2003Muscle_getNormalizedFiberLength(swigCPtr, this);
  }

  public double getPassiveFiberForce() {
    return opensimModelJNI.Thelen2003Muscle_getPassiveFiberForce(swigCPtr, this);
  }

  public double getStress() {
    return opensimModelJNI.Thelen2003Muscle_getStress(swigCPtr, this);
  }

  public double getActivation() {
    return opensimModelJNI.Thelen2003Muscle_getActivation(swigCPtr, this);
  }

  public void computeStateDerivatives(double[] rDYDT) {
    opensimModelJNI.Thelen2003Muscle_computeStateDerivatives(swigCPtr, this, rDYDT);
  }

  public void computeEquilibrium() {
    opensimModelJNI.Thelen2003Muscle_computeEquilibrium(swigCPtr, this);
  }

  public void computeActuation() {
    opensimModelJNI.Thelen2003Muscle_computeActuation(swigCPtr, this);
  }

  public double calcTendonForce(double aNormTendonLength) {
    return opensimModelJNI.Thelen2003Muscle_calcTendonForce(swigCPtr, this, aNormTendonLength);
  }

  public double calcPassiveForce(double aNormFiberLength) {
    return opensimModelJNI.Thelen2003Muscle_calcPassiveForce(swigCPtr, this, aNormFiberLength);
  }

  public double calcActiveForce(double aNormFiberLength) {
    return opensimModelJNI.Thelen2003Muscle_calcActiveForce(swigCPtr, this, aNormFiberLength);
  }

  public double calcFiberVelocity(double aActivation, double aActiveForce, double aVelocityDependentForce) {
    return opensimModelJNI.Thelen2003Muscle_calcFiberVelocity(swigCPtr, this, aActivation, aActiveForce, aVelocityDependentForce);
  }

  public double computeIsometricForce(double activation) {
    return opensimModelJNI.Thelen2003Muscle_computeIsometricForce(swigCPtr, this, activation);
  }

  public double computeIsokineticForceAssumingInfinitelyStiffTendon(double aActivation) {
    return opensimModelJNI.Thelen2003Muscle_computeIsokineticForceAssumingInfinitelyStiffTendon(swigCPtr, this, aActivation);
  }

  public void postScale(ScaleSet aScaleSet) {
    opensimModelJNI.Thelen2003Muscle_postScale(swigCPtr, this, ScaleSet.getCPtr(aScaleSet), aScaleSet);
  }

  public void scale(ScaleSet aScaleSet) {
    opensimModelJNI.Thelen2003Muscle_scale(swigCPtr, this, ScaleSet.getCPtr(aScaleSet), aScaleSet);
  }

  public void setup(Model aModel) {
    opensimModelJNI.Thelen2003Muscle_setup(swigCPtr, this, Model.getCPtr(aModel), aModel);
  }

  public static boolean isKindOf(String type) {
    return opensimModelJNI.Thelen2003Muscle_isKindOf(type);
  }

  public boolean isA(String type) {
    return opensimModelJNI.Thelen2003Muscle_isA(swigCPtr, this, type);
  }

  public static Thelen2003Muscle safeDownCast(OpenSimObject obj) {
    long cPtr = opensimModelJNI.Thelen2003Muscle_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new Thelen2003Muscle(cPtr, false);
  }

  public void copy(OpenSimObject aObject) {
    opensimModelJNI.Thelen2003Muscle_copy__SWIG_1(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

}
