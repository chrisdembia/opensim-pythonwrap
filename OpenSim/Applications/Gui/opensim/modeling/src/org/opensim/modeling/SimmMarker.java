/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class SimmMarker extends AbstractMarker {
  private long swigCPtr;

  public SimmMarker(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.SWIGStorageUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(SimmMarker obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      opensimModelJNI.delete_SimmMarker(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public SimmMarker() {
    this(opensimModelJNI.new_SimmMarker__SWIG_0(), true);
  }

  public SimmMarker(SimmMarker aMarker) {
    this(opensimModelJNI.new_SimmMarker__SWIG_1(SimmMarker.getCPtr(aMarker), aMarker), true);
  }

  public OpenSimObject copy() {
    long cPtr = opensimModelJNI.SimmMarker_copy(swigCPtr, this);
    return (cPtr == 0) ? null : new OpenSimObject(cPtr, false);
  }

  public void copyData(SimmMarker aMarker) {
    opensimModelJNI.SimmMarker_copyData(swigCPtr, this, SimmMarker.getCPtr(aMarker), aMarker);
  }

  public void updateFromMarker(AbstractMarker aMarker) {
    opensimModelJNI.SimmMarker_updateFromMarker(swigCPtr, this, AbstractMarker.getCPtr(aMarker), aMarker);
  }

  public void getOffset(SWIGTYPE_p_double rOffset) {
    opensimModelJNI.SimmMarker_getOffset__SWIG_0(swigCPtr, this, SWIGTYPE_p_double.getCPtr(rOffset));
  }

  public SWIGTYPE_p_double getOffset() {
    long cPtr = opensimModelJNI.SimmMarker_getOffset__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public boolean setOffset(ArrayDouble aOffset) {
    return opensimModelJNI.SimmMarker_setOffset__SWIG_0(swigCPtr, this, ArrayDouble.getCPtr(aOffset), aOffset);
  }

  public boolean setOffset(double[] aPoint) {
    return opensimModelJNI.SimmMarker_setOffset__SWIG_1(swigCPtr, this, aPoint);
  }

  public boolean getOffsetUseDefault() {
    return opensimModelJNI.SimmMarker_getOffsetUseDefault(swigCPtr, this);
  }

  public boolean getFixed() {
    return opensimModelJNI.SimmMarker_getFixed(swigCPtr, this);
  }

  public boolean setFixed(boolean aFixed) {
    return opensimModelJNI.SimmMarker_setFixed(swigCPtr, this, aFixed);
  }

  public boolean getFixedUseDefault() {
    return opensimModelJNI.SimmMarker_getFixedUseDefault(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string getBodyName() {
    long cPtr = opensimModelJNI.SimmMarker_getBodyName(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__string(cPtr, false);
  }

  public boolean setBodyName(String aName) {
    return opensimModelJNI.SimmMarker_setBodyName(swigCPtr, this, aName);
  }

  public boolean getBodyNameUseDefault() {
    return opensimModelJNI.SimmMarker_getBodyNameUseDefault(swigCPtr, this);
  }

  public boolean setBodyNameUseDefault(boolean aValue) {
    return opensimModelJNI.SimmMarker_setBodyNameUseDefault(swigCPtr, this, aValue);
  }

  public AbstractBody getBody() {
    long cPtr = opensimModelJNI.SimmMarker_getBody(swigCPtr, this);
    return (cPtr == 0) ? null : new AbstractBody(cPtr, false);
  }

  public void setBody(AbstractBody aBody) {
    opensimModelJNI.SimmMarker_setBody(swigCPtr, this, AbstractBody.getCPtr(aBody), aBody);
  }

  public void scale(ArrayDouble aScaleFactors) {
    opensimModelJNI.SimmMarker_scale(swigCPtr, this, ArrayDouble.getCPtr(aScaleFactors), aScaleFactors);
  }

  public void setup(AbstractDynamicsEngine aEngine) {
    opensimModelJNI.SimmMarker_setup(swigCPtr, this, AbstractDynamicsEngine.getCPtr(aEngine), aEngine);
  }

  public void updateGeometry() {
    opensimModelJNI.SimmMarker_updateGeometry(swigCPtr, this);
  }

  public VisibleObject getDisplayer() {
    long cPtr = opensimModelJNI.SimmMarker_getDisplayer(swigCPtr, this);
    return (cPtr == 0) ? null : new VisibleObject(cPtr, false);
  }

  public void removeSelfFromDisplay() {
    opensimModelJNI.SimmMarker_removeSelfFromDisplay(swigCPtr, this);
  }

  public boolean isVirtual() {
    return opensimModelJNI.SimmMarker_isVirtual(swigCPtr, this);
  }

  public void setVirtual(boolean aTrueFalse) {
    opensimModelJNI.SimmMarker_setVirtual(swigCPtr, this, aTrueFalse);
  }

  public void peteTest() {
    opensimModelJNI.SimmMarker_peteTest(swigCPtr, this);
  }

}
