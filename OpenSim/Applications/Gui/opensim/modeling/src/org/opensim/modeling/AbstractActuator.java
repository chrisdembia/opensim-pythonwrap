/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class AbstractActuator extends OpenSimObject {
  private long swigCPtr;

  public AbstractActuator(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.SWIGStorageUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(AbstractActuator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      opensimModelJNI.delete_AbstractActuator(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public static double getLARGE() {
    return opensimModelJNI.AbstractActuator_LARGE_get();
  }

  public OpenSimObject copy() {
    long cPtr = opensimModelJNI.AbstractActuator_copy(swigCPtr);
    return (cPtr == 0) ? null : new OpenSimObject(cPtr, false);
  }

  public void setup(AbstractModel aModel) {
    opensimModelJNI.AbstractActuator_setup(swigCPtr, AbstractModel.getCPtr(aModel));
  }

  public void setModel(AbstractModel aModel) {
    opensimModelJNI.AbstractActuator_setModel(swigCPtr, AbstractModel.getCPtr(aModel));
  }

  public AbstractModel getModel() {
    long cPtr = opensimModelJNI.AbstractActuator_getModel(swigCPtr);
    return (cPtr == 0) ? null : new AbstractModel(cPtr, false);
  }

  public int getNumControls() {
    return opensimModelJNI.AbstractActuator_getNumControls(swigCPtr);
  }

  public String getControlName(int aIndex) {
    return opensimModelJNI.AbstractActuator_getControlName(swigCPtr, aIndex);
  }

  public int getControlIndex(String aName) {
    return opensimModelJNI.AbstractActuator_getControlIndex(swigCPtr, aName);
  }

  public void setControl(int aIndex, double aValue) {
    opensimModelJNI.AbstractActuator_setControl(swigCPtr, aIndex, aValue);
  }

  public void setControls(double[] aX) {
    opensimModelJNI.AbstractActuator_setControls(swigCPtr, aX);
  }

  public double getControl(int aIndex) {
    return opensimModelJNI.AbstractActuator_getControl(swigCPtr, aIndex);
  }

  public void getControls(double[] rX) {
    opensimModelJNI.AbstractActuator_getControls(swigCPtr, rX);
  }

  public int getNumStates() {
    return opensimModelJNI.AbstractActuator_getNumStates(swigCPtr);
  }

  public String getStateName(int aIndex) {
    return opensimModelJNI.AbstractActuator_getStateName(swigCPtr, aIndex);
  }

  public int getStateIndex(String aName) {
    return opensimModelJNI.AbstractActuator_getStateIndex(swigCPtr, aName);
  }

  public void setState(int aIndex, double aValue) {
    opensimModelJNI.AbstractActuator_setState(swigCPtr, aIndex, aValue);
  }

  public void setStates(double[] aY) {
    opensimModelJNI.AbstractActuator_setStates(swigCPtr, aY);
  }

  public double getState(int aIndex) {
    return opensimModelJNI.AbstractActuator_getState(swigCPtr, aIndex);
  }

  public void getStates(double[] rY) {
    opensimModelJNI.AbstractActuator_getStates(swigCPtr, rY);
  }

  public int getNumPseudoStates() {
    return opensimModelJNI.AbstractActuator_getNumPseudoStates(swigCPtr);
  }

  public String getPseudoStateName(int aIndex) {
    return opensimModelJNI.AbstractActuator_getPseudoStateName(swigCPtr, aIndex);
  }

  public int getPseudoStateIndex(String aName) {
    return opensimModelJNI.AbstractActuator_getPseudoStateIndex(swigCPtr, aName);
  }

  public void setPseudoState(int aIndex, double aValue) {
    opensimModelJNI.AbstractActuator_setPseudoState(swigCPtr, aIndex, aValue);
  }

  public void setPseudoStates(double[] aY) {
    opensimModelJNI.AbstractActuator_setPseudoStates(swigCPtr, aY);
  }

  public double getPseudoState(int aIndex) {
    return opensimModelJNI.AbstractActuator_getPseudoState(swigCPtr, aIndex);
  }

  public void getPseudoStates(double[] rY) {
    opensimModelJNI.AbstractActuator_getPseudoStates(swigCPtr, rY);
  }

  public VisibleObject getDisplayer() {
    long cPtr = opensimModelJNI.AbstractActuator_getDisplayer(swigCPtr);
    return (cPtr == 0) ? null : new VisibleObject(cPtr, false);
  }

  public void updateGeometry() {
    opensimModelJNI.AbstractActuator_updateGeometry(swigCPtr);
  }

  public boolean getAppliesForce() {
    return opensimModelJNI.AbstractActuator_getAppliesForce(swigCPtr);
  }

  public void setForce(double aForce) {
    opensimModelJNI.AbstractActuator_setForce(swigCPtr, aForce);
  }

  public double getForce() {
    return opensimModelJNI.AbstractActuator_getForce(swigCPtr);
  }

  public double getSpeed() {
    return opensimModelJNI.AbstractActuator_getSpeed(swigCPtr);
  }

  public double getPower() {
    return opensimModelJNI.AbstractActuator_getPower(swigCPtr);
  }

  public double getStress() {
    return opensimModelJNI.AbstractActuator_getStress(swigCPtr);
  }

  public ArrayStr getGroupNames() {
    long cPtr = opensimModelJNI.AbstractActuator_getGroupNames(swigCPtr);
    return (cPtr == 0) ? null : new ArrayStr(cPtr, false);
  }

  public void promoteControlsToStates(double[] aX, double aDT) {
    opensimModelJNI.AbstractActuator_promoteControlsToStates(swigCPtr, aX, aDT);
  }

  public void computeActuation() {
    opensimModelJNI.AbstractActuator_computeActuation(swigCPtr);
  }

  public void computeStateDerivatives(double[] rDYDT) {
    opensimModelJNI.AbstractActuator_computeStateDerivatives(swigCPtr, rDYDT);
  }

  public void updatePseudoStates() {
    opensimModelJNI.AbstractActuator_updatePseudoStates(swigCPtr);
  }

  public void apply() {
    opensimModelJNI.AbstractActuator_apply(swigCPtr);
  }

  public boolean check() {
    return opensimModelJNI.AbstractActuator_check(swigCPtr);
  }

  public void preScale(SWIGTYPE_p_ScaleSet aScaleSet) {
    opensimModelJNI.AbstractActuator_preScale(swigCPtr, SWIGTYPE_p_ScaleSet.getCPtr(aScaleSet));
  }

  public void scale(SWIGTYPE_p_ScaleSet aScaleSet) {
    opensimModelJNI.AbstractActuator_scale(swigCPtr, SWIGTYPE_p_ScaleSet.getCPtr(aScaleSet));
  }

  public void postScale(SWIGTYPE_p_ScaleSet aScaleSet) {
    opensimModelJNI.AbstractActuator_postScale(swigCPtr, SWIGTYPE_p_ScaleSet.getCPtr(aScaleSet));
  }

}
