/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class IKTool extends AbstractTool {
  private long swigCPtr;

  public IKTool(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.SWIGStorageUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(IKTool obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      opensimModelJNI.delete_IKTool(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public IKTool() {
    this(opensimModelJNI.new_IKTool__SWIG_0(), true);
  }

  public IKTool(String aFileName, boolean aLoadModel) throws java.io.IOException {
    this(opensimModelJNI.new_IKTool__SWIG_1(aFileName, aLoadModel), true);
  }

  public IKTool(String aFileName) throws java.io.IOException {
    this(opensimModelJNI.new_IKTool__SWIG_2(aFileName), true);
  }

  public IKTool(IKTool aObject) {
    this(opensimModelJNI.new_IKTool__SWIG_3(IKTool.getCPtr(aObject), aObject), true);
  }

  public OpenSimObject copy() {
    long cPtr = opensimModelJNI.IKTool_copy(swigCPtr, this);
    return (cPtr == 0) ? null : new OpenSimObject(cPtr, false);
  }

  public static void registerTypes() {
    opensimModelJNI.IKTool_registerTypes();
  }

  public IKTrialSet getIKTrialSet() {
    return new IKTrialSet(opensimModelJNI.IKTool_getIKTrialSet(swigCPtr, this), false);
  }

  public IKTaskSet getIKTaskSet() {
    return new IKTaskSet(opensimModelJNI.IKTool_getIKTaskSet(swigCPtr, this), false);
  }

  public boolean initializeTrial(int i) {
    return opensimModelJNI.IKTool_initializeTrial(swigCPtr, this, i);
  }

  public boolean solveTrial(int i) {
    return opensimModelJNI.IKTool_solveTrial(swigCPtr, this, i);
  }

  public boolean run() {
    return opensimModelJNI.IKTool_run(swigCPtr, this);
  }

  public void setPrintResultFiles(boolean aToWrite) {
    opensimModelJNI.IKTool_setPrintResultFiles(swigCPtr, this, aToWrite);
  }

}
