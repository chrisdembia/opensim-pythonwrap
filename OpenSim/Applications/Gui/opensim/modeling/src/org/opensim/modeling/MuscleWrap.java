/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class MuscleWrap extends OpenSimObject {
  private long swigCPtr;

  public MuscleWrap(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.SWIGStorageUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MuscleWrap obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      opensimModelJNI.delete_MuscleWrap(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public MuscleWrap() {
    this(opensimModelJNI.new_MuscleWrap__SWIG_0(), true);
  }

  public MuscleWrap(MuscleWrap aMuscleWrap) {
    this(opensimModelJNI.new_MuscleWrap__SWIG_1(MuscleWrap.getCPtr(aMuscleWrap), aMuscleWrap), true);
  }

  public OpenSimObject copy() {
    long cPtr = opensimModelJNI.MuscleWrap_copy(swigCPtr, this);
    return (cPtr == 0) ? null : new OpenSimObject(cPtr, false);
  }

  public void copyData(MuscleWrap aMuscleWrap) {
    opensimModelJNI.MuscleWrap_copyData(swigCPtr, this, MuscleWrap.getCPtr(aMuscleWrap), aMuscleWrap);
  }

  public void setup(AbstractDynamicsEngine aEngine) {
    opensimModelJNI.MuscleWrap_setup(swigCPtr, this, AbstractDynamicsEngine.getCPtr(aEngine), aEngine);
  }

  public int getStartPoint() {
    return opensimModelJNI.MuscleWrap_getStartPoint(swigCPtr, this);
  }

  public int getEndPoint() {
    return opensimModelJNI.MuscleWrap_getEndPoint(swigCPtr, this);
  }

  public String getWrapObjectName() {
    return opensimModelJNI.MuscleWrap_getWrapObjectName(swigCPtr, this);
  }

  public AbstractWrapObject getWrapObject() {
    long cPtr = opensimModelJNI.MuscleWrap_getWrapObject(swigCPtr, this);
    return (cPtr == 0) ? null : new AbstractWrapObject(cPtr, false);
  }

  public SWIGTYPE_p_SimmMuscleWrapPoint getWrapPoint(int aIndex) {
    return new SWIGTYPE_p_SimmMuscleWrapPoint(opensimModelJNI.MuscleWrap_getWrapPoint(swigCPtr, this, aIndex), false);
  }

  public MuscleWrap.WrapMethod getMethod() {
    return MuscleWrap.WrapMethod.swigToEnum(opensimModelJNI.MuscleWrap_getMethod(swigCPtr, this));
  }

  public String getMethodName() {
    return opensimModelJNI.MuscleWrap_getMethodName(swigCPtr, this);
  }

  public SWIGTYPE_p_OpenSim__WrapResult getPreviousWrap() {
    return new SWIGTYPE_p_OpenSim__WrapResult(opensimModelJNI.MuscleWrap_getPreviousWrap(swigCPtr, this), false);
  }

  public void setPreviousWrap(SWIGTYPE_p_OpenSim__WrapResult aWrapResult) {
    opensimModelJNI.MuscleWrap_setPreviousWrap(swigCPtr, this, SWIGTYPE_p_OpenSim__WrapResult.getCPtr(aWrapResult));
  }

  public void resetPreviousWrap() {
    opensimModelJNI.MuscleWrap_resetPreviousWrap(swigCPtr, this);
  }

  public void peteTest() {
    opensimModelJNI.MuscleWrap_peteTest(swigCPtr, this);
  }

  public final static class WrapMethod {
    public final static WrapMethod hybrid = new WrapMethod("hybrid");
    public final static WrapMethod midpoint = new WrapMethod("midpoint");
    public final static WrapMethod axial = new WrapMethod("axial");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static WrapMethod swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + WrapMethod.class + " with value " + swigValue);
    }

    private WrapMethod(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private WrapMethod(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private WrapMethod(String swigName, WrapMethod swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static WrapMethod[] swigValues = { hybrid, midpoint, axial };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
