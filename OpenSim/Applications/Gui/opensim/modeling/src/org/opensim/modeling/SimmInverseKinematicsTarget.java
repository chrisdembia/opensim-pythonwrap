/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class SimmInverseKinematicsTarget extends rdOptimizationTarget {
  private long swigCPtr;

  public SimmInverseKinematicsTarget(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.SWIGStorageUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(SimmInverseKinematicsTarget obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      opensimModelJNI.delete_SimmInverseKinematicsTarget(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public SimmInverseKinematicsTarget(SimmModel aModel, Storage aExperimentalDataStorage) {
    this(opensimModelJNI.new_SimmInverseKinematicsTarget(SimmModel.getCPtr(aModel), Storage.getCPtr(aExperimentalDataStorage)), true);
  }

  public void setIndexToSolve(int aIndex, SWIGTYPE_p_double qGuess) {
    opensimModelJNI.SimmInverseKinematicsTarget_setIndexToSolve(swigCPtr, aIndex, SWIGTYPE_p_double.getCPtr(qGuess));
  }

  public void setPrescribedCoordinates(int aIndex) {
    opensimModelJNI.SimmInverseKinematicsTarget_setPrescribedCoordinates(swigCPtr, aIndex);
  }

  public void getComputedMarkerLocations(ArrayDouble aMarkerLocations) {
    opensimModelJNI.SimmInverseKinematicsTarget_getComputedMarkerLocations(swigCPtr, ArrayDouble.getCPtr(aMarkerLocations));
  }

  public void getExperimentalMarkerLocations(ArrayDouble aMarkerLocations) {
    opensimModelJNI.SimmInverseKinematicsTarget_getExperimentalMarkerLocations(swigCPtr, ArrayDouble.getCPtr(aMarkerLocations));
  }

  public void getPrescribedQValues(ArrayDouble aQValues) {
    opensimModelJNI.SimmInverseKinematicsTarget_getPrescribedQValues(swigCPtr, ArrayDouble.getCPtr(aQValues));
  }

  public void getUnconstrainedCoordinateNames(SWIGTYPE_p_OpenSim__ArrayTstd__string_const_p_t aNameArray) {
    opensimModelJNI.SimmInverseKinematicsTarget_getUnconstrainedCoordinateNames(swigCPtr, SWIGTYPE_p_OpenSim__ArrayTstd__string_const_p_t.getCPtr(aNameArray));
  }

  public void getPrescribedCoordinateNames(SWIGTYPE_p_OpenSim__ArrayTstd__string_const_p_t aNameArray) {
    opensimModelJNI.SimmInverseKinematicsTarget_getPrescribedCoordinateNames(swigCPtr, SWIGTYPE_p_OpenSim__ArrayTstd__string_const_p_t.getCPtr(aNameArray));
  }

  public void getOutputMarkerNames(SWIGTYPE_p_OpenSim__ArrayTstd__string_const_p_t aNameArray) {
    opensimModelJNI.SimmInverseKinematicsTarget_getOutputMarkerNames(swigCPtr, SWIGTYPE_p_OpenSim__ArrayTstd__string_const_p_t.getCPtr(aNameArray));
  }

  public SimmModel getModel() {
    return new SimmModel(opensimModelJNI.SimmInverseKinematicsTarget_getModel(swigCPtr), false);
  }

  public int compute(SWIGTYPE_p_double x, SWIGTYPE_p_double p, SWIGTYPE_p_double c) {
    return opensimModelJNI.SimmInverseKinematicsTarget_compute(swigCPtr, SWIGTYPE_p_double.getCPtr(x), SWIGTYPE_p_double.getCPtr(p), SWIGTYPE_p_double.getCPtr(c));
  }

  public int computeGradients(SWIGTYPE_p_double dx, SWIGTYPE_p_double x, SWIGTYPE_p_double dpdx, SWIGTYPE_p_double dcdx) {
    return opensimModelJNI.SimmInverseKinematicsTarget_computeGradients(swigCPtr, SWIGTYPE_p_double.getCPtr(dx), SWIGTYPE_p_double.getCPtr(x), SWIGTYPE_p_double.getCPtr(dpdx), SWIGTYPE_p_double.getCPtr(dcdx));
  }

  public int computePerformance(SWIGTYPE_p_double x, SWIGTYPE_p_double p) {
    return opensimModelJNI.SimmInverseKinematicsTarget_computePerformance(swigCPtr, SWIGTYPE_p_double.getCPtr(x), SWIGTYPE_p_double.getCPtr(p));
  }

  public int computePerformanceGradient(SWIGTYPE_p_double x, SWIGTYPE_p_double dpdx) {
    return opensimModelJNI.SimmInverseKinematicsTarget_computePerformanceGradient(swigCPtr, SWIGTYPE_p_double.getCPtr(x), SWIGTYPE_p_double.getCPtr(dpdx));
  }

  public int computeConstraint(SWIGTYPE_p_double x, int i, SWIGTYPE_p_double c) {
    return opensimModelJNI.SimmInverseKinematicsTarget_computeConstraint(swigCPtr, SWIGTYPE_p_double.getCPtr(x), i, SWIGTYPE_p_double.getCPtr(c));
  }

  public int computeConstraintGradient(SWIGTYPE_p_double x, int i, SWIGTYPE_p_double dcdx) {
    return opensimModelJNI.SimmInverseKinematicsTarget_computeConstraintGradient(swigCPtr, SWIGTYPE_p_double.getCPtr(x), i, SWIGTYPE_p_double.getCPtr(dcdx));
  }

}
