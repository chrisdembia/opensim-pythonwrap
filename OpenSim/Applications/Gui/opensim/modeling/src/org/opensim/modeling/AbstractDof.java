/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class AbstractDof extends OpenSimObject {
  private long swigCPtr;

  public AbstractDof(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.SWIGStorageUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(AbstractDof obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      opensimModelJNI.delete_AbstractDof(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public OpenSimObject copy() {
    long cPtr = opensimModelJNI.AbstractDof_copy__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new OpenSimObject(cPtr, false);
  }

  public void copyData(AbstractDof aDof) {
    opensimModelJNI.AbstractDof_copyData(swigCPtr, this, AbstractDof.getCPtr(aDof), aDof);
  }

  public void setup(AbstractDynamicsEngine aEngine, AbstractJoint aJoint) {
    opensimModelJNI.AbstractDof_setup(swigCPtr, this, AbstractDynamicsEngine.getCPtr(aEngine), aEngine, AbstractJoint.getCPtr(aJoint), aJoint);
  }

  public void setCoordinateName(String aName) {
    opensimModelJNI.AbstractDof_setCoordinateName(swigCPtr, this, aName);
  }

  public String getCoordinateName() {
    return opensimModelJNI.AbstractDof_getCoordinateName(swigCPtr, this);
  }

  public AbstractDof.DofType getMotionType() {
    return AbstractDof.DofType.swigToEnum(opensimModelJNI.AbstractDof_getMotionType(swigCPtr, this));
  }

  public void setAxis(SWIGTYPE_p_SimTK__Vec3 axis) {
    opensimModelJNI.AbstractDof_setAxis(swigCPtr, this, SWIGTYPE_p_SimTK__Vec3.getCPtr(axis));
  }

  public void getAxis(SWIGTYPE_p_SimTK__Vec3 axis) {
    opensimModelJNI.AbstractDof_getAxis__SWIG_0(swigCPtr, this, SWIGTYPE_p_SimTK__Vec3.getCPtr(axis));
  }

  public void getAxis(double[] rAxis) {
    opensimModelJNI.AbstractDof_getAxis__SWIG_1(swigCPtr, this, rAxis);
  }

  public SWIGTYPE_p_double getAxisPtr() {
    long cPtr = opensimModelJNI.AbstractDof_getAxisPtr(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public double getValue() {
    return opensimModelJNI.AbstractDof_getValue(swigCPtr, this);
  }

  public AbstractCoordinate getCoordinate() {
    long cPtr = opensimModelJNI.AbstractDof_getCoordinate(swigCPtr, this);
    return (cPtr == 0) ? null : new AbstractCoordinate(cPtr, false);
  }

  public Function getFunction() {
    long cPtr = opensimModelJNI.AbstractDof_getFunction(swigCPtr, this);
    return (cPtr == 0) ? null : new Function(cPtr, false);
  }

  public void setFunction(Function aFunction) {
    opensimModelJNI.AbstractDof_setFunction(swigCPtr, this, Function.getCPtr(aFunction), aFunction);
  }

  public AbstractJoint getJoint() {
    long cPtr = opensimModelJNI.AbstractDof_getJoint(swigCPtr, this);
    return (cPtr == 0) ? null : new AbstractJoint(cPtr, false);
  }

  public static boolean isKindOf(String type) {
    return opensimModelJNI.AbstractDof_isKindOf(type);
  }

  public boolean isA(String type) {
    return opensimModelJNI.AbstractDof_isA(swigCPtr, this, type);
  }

  public static AbstractDof safeDownCast(OpenSimObject obj) {
    long cPtr = opensimModelJNI.AbstractDof_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new AbstractDof(cPtr, false);
  }

  public void copy(OpenSimObject aObject) {
    opensimModelJNI.AbstractDof_copy__SWIG_1(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public final static class DofType {
    public final static DofType Translational = new DofType("Translational");
    public final static DofType Rotational = new DofType("Rotational");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static DofType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + DofType.class + " with value " + swigValue);
    }

    private DofType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private DofType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private DofType(String swigName, DofType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static DofType[] swigValues = { Translational, Rotational };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
