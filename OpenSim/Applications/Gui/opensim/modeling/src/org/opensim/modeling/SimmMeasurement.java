/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class SimmMeasurement extends OpenSimObject {
  private long swigCPtr;

  public SimmMeasurement(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.SWIGStorageUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(SimmMeasurement obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      opensimModelJNI.delete_SimmMeasurement(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public SimmMeasurement() {
    this(opensimModelJNI.new_SimmMeasurement__SWIG_0(), true);
  }

  public SimmMeasurement(SimmMeasurement aMeasurement) {
    this(opensimModelJNI.new_SimmMeasurement__SWIG_1(SimmMeasurement.getCPtr(aMeasurement), aMeasurement), true);
  }

  public OpenSimObject copy() {
    long cPtr = opensimModelJNI.SimmMeasurement_copy(swigCPtr, this);
    return (cPtr == 0) ? null : new OpenSimObject(cPtr, false);
  }

  public void copyData(SimmMeasurement aMeasurement) {
    opensimModelJNI.SimmMeasurement_copyData(swigCPtr, this, SimmMeasurement.getCPtr(aMeasurement), aMeasurement);
  }

  public int getNumMarkerPairs() {
    return opensimModelJNI.SimmMeasurement_getNumMarkerPairs(swigCPtr, this);
  }

  public SWIGTYPE_p_SimmMarkerPair getMarkerPair(int aIndex) {
    return new SWIGTYPE_p_SimmMarkerPair(opensimModelJNI.SimmMeasurement_getMarkerPair(swigCPtr, this, aIndex), false);
  }

  public boolean getApply() {
    return opensimModelJNI.SimmMeasurement_getApply(swigCPtr, this);
  }

  public void applyScaleFactor(double aFactor, ScaleSet aScaleSet) {
    opensimModelJNI.SimmMeasurement_applyScaleFactor(swigCPtr, this, aFactor, ScaleSet.getCPtr(aScaleSet), aScaleSet);
  }

  public static void registerTypes() {
    opensimModelJNI.SimmMeasurement_registerTypes();
  }

  public void peteTest() {
    opensimModelJNI.SimmMeasurement_peteTest(swigCPtr, this);
  }

}
