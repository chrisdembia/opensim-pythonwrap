/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class rdMath {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public rdMath(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(rdMath obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      opensimModelJNI.delete_rdMath(swigCPtr);
    }
    swigCPtr = 0;
  }

  public static double getPI() {
    return opensimModelJNI.rdMath_PI_get();
  }

  public static double getPI_2() {
    return opensimModelJNI.rdMath_PI_2_get();
  }

  public static double getRTD() {
    return opensimModelJNI.rdMath_RTD_get();
  }

  public static double getDTR() {
    return opensimModelJNI.rdMath_DTR_get();
  }

  public static double getSMALL() {
    return opensimModelJNI.rdMath_SMALL_get();
  }

  public static double getZERO() {
    return opensimModelJNI.rdMath_ZERO_get();
  }

  public static double getNAN() {
    return opensimModelJNI.rdMath_NAN_get();
  }

  public static double getINFINITY() {
    return opensimModelJNI.rdMath_INFINITY_get();
  }

  public static double getMINUS_INFINITY() {
    return opensimModelJNI.rdMath_MINUS_INFINITY_get();
  }

  public static double getPLUS_INFINITY() {
    return opensimModelJNI.rdMath_PLUS_INFINITY_get();
  }

  public static boolean isNAN(double val) {
    return opensimModelJNI.rdMath_isNAN(val);
  }

  public static double CopySign(double aMag, double aSign) {
    return opensimModelJNI.rdMath_CopySign(aMag, aSign);
  }

  public static boolean IsEqual(double aValue1, double aValue2, double aTol) {
    return opensimModelJNI.rdMath_IsEqual(aValue1, aValue2, aTol);
  }

  public static boolean IsZero(double aValue) {
    return opensimModelJNI.rdMath_IsZero(aValue);
  }

  public static double SigmaUp(double tau, double to, double t) {
    return opensimModelJNI.rdMath_SigmaUp(tau, to, t);
  }

  public static double SigmaDn(double tau, double to, double t) {
    return opensimModelJNI.rdMath_SigmaDn(tau, to, t);
  }

  public static double Step(double t, double t0, double t1) {
    return opensimModelJNI.rdMath_Step(t, t0, t1);
  }

  public static int FitParabola(double aX1, double aY1, double aX2, double aY2, double aX3, double aY3, SWIGTYPE_p_double rC0, SWIGTYPE_p_double rC1, SWIGTYPE_p_double rC2) {
    return opensimModelJNI.rdMath_FitParabola(aX1, aY1, aX2, aY2, aX3, aY3, SWIGTYPE_p_double.getCPtr(rC0), SWIGTYPE_p_double.getCPtr(rC1), SWIGTYPE_p_double.getCPtr(rC2));
  }

  public static double Interpolate(double aX1, double aY1, double aX2, double aY2, double aX) {
    return opensimModelJNI.rdMath_Interpolate(aX1, aY1, aX2, aY2, aX);
  }

  public static int ComputeIntersection(SWIGTYPE_p_OpenSim__Line aLine, SWIGTYPE_p_OpenSim__Plane aPlane, double[] rPoint) {
    return opensimModelJNI.rdMath_ComputeIntersection(SWIGTYPE_p_OpenSim__Line.getCPtr(aLine), SWIGTYPE_p_OpenSim__Plane.getCPtr(aPlane), rPoint);
  }

  public static void ComputeNormal(double aP1X, double aP1Y, double aP1Z, double aP2X, double aP2Y, double aP2Z, double aP3X, double aP3Y, double aP3Z, double[] rNormal) {
    opensimModelJNI.rdMath_ComputeNormal(aP1X, aP1Y, aP1Z, aP2X, aP2Y, aP2Z, aP3X, aP3Y, aP3Z, rNormal);
  }

  public static boolean IntersectLines(double[] p1, double[] p2, double[] p3, double[] p4, double[] pInt1, SWIGTYPE_p_double s, double[] pInt2, SWIGTYPE_p_double t) {
    return opensimModelJNI.rdMath_IntersectLines(p1, p2, p3, p4, pInt1, SWIGTYPE_p_double.getCPtr(s), pInt2, SWIGTYPE_p_double.getCPtr(t));
  }

  public static boolean IntersectLineSegPlane(double[] pt1, double[] pt2, double[] plane, double d, double[] inter) {
    return opensimModelJNI.rdMath_IntersectLineSegPlane(pt1, pt2, plane, d, inter);
  }

  public static void ConvertAxisAngleToQuaternion(double[] axis, double angle, double[] quat) {
    opensimModelJNI.rdMath_ConvertAxisAngleToQuaternion(axis, angle, quat);
  }

  public static void GetClosestPointOnLineToPoint(double[] pt, double[] linePt, double[] line, double[] closestPt, SWIGTYPE_p_double t) {
    opensimModelJNI.rdMath_GetClosestPointOnLineToPoint(pt, linePt, line, closestPt, SWIGTYPE_p_double.getCPtr(t));
  }

  public static void Make3x3DirCosMatrix(double angle, SWIGTYPE_p_a_3__double mat) {
    opensimModelJNI.rdMath_Make3x3DirCosMatrix(angle, SWIGTYPE_p_a_3__double.getCPtr(mat));
  }

  public static void ConvertAxisAngleTo4x4DirCosMatrix(double[] axis, double angle, SWIGTYPE_p_a_4__double mat) {
    opensimModelJNI.rdMath_ConvertAxisAngleTo4x4DirCosMatrix(axis, angle, SWIGTYPE_p_a_4__double.getCPtr(mat));
  }

  public static double CalcDistanceSquaredBetweenPoints(double[] point1, double[] point2) {
    return opensimModelJNI.rdMath_CalcDistanceSquaredBetweenPoints(point1, point2);
  }

  public static double CalcDistanceSquaredPointToLine(double[] point, double[] linePt, double[] line) {
    return opensimModelJNI.rdMath_CalcDistanceSquaredPointToLine(point, linePt, line);
  }

  public static void RotateMatrixAxisAngle(SWIGTYPE_p_a_4__double matrix, double[] axis, double angle) {
    opensimModelJNI.rdMath_RotateMatrixAxisAngle(SWIGTYPE_p_a_4__double.getCPtr(matrix), axis, angle);
  }

  public static void ConvertQuaternionToMatrix(double[] quat, SWIGTYPE_p_a_4__double matrix) {
    opensimModelJNI.rdMath_ConvertQuaternionToMatrix(quat, SWIGTYPE_p_a_4__double.getCPtr(matrix));
  }

  public static void RotateMatrixQuaternion(SWIGTYPE_p_a_4__double matrix, double[] quat) {
    opensimModelJNI.rdMath_RotateMatrixQuaternion(SWIGTYPE_p_a_4__double.getCPtr(matrix), quat);
  }

  public static void RotateMatrixXBodyFixed(SWIGTYPE_p_a_4__double matrix, double angle) {
    opensimModelJNI.rdMath_RotateMatrixXBodyFixed(SWIGTYPE_p_a_4__double.getCPtr(matrix), angle);
  }

  public static void RotateMatrixYBodyFixed(SWIGTYPE_p_a_4__double matrix, double angle) {
    opensimModelJNI.rdMath_RotateMatrixYBodyFixed(SWIGTYPE_p_a_4__double.getCPtr(matrix), angle);
  }

  public static void RotateMatrixZBodyFixed(SWIGTYPE_p_a_4__double matrix, double angle) {
    opensimModelJNI.rdMath_RotateMatrixZBodyFixed(SWIGTYPE_p_a_4__double.getCPtr(matrix), angle);
  }

  public rdMath() {
    this(opensimModelJNI.new_rdMath(), true);
  }

}
