/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class Actuator_ extends Force {
  private long swigCPtr;

  public Actuator_(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.SWIGStorageUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Actuator_ obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimModelJNI.delete_Actuator_(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public OpenSimObject copy() {
    long cPtr = opensimModelJNI.Actuator__copy(swigCPtr, this);
    return (cPtr == 0) ? null : new OpenSimObject(cPtr, false);
  }

  public void copyPropertyValues(Actuator_ aActuator) {
    opensimModelJNI.Actuator__copyPropertyValues(swigCPtr, this, Actuator_.getCPtr(aActuator), aActuator);
  }

  public int numControls() {
    return opensimModelJNI.Actuator__numControls(swigCPtr, this);
  }

  public SWIGTYPE_p_SimTK__Vector getDefaultControls() {
    return new SWIGTYPE_p_SimTK__Vector(opensimModelJNI.Actuator__getDefaultControls(swigCPtr, this), true);
  }

  public void getControls(SWIGTYPE_p_SimTK__Vector modelControls, SWIGTYPE_p_SimTK__Vector actuatorControls) {
    opensimModelJNI.Actuator__getControls(swigCPtr, this, SWIGTYPE_p_SimTK__Vector.getCPtr(modelControls), SWIGTYPE_p_SimTK__Vector.getCPtr(actuatorControls));
  }

  public void setControls(SWIGTYPE_p_SimTK__Vector actuatorControls, SWIGTYPE_p_SimTK__Vector modelControls) {
    opensimModelJNI.Actuator__setControls(swigCPtr, this, SWIGTYPE_p_SimTK__Vector.getCPtr(actuatorControls), SWIGTYPE_p_SimTK__Vector.getCPtr(modelControls));
  }

  public void addInControls(SWIGTYPE_p_SimTK__Vector actuatorControls, SWIGTYPE_p_SimTK__Vector modelControls) {
    opensimModelJNI.Actuator__addInControls(swigCPtr, this, SWIGTYPE_p_SimTK__Vector.getCPtr(actuatorControls), SWIGTYPE_p_SimTK__Vector.getCPtr(modelControls));
  }

  public double computeActuation(SWIGTYPE_p_SimTK__State s) {
    return opensimModelJNI.Actuator__computeActuation(swigCPtr, this, SWIGTYPE_p_SimTK__State.getCPtr(s));
  }

  public void computeEquilibrium(SWIGTYPE_p_SimTK__State s) {
    opensimModelJNI.Actuator__computeEquilibrium(swigCPtr, this, SWIGTYPE_p_SimTK__State.getCPtr(s));
  }

  public void preScale(SWIGTYPE_p_SimTK__State s, ScaleSet aScaleSet) {
    opensimModelJNI.Actuator__preScale(swigCPtr, this, SWIGTYPE_p_SimTK__State.getCPtr(s), ScaleSet.getCPtr(aScaleSet), aScaleSet);
  }

  public void scale(SWIGTYPE_p_SimTK__State s, ScaleSet aScaleSet) {
    opensimModelJNI.Actuator__scale(swigCPtr, this, SWIGTYPE_p_SimTK__State.getCPtr(s), ScaleSet.getCPtr(aScaleSet), aScaleSet);
  }

  public void postScale(SWIGTYPE_p_SimTK__State s, ScaleSet aScaleSet) {
    opensimModelJNI.Actuator__postScale(swigCPtr, this, SWIGTYPE_p_SimTK__State.getCPtr(s), ScaleSet.getCPtr(aScaleSet), aScaleSet);
  }

  public void updateDisplayer(SWIGTYPE_p_SimTK__State s) {
    opensimModelJNI.Actuator__updateDisplayer(swigCPtr, this, SWIGTYPE_p_SimTK__State.getCPtr(s));
  }

  public void replacePropertyFunction(Function aOldFunction, Function aNewFunction) {
    opensimModelJNI.Actuator__replacePropertyFunction(swigCPtr, this, Function.getCPtr(aOldFunction), aOldFunction, Function.getCPtr(aNewFunction), aNewFunction);
  }

}
