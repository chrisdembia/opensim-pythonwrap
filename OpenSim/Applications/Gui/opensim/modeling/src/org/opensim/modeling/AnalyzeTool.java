/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class AnalyzeTool extends AbstractTool {
  private long swigCPtr;

  public AnalyzeTool(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.SWIGStorageUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(AnalyzeTool obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      opensimModelJNI.delete_AnalyzeTool(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public AnalyzeTool() {
    this(opensimModelJNI.new_AnalyzeTool__SWIG_0(), true);
  }

  public AnalyzeTool(String aFileName) {
    this(opensimModelJNI.new_AnalyzeTool__SWIG_1(aFileName), true);
  }

  public AnalyzeTool(AnalyzeTool aObject) {
    this(opensimModelJNI.new_AnalyzeTool__SWIG_2(AnalyzeTool.getCPtr(aObject), aObject), true);
  }

  public AnalyzeTool(Model aModel) {
    this(opensimModelJNI.new_AnalyzeTool__SWIG_3(Model.getCPtr(aModel), aModel), true);
  }

  public OpenSimObject copy() {
    long cPtr = opensimModelJNI.AnalyzeTool_copy(swigCPtr, this);
    return (cPtr == 0) ? null : new OpenSimObject(cPtr, false);
  }

  public void setControlSet(ControlSet aSet) {
    opensimModelJNI.AnalyzeTool_setControlSet(swigCPtr, this, ControlSet.getCPtr(aSet), aSet);
  }

  public ControlSet getControlSet() {
    long cPtr = opensimModelJNI.AnalyzeTool_getControlSet(swigCPtr, this);
    return (cPtr == 0) ? null : new ControlSet(cPtr, false);
  }

  public void setStatesStorage(Storage aStore) {
    opensimModelJNI.AnalyzeTool_setStatesStorage(swigCPtr, this, Storage.getCPtr(aStore), aStore);
  }

  public void setStatesStorageFromCoordinatesAndSpeeds(Storage aQStore, Storage aUStore) {
    opensimModelJNI.AnalyzeTool_setStatesStorageFromCoordinatesAndSpeeds(swigCPtr, this, Storage.getCPtr(aQStore), aQStore, Storage.getCPtr(aUStore), aUStore);
  }

  public Storage getStatesStorage() {
    long cPtr = opensimModelJNI.AnalyzeTool_getStatesStorage(swigCPtr, this);
    return (cPtr == 0) ? null : new Storage(cPtr, false);
  }

  public void setPseudoStatesStorage(Storage aStore) {
    opensimModelJNI.AnalyzeTool_setPseudoStatesStorage(swigCPtr, this, Storage.getCPtr(aStore), aStore);
  }

  public Storage getPseudoStatesStorage() {
    long cPtr = opensimModelJNI.AnalyzeTool_getPseudoStatesStorage(swigCPtr, this);
    return (cPtr == 0) ? null : new Storage(cPtr, false);
  }

  public void loadControlsStatesPseudoStatesExternalLoadsFromFiles() {
    opensimModelJNI.AnalyzeTool_loadControlsStatesPseudoStatesExternalLoadsFromFiles(swigCPtr, this);
  }

  public void verifyControlsStatesPseudoStates() {
    opensimModelJNI.AnalyzeTool_verifyControlsStatesPseudoStates(swigCPtr, this);
  }

  public double getControlsStatesPseudoStates(int aIndex, ArrayDouble rX, ArrayDouble rY, ArrayDouble rP) {
    return opensimModelJNI.AnalyzeTool_getControlsStatesPseudoStates(swigCPtr, this, aIndex, ArrayDouble.getCPtr(rX), rX, ArrayDouble.getCPtr(rY), rY, ArrayDouble.getCPtr(rP), rP);
  }

  public void setPrintResultFiles(boolean aToWrite) {
    opensimModelJNI.AnalyzeTool_setPrintResultFiles(swigCPtr, this, aToWrite);
  }

  public void run() {
    opensimModelJNI.AnalyzeTool_run(swigCPtr, this);
  }

}
