/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class AnalyticGeometry extends Geometry {
  private long swigCPtr;

  protected AnalyticGeometry(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.SWIGAnalyticGeometryUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AnalyticGeometry obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      opensimModelJNI.delete_AnalyticGeometry(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public AnalyticGeometry() {
    this(opensimModelJNI.new_AnalyticGeometry(), true);
  }

  public boolean isAnalytic() {
    return opensimModelJNI.AnalyticGeometry_isAnalytic(swigCPtr);
  }

  public AnalyticGeometry.AnalyticGeometryType getShape() {
    return AnalyticGeometry.AnalyticGeometryType.swigToEnum(opensimModelJNI.AnalyticGeometry_getShape(swigCPtr));
  }

  public void getSphereRadius(SWIGTYPE_p_double radius) {
    opensimModelJNI.AnalyticGeometry_getSphereRadius(swigCPtr, SWIGTYPE_p_double.getCPtr(radius));
  }

  public void setSphereRadius(SWIGTYPE_p_double radius) {
    opensimModelJNI.AnalyticGeometry_setSphereRadius(swigCPtr, SWIGTYPE_p_double.getCPtr(radius));
  }

  public void getCylinderParams(SWIGTYPE_p_double radius, SWIGTYPE_p_double height) {
    opensimModelJNI.AnalyticGeometry_getCylinderParams(swigCPtr, SWIGTYPE_p_double.getCPtr(radius), SWIGTYPE_p_double.getCPtr(height));
  }

  public void getConeParams(SWIGTYPE_p_double baseRadius, SWIGTYPE_p_double topRadius, SWIGTYPE_p_double height) {
    opensimModelJNI.AnalyticGeometry_getConeParams(swigCPtr, SWIGTYPE_p_double.getCPtr(baseRadius), SWIGTYPE_p_double.getCPtr(topRadius), SWIGTYPE_p_double.getCPtr(height));
  }

  public void getEllipsoidParams(SWIGTYPE_p_double radiusX, SWIGTYPE_p_double radiusY, SWIGTYPE_p_double radiusZ) {
    opensimModelJNI.AnalyticGeometry_getEllipsoidParams(swigCPtr, SWIGTYPE_p_double.getCPtr(radiusX), SWIGTYPE_p_double.getCPtr(radiusY), SWIGTYPE_p_double.getCPtr(radiusZ));
  }

  public static AnalyticGeometry createSphere(double radius) {
    long cPtr = opensimModelJNI.AnalyticGeometry_createSphere(radius);
    return (cPtr == 0) ? null : new AnalyticGeometry(cPtr, false);
  }

  public static AnalyticGeometry dynamic_cast(Geometry geometry) {
    long cPtr = opensimModelJNI.AnalyticGeometry_dynamic_cast(Geometry.getCPtr(geometry));
    return (cPtr == 0) ? null : new AnalyticGeometry(cPtr, false);
  }

  public final static class AnalyticGeometryType {
    public final static AnalyticGeometryType None = new AnalyticGeometryType("None");
    public final static AnalyticGeometryType Sphere = new AnalyticGeometryType("Sphere");
    public final static AnalyticGeometryType Cylinder = new AnalyticGeometryType("Cylinder");
    public final static AnalyticGeometryType Cone = new AnalyticGeometryType("Cone");
    public final static AnalyticGeometryType Ellipsoid = new AnalyticGeometryType("Ellipsoid");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AnalyticGeometryType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AnalyticGeometryType.class + " with value " + swigValue);
    }

    private AnalyticGeometryType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AnalyticGeometryType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AnalyticGeometryType(String swigName, AnalyticGeometryType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AnalyticGeometryType[] swigValues = { None, Sphere, Cylinder, Cone, Ellipsoid };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
