/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class InverseKinematicsSolver extends AssemblySolver {
  private long swigCPtr;

  public InverseKinematicsSolver(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.InverseKinematicsSolver_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(InverseKinematicsSolver obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimModelJNI.delete_InverseKinematicsSolver(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public InverseKinematicsSolver(Model model, SWIGTYPE_p_OpenSim__MarkersReference markersReference, SWIGTYPE_p_SimTK__Array_T_OpenSim__CoordinateReference_t coordinateReferences, double constraintWeight) {
    this(opensimModelJNI.new_InverseKinematicsSolver__SWIG_0(Model.getCPtr(model), model, SWIGTYPE_p_OpenSim__MarkersReference.getCPtr(markersReference), SWIGTYPE_p_SimTK__Array_T_OpenSim__CoordinateReference_t.getCPtr(coordinateReferences), constraintWeight), true);
  }

  public InverseKinematicsSolver(Model model, SWIGTYPE_p_OpenSim__MarkersReference markersReference, SWIGTYPE_p_SimTK__Array_T_OpenSim__CoordinateReference_t coordinateReferences) {
    this(opensimModelJNI.new_InverseKinematicsSolver__SWIG_1(Model.getCPtr(model), model, SWIGTYPE_p_OpenSim__MarkersReference.getCPtr(markersReference), SWIGTYPE_p_SimTK__Array_T_OpenSim__CoordinateReference_t.getCPtr(coordinateReferences)), true);
  }

  public void updateMarkerWeight(String markerName, double value) {
    opensimModelJNI.InverseKinematicsSolver_updateMarkerWeight__SWIG_0(swigCPtr, this, markerName, value);
  }

  public void updateMarkerWeight(int markerIndex, double value) {
    opensimModelJNI.InverseKinematicsSolver_updateMarkerWeight__SWIG_1(swigCPtr, this, markerIndex, value);
  }

  public void updateMarkerWeights(SWIGTYPE_p_SimTK__Array_T_double_t weights) {
    opensimModelJNI.InverseKinematicsSolver_updateMarkerWeights(swigCPtr, this, SWIGTYPE_p_SimTK__Array_T_double_t.getCPtr(weights));
  }

  public SWIGTYPE_p_SimTK__Vec3 computeCurrentMarkerLocation(String markerName) {
    return new SWIGTYPE_p_SimTK__Vec3(opensimModelJNI.InverseKinematicsSolver_computeCurrentMarkerLocation__SWIG_0(swigCPtr, this, markerName), true);
  }

  public SWIGTYPE_p_SimTK__Vec3 computeCurrentMarkerLocation(int markerIndex) {
    return new SWIGTYPE_p_SimTK__Vec3(opensimModelJNI.InverseKinematicsSolver_computeCurrentMarkerLocation__SWIG_1(swigCPtr, this, markerIndex), true);
  }

  public void computeCurrentMarkerLocations(SWIGTYPE_p_SimTK__Array_T_SimTK__Vec3_t markerLocations) {
    opensimModelJNI.InverseKinematicsSolver_computeCurrentMarkerLocations(swigCPtr, this, SWIGTYPE_p_SimTK__Array_T_SimTK__Vec3_t.getCPtr(markerLocations));
  }

  public double computeCurrentMarkerError(String markerName) {
    return opensimModelJNI.InverseKinematicsSolver_computeCurrentMarkerError__SWIG_0(swigCPtr, this, markerName);
  }

  public double computeCurrentMarkerError(int markerIndex) {
    return opensimModelJNI.InverseKinematicsSolver_computeCurrentMarkerError__SWIG_1(swigCPtr, this, markerIndex);
  }

  public void computeCurrentMarkerErrors(SWIGTYPE_p_SimTK__Array_T_double_t markerErrors) {
    opensimModelJNI.InverseKinematicsSolver_computeCurrentMarkerErrors(swigCPtr, this, SWIGTYPE_p_SimTK__Array_T_double_t.getCPtr(markerErrors));
  }

  public double computeCurrentSquaredMarkerError(String markerName) {
    return opensimModelJNI.InverseKinematicsSolver_computeCurrentSquaredMarkerError__SWIG_0(swigCPtr, this, markerName);
  }

  public double computeCurrentSquaredMarkerError(int markerIndex) {
    return opensimModelJNI.InverseKinematicsSolver_computeCurrentSquaredMarkerError__SWIG_1(swigCPtr, this, markerIndex);
  }

  public void computeCurrentSquaredMarkerErrors(SWIGTYPE_p_SimTK__Array_T_double_t markerErrors) {
    opensimModelJNI.InverseKinematicsSolver_computeCurrentSquaredMarkerErrors(swigCPtr, this, SWIGTYPE_p_SimTK__Array_T_double_t.getCPtr(markerErrors));
  }

}
