/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIG_DIRECTORS

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0) {
        director_->swig_jvm_->AttachCurrentThread((void **) &jenv_, NULL);
      }
      ~JNIEnvWrapper() {
        //director_->swig_jvm_->DetachCurrentThread();
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  static jclass jclass_opensimModelJNI = NULL;
  static jmethodID director_methids[19];
}

#include <xercesc/util/XercesVersion.hpp>
#include <xercesc/util/XercesDefs.hpp>
#include <OpenSim/Common/osimCommonDLL.h>
#include <OpenSim/Simulation/osimSimulationDLL.h>
#include <OpenSim/Common/Exception.h>
#include <OpenSim/Common/Array.h>
#include <OpenSim/Common/ArrayPtrs.h>
#include <OpenSim/Common/Property.h>
#include <OpenSim/Common/PropertyGroup.h>
#include <OpenSim/Common/PropertySet.h>
#include <OpenSim/Common/Object.h>
#include <OpenSim/Common/ObjectGroup.h>
#include <OpenSim/Common/Material.h>
#include <OpenSim/Common/VisibleProperties.h>
#include <OpenSim/Common/Transform.h>
#include <OpenSim/Common/Geometry.h>
#include <OpenSim/Common/VisibleObject.h>
#include <OpenSim/Common/Set.h>
#include <OpenSim/Common/MaterialSet.h>
#include <OpenSim/Common/StateVector.h>
#include <OpenSim/Common/Storage.h>
#include <OpenSim/Common/Range.h>
#include <OpenSim/Common/Scale.h>
#include <OpenSim/Common/ScaleSet.h>

#include <OpenSim/Simulation/Model/AbstractActuator.h>
#include <OpenSim/Simulation/Model/ActuatorSet.h>
#include <OpenSim/Simulation/Model/ContactForceSet.h>
#include <OpenSim/Simulation/Model/Model.h>
#include <OpenSim/Simulation/Control/Control.h>
#include <OpenSim/Simulation/Control/ControlSet.h>
#include <OpenSim/Simulation/Control/ControlConstant.h>
#include <OpenSim/Simulation/Control/ControlLinear.h>
#include <OpenSim/Simulation/Control/Controller.h>
#include <OpenSim/Simulation/Integrator/Integrand.h>
#include <OpenSim/Simulation/Integrator/RKF.h>
#include <OpenSim/Simulation/Integrator/IntegRKF.h>
#include <OpenSim/Simulation/Model/ModelIntegrand.h>
#include <OpenSim/Simulation/Manager/Manager.h>
#include <OpenSim/Simulation/Model/Callback.h>
#include <OpenSim/Simulation/Model/CallbackSet.h>
#include <OpenSim/Simulation/Model/IntegCallback.h>
#include <OpenSim/Simulation/Model/Analysis.h>
#include <OpenSim/Simulation/Model/AnalysisSet.h>
#include <OpenSim/Simulation/Model/AbstractTool.h>
#include <OpenSim/Simulation/Model/AbstractMarker.h>
#include <OpenSim/Simulation/Model/MarkerSet.h>
#include <OpenSim/Simulation/Model/AbstractDynamicsEngine.h>

#include <OpenSim/Java/OpenSimJNI/Hooks/SimtkAnimationCallback.h>

#include <OpenSim/Tools/osimToolsDLL.h>
#include <OpenSim/Tools/ForwardTool.h>
#include <OpenSim/Tools/PerturbationTool.h>

#include <OpenSim/Analyses/osimAnalysesDLL.h>
#include <OpenSim/Analyses/Actuation.h>
#include <OpenSim/Analyses/IndAcc.h>
#include <OpenSim/Analyses/Kinematics.h>
#include <OpenSim/Analyses/GeneralizedForces.h>
#include <OpenSim/Analyses/MuscleAnalysis.h>
#include <OpenSim/Analyses/MomentArmAnalysis.h>

#include <OpenSim/Simulation/Wrap/AbstractWrapObject.h>
#include <OpenSim/Simulation/Wrap/MuscleWrapPoint.h>
#include <OpenSim/Simulation/Wrap/WrapSphere.h>
#include <OpenSim/Simulation/Wrap/WrapCylinder.h>
#include <OpenSim/Simulation/Wrap/WrapTorus.h>
#include <OpenSim/Simulation/Wrap/WrapEllipsoid.h>
#include <OpenSim/Simulation/Wrap/WrapObjectSet.h>
#include <OpenSim/Simulation/Wrap/MuscleWrap.h>
#include <OpenSim/Simulation/Wrap/MuscleWrapSet.h>

#include <OpenSim/Simulation/Model/AbstractBody.h>
#include <OpenSim/DynamicsEngines/SimmKinematicsEngine/osimSimmKinematicsEngineDLL.h>
#include <OpenSim/DynamicsEngines/SimmKinematicsEngine/SimmBody.h>
#include <OpenSim/Simulation/Model/BodySet.h>

#include <OpenSim/Common/Function.h>
#include <OpenSim/Common/Constant.h>
#include <OpenSim/Simulation/Model/AbstractCoordinate.h>
#include <OpenSim/DynamicsEngines/SimmKinematicsEngine/SimmCoordinate.h>
#include <OpenSim/Simulation/Model/CoordinateSet.h>

#include <OpenSim/Simulation/Model/AbstractDof.h>

#include <OpenSim/Simulation/Model/AbstractJoint.h>
#include <OpenSim/DynamicsEngines/SimmKinematicsEngine/SimmJoint.h>
#include <OpenSim/Simulation/Model/JointSet.h>

#include <OpenSim/DynamicsEngines/SimmKinematicsEngine/SimmKinematicsEngine.h>
#include <OpenSim/Simulation/Model/AbstractMarker.h>
#include <OpenSim/Simulation/Model/Marker.h>

#include <OpenSim/Simulation/Model/MusclePoint.h>
#include <OpenSim/Simulation/Model/MusclePointSet.h>
#include <OpenSim/Simulation/Model/MuscleViaPoint.h>
#include <OpenSim/Common/SimmPoint.h>
#include <OpenSim/DynamicsEngines/SimmKinematicsEngine/SimmRotationDof.h>
#include <OpenSim/DynamicsEngines/SimmKinematicsEngine/SimmTranslationDof.h>
#include <OpenSim/Common/Units.h>

#include <OpenSim/Actuators/osimActuatorsDLL.h>
#include <OpenSim/Simulation/Model/AbstractMuscle.h>
#include <OpenSim/Simulation/Model/Force.h>
#include <OpenSim/Actuators/Torque.h>
#include <OpenSim/Actuators/GeneralizedForce.h>
#include <OpenSim/Actuators/SimmDarrylMuscle.h>
#include <OpenSim/Actuators/SimmZajacHill.h>

#include <OpenSim/Tools/GenericModelMaker.h>
#include <OpenSim/Tools/ModelScaler.h>
#include <OpenSim/Tools/MarkerPlacer.h>
#include <OpenSim/Tools/IKTrial.h>
#include <OpenSim/Tools/IKTrialSet.h>

#include <OpenSim/DynamicsEngines/SimmKinematicsEngine/SimmFileWriter.h>
#include <OpenSim/Tools/IKTask.h>
#include <OpenSim/Tools/IKTaskSet.h>
#include <OpenSim/Common/MarkerData.h>

#include <OpenSim/Tools/IKSolverInterface.h>
#include <OpenSim/Tools/Measurement.h>
#include <OpenSim/Tools/MeasurementSet.h>

#include <OpenSim/Tools/IKTool.h>
#include <OpenSim/Tools/IKSolverImpl.h>

#include <OpenSim/Tools/CMCTool.h>
#include <OpenSim/Tools/ScaleTool.h>
#include <OpenSim/Tools/AnalyzeTool.h>

using namespace OpenSim;


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include <string>

SWIGINTERN OpenSim::LineGeometry *OpenSim_LineGeometry_dynamic_cast(OpenSim::Geometry *geometry){
        return dynamic_cast<LineGeometry *>(geometry);
    }
SWIGINTERN OpenSim::AnalyticGeometry *OpenSim_AnalyticGeometry_dynamic_cast(OpenSim::Geometry *geometry){
        return dynamic_cast<AnalyticGeometry *>(geometry);
    }
SWIGINTERN OpenSim::AnalyticSphere *OpenSim_AnalyticSphere_dynamic_cast(OpenSim::Geometry *geometry){
        return dynamic_cast<AnalyticSphere *>(geometry);
    }
SWIGINTERN OpenSim::AnalyticEllipsoid *OpenSim_AnalyticEllipsoid_dynamic_cast(OpenSim::Geometry *geometry){
        return dynamic_cast<AnalyticEllipsoid *>(geometry);
    }
SWIGINTERN OpenSim::AnalyticCylinder *OpenSim_AnalyticCylinder_dynamic_cast(OpenSim::Geometry *geometry){
        return dynamic_cast<AnalyticCylinder *>(geometry);
    }
SWIGINTERN OpenSim::AnalyticTorus *OpenSim_AnalyticTorus_dynamic_cast(OpenSim::Geometry *geometry){
        return dynamic_cast<AnalyticTorus *>(geometry);
    }
SWIGINTERN bool OpenSim_Array_Sl_bool_Sg__getitem(OpenSim::Array<bool > *self,int index){
      return self->get(index);
    }
SWIGINTERN void OpenSim_Array_Sl_bool_Sg__setitem(OpenSim::Array<bool > *self,int index,bool val){
      self->set(index,val);
    }
SWIGINTERN double OpenSim_Array_Sl_double_Sg__getitem(OpenSim::Array<double > *self,int index){
      return self->get(index);
    }
SWIGINTERN void OpenSim_Array_Sl_double_Sg__setitem(OpenSim::Array<double > *self,int index,double val){
      self->set(index,val);
    }
SWIGINTERN int OpenSim_Array_Sl_int_Sg__getitem(OpenSim::Array<int > *self,int index){
      return self->get(index);
    }
SWIGINTERN void OpenSim_Array_Sl_int_Sg__setitem(OpenSim::Array<int > *self,int index,int val){
      self->set(index,val);
    }
SWIGINTERN std::string OpenSim_Array_Sl_std_string_Sg__getitem(OpenSim::Array<std::string > *self,int index){
      return self->get(index);
    }
SWIGINTERN void OpenSim_Array_Sl_std_string_Sg__setitem(OpenSim::Array<std::string > *self,int index,std::string val){
      self->set(index,val);
    }
SWIGINTERN OpenSim::MusclePoint *OpenSim_Array_Sl_OpenSim_MusclePoint_Sm__Sg__getitem(OpenSim::Array<OpenSim::MusclePoint * > *self,int index){
      return self->get(index);
    }
SWIGINTERN void OpenSim_Array_Sl_OpenSim_MusclePoint_Sm__Sg__setitem(OpenSim::Array<OpenSim::MusclePoint * > *self,int index,OpenSim::MusclePoint *val){
      self->set(index,val);
    }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "OpenSimJNI_wrap.h"

SwigDirector_SimtkAnimationCallback::SwigDirector_SimtkAnimationCallback(JNIEnv *jenv, OpenSim::Model *aModel) : OpenSim::SimtkAnimationCallback(aModel), Swig::Director(jenv) {
}

SwigDirector_SimtkAnimationCallback::~SwigDirector_SimtkAnimationCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


OpenSim::Object *SwigDirector_SimtkAnimationCallback::copy() const {
  OpenSim::Object *c_result = 0 ;
  jlong jresult  = 0 ;
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return OpenSim::IntegCallback::copy();
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[0], jobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(OpenSim::Object **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
  return c_result;
}

OpenSim::Object *SwigDirector_SimtkAnimationCallback::copy(DOMElement *aNode) const {
  OpenSim::Object *c_result = 0 ;
  jlong jresult  = 0 ;
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  jlong jaNode = 0 ;
  
  if (!swig_override[1]) {
    return OpenSim::Object::copy(aNode);
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    *((DOMElement **)&jaNode) = (DOMElement *) aNode; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[1], jobj, jaNode);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(OpenSim::Object **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
  return c_result;
}

void SwigDirector_SimtkAnimationCallback::copy(OpenSim::Object const &aObject) {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  jlong jaObject = 0 ;
  
  if (!swig_override[2]) {
    OpenSim::Object::copy(aObject);
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    *(OpenSim::Object **)&jaObject = (OpenSim::Object *) &aObject; 
    jenv->CallStaticVoidMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[2], jobj, jaObject);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

OpenSim::VisibleObject *SwigDirector_SimtkAnimationCallback::getDisplayer() const {
  OpenSim::VisibleObject *c_result = 0 ;
  jlong jresult  = 0 ;
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return OpenSim::Object::getDisplayer();
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[3], jobj);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = *(OpenSim::VisibleObject **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
  return c_result;
}

bool SwigDirector_SimtkAnimationCallback::isValidDefaultType(OpenSim::Object const *aObject) const {
  bool c_result ;
  jboolean jresult  = 0 ;
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  jlong jaObject = 0 ;
  
  if (!swig_override[4]) {
    return OpenSim::Object::isValidDefaultType(aObject);
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    *((OpenSim::Object **)&jaObject) = (OpenSim::Object *) aObject; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[4], jobj, jaObject);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
  return c_result;
}

void SwigDirector_SimtkAnimationCallback::updateFromXMLNode() {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    OpenSim::Object::updateFromXMLNode();
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[5], jobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

void SwigDirector_SimtkAnimationCallback::updateDefaultObjectsFromXMLNode() {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    OpenSim::Object::updateDefaultObjectsFromXMLNode();
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[6], jobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

void SwigDirector_SimtkAnimationCallback::updateXMLNode(DOMElement *aParent) {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  jlong jaParent = 0 ;
  
  if (!swig_override[7]) {
    OpenSim::Object::updateXMLNode(aParent);
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    *((DOMElement **)&jaParent) = (DOMElement *) aParent; 
    jenv->CallStaticVoidMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[7], jobj, jaParent);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

void SwigDirector_SimtkAnimationCallback::updateDefaultObjectsXMLNode(DOMElement *aParent) {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  jlong jaParent = 0 ;
  
  if (!swig_override[8]) {
    OpenSim::Object::updateDefaultObjectsXMLNode(aParent);
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    *((DOMElement **)&jaParent) = (DOMElement *) aParent; 
    jenv->CallStaticVoidMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[8], jobj, jaParent);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

void SwigDirector_SimtkAnimationCallback::generateXMLNode(DOMElement *aParent) {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  jlong jaParent = 0 ;
  
  if (!swig_override[9]) {
    OpenSim::Object::generateXMLNode(aParent);
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    *((DOMElement **)&jaParent) = (DOMElement *) aParent; 
    jenv->CallStaticVoidMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[9], jobj, jaParent);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

void SwigDirector_SimtkAnimationCallback::update(OpenSim::Object const &aObject, Event &aEvent) {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  jlong jaObject = 0 ;
  jlong jaEvent = 0 ;
  
  if (!swig_override[10]) {
    OpenSim::Object::update(aObject,aEvent);
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    *(OpenSim::Object **)&jaObject = (OpenSim::Object *) &aObject; 
    *(Event **)&jaEvent = (Event *) &aEvent; 
    jenv->CallStaticVoidMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[10], jobj, jaObject, jaEvent);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

bool SwigDirector_SimtkAnimationCallback::isA(char const *type) const {
  bool c_result ;
  jboolean jresult  = 0 ;
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  jstring jtype = 0 ;
  
  if (!swig_override[11]) {
    return OpenSim::Object::isA(type);
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jtype = 0;
    if (type) {
      jtype = jenv->NewStringUTF((const char *)type);
      if (!jtype) return c_result;
    }
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[11], jobj, jtype);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
  return c_result;
}

void SwigDirector_SimtkAnimationCallback::setModel(OpenSim::Model *arg0) {
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  
  if (!swig_override[12]) {
    OpenSim::Callback::setModel(arg0);
    return;
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    *((OpenSim::Model **)&jarg0) = (OpenSim::Model *) arg0; 
    jenv->CallStaticVoidMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[12], jobj, jarg0);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
}

int SwigDirector_SimtkAnimationCallback::begin(int aStep, double aDT, double aT, double *aX, double *aY, void *aClientData) {
  int c_result ;
  jint jresult  = 0 ;
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  jint jaStep  ;
  jdouble jaDT  ;
  jdouble jaT  ;
  jlong jaX = 0 ;
  jlong jaY = 0 ;
  jlong jaClientData = 0 ;
  
  if (!swig_override[13]) {
    return OpenSim::SimtkAnimationCallback::begin(aStep,aDT,aT,aX,aY,aClientData);
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jaStep = (jint) aStep;
    jaDT = (jdouble) aDT;
    jaT = (jdouble) aT;
    *((double **)&jaX) = (double *) aX; 
    *((double **)&jaY) = (double *) aY; 
    *((void **)&jaClientData) = (void *) aClientData; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[13], jobj, jaStep, jaDT, jaT, jaX, jaY, jaClientData);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
  return c_result;
}

int SwigDirector_SimtkAnimationCallback::step(double *aXPrev, double *aYPrev, int aStep, double aDT, double aT, double *aX, double *aY, void *aClientData) {
  int c_result ;
  jint jresult  = 0 ;
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  jlong jaXPrev = 0 ;
  jlong jaYPrev = 0 ;
  jint jaStep  ;
  jdouble jaDT  ;
  jdouble jaT  ;
  jlong jaX = 0 ;
  jlong jaY = 0 ;
  jlong jaClientData = 0 ;
  
  if (!swig_override[15]) {
    return OpenSim::SimtkAnimationCallback::step(aXPrev,aYPrev,aStep,aDT,aT,aX,aY,aClientData);
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    *((double **)&jaXPrev) = (double *) aXPrev; 
    *((double **)&jaYPrev) = (double *) aYPrev; 
    jaStep = (jint) aStep;
    jaDT = (jdouble) aDT;
    jaT = (jdouble) aT;
    *((double **)&jaX) = (double *) aX; 
    *((double **)&jaY) = (double *) aY; 
    *((void **)&jaClientData) = (void *) aClientData; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[15], jobj, jaXPrev, jaYPrev, jaStep, jaDT, jaT, jaX, jaY, jaClientData);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
  return c_result;
}

int SwigDirector_SimtkAnimationCallback::end(int aStep, double aDT, double aT, double *aX, double *aY, void *aClientData) {
  int c_result ;
  jint jresult  = 0 ;
  JNIEnvWrapper jnienv(this) ;
  JNIEnv * jenv = jnienv.getJNIEnv() ;
  jobject  jobj = (jobject) NULL ;
  jint jaStep  ;
  jdouble jaDT  ;
  jdouble jaT  ;
  jlong jaX = 0 ;
  jlong jaY = 0 ;
  jlong jaClientData = 0 ;
  
  if (!swig_override[17]) {
    return OpenSim::IntegCallback::end(aStep,aDT,aT,aX,aY,aClientData);
  }
  jobj = swig_get_self(jenv);
  if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
    jaStep = (jint) aStep;
    jaDT = (jdouble) aDT;
    jaT = (jdouble) aT;
    *((double **)&jaX) = (double *) aX; 
    *((double **)&jaY) = (double *) aY; 
    *((void **)&jaClientData) = (void *) aClientData; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_opensimModelJNI, Swig::director_methids[17], jobj, jaStep, jaDT, jaT, jaX, jaY, jaClientData);
    if (jenv->ExceptionOccurred()) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (jobj) jenv->DeleteLocalRef(jobj);
  return c_result;
}

void SwigDirector_SimtkAnimationCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "copy", "()Lorg/opensim/modeling/OpenSimObject;", NULL 
    },
    {
      "copy", "(Lorg/opensim/modeling/SWIGTYPE_p_DOMElement;)Lorg/opensim/modeling/OpenSimObject;", NULL 
    },
    {
      "copy", "(Lorg/opensim/modeling/OpenSimObject;)V", NULL 
    },
    {
      "getDisplayer", "()Lorg/opensim/modeling/VisibleObject;", NULL 
    },
    {
      "isValidDefaultType", "(Lorg/opensim/modeling/OpenSimObject;)Z", NULL 
    },
    {
      "updateFromXMLNode", "()V", NULL 
    },
    {
      "updateDefaultObjectsFromXMLNode", "()V", NULL 
    },
    {
      "updateXMLNode", "(Lorg/opensim/modeling/SWIGTYPE_p_DOMElement;)V", NULL 
    },
    {
      "updateDefaultObjectsXMLNode", "(Lorg/opensim/modeling/SWIGTYPE_p_DOMElement;)V", NULL 
    },
    {
      "generateXMLNode", "(Lorg/opensim/modeling/SWIGTYPE_p_DOMElement;)V", NULL 
    },
    {
      "update", "(Lorg/opensim/modeling/OpenSimObject;Lorg/opensim/modeling/SWIGTYPE_p_Event;)V", NULL 
    },
    {
      "isA", "(Ljava/lang/String;)Z", NULL 
    },
    {
      "setModel", "(Lorg/opensim/modeling/Model;)V", NULL 
    },
    {
      "begin", "(IDDLorg/opensim/modeling/SWIGTYPE_p_double;Lorg/opensim/modeling/SWIGTYPE_p_double;Lorg/opensim/modeling/SWIGTYPE_p_void;)I", NULL 
    },
    {
      "begin", "(IDDLorg/opensim/modeling/SWIGTYPE_p_double;Lorg/opensim/modeling/SWIGTYPE_p_double;)I", NULL 
    },
    {
      "step", "(Lorg/opensim/modeling/SWIGTYPE_p_double;Lorg/opensim/modeling/SWIGTYPE_p_double;IDDLorg/opensim/modeling/SWIGTYPE_p_double;Lorg/opensim/modeling/SWIGTYPE_p_double;Lorg/opensim/modeling/SWIGTYPE_p_void;)I", NULL 
    },
    {
      "step", "(Lorg/opensim/modeling/SWIGTYPE_p_double;Lorg/opensim/modeling/SWIGTYPE_p_double;IDDLorg/opensim/modeling/SWIGTYPE_p_double;Lorg/opensim/modeling/SWIGTYPE_p_double;)I", NULL 
    },
    {
      "end", "(IDDLorg/opensim/modeling/SWIGTYPE_p_double;Lorg/opensim/modeling/SWIGTYPE_p_double;Lorg/opensim/modeling/SWIGTYPE_p_void;)I", NULL 
    },
    {
      "end", "(IDDLorg/opensim/modeling/SWIGTYPE_p_double;Lorg/opensim/modeling/SWIGTYPE_p_double;)I", NULL 
    }
  };
  
  static jclass baseclass  = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/opensim/modeling/SimtkAnimationCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 19; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  OpenSim::Exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (OpenSim::Exception *)new OpenSim::Exception((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  *(OpenSim::Exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimException_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Exception *)new OpenSim::Exception((std::string const &)*arg1,(std::string const &)*arg2);
  *(OpenSim::Exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimException_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Exception *)new OpenSim::Exception((std::string const &)*arg1);
  *(OpenSim::Exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimException_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Exception *)new OpenSim::Exception();
  *(OpenSim::Exception **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1OpenSimException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Exception *arg1 = (OpenSim::Exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Exception **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimException_1setMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Exception *arg1 = (OpenSim::Exception *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Exception **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMessage((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimException_1getMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Exception *arg1 = (OpenSim::Exception *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Exception **)&jarg1; 
  result = (char *)(arg1)->getMessage();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimException_1print(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Exception *arg1 = (OpenSim::Exception *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Exception **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  (arg1)->print(*arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Array_1CAPMIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)Array_CAPMIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Property::PropertyType result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Property::PropertyType)OpenSim::Property::None;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  result = (OpenSim::Property *)((OpenSim::Property const *)arg1)->copy();
  *(OpenSim::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Property(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  (arg1)->setNull();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Property::PropertyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (OpenSim::Property::PropertyType)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Property::PropertyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  result = (OpenSim::Property::PropertyType)((OpenSim::Property const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getTypeAsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  result = (char *)((OpenSim::Property const *)arg1)->getTypeAsString();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setName((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Property const *)arg1)->getName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setComment((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Property const *)arg1)->getComment();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->toString();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setValue(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    bool const &_result_ref = ((OpenSim::Property const *)arg1)->getValueBool();
    result = (bool *) &_result_ref;
  }
  jresult = (jboolean)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setValue(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    int const &_result_ref = ((OpenSim::Property const *)arg1)->getValueInt();
    result = (int *) &_result_ref;
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setValue(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueDbl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    double const &_result_ref = ((OpenSim::Property const *)arg1)->getValueDbl();
    result = (double *) &_result_ref;
  }
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setValue((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Property const *)arg1)->getValueStr();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueObj(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::Object &_result_ref = (arg1)->getValueObj();
    result = (OpenSim::Object *) &_result_ref;
  }
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1isValidObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  result = (bool)((OpenSim::Property const *)arg1)->isValidObject((OpenSim::Object const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  (arg1)->setValue(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueObjPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  result = (OpenSim::Object *)(arg1)->getValueObjPtr();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbooleanArray jarg3) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  bool *arg3 ;
  jboolean *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInBool(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setValue(arg2,(bool const (*))arg3);
  SWIG_JavaArrayArgoutBool(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<bool > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Array<bool > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<bool > const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::Array<bool > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueBoolArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::Array<bool > &_result_ref = (arg1)->getValueBoolArray();
    result = (OpenSim::Array<bool > *) &_result_ref;
  }
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jintArray jarg3) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  int *arg3 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setValue(arg2,(int const (*))arg3);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Array<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::Array<int > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueIntArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::Array<int > &_result_ref = (arg1)->getValueIntArray();
    result = (OpenSim::Array<int > *) &_result_ref;
  }
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setValue(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::Array<double > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueDblArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = (arg1)->getValueDblArray();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  std::string *arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::string **)&jarg3; 
  (arg1)->setValue(arg2,(std::string const (*))arg3);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::Array<std::string > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueStrArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::Array<std::string > &_result_ref = (arg1)->getValueStrArray();
    result = (OpenSim::Array<std::string > *) &_result_ref;
  }
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  OpenSim::Object **arg3 = (OpenSim::Object **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Object ***)&jarg3; 
  (arg1)->setValue(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Object > const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::ArrayPtrs<OpenSim::Object > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueObjArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::ArrayPtrs<OpenSim::Object > &_result_ref = (arg1)->getValueObjArray();
    result = (OpenSim::ArrayPtrs<OpenSim::Object > *) &_result_ref;
  }
  *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseDefault(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Property **)&jarg1; 
  result = (bool)((OpenSim::Property const *)arg1)->getUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrayPtrsProperty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayPtrsProperty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (OpenSim::ArrayPtrs<OpenSim::Property > *)new OpenSim::ArrayPtrs<OpenSim::Property >(arg1);
  *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayPtrsProperty_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ArrayPtrs<OpenSim::Property > *)new OpenSim::ArrayPtrs<OpenSim::Property >();
  *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayPtrsProperty_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Property > const & reference is null");
    return 0;
  } 
  result = (OpenSim::ArrayPtrs<OpenSim::Property > *)new OpenSim::ArrayPtrs<OpenSim::Property >((OpenSim::ArrayPtrs<OpenSim::Property > const &)*arg1);
  *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  result = (bool)((OpenSim::ArrayPtrs<OpenSim::Property > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Property > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Property > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Property > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  OpenSim::Property *arg2 = (OpenSim::Property *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Property > const *)arg1)->getIndex((OpenSim::Property const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  OpenSim::Property *arg2 = (OpenSim::Property *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Property > const *)arg1)->getIndex((OpenSim::Property const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Property > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Property > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  OpenSim::Property *arg2 = (OpenSim::Property *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Property > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  int arg2 ;
  OpenSim::Property *arg3 = (OpenSim::Property *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Property **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  OpenSim::Property *arg2 = (OpenSim::Property *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Property const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  int arg2 ;
  OpenSim::Property *arg3 = (OpenSim::Property *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Property **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  int arg2 ;
  OpenSim::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Property *)(arg1)->get(arg2);
  *(OpenSim::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Property *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  OpenSim::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  result = (OpenSim::Property *)((OpenSim::ArrayPtrs<OpenSim::Property > const *)arg1)->getLast();
  *(OpenSim::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  OpenSim::Property *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Property const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Property > const *)arg1)->searchBinary((OpenSim::Property const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  OpenSim::Property *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Property const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Property > const *)arg1)->searchBinary((OpenSim::Property const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  OpenSim::Property *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Property const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Property > const *)arg1)->searchBinary((OpenSim::Property const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsProperty_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  OpenSim::Property *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Property const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Property > const *)arg1)->searchBinary((OpenSim::Property const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1PropertyGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::PropertyGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::PropertyGroup *)new OpenSim::PropertyGroup();
  *(OpenSim::PropertyGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1PropertyGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::PropertyGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (OpenSim::PropertyGroup *)new OpenSim::PropertyGroup(*arg1);
  *(OpenSim::PropertyGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1PropertyGroup_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::PropertyGroup *arg1 = 0 ;
  OpenSim::PropertyGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertyGroup **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PropertyGroup const & reference is null");
    return 0;
  } 
  result = (OpenSim::PropertyGroup *)new OpenSim::PropertyGroup((OpenSim::PropertyGroup const &)*arg1);
  *(OpenSim::PropertyGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1PropertyGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::PropertyGroup *arg1 = (OpenSim::PropertyGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertyGroup **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertyGroup_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::PropertyGroup *arg1 = (OpenSim::PropertyGroup *) 0 ;
  OpenSim::PropertyGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertyGroup **)&jarg1; 
  result = (OpenSim::PropertyGroup *)((OpenSim::PropertyGroup const *)arg1)->copy();
  *(OpenSim::PropertyGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertyGroup_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::PropertyGroup *arg1 = (OpenSim::PropertyGroup *) 0 ;
  OpenSim::PropertyGroup *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::PropertyGroup **)&jarg1; 
  arg2 = *(OpenSim::PropertyGroup **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PropertyGroup const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::PropertyGroup const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertyGroup_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::PropertyGroup *arg1 = (OpenSim::PropertyGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertyGroup **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertyGroup_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::PropertyGroup *arg1 = (OpenSim::PropertyGroup *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertyGroup **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((OpenSim::PropertyGroup const *)arg1)->contains((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertyGroup_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::PropertyGroup *arg1 = (OpenSim::PropertyGroup *) 0 ;
  OpenSim::Property *arg2 = (OpenSim::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::PropertyGroup **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertyGroup_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::PropertyGroup *arg1 = (OpenSim::PropertyGroup *) 0 ;
  OpenSim::Property *arg2 = (OpenSim::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::PropertyGroup **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2; 
  (arg1)->remove(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertyGroup_1getProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::PropertyGroup *arg1 = (OpenSim::PropertyGroup *) 0 ;
  OpenSim::Array<OpenSim::Property * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertyGroup **)&jarg1; 
  {
    OpenSim::Array<OpenSim::Property * > const &_result_ref = ((OpenSim::PropertyGroup const *)arg1)->getProperties();
    result = (OpenSim::Array<OpenSim::Property * > *) &_result_ref;
  }
  *(OpenSim::Array<OpenSim::Property * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertyGroup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::PropertyGroup *arg1 = (OpenSim::PropertyGroup *) 0 ;
  int arg2 ;
  OpenSim::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertyGroup **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Property *)(arg1)->get(arg2);
  *(OpenSim::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertyGroup_1getPropertyIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::PropertyGroup *arg1 = (OpenSim::PropertyGroup *) 0 ;
  OpenSim::Property *arg2 = (OpenSim::Property *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::PropertyGroup **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2; 
  result = (int)((OpenSim::PropertyGroup const *)arg1)->getPropertyIndex(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertyGroup_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::PropertyGroup *arg1 = (OpenSim::PropertyGroup *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertyGroup **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setName((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertyGroup_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::PropertyGroup *arg1 = (OpenSim::PropertyGroup *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertyGroup **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::PropertyGroup const *)arg1)->getName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrayPtrsPropertyGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayPtrsPropertyGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *)new OpenSim::ArrayPtrs<OpenSim::PropertyGroup >(arg1);
  *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayPtrsPropertyGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *)new OpenSim::ArrayPtrs<OpenSim::PropertyGroup >();
  *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayPtrsPropertyGroup_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::PropertyGroup > const & reference is null");
    return 0;
  } 
  result = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *)new OpenSim::ArrayPtrs<OpenSim::PropertyGroup >((OpenSim::ArrayPtrs<OpenSim::PropertyGroup > const &)*arg1);
  *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  result = (bool)((OpenSim::ArrayPtrs<OpenSim::PropertyGroup > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::PropertyGroup > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::PropertyGroup > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::PropertyGroup > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  OpenSim::PropertyGroup *arg2 = (OpenSim::PropertyGroup *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = *(OpenSim::PropertyGroup **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::PropertyGroup > const *)arg1)->getIndex((OpenSim::PropertyGroup const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  OpenSim::PropertyGroup *arg2 = (OpenSim::PropertyGroup *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = *(OpenSim::PropertyGroup **)&jarg2; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::PropertyGroup > const *)arg1)->getIndex((OpenSim::PropertyGroup const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::PropertyGroup > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::PropertyGroup > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  OpenSim::PropertyGroup *arg2 = (OpenSim::PropertyGroup *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = *(OpenSim::PropertyGroup **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::PropertyGroup > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  int arg2 ;
  OpenSim::PropertyGroup *arg3 = (OpenSim::PropertyGroup *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::PropertyGroup **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  OpenSim::PropertyGroup *arg2 = (OpenSim::PropertyGroup *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = *(OpenSim::PropertyGroup **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::PropertyGroup const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  int arg2 ;
  OpenSim::PropertyGroup *arg3 = (OpenSim::PropertyGroup *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::PropertyGroup **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  int arg2 ;
  OpenSim::PropertyGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::PropertyGroup *)(arg1)->get(arg2);
  *(OpenSim::PropertyGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::PropertyGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::PropertyGroup *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::PropertyGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  OpenSim::PropertyGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  result = (OpenSim::PropertyGroup *)((OpenSim::ArrayPtrs<OpenSim::PropertyGroup > const *)arg1)->getLast();
  *(OpenSim::PropertyGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  OpenSim::PropertyGroup *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = *(OpenSim::PropertyGroup **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PropertyGroup const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::PropertyGroup > const *)arg1)->searchBinary((OpenSim::PropertyGroup const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  OpenSim::PropertyGroup *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = *(OpenSim::PropertyGroup **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PropertyGroup const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::PropertyGroup > const *)arg1)->searchBinary((OpenSim::PropertyGroup const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  OpenSim::PropertyGroup *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = *(OpenSim::PropertyGroup **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PropertyGroup const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::PropertyGroup > const *)arg1)->searchBinary((OpenSim::PropertyGroup const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsPropertyGroup_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *arg1 = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) 0 ;
  OpenSim::PropertyGroup *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jarg1; 
  arg2 = *(OpenSim::PropertyGroup **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PropertyGroup const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::PropertyGroup > const *)arg1)->searchBinary((OpenSim::PropertyGroup const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1_1array_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg2 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg2; 
  if (arg1) (arg1)->_array = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1_1array_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  result = (OpenSim::ArrayPtrs<OpenSim::Property > *)& ((arg1)->_array);
  *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1PropertySet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::PropertySet *)new OpenSim::PropertySet();
  *(OpenSim::PropertySet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1PropertySet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *arg1 = 0 ;
  OpenSim::PropertySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertySet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PropertySet const & reference is null");
    return 0;
  } 
  result = (OpenSim::PropertySet *)new OpenSim::PropertySet((OpenSim::PropertySet const &)*arg1);
  *(OpenSim::PropertySet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1PropertySet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  result = (bool)((OpenSim::PropertySet const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  result = (int)((OpenSim::PropertySet const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  int arg2 ;
  OpenSim::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (OpenSim::Property *)(arg1)->get(arg2);
  }
  catch(OpenSim::Exception &_e) {
    {
      jclass excep = jenv->FindClass("java/io/IOException");
      if (excep)
      jenv->ThrowNew(excep, (_e).getMessage());
      return 0;
    }
  }
  
  *(OpenSim::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (OpenSim::Property *)(arg1)->get((std::string const &)*arg2);
  }
  catch(OpenSim::Exception &_e) {
    {
      jclass excep = jenv->FindClass("java/io/IOException");
      if (excep)
      jenv->ThrowNew(excep, (_e).getMessage());
      return 0;
    }
  }
  
  *(OpenSim::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  OpenSim::Property *arg2 = (OpenSim::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2; 
  (arg1)->append(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  OpenSim::Property *arg2 = (OpenSim::Property *) 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->append(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->remove((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  std::string arg2 ;
  OpenSim::PropertyGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::PropertyGroup *)(arg1)->addGroup(arg2);
  *(OpenSim::PropertyGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1addPropertyToGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  arg3 =  std::string(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addPropertyToGroup(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1addPropertyToGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  OpenSim::PropertyGroup *arg2 = (OpenSim::PropertyGroup *) 0 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  arg2 = *(OpenSim::PropertyGroup **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  arg3 =  std::string(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addPropertyToGroup(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1addPropertyToGroup_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  OpenSim::PropertyGroup *arg2 = (OpenSim::PropertyGroup *) 0 ;
  OpenSim::Property *arg3 = (OpenSim::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  arg2 = *(OpenSim::PropertyGroup **)&jarg2; 
  arg3 = *(OpenSim::Property **)&jarg3; 
  (arg1)->addPropertyToGroup(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1addPropertyToGroup_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  std::string arg2 ;
  OpenSim::Property *arg3 = (OpenSim::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Property **)&jarg3; 
  (arg1)->addPropertyToGroup(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1getGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  {
    OpenSim::ArrayPtrs<OpenSim::PropertyGroup > &_result_ref = (arg1)->getGroups();
    result = (OpenSim::ArrayPtrs<OpenSim::PropertyGroup > *) &_result_ref;
  }
  *(OpenSim::ArrayPtrs<OpenSim::PropertyGroup > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1getGroupContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  OpenSim::Property *arg2 = (OpenSim::Property *) 0 ;
  OpenSim::PropertyGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2; 
  result = (OpenSim::PropertyGroup *)(arg1)->getGroupContaining(arg2);
  *(OpenSim::PropertyGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1getGroupIndexContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  OpenSim::Property *arg2 = (OpenSim::Property *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2; 
  result = (int)(arg1)->getGroupIndexContaining(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ObjectDEFAULT_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)ObjectDEFAULT_NAME;
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1OpenSimObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Object *)new OpenSim::Object();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  try {
    result = (OpenSim::Object *)new OpenSim::Object((std::string const &)*arg1,arg2);
  }
  catch(OpenSim::Exception &_e) {
    {
      jclass excep = jenv->FindClass("java/io/IOException");
      if (excep)
      jenv->ThrowNew(excep, (_e).getMessage());
      return 0;
    }
  }
  
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  try {
    result = (OpenSim::Object *)new OpenSim::Object((std::string const &)*arg1);
  }
  catch(OpenSim::Exception &_e) {
    {
      jclass excep = jenv->FindClass("java/io/IOException");
      if (excep)
      jenv->ThrowNew(excep, (_e).getMessage());
      return 0;
    }
  }
  
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimObject_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::XMLDocument *arg1 = (OpenSim::XMLDocument *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::XMLDocument **)&jarg1; 
  result = (OpenSim::Object *)new OpenSim::Object((OpenSim::XMLDocument const *)arg1);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimObject_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Object *)new OpenSim::Object(arg1);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimObject_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return 0;
  } 
  result = (OpenSim::Object *)new OpenSim::Object((OpenSim::Object const &)*arg1);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Object const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Object const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1copy_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1SafeCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::Object *)OpenSim::Object::SafeCopy((OpenSim::Object const *)arg1);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getDisplayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::VisibleObject *)((OpenSim::Object const *)arg1)->getDisplayer();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Object const *)arg1)->getType();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setName((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Object const *)arg1)->getName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setDescription((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Object const *)arg1)->getDescription();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Object const *)arg1)->toString();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getPropertySet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::PropertySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  {
    OpenSim::PropertySet &_result_ref = (arg1)->getPropertySet();
    result = (OpenSim::PropertySet *) &_result_ref;
  }
  *(OpenSim::PropertySet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1RegisterType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Object *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  OpenSim::Object::RegisterType((OpenSim::Object const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1makeObjectFromFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Object *)OpenSim::Object::makeObjectFromFile((std::string const &)*arg1);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1newInstanceOfType(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Object *)OpenSim::Object::newInstanceOfType((std::string const &)*arg1);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getRegisteredTypenames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Array<std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  OpenSim::Object::getRegisteredTypenames(*arg1);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1isValidDefaultType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  result = (bool)((OpenSim::Object const *)arg1)->isValidDefaultType((OpenSim::Object const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1updateFromXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  (arg1)->updateFromXMLNode();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1updateDefaultObjectsFromXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  (arg1)->updateDefaultObjectsFromXMLNode();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1updateXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  (arg1)->updateXMLNode(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1updateDefaultObjectsXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  (arg1)->updateDefaultObjectsXMLNode(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1generateXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  (arg1)->generateXMLNode(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getInlined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (bool)((OpenSim::Object const *)arg1)->getInlined();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getDocument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::XMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::XMLDocument *)((OpenSim::Object const *)arg1)->getDocument();
  *(OpenSim::XMLDocument **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getDocumentFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = ((OpenSim::Object const *)arg1)->getDocumentFileName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  DOMElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (DOMElement *)((OpenSim::Object const *)arg1)->getXMLNode();
  *(DOMElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1print(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->print((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1PrintPropertyInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  std::ostream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::ostream **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  OpenSim::Object::PrintPropertyInfo(*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1PrintPropertyInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  std::ostream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::ostream **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  OpenSim::Object::PrintPropertyInfo(*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1addObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object & reference is null");
    return ;
  } 
  (arg1)->addObserver(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1deleteObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object & reference is null");
    return ;
  } 
  (arg1)->deleteObserver(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1addObserverEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  Event *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object & reference is null");
    return ;
  } 
  arg3 = *(Event **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Event & reference is null");
    return ;
  } 
  (arg1)->addObserverEvent(*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1notifyObservers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  Event *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(Event **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Event & reference is null");
    return ;
  } 
  (arg1)->notifyObservers(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1deleteObservers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  (arg1)->deleteObservers();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1countObservers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (int)((OpenSim::Object const *)arg1)->countObservers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  Event *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  arg3 = *(Event **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Event & reference is null");
    return ;
  } 
  (arg1)->update((OpenSim::Object const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1setSerializeAllDefaults(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  OpenSim::Object::setSerializeAllDefaults(arg1);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getSerializeAllDefaults(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)OpenSim::Object::getSerializeAllDefaults();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::Object::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::Object const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ObjectGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ObjectGroup *)new OpenSim::ObjectGroup();
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ObjectGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::ObjectGroup *)new OpenSim::ObjectGroup((std::string const &)*arg1);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ObjectGroup_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ObjectGroup *arg1 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ObjectGroup **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ObjectGroup const & reference is null");
    return 0;
  } 
  result = (OpenSim::ObjectGroup *)new OpenSim::ObjectGroup((OpenSim::ObjectGroup const &)*arg1);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ObjectGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ObjectGroup *arg1 = (OpenSim::ObjectGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ObjectGroup **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ObjectGroup_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ObjectGroup *arg1 = (OpenSim::ObjectGroup *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ObjectGroup **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::ObjectGroup const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ObjectGroup_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ObjectGroup *arg1 = (OpenSim::ObjectGroup *) 0 ;
  OpenSim::ObjectGroup *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ObjectGroup **)&jarg1; 
  arg2 = *(OpenSim::ObjectGroup **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ObjectGroup const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::ObjectGroup const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ObjectGroup_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ObjectGroup *arg1 = (OpenSim::ObjectGroup *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ObjectGroup **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((OpenSim::ObjectGroup const *)arg1)->contains((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ObjectGroup_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ObjectGroup *arg1 = (OpenSim::ObjectGroup *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ObjectGroup **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ObjectGroup_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ObjectGroup *arg1 = (OpenSim::ObjectGroup *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ObjectGroup **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  (arg1)->remove((OpenSim::Object const *)arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ObjectGroup_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ObjectGroup *arg1 = (OpenSim::ObjectGroup *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ObjectGroup **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Object > & reference is null");
    return ;
  } 
  (arg1)->setup(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ObjectGroup_1getMembers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ObjectGroup *arg1 = (OpenSim::ObjectGroup *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ObjectGroup **)&jarg1; 
  {
    OpenSim::ArrayPtrs<OpenSim::Object > const &_result_ref = ((OpenSim::ObjectGroup const *)arg1)->getMembers();
    result = (OpenSim::ArrayPtrs<OpenSim::Object > *) &_result_ref;
  }
  *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ObjectGroup_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ObjectGroup *arg1 = (OpenSim::ObjectGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ObjectGroup **)&jarg1; 
  ((OpenSim::ObjectGroup const *)arg1)->peteTest();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ObjectGroup_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::ObjectGroup::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ObjectGroup_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ObjectGroup *arg1 = (OpenSim::ObjectGroup *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ObjectGroup **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::ObjectGroup const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ObjectGroup_1safeDownCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::ObjectGroup *)OpenSim::ObjectGroup::safeDownCast(arg1);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ObjectGroup_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ObjectGroup *arg1 = (OpenSim::ObjectGroup *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ObjectGroup **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propTranslucency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDbl arg2 ;
  PropertyDbl *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  argp2 = *(PropertyDbl **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDbl");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_propTranslucency = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propTranslucency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result =  ((arg1)->_propTranslucency);
  *(PropertyDbl **)&jresult = new PropertyDbl((PropertyDbl &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propAmbientColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray arg2 ;
  PropertyDblArray *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  argp2 = *(PropertyDblArray **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDblArray");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_propAmbientColor = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propAmbientColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result =  ((arg1)->_propAmbientColor);
  *(PropertyDblArray **)&jresult = new PropertyDblArray((PropertyDblArray &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propDiffuseColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray arg2 ;
  PropertyDblArray *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  argp2 = *(PropertyDblArray **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDblArray");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_propDiffuseColor = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propDiffuseColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result =  ((arg1)->_propDiffuseColor);
  *(PropertyDblArray **)&jresult = new PropertyDblArray((PropertyDblArray &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propSpecularColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray arg2 ;
  PropertyDblArray *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  argp2 = *(PropertyDblArray **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDblArray");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_propSpecularColor = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propSpecularColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result =  ((arg1)->_propSpecularColor);
  *(PropertyDblArray **)&jresult = new PropertyDblArray((PropertyDblArray &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1translucency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_translucency = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1translucency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  {
    double &_result_ref = (double &) ((arg1)->_translucency);
    result = (double *) &_result_ref;
  }
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1ambientColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_ambientColor = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1ambientColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = (OpenSim::Array<double > &) ((arg1)->_ambientColor);
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1diffuseColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_diffuseColor = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1diffuseColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = (OpenSim::Array<double > &) ((arg1)->_diffuseColor);
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1specularColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_specularColor = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1specularColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = (OpenSim::Array<double > &) ((arg1)->_specularColor);
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1defaultMaterial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  OpenSim::Material::_defaultMaterial = arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1defaultMaterial_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Material *)OpenSim::Material::_defaultMaterial;
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Material_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Material *)new OpenSim::Material();
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Material_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Material *)new OpenSim::Material((std::string const &)*arg1);
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Material_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material const & reference is null");
    return 0;
  } 
  result = (OpenSim::Material *)new OpenSim::Material((OpenSim::Material const &)*arg1);
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Material(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Material const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1setTranslucency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTranslucency(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1getTranslucency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (double)((OpenSim::Material const *)arg1)->getTranslucency();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1setAmbientColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setAmbientColor((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1getAmbientColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (double *)((OpenSim::Material const *)arg1)->getAmbientColor();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1setDiffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setDiffuseColor((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1getDiffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (double *)((OpenSim::Material const *)arg1)->getDiffuseColor();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1setSpecularColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setSpecularColor((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1getSpecularColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (double *)((OpenSim::Material const *)arg1)->getSpecularColor();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1GetDefaultMaterialName(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    std::string const &_result_ref = OpenSim::Material::GetDefaultMaterialName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1GetDefaultMaterial(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenSim::Material const &_result_ref = OpenSim::Material::GetDefaultMaterial();
    result = (OpenSim::Material *) &_result_ref;
  }
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::None;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1WireFrame_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::WireFrame;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1SolidFill_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::SolidFill;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1FlatShaded_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::FlatShaded;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1GouraudShaded_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::GouraudShaded;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1PhongShaded_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::PhongShaded;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1BoundingBox_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::BoundingBox;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleProperties_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties *)new OpenSim::VisibleProperties();
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleProperties_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::VisibleProperties *)new OpenSim::VisibleProperties((std::string const &)*arg1);
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleProperties_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::XMLDocument *arg1 = (OpenSim::XMLDocument *) 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::XMLDocument **)&jarg1; 
  result = (OpenSim::VisibleProperties *)new OpenSim::VisibleProperties((OpenSim::XMLDocument const *)arg1);
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleProperties_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::VisibleProperties const & reference is null");
    return 0;
  } 
  result = (OpenSim::VisibleProperties *)new OpenSim::VisibleProperties((OpenSim::VisibleProperties const &)*arg1);
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1VisibleProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::VisibleProperties const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1setDisplayPreference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  OpenSim::VisibleProperties::DisplayPreference arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  arg2 = (OpenSim::VisibleProperties::DisplayPreference)jarg2; 
  (arg1)->setDisplayPreference(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1getDisplayPreference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  result = (OpenSim::VisibleProperties::DisplayPreference)((OpenSim::VisibleProperties const *)arg1)->getDisplayPreference();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1setShowNormals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setShowNormals(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1getShowNormals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  result = (bool)((OpenSim::VisibleProperties const *)arg1)->getShowNormals();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1setShowAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setShowAxes(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1getShowAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  result = (bool)((OpenSim::VisibleProperties const *)arg1)->getShowAxes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1setMaterialName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setMaterialName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1getMaterialName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  result = (char *)((OpenSim::VisibleProperties const *)arg1)->getMaterialName();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1getColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->getColor(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1setColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setColor(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1X_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::AxisName result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::AxisName)OpenSim::Transform::X;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1Y_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::AxisName result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::AxisName)OpenSim::Transform::Y;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1Z_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::AxisName result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::AxisName)OpenSim::Transform::Z;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1W_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::AxisName result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::AxisName)OpenSim::Transform::W;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1NoAxis_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::AxisName result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::AxisName)OpenSim::Transform::NoAxis;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1XYZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::XYZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1XZY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::XZY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1YXZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::YXZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1YZX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::YZX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1ZXY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::ZXY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1ZYX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::ZYX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Transform_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform *)new OpenSim::Transform();
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Transform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Transform *arg1 = 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Transform const & reference is null");
    return 0;
  } 
  result = (OpenSim::Transform *)new OpenSim::Transform((OpenSim::Transform const &)*arg1);
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Transform_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2, jdoubleArray jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  OpenSim::Transform::AnglePreference arg2 ;
  double *arg3 ;
  OpenSim::Transform *result = 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (OpenSim::Transform::AnglePreference)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return 0; 
  result = (OpenSim::Transform *)new OpenSim::Transform(arg1,arg2,(double const (*))arg3);
  *(OpenSim::Transform **)&jresult = result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Transform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  result = (OpenSim::Transform *)((OpenSim::Transform const *)arg1)->copy();
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1printMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  (arg1)->printMatrix();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Transform const *)arg1)->getPosition(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPosition((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1getOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  ((OpenSim::Transform const *)arg1)->getOrientation((double (*)[3])arg2);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1setOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  (arg1)->setOrientation((double const (*)[3])arg2);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1setIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  (arg1)->setIdentity();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1rotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jint jarg3, jint jarg4) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  OpenSim::Transform::RotationOrder arg4 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  arg4 = (OpenSim::Transform::RotationOrder)jarg4; 
  (arg1)->rotate((double const (*))arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1rotateX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  (arg1)->rotateX(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1rotateY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  (arg1)->rotateY(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1rotateZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  (arg1)->rotateZ(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1rotateAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jdoubleArray jarg4) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->rotateAxis(arg2,arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1rotateXBodyFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  (arg1)->rotateXBodyFixed(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1rotateYBodyFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  (arg1)->rotateYBodyFixed(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1rotateZBodyFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  (arg1)->rotateZBodyFixed(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1translateX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->translateX(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1translateY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->translateY(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1translateZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->translateZ(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->translate((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1transformPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Transform const *)arg1)->transformPoint(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1transformPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::Transform const *)arg1)->transformPoint(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1transformVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Transform const *)arg1)->transformVector(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1transformVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::Transform const *)arg1)->transformVector(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1getMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  result = (double *)(arg1)->getMatrix();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1getMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Transform const *)arg1)->getMatrix(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1setRotationSubmatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  (arg1)->setRotationSubmatrix((double (*)[3])arg2);
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Geometry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Geometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Geometry *)new OpenSim::Geometry();
  *(OpenSim::Geometry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Geometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Geometry *arg1 = (OpenSim::Geometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Geometry **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Geometry_1getShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Geometry *arg1 = (OpenSim::Geometry *) 0 ;
  OpenSim::Geometry::GeometryType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Geometry **)&jarg1; 
  result = (OpenSim::Geometry::GeometryType)((OpenSim::Geometry const *)arg1)->getShape();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Geometry_1isAnalytic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Geometry *arg1 = (OpenSim::Geometry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Geometry **)&jarg1; 
  result = (bool)((OpenSim::Geometry const *)arg1)->isAnalytic();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Geometry_1setFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Geometry *arg1 = (OpenSim::Geometry *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Geometry **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setFixed(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Geometry_1getFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Geometry *arg1 = (OpenSim::Geometry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Geometry **)&jarg1; 
  result = (bool)((OpenSim::Geometry const *)arg1)->getFixed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1LineGeometry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2) {
  jlong jresult = 0 ;
  double *arg1 ;
  double *arg2 ;
  OpenSim::LineGeometry *result = 0 ;
  jdouble *jarr1 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  if (jarg1 && jenv->GetArrayLength(jarg1) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr1, &arg1, jarg1)) return 0; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return 0; 
  result = (OpenSim::LineGeometry *)new OpenSim::LineGeometry(arg1,arg2);
  *(OpenSim::LineGeometry **)&jresult = result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr1, arg1, jarg1); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg1; 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1LineGeometry_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::LineGeometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::LineGeometry *)new OpenSim::LineGeometry();
  *(OpenSim::LineGeometry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1LineGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::LineGeometry *arg1 = (OpenSim::LineGeometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::LineGeometry **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_LineGeometry_1getPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::LineGeometry *arg1 = (OpenSim::LineGeometry *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::LineGeometry **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::LineGeometry const *)arg1)->getPoints(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_LineGeometry_1setPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::LineGeometry *arg1 = (OpenSim::LineGeometry *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::LineGeometry **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setPoints(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_LineGeometry_1dynamic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Geometry *arg1 = (OpenSim::Geometry *) 0 ;
  OpenSim::LineGeometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Geometry **)&jarg1; 
  result = (OpenSim::LineGeometry *)OpenSim_LineGeometry_dynamic_cast(arg1);
  *(OpenSim::LineGeometry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrowGeometry(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double *arg1 ;
  double *arg2 ;
  double arg3 ;
  OpenSim::ArrowGeometry *result = 0 ;
  jdouble *jarr1 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  if (jarg1 && jenv->GetArrayLength(jarg1) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr1, &arg1, jarg1)) return 0; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return 0; 
  arg3 = (double)jarg3; 
  result = (OpenSim::ArrowGeometry *)new OpenSim::ArrowGeometry(arg1,arg2,arg3);
  *(OpenSim::ArrowGeometry **)&jresult = result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr1, arg1, jarg1); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg1; 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrowGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ArrowGeometry *arg1 = (OpenSim::ArrowGeometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrowGeometry **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalyticGeometry(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  OpenSim::Geometry::GeometryType arg1 ;
  OpenSim::AnalyticGeometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OpenSim::Geometry::GeometryType)jarg1; 
  result = (OpenSim::AnalyticGeometry *)new OpenSim::AnalyticGeometry(arg1);
  *(OpenSim::AnalyticGeometry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AnalyticGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AnalyticGeometry *arg1 = (OpenSim::AnalyticGeometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalyticGeometry **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticGeometry_1setQuadrants(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbooleanArray jarg2) {
  OpenSim::AnalyticGeometry *arg1 = (OpenSim::AnalyticGeometry *) 0 ;
  bool *arg2 ;
  jboolean *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyticGeometry **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInBool(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setQuadrants((bool const (*))arg2);
  SWIG_JavaArrayArgoutBool(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticGeometry_1getQuadrants(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbooleanArray jarg2) {
  OpenSim::AnalyticGeometry *arg1 = (OpenSim::AnalyticGeometry *) 0 ;
  bool *arg2 ;
  jboolean *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyticGeometry **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInBool(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->getQuadrants(arg2);
  SWIG_JavaArrayArgoutBool(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticGeometry_1isPiece(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AnalyticGeometry *arg1 = (OpenSim::AnalyticGeometry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyticGeometry **)&jarg1; 
  result = (bool)((OpenSim::AnalyticGeometry const *)arg1)->isPiece();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticGeometry_1dynamic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Geometry *arg1 = (OpenSim::Geometry *) 0 ;
  OpenSim::AnalyticGeometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Geometry **)&jarg1; 
  {
    result = (OpenSim::AnalyticGeometry *)OpenSim_AnalyticGeometry_dynamic_cast(arg1);
    if (!result) {
      jclass excep = jenv->FindClass("java/lang/ClassCastException");
      if (excep) {
        jenv->ThrowNew(excep, "dynamic_cast exception");
      }
    }
  }
  *(OpenSim::AnalyticGeometry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalyticSphere_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::AnalyticSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::AnalyticSphere *)new OpenSim::AnalyticSphere();
  *(OpenSim::AnalyticSphere **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalyticSphere_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  OpenSim::AnalyticSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (OpenSim::AnalyticSphere *)new OpenSim::AnalyticSphere(arg1);
  *(OpenSim::AnalyticSphere **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AnalyticSphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AnalyticSphere *arg1 = (OpenSim::AnalyticSphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalyticSphere **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticSphere_1getRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AnalyticSphere *arg1 = (OpenSim::AnalyticSphere *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyticSphere **)&jarg1; 
  {
    double const &_result_ref = ((OpenSim::AnalyticSphere const *)arg1)->getRadius();
    result = (double *) &_result_ref;
  }
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticSphere_1setSphereRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::AnalyticSphere *arg1 = (OpenSim::AnalyticSphere *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyticSphere **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSphereRadius(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticSphere_1createSphere(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  OpenSim::AnalyticGeometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (OpenSim::AnalyticGeometry *)OpenSim::AnalyticSphere::createSphere(arg1);
  *(OpenSim::AnalyticGeometry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticSphere_1dynamic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Geometry *arg1 = (OpenSim::Geometry *) 0 ;
  OpenSim::AnalyticSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Geometry **)&jarg1; 
  result = (OpenSim::AnalyticSphere *)OpenSim_AnalyticSphere_dynamic_cast(arg1);
  *(OpenSim::AnalyticSphere **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalyticEllipsoid_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::AnalyticEllipsoid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::AnalyticEllipsoid *)new OpenSim::AnalyticEllipsoid();
  *(OpenSim::AnalyticEllipsoid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalyticEllipsoid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  OpenSim::AnalyticEllipsoid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (OpenSim::AnalyticEllipsoid *)new OpenSim::AnalyticEllipsoid(arg1,arg2,arg3);
  *(OpenSim::AnalyticEllipsoid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AnalyticEllipsoid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AnalyticEllipsoid *arg1 = (OpenSim::AnalyticEllipsoid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalyticEllipsoid **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticEllipsoid_1setEllipsoidParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenSim::AnalyticEllipsoid *arg1 = (OpenSim::AnalyticEllipsoid *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyticEllipsoid **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setEllipsoidParams(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticEllipsoid_1getEllipsoidParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AnalyticEllipsoid *arg1 = (OpenSim::AnalyticEllipsoid *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyticEllipsoid **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->getEllipsoidParams(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticEllipsoid_1dynamic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Geometry *arg1 = (OpenSim::Geometry *) 0 ;
  OpenSim::AnalyticEllipsoid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Geometry **)&jarg1; 
  result = (OpenSim::AnalyticEllipsoid *)OpenSim_AnalyticEllipsoid_dynamic_cast(arg1);
  *(OpenSim::AnalyticEllipsoid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalyticCylinder_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::AnalyticCylinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::AnalyticCylinder *)new OpenSim::AnalyticCylinder();
  *(OpenSim::AnalyticCylinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalyticCylinder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  OpenSim::AnalyticCylinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (OpenSim::AnalyticCylinder *)new OpenSim::AnalyticCylinder(arg1,arg2);
  *(OpenSim::AnalyticCylinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AnalyticCylinder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AnalyticCylinder *arg1 = (OpenSim::AnalyticCylinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalyticCylinder **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticCylinder_1getCylinderParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AnalyticCylinder *arg1 = (OpenSim::AnalyticCylinder *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyticCylinder **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AnalyticCylinder const *)arg1)->getCylinderParams(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticCylinder_1dynamic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Geometry *arg1 = (OpenSim::Geometry *) 0 ;
  OpenSim::AnalyticCylinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Geometry **)&jarg1; 
  result = (OpenSim::AnalyticCylinder *)OpenSim_AnalyticCylinder_dynamic_cast(arg1);
  *(OpenSim::AnalyticCylinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalyticTorus_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::AnalyticTorus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::AnalyticTorus *)new OpenSim::AnalyticTorus();
  *(OpenSim::AnalyticTorus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalyticTorus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  OpenSim::AnalyticTorus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (OpenSim::AnalyticTorus *)new OpenSim::AnalyticTorus(arg1,arg2);
  *(OpenSim::AnalyticTorus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AnalyticTorus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AnalyticTorus *arg1 = (OpenSim::AnalyticTorus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalyticTorus **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticTorus_1getTorusParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AnalyticTorus *arg1 = (OpenSim::AnalyticTorus *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyticTorus **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AnalyticTorus const *)arg1)->getTorusParams(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticTorus_1dynamic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Geometry *arg1 = (OpenSim::Geometry *) 0 ;
  OpenSim::AnalyticTorus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Geometry **)&jarg1; 
  result = (OpenSim::AnalyticTorus *)OpenSim_AnalyticTorus_dynamic_cast(arg1);
  *(OpenSim::AnalyticTorus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1PolyhedralGeometry(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::PolyhedralGeometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::PolyhedralGeometry *)new OpenSim::PolyhedralGeometry((std::string const &)*arg1);
  *(OpenSim::PolyhedralGeometry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_PolyhedralGeometry_1getGeometryFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::PolyhedralGeometry *arg1 = (OpenSim::PolyhedralGeometry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PolyhedralGeometry **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::PolyhedralGeometry const *)arg1)->getGeometryFilename();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1PolyhedralGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::PolyhedralGeometry *arg1 = (OpenSim::PolyhedralGeometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PolyhedralGeometry **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleObject *)new OpenSim::VisibleObject();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::VisibleObject *)new OpenSim::VisibleObject((std::string const &)*arg1);
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::VisibleObject const & reference is null");
    return 0;
  } 
  result = (OpenSim::VisibleObject *)new OpenSim::VisibleObject((OpenSim::VisibleObject const &)*arg1);
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1VisibleObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::VisibleObject const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1setOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  (arg1)->setOwner(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  result = (OpenSim::Object *)(arg1)->getOwner();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1setNumGeometryFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNumGeometryFiles(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1setGeometryFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->setGeometryFileName(arg2,(std::string const &)*arg3);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getNumGeometryFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  result = (int)((OpenSim::VisibleObject const *)arg1)->getNumGeometryFiles();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getGeometryFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    std::string const &_result_ref = ((OpenSim::VisibleObject const *)arg1)->getGeometryFileName(arg2);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1setVisibleProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::VisibleProperties *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(OpenSim::VisibleProperties **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::VisibleProperties const & reference is null");
    return ;
  } 
  (arg1)->setVisibleProperties((OpenSim::VisibleProperties const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getVisibleProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  {
    OpenSim::VisibleProperties &_result_ref = (arg1)->getVisibleProperties();
    result = (OpenSim::VisibleProperties *) &_result_ref;
  }
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1setTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Transform *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(OpenSim::Transform **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Transform const & reference is null");
    return ;
  } 
  (arg1)->setTransform((OpenSim::Transform const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  {
    OpenSim::Transform &_result_ref = (arg1)->getTransform();
    result = (OpenSim::Transform *) &_result_ref;
  }
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1setScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setScaleFactors((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::VisibleObject const *)arg1)->getScaleFactors(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateRadians_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->rotateRadians((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateRadians_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jint jarg3) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  OpenSim::Transform::RotationOrder arg3 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (OpenSim::Transform::RotationOrder)jarg3; 
  (arg1)->rotateRadians((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateRadiansX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateRadiansX(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateRadiansY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateRadiansY(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateRadiansZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateRadiansZ(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateRadiansAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdoubleArray jarg3) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->rotateRadiansAxis(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->rotateDegrees((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jint jarg3) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  OpenSim::Transform::RotationOrder arg3 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (OpenSim::Transform::RotationOrder)jarg3; 
  (arg1)->rotateDegrees((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateDegreesX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateDegreesX(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateDegreesY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateDegreesY(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateDegreesZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateDegreesZ(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateDegreesAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdoubleArray jarg3) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->rotateDegreesAxis(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->translate((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1addDependent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::VisibleObject *arg2 = (OpenSim::VisibleObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(OpenSim::VisibleObject **)&jarg2; 
  (arg1)->addDependent(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1hasDependent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::VisibleObject *arg2 = (OpenSim::VisibleObject *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(OpenSim::VisibleObject **)&jarg2; 
  result = (bool)(arg1)->hasDependent(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1removeDependent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::VisibleObject *arg2 = (OpenSim::VisibleObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(OpenSim::VisibleObject **)&jarg2; 
  (arg1)->removeDependent(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1countDependents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  result = (int)(arg1)->countDependents();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getDependent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int arg2 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::VisibleObject *)(arg1)->getDependent(arg2);
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1addGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Geometry *arg2 = (OpenSim::Geometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(OpenSim::Geometry **)&jarg2; 
  (arg1)->addGeometry(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1removeGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Geometry *arg2 = (OpenSim::Geometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(OpenSim::Geometry **)&jarg2; 
  (arg1)->removeGeometry(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1freeGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  (arg1)->freeGeometry();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int arg2 ;
  OpenSim::Geometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Geometry *)(arg1)->getGeometry(arg2);
  *(OpenSim::Geometry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1countGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  result = (int)(arg1)->countGeometry();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getDefaultGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Geometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  result = (OpenSim::Geometry *)(arg1)->getDefaultGeometry();
  *(OpenSim::Geometry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1updateGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  (arg1)->updateGeometry();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1setupProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  (arg1)->setupProperties();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMaterials_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Material > *)new OpenSim::Set<OpenSim::Material >();
  *(OpenSim::Set<OpenSim::Material > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMaterials_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::Material > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::Material > *)new OpenSim::Set<OpenSim::Material >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::Material > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMaterials_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Material > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Material > *)new OpenSim::Set<OpenSim::Material >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Material > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMaterials_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Material > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Material > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Material > *)new OpenSim::Set<OpenSim::Material >((OpenSim::Set<OpenSim::Material > const &)*arg1);
  *(OpenSim::Set<OpenSim::Material > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Material > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Material > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = (OpenSim::Material *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getIndex((OpenSim::Material const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = (OpenSim::Material *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getIndex((OpenSim::Material const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Material > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = (OpenSim::Material *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Material > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Material > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Material > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  OpenSim::Material *arg3 = (OpenSim::Material *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Material **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = (OpenSim::Material *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Material const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  OpenSim::Material *arg3 = (OpenSim::Material *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Material **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Material *)((OpenSim::Set<OpenSim::Material > const *)arg1)->get(arg2);
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Material *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Material > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (OpenSim::Material *)((OpenSim::Set<OpenSim::Material > const *)arg1)->getLast();
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->searchBinary((OpenSim::Material const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->searchBinary((OpenSim::Material const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->searchBinary((OpenSim::Material const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->searchBinary((OpenSim::Material const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Material > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::Material > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::Material > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MaterialSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MaterialSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MaterialSet *)new OpenSim::MaterialSet();
  *(OpenSim::MaterialSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MaterialSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::MaterialSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::MaterialSet *)new OpenSim::MaterialSet((std::string const &)*arg1);
  *(OpenSim::MaterialSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MaterialSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MaterialSet *arg1 = 0 ;
  OpenSim::MaterialSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MaterialSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MaterialSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::MaterialSet *)new OpenSim::MaterialSet((OpenSim::MaterialSet const &)*arg1);
  *(OpenSim::MaterialSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1MaterialSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MaterialSet_1addMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addMaterial(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MaterialSet_1updateMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->updateMaterial(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MaterialSet_1removeMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->removeMaterial(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MaterialSet_1materialExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((OpenSim::MaterialSet const *)arg1)->materialExists((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MaterialSet_1getNumberOfMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  result = (int)((OpenSim::MaterialSet const *)arg1)->getNumberOfMaterials();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MaterialSet_1getMaterialByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  int arg2 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    OpenSim::Material const &_result_ref = ((OpenSim::MaterialSet const *)arg1)->getMaterialByIndex(arg2);
    result = (OpenSim::Material *) &_result_ref;
  }
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MaterialSet_1getMaterialByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    OpenSim::Material const &_result_ref = ((OpenSim::MaterialSet const *)arg1)->getMaterialByName((char const *)arg2);
    result = (OpenSim::Material *) &_result_ref;
  }
  *(OpenSim::Material **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1StateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (OpenSim::StateVector *)new OpenSim::StateVector(arg1,arg2,(double const *)arg3);
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1StateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  int arg2 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::StateVector *)new OpenSim::StateVector(arg1,arg2);
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1StateVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (OpenSim::StateVector *)new OpenSim::StateVector(arg1);
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1StateVector_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::StateVector *)new OpenSim::StateVector();
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1StateVector_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::StateVector *arg1 = 0 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::StateVector const & reference is null");
    return 0;
  } 
  result = (OpenSim::StateVector *)new OpenSim::StateVector((OpenSim::StateVector const &)*arg1);
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1StateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jdoubleArray jarg4) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  int arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->setStates(arg2,arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  result = (int)((OpenSim::StateVector const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTime(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  result = (double)((OpenSim::StateVector const *)arg1)->getTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1getDataValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getDataValue(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1setDataValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  (arg1)->setDataValue(arg2,*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = (arg1)->getData();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1shiftTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->shiftTime(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1scaleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->scaleTime(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->add(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->add(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1subtract_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->subtract(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1subtract_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->subtract(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1subtract_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->subtract(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1multiply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->multiply(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1multiply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->multiply(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1multiply_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->multiply(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1divide_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->divide(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1divide_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->divide(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1divide_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->divide(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  ((OpenSim::StateVector const *)arg1)->print();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  result = (int)((OpenSim::StateVector const *)arg1)->print(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1DEFAULT_1CAPACITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)Storage_DEFAULT_CAPACITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1LARGE_1NEGATIVE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)OpenSim::Storage::LARGE_NEGATIVE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1LARGE_1POSITIVE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)OpenSim::Storage::LARGE_POSITIVE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1DEFAULT_1HEADER_1TOKEN_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      OpenSim::Storage::DEFAULT_HEADER_TOKEN = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)OpenSim::Storage::DEFAULT_HEADER_TOKEN, (const char *)arg1);
    } else {
      OpenSim::Storage::DEFAULT_HEADER_TOKEN = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1DEFAULT_1HEADER_1TOKEN_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)OpenSim::Storage::DEFAULT_HEADER_TOKEN;
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1DEFAULT_1HEADER_1SEPARATOR_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      OpenSim::Storage::DEFAULT_HEADER_SEPARATOR = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)OpenSim::Storage::DEFAULT_HEADER_SEPARATOR, (const char *)arg1);
    } else {
      OpenSim::Storage::DEFAULT_HEADER_SEPARATOR = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1DEFAULT_1HEADER_1SEPARATOR_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)OpenSim::Storage::DEFAULT_HEADER_SEPARATOR;
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string *arg2 = 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Storage *)new OpenSim::Storage(arg1,(std::string const &)*arg2);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (OpenSim::Storage *)new OpenSim::Storage(arg1);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Storage *)new OpenSim::Storage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Storage *)new OpenSim::Storage((std::string const &)*arg1);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Storage *)new OpenSim::Storage((OpenSim::Storage const &)*arg1,arg2);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  result = (OpenSim::Storage *)new OpenSim::Storage((OpenSim::Storage const &)*arg1);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (OpenSim::Storage *)new OpenSim::Storage((OpenSim::Storage const &)*arg1,arg2,arg3,(char const *)arg4);
  *(OpenSim::Storage **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Storage *)new OpenSim::Storage((OpenSim::Storage const &)*arg1,arg2,arg3);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Storage const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Storage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (int)((OpenSim::Storage const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getSmallestNumberOfStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (int)((OpenSim::Storage const *)arg1)->getSmallestNumberOfStates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::StateVector *)((OpenSim::Storage const *)arg1)->getStateVector(arg2);
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getLastStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (OpenSim::StateVector *)((OpenSim::Storage const *)arg1)->getLastStateVector();
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getFirstTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (double)((OpenSim::Storage const *)arg1)->getFirstTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getLastTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (double)((OpenSim::Storage const *)arg1)->getLastTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Storage const *)arg1)->getTime(arg2,*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Storage const *)arg1)->getTime(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getTimeColumn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double **arg2 = 0 ;
  int arg3 ;
  int result;
  double *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  temp2 = *(double **)&jarg2;
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getTimeColumn(*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getTimeColumn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double **arg2 = 0 ;
  int result;
  double *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  temp2 = *(double **)&jarg2;
  arg2 = &temp2; 
  result = (int)(arg1)->getTimeColumn(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getTimeColumn_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  (arg1)->getTimeColumn(*arg2,(double const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getTimeColumn_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->getTimeColumn(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1addKeyValuePair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addKeyValuePair((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getValueForKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  ((OpenSim::Storage const *)arg1)->getValueForKey((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1hasKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((OpenSim::Storage const *)arg1)->hasKey((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Storage const *)arg1)->getData(arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double **arg5 = (double **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(double ***)&jarg5; 
  result = (int)((OpenSim::Storage const *)arg1)->getData(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)((OpenSim::Storage const *)arg1)->getData(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double ***)&jarg4; 
  result = (int)((OpenSim::Storage const *)arg1)->getData(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getDataAtTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double ***)&jarg4; 
  result = (int)((OpenSim::Storage const *)arg1)->getDataAtTime(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getDataAtTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)((OpenSim::Storage const *)arg1)->getDataAtTime(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getDataColumn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double **arg3 = 0 ;
  int result;
  double *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(double **)&jarg3;
  arg3 = &temp3; 
  result = (int)((OpenSim::Storage const *)arg1)->getDataColumn(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1setDataColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  OpenSim::Array<double > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->setDataColumn(arg2,(OpenSim::Array<double > const &)*arg3);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getDataColumn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  double **arg3 = 0 ;
  int result;
  double *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = *(double **)&jarg3;
  arg3 = &temp3; 
  result = (int)((OpenSim::Storage const *)arg1)->getDataColumn((std::string const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getDataColumn_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<double > *arg3 = 0 ;
  double *arg4 = 0 ;
  double temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  temp4 = (double)jarg4; 
  arg4 = &temp4; 
  (arg1)->getDataColumn((std::string const &)*arg2,*arg3,(double const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getDataColumn_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<double > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->getDataColumn((std::string const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1setStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStepInterval(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (int)((OpenSim::Storage const *)arg1)->getStepInterval();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (int)((OpenSim::Storage const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1setWriteSIMMHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setWriteSIMMHeader(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getWriteSIMMHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (bool)((OpenSim::Storage const *)arg1)->getWriteSIMMHeader();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1setHeaderToken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setHeaderToken((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getHeaderToken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Storage const *)arg1)->getHeaderToken();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getStateIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Storage const *)arg1)->getStateIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getStateIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Storage const *)arg1)->getStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1setColumnLabels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > const & reference is null");
    return ;
  } 
  (arg1)->setColumnLabels((OpenSim::Array<std::string > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getColumnLabels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  {
    OpenSim::Array<std::string > const &_result_ref = ((OpenSim::Storage const *)arg1)->getColumnLabels();
    result = (OpenSim::Array<std::string > *) &_result_ref;
  }
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1reset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->reset(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1reset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (int)(arg1)->reset();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1reset_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->reset(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::StateVector const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->append((OpenSim::StateVector const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::StateVector const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::StateVector const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Array<OpenSim::StateVector > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Array<OpenSim::StateVector > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<OpenSim::StateVector > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<OpenSim::StateVector > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1append_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jlong jarg4, jboolean jarg5) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  bool arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (int)(arg1)->append(arg2,arg3,(double const *)arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1append_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)(arg1)->append(arg2,arg3,(double const *)arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)(arg1)->store(arg2,arg3,arg4,(double const *)arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1shiftTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->shiftTime(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1scaleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->scaleTime(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->add(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->add(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1add_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->add(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1subtract_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->subtract(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1subtract_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->subtract(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1subtract_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->subtract(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1subtract_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->subtract(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1multiply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->multiply(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1multiplyColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->multiplyColumn(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1multiply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->multiply(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1multiply_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->multiply(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1multiply_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->multiply(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1divide_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->divide(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1divide_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->divide(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1divide_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->divide(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1divide_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->divide(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1integrate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Storage *)((OpenSim::Storage const *)arg1)->integrate(arg2,arg3);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1integrate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Storage *)((OpenSim::Storage const *)arg1)->integrate(arg2);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1integrate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::Storage const *)arg1)->integrate();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1integrate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (OpenSim::Storage *)((OpenSim::Storage const *)arg1)->integrate(arg2,arg3);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1computeArea_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)((OpenSim::Storage const *)arg1)->computeArea(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1computeArea_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)((OpenSim::Storage const *)arg1)->computeArea(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1computeAverage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)((OpenSim::Storage const *)arg1)->computeAverage(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1computeAverage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)((OpenSim::Storage const *)arg1)->computeAverage(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1pad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->pad(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1lowpassFIR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->lowpassFIR(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1addToRdStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->addToRdStorage(*arg2,arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1findIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)((OpenSim::Storage const *)arg1)->findIndex(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1findIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (int)((OpenSim::Storage const *)arg1)->findIndex(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1resample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->resample(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  ((OpenSim::Storage const *)arg1)->print();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (bool)((OpenSim::Storage const *)arg1)->print((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1print_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)((OpenSim::Storage const *)arg1)->print((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1print_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((OpenSim::Storage const *)arg1)->print((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1print_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jstring jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (int)((OpenSim::Storage const *)arg1)->print((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1print_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  result = (int)((OpenSim::Storage const *)arg1)->print((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1printResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  OpenSim::Storage::printResult((OpenSim::Storage const *)arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1LARGE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)OpenSim::AbstractActuator::LARGE;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AbstractActuator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::AbstractActuator const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  OpenSim::AbstractActuator *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = *(OpenSim::AbstractActuator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractActuator & reference is null");
    return ;
  } 
  (arg1)->copy(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  result = (OpenSim::Model *)((OpenSim::AbstractActuator const *)arg1)->getModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getNumControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  result = (int)((OpenSim::AbstractActuator const *)arg1)->getNumControls();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::AbstractActuator const *)arg1)->getControlName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::AbstractActuator const *)arg1)->getControlIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1setControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControl(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setControls((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::AbstractActuator const *)arg1)->getControl(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractActuator const *)arg1)->getControls(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getNumStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  result = (int)((OpenSim::AbstractActuator const *)arg1)->getNumStates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::AbstractActuator const *)arg1)->getStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::AbstractActuator const *)arg1)->getStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1setState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setState(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::AbstractActuator const *)arg1)->getState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractActuator const *)arg1)->getStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getNumPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  result = (int)((OpenSim::AbstractActuator const *)arg1)->getNumPseudoStates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::AbstractActuator const *)arg1)->getPseudoStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::AbstractActuator const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1setPseudoState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setPseudoState(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getPseudoState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::AbstractActuator const *)arg1)->getPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractActuator const *)arg1)->getPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getDisplayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  result = (OpenSim::VisibleObject *)((OpenSim::AbstractActuator const *)arg1)->getDisplayer();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1updateGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  (arg1)->updateGeometry();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::AbstractActuator::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::AbstractActuator const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1safeDownCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::AbstractActuator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::AbstractActuator *)OpenSim::AbstractActuator::safeDownCast(arg1);
  *(OpenSim::AbstractActuator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1copy_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getAppliesForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  result = (bool)((OpenSim::AbstractActuator const *)arg1)->getAppliesForce();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1setForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setForce(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  result = (double)((OpenSim::AbstractActuator const *)arg1)->getForce();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  result = (double)((OpenSim::AbstractActuator const *)arg1)->getSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  result = (double)((OpenSim::AbstractActuator const *)arg1)->getPower();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1getStress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  result = (double)((OpenSim::AbstractActuator const *)arg1)->getStress();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdouble jarg3) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  double *arg2 ;
  double arg3 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (double)jarg3; 
  (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  (arg1)->computeActuation();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1computeStateDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->computeStateDerivatives(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1computeEquilibrium(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  (arg1)->computeEquilibrium();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1updatePseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  (arg1)->updatePseudoStates();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  (arg1)->apply();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  result = (bool)((OpenSim::AbstractActuator const *)arg1)->check();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1preScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = *(ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->preScale((ScaleSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = *(ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->scale((ScaleSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractActuator_1postScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::AbstractActuator *arg1 = (OpenSim::AbstractActuator *) 0 ;
  ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractActuator **)&jarg1; 
  arg2 = *(ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->postScale((ScaleSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetActuators(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetActuators_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::AbstractActuator > *)new OpenSim::Set<OpenSim::AbstractActuator >();
  *(OpenSim::Set<OpenSim::AbstractActuator > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetActuators_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::AbstractActuator > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::AbstractActuator > *)new OpenSim::Set<OpenSim::AbstractActuator >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::AbstractActuator > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetActuators_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::AbstractActuator > *)new OpenSim::Set<OpenSim::AbstractActuator >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::AbstractActuator > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetActuators_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::AbstractActuator > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::AbstractActuator > *)new OpenSim::Set<OpenSim::AbstractActuator >((OpenSim::Set<OpenSim::AbstractActuator > const &)*arg1);
  *(OpenSim::Set<OpenSim::AbstractActuator > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  OpenSim::AbstractActuator *arg2 = (OpenSim::AbstractActuator *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = *(OpenSim::AbstractActuator **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->getIndex((OpenSim::AbstractActuator const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  OpenSim::AbstractActuator *arg2 = (OpenSim::AbstractActuator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = *(OpenSim::AbstractActuator **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->getIndex((OpenSim::AbstractActuator const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  OpenSim::AbstractActuator *arg2 = (OpenSim::AbstractActuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = *(OpenSim::AbstractActuator **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::AbstractActuator > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::AbstractActuator > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::AbstractActuator > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  int arg2 ;
  OpenSim::AbstractActuator *arg3 = (OpenSim::AbstractActuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractActuator **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  OpenSim::AbstractActuator *arg2 = (OpenSim::AbstractActuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = *(OpenSim::AbstractActuator **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::AbstractActuator const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  int arg2 ;
  OpenSim::AbstractActuator *arg3 = (OpenSim::AbstractActuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractActuator **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  int arg2 ;
  OpenSim::AbstractActuator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::AbstractActuator *)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->get(arg2);
  *(OpenSim::AbstractActuator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::AbstractActuator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::AbstractActuator *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::AbstractActuator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  OpenSim::AbstractActuator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  result = (OpenSim::AbstractActuator *)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->getLast();
  *(OpenSim::AbstractActuator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  OpenSim::AbstractActuator *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = *(OpenSim::AbstractActuator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractActuator const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->searchBinary((OpenSim::AbstractActuator const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  OpenSim::AbstractActuator *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = *(OpenSim::AbstractActuator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractActuator const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->searchBinary((OpenSim::AbstractActuator const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  OpenSim::AbstractActuator *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = *(OpenSim::AbstractActuator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractActuator const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->searchBinary((OpenSim::AbstractActuator const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  OpenSim::AbstractActuator *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = *(OpenSim::AbstractActuator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractActuator const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->searchBinary((OpenSim::AbstractActuator const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractActuator > *arg1 = (OpenSim::Set<OpenSim::AbstractActuator > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::AbstractActuator > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ActuatorSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ActuatorSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ActuatorSet *)new OpenSim::ActuatorSet();
  *(OpenSim::ActuatorSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ActuatorSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::ActuatorSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::ActuatorSet *)new OpenSim::ActuatorSet((std::string const &)*arg1,arg2);
  *(OpenSim::ActuatorSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ActuatorSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::ActuatorSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::ActuatorSet *)new OpenSim::ActuatorSet((std::string const &)*arg1);
  *(OpenSim::ActuatorSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ActuatorSet_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = 0 ;
  OpenSim::ActuatorSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ActuatorSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::ActuatorSet *)new OpenSim::ActuatorSet((OpenSim::ActuatorSet const &)*arg1);
  *(OpenSim::ActuatorSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ActuatorSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::ActuatorSet const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::ActuatorSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = *(OpenSim::ActuatorSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ActuatorSet const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::ActuatorSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1updateGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  (arg1)->updateGeometry();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (OpenSim::Model *)((OpenSim::ActuatorSet const *)arg1)->getModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::AbstractActuator *arg2 = (OpenSim::AbstractActuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = *(OpenSim::AbstractActuator **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::ActuatorSet *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = *(OpenSim::ActuatorSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ActuatorSet & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->append(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::ActuatorSet *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = *(OpenSim::ActuatorSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ActuatorSet & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  OpenSim::AbstractActuator *arg3 = (OpenSim::AbstractActuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractActuator **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1changeActuatorType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::AbstractActuator *arg2 = (OpenSim::AbstractActuator *) 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = *(OpenSim::AbstractActuator **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->changeActuatorType(arg2,(std::string const &)*arg3);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getNumControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getNumControls();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1mapActuatorToControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapActuatorToControl(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1mapControlToActuator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapControlToActuator(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1mapControlToActuator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  OpenSim::AbstractActuator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (OpenSim::AbstractActuator *)((OpenSim::ActuatorSet const *)arg1)->mapControlToActuator(arg2,*arg3);
  *(OpenSim::AbstractActuator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getControlIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::ActuatorSet const *)arg1)->getControlName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControl(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setControl((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setControls((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getControl(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getControl((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ActuatorSet const *)arg1)->getControls(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getNumStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getNumStates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1mapActuatorToState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapActuatorToState(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1mapStateToActuator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapStateToActuator(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1mapStateToActuator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  OpenSim::AbstractActuator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (OpenSim::AbstractActuator *)((OpenSim::ActuatorSet const *)arg1)->mapStateToActuator(arg2,*arg3);
  *(OpenSim::AbstractActuator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::ActuatorSet const *)arg1)->getStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getStateNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::ActuatorSet const *)arg1)->getStateNames(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setState(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setState((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ActuatorSet const *)arg1)->getStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getNumPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getNumPseudoStates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1mapActuatorToPseudoState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapActuatorToPseudoState(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1mapPseudoStateToActuator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapPseudoStateToActuator(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1mapPseudoStateToActuator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  OpenSim::AbstractActuator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (OpenSim::AbstractActuator *)((OpenSim::ActuatorSet const *)arg1)->mapPseudoStateToActuator(arg2,*arg3);
  *(OpenSim::AbstractActuator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::ActuatorSet const *)arg1)->getPseudoStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setPseudoState(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setPseudoState((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getPseudoState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ActuatorSet const *)arg1)->getPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setComputeActuationEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setComputeActuationEnabled(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  double arg3 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (double)jarg3; 
  (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  (arg1)->computeActuation();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1computeStateDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->computeStateDerivatives(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1computeEquilibrium(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  (arg1)->computeEquilibrium();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1updatePseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  (arg1)->updatePseudoStates();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  (arg1)->apply();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (bool)((OpenSim::ActuatorSet const *)arg1)->check();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  ((OpenSim::ActuatorSet const *)arg1)->peteTest();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ContactForceSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ContactForceSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ContactForceSet *)new OpenSim::ContactForceSet();
  *(OpenSim::ContactForceSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ContactForceSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::ContactForceSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::ContactForceSet *)new OpenSim::ContactForceSet((std::string const &)*arg1);
  *(OpenSim::ContactForceSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ContactForceSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = 0 ;
  OpenSim::ContactForceSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ContactForceSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::ContactForceSet *)new OpenSim::ContactForceSet((OpenSim::ContactForceSet const &)*arg1);
  *(OpenSim::ContactForceSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ContactForceSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::ContactForceSet const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  OpenSim::ContactForceSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = *(OpenSim::ContactForceSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ContactForceSet const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::ContactForceSet const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  OpenSim::ContactForce *arg2 = (OpenSim::ContactForce *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = *(OpenSim::ContactForce **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  OpenSim::ContactForce *arg3 = (OpenSim::ContactForce *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::ContactForce **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1getContactBodyA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::AbstractBody *)((OpenSim::ContactForceSet const *)arg1)->getContactBodyA(arg2);
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1getContactBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::AbstractBody *)((OpenSim::ContactForceSet const *)arg1)->getContactBodyB(arg2);
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1setContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setContactPointA(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1getContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::ContactForceSet const *)arg1)->getContactPointA(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1setContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setContactPointB(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1getContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::ContactForceSet const *)arg1)->getContactPointB(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1getContactForce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::ContactForceSet const *)arg1)->getContactForce(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1getContactNormalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::ContactForceSet const *)arg1)->getContactNormalForce(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1getContactTangentForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::ContactForceSet const *)arg1)->getContactTangentForce(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1getContactStiffness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::ContactForceSet const *)arg1)->getContactStiffness(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1getContactViscosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::ContactForceSet const *)arg1)->getContactViscosity(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1getContactFrictionCorrection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::ContactForceSet const *)arg1)->getContactFrictionCorrection(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1getContactForce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ContactForceSet const *)arg1)->getContactForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1getContactSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ContactForceSet const *)arg1)->getContactSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1getContactPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ContactForceSet const *)arg1)->getContactPower(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  (arg1)->computeContact();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1updatePseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  (arg1)->updatePseudoStates();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  (arg1)->apply();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  result = (bool)((OpenSim::ContactForceSet const *)arg1)->check();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Callback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::Callback *)new OpenSim::Callback(arg1);
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Callback_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Callback *)new OpenSim::Callback();
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Callback_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Callback *arg1 = 0 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Callback **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Callback const & reference is null");
    return 0;
  } 
  result = (OpenSim::Callback *)new OpenSim::Callback((OpenSim::Callback const &)*arg1);
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Callback_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Callback *)new OpenSim::Callback((std::string const &)*arg1,arg2);
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Callback_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Callback *)new OpenSim::Callback((std::string const &)*arg1);
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Callback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Callback const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  result = (OpenSim::Model *)((OpenSim::Callback const *)arg1)->getModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1setOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOn(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1getOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  result = (bool)((OpenSim::Callback const *)arg1)->getOn();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1setStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setStartTime(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1getStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  result = (double)((OpenSim::Callback const *)arg1)->getStartTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1setEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setEndTime(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1getEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  result = (double)((OpenSim::Callback const *)arg1)->getEndTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Callback > *)new OpenSim::Set<OpenSim::Callback >();
  *(OpenSim::Set<OpenSim::Callback > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::Callback > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::Callback > *)new OpenSim::Set<OpenSim::Callback >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::Callback > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetCallback_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Callback > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Callback > *)new OpenSim::Set<OpenSim::Callback >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Callback > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetCallback_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Callback > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Callback > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Callback > *)new OpenSim::Set<OpenSim::Callback >((OpenSim::Set<OpenSim::Callback > const &)*arg1);
  *(OpenSim::Set<OpenSim::Callback > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Callback > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = (OpenSim::Callback *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getIndex((OpenSim::Callback const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = (OpenSim::Callback *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getIndex((OpenSim::Callback const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Callback > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = (OpenSim::Callback *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Callback > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Callback > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Callback > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  OpenSim::Callback *arg3 = (OpenSim::Callback *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Callback **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = (OpenSim::Callback *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Callback const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  OpenSim::Callback *arg3 = (OpenSim::Callback *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Callback **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Callback *)((OpenSim::Set<OpenSim::Callback > const *)arg1)->get(arg2);
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Callback *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Callback > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  result = (OpenSim::Callback *)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getLast();
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Callback const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->searchBinary((OpenSim::Callback const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Callback const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->searchBinary((OpenSim::Callback const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Callback const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->searchBinary((OpenSim::Callback const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Callback const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->searchBinary((OpenSim::Callback const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Callback > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1CallbackSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::CallbackSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::CallbackSet *)new OpenSim::CallbackSet(arg1);
  *(OpenSim::CallbackSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1CallbackSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::CallbackSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::CallbackSet *)new OpenSim::CallbackSet();
  *(OpenSim::CallbackSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1CallbackSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::CallbackSet *arg1 = (OpenSim::CallbackSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::CallbackSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_CallbackSet_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::CallbackSet *arg1 = (OpenSim::CallbackSet *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::CallbackSet **)&jarg1; 
  result = (OpenSim::Model *)(arg1)->getModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_CallbackSet_1setOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::CallbackSet *arg1 = (OpenSim::CallbackSet *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::CallbackSet **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOn(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::IntegCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::IntegCallback *)new OpenSim::IntegCallback(arg1);
  *(OpenSim::IntegCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::IntegCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::IntegCallback *)new OpenSim::IntegCallback();
  *(OpenSim::IntegCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegCallback_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::IntegCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::IntegCallback *)new OpenSim::IntegCallback((std::string const &)*arg1,arg2);
  *(OpenSim::IntegCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegCallback_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::IntegCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::IntegCallback *)new OpenSim::IntegCallback((std::string const &)*arg1);
  *(OpenSim::IntegCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegCallback_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::IntegCallback *arg1 = 0 ;
  OpenSim::IntegCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegCallback **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IntegCallback const & reference is null");
    return 0;
  } 
  result = (OpenSim::IntegCallback *)new OpenSim::IntegCallback((OpenSim::IntegCallback const &)*arg1);
  *(OpenSim::IntegCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1IntegCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::IntegCallback const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1setStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStepInterval(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1getStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  result = (int)((OpenSim::IntegCallback const *)arg1)->getStepInterval();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1begin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1step_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jint jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *arg9 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(void **)&jarg9; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1step_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1end_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrayStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayStorage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (OpenSim::ArrayPtrs<OpenSim::Storage > *)new OpenSim::ArrayPtrs<OpenSim::Storage >(arg1);
  *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayStorage_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ArrayPtrs<OpenSim::Storage > *)new OpenSim::ArrayPtrs<OpenSim::Storage >();
  *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayStorage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Storage > const & reference is null");
    return 0;
  } 
  result = (OpenSim::ArrayPtrs<OpenSim::Storage > *)new OpenSim::ArrayPtrs<OpenSim::Storage >((OpenSim::ArrayPtrs<OpenSim::Storage > const &)*arg1);
  *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  result = (bool)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getIndex((OpenSim::Storage const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getIndex((OpenSim::Storage const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Storage > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  OpenSim::Storage *arg3 = (OpenSim::Storage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Storage **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Storage const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  OpenSim::Storage *arg3 = (OpenSim::Storage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Storage **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Storage *)(arg1)->get(arg2);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Storage *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getLast();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->searchBinary((OpenSim::Storage const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->searchBinary((OpenSim::Storage const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->searchBinary((OpenSim::Storage const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->searchBinary((OpenSim::Storage const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Analysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::Analysis *)new OpenSim::Analysis(arg1);
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Analysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Analysis *)new OpenSim::Analysis();
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Analysis_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Analysis *)new OpenSim::Analysis((std::string const &)*arg1,arg2);
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Analysis_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Analysis *)new OpenSim::Analysis((std::string const &)*arg1);
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Analysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Analysis_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Analysis *arg1 = 0 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Analysis **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Analysis const & reference is null");
    return 0;
  } 
  result = (OpenSim::Analysis *)new OpenSim::Analysis((OpenSim::Analysis const &)*arg1);
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Analysis const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1setInDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInDegrees(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1getInDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  result = (bool)((OpenSim::Analysis const *)arg1)->getInDegrees();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1setColumnLabels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > const & reference is null");
    return ;
  } 
  (arg1)->setColumnLabels((OpenSim::Array<std::string > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1getColumnLabels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  {
    OpenSim::Array<std::string > const &_result_ref = ((OpenSim::Analysis const *)arg1)->getColumnLabels();
    result = (OpenSim::Array<std::string > *) &_result_ref;
  }
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1getStorageList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  {
    OpenSim::ArrayPtrs<OpenSim::Storage > &_result_ref = (arg1)->getStorageList();
    result = (OpenSim::ArrayPtrs<OpenSim::Storage > *) &_result_ref;
  }
  *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1proceed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->proceed(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1proceed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  result = (bool)(arg1)->proceed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  jint jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4) {
  jint jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetAnalysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Analysis > *)new OpenSim::Set<OpenSim::Analysis >();
  *(OpenSim::Set<OpenSim::Analysis > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetAnalysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::Analysis > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::Analysis > *)new OpenSim::Set<OpenSim::Analysis >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::Analysis > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetAnalysis_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Analysis > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Analysis > *)new OpenSim::Set<OpenSim::Analysis >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Analysis > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetAnalysis_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Analysis > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Analysis > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Analysis > *)new OpenSim::Set<OpenSim::Analysis >((OpenSim::Set<OpenSim::Analysis > const &)*arg1);
  *(OpenSim::Set<OpenSim::Analysis > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = (OpenSim::Analysis *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getIndex((OpenSim::Analysis const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = (OpenSim::Analysis *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getIndex((OpenSim::Analysis const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = (OpenSim::Analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Analysis > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Analysis > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Analysis > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  OpenSim::Analysis *arg3 = (OpenSim::Analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Analysis **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = (OpenSim::Analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Analysis const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  OpenSim::Analysis *arg3 = (OpenSim::Analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Analysis **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Analysis *)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->get(arg2);
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Analysis *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  result = (OpenSim::Analysis *)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getLast();
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Analysis const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->searchBinary((OpenSim::Analysis const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Analysis const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->searchBinary((OpenSim::Analysis const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Analysis const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->searchBinary((OpenSim::Analysis const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Analysis const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->searchBinary((OpenSim::Analysis const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalysisSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::AnalysisSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::AnalysisSet *)new OpenSim::AnalysisSet(arg1);
  *(OpenSim::AnalysisSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalysisSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::AnalysisSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::AnalysisSet *)new OpenSim::AnalysisSet();
  *(OpenSim::AnalysisSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalysisSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::AnalysisSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::AnalysisSet *)new OpenSim::AnalysisSet((std::string const &)*arg1);
  *(OpenSim::AnalysisSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalysisSet_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AnalysisSet *arg1 = 0 ;
  OpenSim::AnalysisSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AnalysisSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::AnalysisSet *)new OpenSim::AnalysisSet((OpenSim::AnalysisSet const &)*arg1);
  *(OpenSim::AnalysisSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AnalysisSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::AnalysisSet const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  result = (OpenSim::Model *)(arg1)->getModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1setOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOn(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  (arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1begin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  (arg1)->begin(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1step_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *arg9 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(void **)&jarg9; 
  (arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1step_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  (arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  (arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1end_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  (arg1)->end(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  (arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->printResults((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Model_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Model *)new OpenSim::Model();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Model_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  try {
    result = (OpenSim::Model *)new OpenSim::Model((std::string const &)*arg1);
  }
  catch(OpenSim::Exception &_e) {
    {
      jclass excep = jenv->FindClass("java/io/IOException");
      if (excep)
      jenv->ThrowNew(excep, (_e).getMessage());
      return 0;
    }
  }
  
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Model_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Model const & reference is null");
    return 0;
  } 
  result = (OpenSim::Model *)new OpenSim::Model((OpenSim::Model const &)*arg1);
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Model(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Model const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Model *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Model const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::Model const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setupProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  (arg1)->setupProperties();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::Model *)(arg1)->clone();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  try {
    (arg1)->setup();
  }
  catch(OpenSim::Exception &_e) {
    {
      jclass excep = jenv->FindClass("java/io/IOException");
      if (excep)
      jenv->ThrowNew(excep, (_e).getMessage());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1builtOK(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (bool)(arg1)->builtOK();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getInputFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Model const *)arg1)->getInputFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getLengthUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  Units *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  {
    Units const &_result_ref = ((OpenSim::Model const *)arg1)->getLengthUnits();
    result = (Units *) &_result_ref;
  }
  *(Units **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getForceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  Units *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  {
    Units const &_result_ref = ((OpenSim::Model const *)arg1)->getForceUnits();
    result = (Units *) &_result_ref;
  }
  *(Units **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getGravity(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  bool result;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return 0; 
  result = (bool)(arg1)->setGravity(arg2);
  jresult = (jboolean)result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNumControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNumControls();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNumStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNumStates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNumPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNumPseudoStates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNumBodies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNumBodies();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNumJoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNumJoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNumCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNumCoordinates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNumSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNumSpeeds();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNumActuators(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNumActuators();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNumContacts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNumContacts();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNumAnalyses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNumAnalyses();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNumConfigurations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNumConfigurations();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1hasDynamicsEngine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (bool)((OpenSim::Model const *)arg1)->hasDynamicsEngine();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getDynamicsEngine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::AbstractDynamicsEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  {
    OpenSim::AbstractDynamicsEngine &_result_ref = ((OpenSim::Model const *)arg1)->getDynamicsEngine();
    result = (OpenSim::AbstractDynamicsEngine *) &_result_ref;
  }
  *(OpenSim::AbstractDynamicsEngine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setDynamicsEngine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractDynamicsEngine & reference is null");
    return ;
  } 
  (arg1)->setDynamicsEngine(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->set(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTime(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (double)((OpenSim::Model const *)arg1)->getTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setTimeNormConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTimeNormConstant(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getTimeNormConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (double)((OpenSim::Model const *)arg1)->getTimeNormConstant();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setControls((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControl(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setControl((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getControls(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getControl(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Model const *)arg1)->getControl((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Model const *)arg1)->getControlName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getStateNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Model const *)arg1)->getStateNames(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setInitialStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getInitialStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getPseudoStateNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Model const *)arg1)->getPseudoStateNames(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setInitialPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getInitialPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getActuatorSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::ActuatorSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::ActuatorSet *)(arg1)->getActuatorSet();
  *(OpenSim::ActuatorSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getContactSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::ContactForceSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::ContactForceSet *)(arg1)->getContactSet();
  *(OpenSim::ContactForceSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getIntegCallbackSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::IntegCallbackSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::IntegCallbackSet *)(arg1)->getIntegCallbackSet();
  *(OpenSim::IntegCallbackSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1addIntegCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::IntegCallback *arg2 = (OpenSim::IntegCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::IntegCallback **)&jarg2; 
  (arg1)->addIntegCallback(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1removeIntegCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::IntegCallback *arg2 = (OpenSim::IntegCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::IntegCallback **)&jarg2; 
  (arg1)->removeIntegCallback(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getDerivCallbackSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::DerivCallbackSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::DerivCallbackSet *)(arg1)->getDerivCallbackSet();
  *(OpenSim::DerivCallbackSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1addDerivCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::DerivCallback *arg2 = (OpenSim::DerivCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::DerivCallback **)&jarg2; 
  (arg1)->addDerivCallback(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getAnalysisSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::AnalysisSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::AnalysisSet *)(arg1)->getAnalysisSet();
  *(OpenSim::AnalysisSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1addAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Analysis *arg2 = (OpenSim::Analysis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2; 
  (arg1)->addAnalysis(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1computeDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->computeDerivatives(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1computeAuxiliaryDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->computeAuxiliaryDerivatives(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1computeEquilibriumForAuxiliaryStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->computeEquilibriumForAuxiliaryStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1scale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  ScaleSet *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ScaleSet const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->scale((ScaleSet const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1scale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  ScaleSet *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ScaleSet const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->scale((ScaleSet const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1scale_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  ScaleSet *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ScaleSet const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->scale((ScaleSet const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1printBasicInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  ((OpenSim::Model const *)arg1)->printBasicInfo(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1printDetailedInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  ((OpenSim::Model const *)arg1)->printDetailedInfo(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  ((OpenSim::Model const *)arg1)->peteTest();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1kinTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  (arg1)->kinTest();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Control(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setIsModelControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsModelControl(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getIsModelControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (bool)((OpenSim::Control const *)arg1)->getIsModelControl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setExtrapolate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setExtrapolate(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getExtrapolate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (bool)((OpenSim::Control const *)arg1)->getExtrapolate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setFilterOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setFilterOn(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getFilterOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (bool)((OpenSim::Control const *)arg1)->getFilterOn();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getNumParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (int)((OpenSim::Control const *)arg1)->getNumParameters();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setDefaultParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDefaultParameterMin(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getDefaultParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (double)((OpenSim::Control const *)arg1)->getDefaultParameterMin();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setDefaultParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDefaultParameterMax(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getDefaultParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (double)((OpenSim::Control const *)arg1)->getDefaultParameterMax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterMin(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Control const *)arg1)->getParameterMin(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterMax(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Control const *)arg1)->getParameterMax(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getParameterTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Control const *)arg1)->getParameterTime(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getParameterNeighborhood(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = *(double **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  ((OpenSim::Control const *)arg1)->getParameterNeighborhood(arg2,*arg3,*arg4);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getParameterList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  OpenSim::Array<int > *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getParameterList(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getParameterList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::Array<int > *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(OpenSim::Array<int > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getParameterList(arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Control const *)arg1)->getParameterValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterValue(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getControlValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getControlValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (double)(arg1)->getControlValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValue(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getControlValueMin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValueMin(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getControlValueMin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (double)(arg1)->getControlValueMin();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setControlValueMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValueMin(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getControlValueMax_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValueMax(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getControlValueMax_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (double)(arg1)->getControlValueMax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setControlValueMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValueMax(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getFirstTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (double)((OpenSim::Control const *)arg1)->getFirstTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getLastTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (double)((OpenSim::Control const *)arg1)->getLastTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1simplify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  OpenSim::PropertySet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = *(OpenSim::PropertySet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PropertySet const & reference is null");
    return ;
  } 
  (arg1)->simplify((OpenSim::PropertySet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->filter(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetControls(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetControls_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Control > *)new OpenSim::Set<OpenSim::Control >();
  *(OpenSim::Set<OpenSim::Control > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetControls_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::Control > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::Control > *)new OpenSim::Set<OpenSim::Control >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::Control > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetControls_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Control > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Control > *)new OpenSim::Set<OpenSim::Control >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Control > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetControls_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Control > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Control > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Control > *)new OpenSim::Set<OpenSim::Control >((OpenSim::Set<OpenSim::Control > const &)*arg1);
  *(OpenSim::Set<OpenSim::Control > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Control > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Control > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = (OpenSim::Control *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->getIndex((OpenSim::Control const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = (OpenSim::Control *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->getIndex((OpenSim::Control const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Control > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = (OpenSim::Control *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Control > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Control > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Control > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  OpenSim::Control *arg3 = (OpenSim::Control *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Control **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = (OpenSim::Control *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Control const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  OpenSim::Control *arg3 = (OpenSim::Control *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Control **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  OpenSim::Control *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Control *)((OpenSim::Set<OpenSim::Control > const *)arg1)->get(arg2);
  *(OpenSim::Control **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Control *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Control *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Control **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Control > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  result = (OpenSim::Control *)((OpenSim::Set<OpenSim::Control > const *)arg1)->getLast();
  *(OpenSim::Control **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Control const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->searchBinary((OpenSim::Control const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Control const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->searchBinary((OpenSim::Control const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Control const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->searchBinary((OpenSim::Control const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Control const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->searchBinary((OpenSim::Control const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Control > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::Control > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::Control > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ControlSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ControlSet *)new OpenSim::ControlSet();
  *(OpenSim::ControlSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::ControlSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::ControlSet *)new OpenSim::ControlSet((std::string const &)*arg1);
  *(OpenSim::ControlSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ControlSet *arg1 = 0 ;
  OpenSim::ControlSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ControlSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::ControlSet *)new OpenSim::ControlSet((OpenSim::ControlSet const &)*arg1);
  *(OpenSim::ControlSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ControlSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::ControlSet const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getSize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((OpenSim::ControlSet const *)arg1)->getSize(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getSize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  result = (int)((OpenSim::ControlSet const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getControlList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenSim::Array<int > *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(OpenSim::Array<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  ((OpenSim::ControlSet const *)arg1)->getControlList((char const *)arg2,*arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getControlList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenSim::Array<int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(OpenSim::Array<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getControlList((char const *)arg2,*arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getControlValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdoubleArray jarg3, jboolean jarg4) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  double *arg3 ;
  bool arg4 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = jarg4 ? true : false; 
  ((OpenSim::ControlSet const *)arg1)->getControlValues(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getControlValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdoubleArray jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::ControlSet const *)arg1)->getControlValues(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getControlValues_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  OpenSim::Array<double > *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  ((OpenSim::ControlSet const *)arg1)->getControlValues(arg2,*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getControlValues_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  OpenSim::Array<double > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getControlValues(arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setControlValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdoubleArray jarg3, jboolean jarg4) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  double *arg3 ;
  bool arg4 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setControlValues(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setControlValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdoubleArray jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setControlValues(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setControlValues_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  OpenSim::Array<double > *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->setControlValues(arg2,(OpenSim::Array<double > const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setControlValues_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  OpenSim::Array<double > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->setControlValues(arg2,(OpenSim::Array<double > const &)*arg3);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getNumParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((OpenSim::ControlSet const *)arg1)->getNumParameters(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getNumParameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  result = (int)((OpenSim::ControlSet const *)arg1)->getNumParameters();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<int > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  ((OpenSim::ControlSet const *)arg1)->getParameterList(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getParameterList(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  OpenSim::Array<int > *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  ((OpenSim::ControlSet const *)arg1)->getParameterList(arg2,*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterList_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  OpenSim::Array<int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getParameterList(arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterList_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::Array<int > *arg4 = 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(OpenSim::Array<int > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  ((OpenSim::ControlSet const *)arg1)->getParameterList(arg2,arg3,*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterList_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::Array<int > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(OpenSim::Array<int > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getParameterList(arg2,arg3,*arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterMins_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  OpenSim::Array<int > *arg3 = (OpenSim::Array<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Array<int > **)&jarg3; 
  ((OpenSim::ControlSet const *)arg1)->getParameterMins(*arg2,(OpenSim::Array<int > const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterMins_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getParameterMins(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterMaxs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  OpenSim::Array<int > *arg3 = (OpenSim::Array<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Array<int > **)&jarg3; 
  ((OpenSim::ControlSet const *)arg1)->getParameterMaxs(*arg2,(OpenSim::Array<int > const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterMaxs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getParameterMaxs(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double *arg2 ;
  OpenSim::Array<int > *arg3 = (OpenSim::Array<int > *) 0 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = *(OpenSim::Array<int > **)&jarg3; 
  ((OpenSim::ControlSet const *)arg1)->getParameterValues(arg2,(OpenSim::Array<int > const *)arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ControlSet const *)arg1)->getParameterValues(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterValues_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  OpenSim::Array<int > *arg3 = (OpenSim::Array<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Array<int > **)&jarg3; 
  ((OpenSim::ControlSet const *)arg1)->getParameterValues(*arg2,(OpenSim::Array<int > const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterValues_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getParameterValues(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setParameterValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double *arg2 ;
  OpenSim::Array<int > *arg3 = (OpenSim::Array<int > *) 0 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = *(OpenSim::Array<int > **)&jarg3; 
  (arg1)->setParameterValues((double const (*))arg2,(OpenSim::Array<int > const *)arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setParameterValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setParameterValues((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setParameterValues_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  OpenSim::Array<int > *arg3 = (OpenSim::Array<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Array<int > **)&jarg3; 
  (arg1)->setParameterValues((OpenSim::Array<double > const &)*arg2,(OpenSim::Array<int > const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setParameterValues_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->setParameterValues((OpenSim::Array<double > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1simplify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::PropertySet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::PropertySet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PropertySet const & reference is null");
    return ;
  } 
  (arg1)->simplify((OpenSim::PropertySet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->filter(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1constructStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (OpenSim::Storage *)(arg1)->constructStorage(arg2,arg3,arg4,arg5);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1mapParameterToControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ControlSet const *)arg1)->mapParameterToControl(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1mapParameterToParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ControlSet const *)arg1)->mapParameterToParameter(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1generateParameterMaps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  (arg1)->generateParameterMaps();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ControlConstant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::ControlConstant const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getNumParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  result = (int)((OpenSim::ControlConstant const *)arg1)->getNumParameters();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1setParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterMin(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlConstant const *)arg1)->getParameterMin(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1setParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterMax(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlConstant const *)arg1)->getParameterMax(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getParameterTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlConstant const *)arg1)->getParameterTime(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getParameterNeighborhood(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = *(double **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  ((OpenSim::ControlConstant const *)arg1)->getParameterNeighborhood(arg2,*arg3,*arg4);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getParameterList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  OpenSim::Array<int > *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getParameterList(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getParameterList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::Array<int > *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(OpenSim::Array<int > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getParameterList(arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1setParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterValue(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlConstant const *)arg1)->getParameterValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1setControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValue(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getControlValueMin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValueMin(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getControlValueMin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  result = (double)(arg1)->getControlValueMin();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1setControlValueMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValueMin(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getControlValueMax_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValueMax(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getControlValueMax_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  result = (double)(arg1)->getControlValueMax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1setControlValueMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValueMax(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ControlLinear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::ControlLinear const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setUseSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseSteps(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getUseSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (bool)((OpenSim::ControlLinear const *)arg1)->getUseSteps();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setKp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setKp(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getKp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getKp();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setKv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setKv(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getKv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getKv();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getNumParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (int)((OpenSim::ControlLinear const *)arg1)->getNumParameters();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterMin(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getParameterMin(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterMax(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getParameterMax(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getParameterTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getParameterTime(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getParameterNeighborhood(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = *(double **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  ((OpenSim::ControlLinear const *)arg1)->getParameterNeighborhood(arg2,*arg3,*arg4);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getParameterList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  OpenSim::Array<int > *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getParameterList(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getParameterList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::Array<int > *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(OpenSim::Array<int > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getParameterList(arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterValue(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getParameterValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValue(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getControlValueMin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValueMin(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getControlValueMin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (double)(arg1)->getControlValueMin();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setControlValueMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValueMin(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getControlValueMax_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValueMax(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getControlValueMax_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (double)(arg1)->getControlValueMax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setControlValueMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValueMax(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1clearControlNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  (arg1)->clearControlNodes();
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getFirstTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getFirstTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getLastTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getLastTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1simplify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  OpenSim::PropertySet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = *(OpenSim::PropertySet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PropertySet const & reference is null");
    return ;
  } 
  (arg1)->simplify((OpenSim::PropertySet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->filter(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControllerNAME_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)ControllerNAME_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControllerDESCRIP_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)ControllerDESCRIP_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1NAME_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)OpenSim::Controller::NAME_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1DESCRIP_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)OpenSim::Controller::DESCRIP_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Controller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1setNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  (arg1)->setNull();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  result = (OpenSim::Model *)(arg1)->getModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1setOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOn(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1getOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  result = (bool)(arg1)->getOn();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  result = (char *)(arg1)->getName();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setDescription((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  result = (char *)(arg1)->getDescription();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1computeControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  double *arg2 = 0 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  OpenSim::ControlSet *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(OpenSim::ControlSet **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ControlSet & reference is null");
    return ;
  } 
  (arg1)->computeControls(*arg2,arg3,(double const *)arg4,*arg5);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Integrand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  result = (int)((OpenSim::Integrand const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdoubleArray jarg3) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setInitialStates(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Integrand const *)arg1)->getInitialStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1compute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->compute(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1computeJacobian(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  (arg1)->computeJacobian(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5, jdoubleArray jarg6) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double *arg6 ;
  jdouble *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr6, &arg6, jarg6)) return ; 
  (arg1)->initialize(arg2,*arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutDouble(jenv, jarr6, arg6, jarg6); 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1processAfterStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jdouble jarg4, jdoubleArray jarg5) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double arg4 ;
  double *arg5 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  (arg1)->processAfterStep(arg2,*arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1finalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdoubleArray jarg4) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  int arg2 ;
  double arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->finalize(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ModelIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::ModelIntegrand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::ModelIntegrand *)new OpenSim::ModelIntegrand(arg1);
  *(OpenSim::ModelIntegrand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ModelIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (int)((OpenSim::ModelIntegrand const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::Model *)(arg1)->getModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1setControlSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::ControlSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = *(OpenSim::ControlSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ControlSet const & reference is null");
    return ;
  } 
  (arg1)->setControlSet((OpenSim::ControlSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1setControlSetReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::ControlSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = *(OpenSim::ControlSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ControlSet & reference is null");
    return ;
  } 
  (arg1)->setControlSetReference(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getControlSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::ControlSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::ControlSet *)(arg1)->getControlSet();
  *(OpenSim::ControlSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1setControlStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->setControlStorage(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getControlStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getControlStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1setStateStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->setStateStorage(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getStateStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getStateStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1setPseudoStateStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->setPseudoStateStorage(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getPseudoStateStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getPseudoStateStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1setController(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Controller *arg2 = (OpenSim::Controller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = *(OpenSim::Controller **)&jarg2; 
  (arg1)->setController(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getController(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::Controller *)(arg1)->getController();
  *(OpenSim::Controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1constructControlSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::ControlSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::ControlSet *)((OpenSim::ModelIntegrand const *)arg1)->constructControlSet();
  *(OpenSim::ControlSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1convertStatesIntegrandToModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->convertStatesIntegrandToModel(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1convertStatesModelToIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::ModelIntegrand const *)arg1)->convertStatesModelToIntegrand((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdoubleArray jarg3) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  double arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setInitialStates(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ModelIntegrand const *)arg1)->getInitialStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1compute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->compute(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5, jdoubleArray jarg6) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double *arg6 ;
  jdouble *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr6, &arg6, jarg6)) return ; 
  (arg1)->initialize(arg2,*arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutDouble(jenv, jarr6, arg6, jarg6); 
  delete [] arg6; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1processAfterStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jdouble jarg4, jdoubleArray jarg5) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double arg4 ;
  double *arg5 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  (arg1)->processAfterStep(arg2,*arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1finalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdoubleArray jarg4) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  int arg2 ;
  double arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->finalize(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1RKF_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::RKF::status result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::RKF::status)OpenSim::RKF::RKF_NORMAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1RKF_1FINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::RKF::status result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::RKF::status)OpenSim::RKF::RKF_FINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1RKF_1POOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::RKF::status result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::RKF::status)OpenSim::RKF::RKF_POOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1RKF_1NAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::RKF::status result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::RKF::status)OpenSim::RKF::RKF_NAN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1RKF_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::RKF::status result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::RKF::status)OpenSim::RKF::RKF_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1RKF_1TOO_1MANY_1STEPS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::RKF::status result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::RKF::status)OpenSim::RKF::RKF_TOO_MANY_STEPS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1RKF_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::RKF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (OpenSim::RKF *)new OpenSim::RKF(arg1,arg2,arg3);
  *(OpenSim::RKF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1RKF_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double arg2 ;
  OpenSim::RKF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (OpenSim::RKF *)new OpenSim::RKF(arg1,arg2);
  *(OpenSim::RKF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1RKF_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  OpenSim::RKF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  result = (OpenSim::RKF *)new OpenSim::RKF(arg1);
  *(OpenSim::RKF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1RKF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1getIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  OpenSim::Integrand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  result = (OpenSim::Integrand *)(arg1)->getIntegrand();
  *(OpenSim::Integrand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1setTolerance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setTolerance(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1setTolerance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTolerance(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  result = (double)(arg1)->getTolerance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1setFineTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setFineTolerance(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1getFineTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  result = (double)(arg1)->getFineTolerance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1step(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)(arg1)->step(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1stepFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)(arg1)->stepFixed(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegRKF_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::IntegRKF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (OpenSim::IntegRKF *)new OpenSim::IntegRKF(arg1,arg2,arg3);
  *(OpenSim::IntegRKF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegRKF_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double arg2 ;
  OpenSim::IntegRKF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (OpenSim::IntegRKF *)new OpenSim::IntegRKF(arg1,arg2);
  *(OpenSim::IntegRKF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegRKF_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  OpenSim::IntegRKF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  result = (OpenSim::IntegRKF *)new OpenSim::IntegRKF(arg1);
  *(OpenSim::IntegRKF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1IntegRKF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setMinDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMinDT(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getMinDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (double)(arg1)->getMinDT();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setMaxDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxDT(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getMaxDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (double)(arg1)->getMaxDT();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setMaximumNumberOfSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaximumNumberOfSteps(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getMaximumNumberOfSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (int)(arg1)->getMaximumNumberOfSteps();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (int)(arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setUseSpecifiedDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseSpecifiedDT(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getUseSpecifiedDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (bool)((OpenSim::IntegRKF const *)arg1)->getUseSpecifiedDT();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setUseConstantDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseConstantDT(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getUseConstantDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (bool)((OpenSim::IntegRKF const *)arg1)->getUseConstantDT();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDT(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (double)((OpenSim::IntegRKF const *)arg1)->getDT();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getDTArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  {
    OpenSim::Array<double > const &_result_ref = (arg1)->getDTArray();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setDTArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3, jdouble jarg4) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  int arg2 ;
  double *arg3 ;
  double arg4 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = (double)jarg4; 
  (arg1)->setDTArray(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setDTArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setDTArray(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getDTArrayDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getDTArrayDT(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1printDTArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->printDTArray((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1printDTArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  (arg1)->printDTArray();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getTimeArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  {
    OpenSim::Array<double > const &_result_ref = (arg1)->getTimeArray();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getTimeArrayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getTimeArrayTime(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getTimeArrayStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->getTimeArrayStep(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1printTimeArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->printTimeArray((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1printTimeArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  (arg1)->printTimeArray();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1resetTimeAndDTArrays(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->resetTimeAndDTArrays(arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::IntegRKF const *)arg1)->toString();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1integrate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5) {
  jboolean jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = (double)jarg5; 
  result = (bool)(arg1)->integrate(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1integrate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (bool)(arg1)->integrate(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1halt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  (arg1)->halt();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1clearHalt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  (arg1)->clearHalt();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1checkHalt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (bool)(arg1)->checkHalt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Manager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Manager_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Manager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::Manager *)new OpenSim::Manager(arg1);
  *(OpenSim::Manager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Manager_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Manager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Manager *)new OpenSim::Manager();
  *(OpenSim::Manager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1setSessionName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSessionName((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1getSessionName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Manager const *)arg1)->getSessionName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Manager const *)arg1)->toString();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1setIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  OpenSim::ModelIntegrand *arg2 = (OpenSim::ModelIntegrand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = *(OpenSim::ModelIntegrand **)&jarg2; 
  (arg1)->setIntegrand(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1getIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  OpenSim::ModelIntegrand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  result = (OpenSim::ModelIntegrand *)((OpenSim::Manager const *)arg1)->getIntegrand();
  *(OpenSim::ModelIntegrand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1getIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  OpenSim::IntegRKF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  result = (OpenSim::IntegRKF *)((OpenSim::Manager const *)arg1)->getIntegrator();
  *(OpenSim::IntegRKF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1setInitialTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setInitialTime(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1getInitialTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  result = (double)((OpenSim::Manager const *)arg1)->getInitialTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1setFinalTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setFinalTime(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1getFinalTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  result = (double)((OpenSim::Manager const *)arg1)->getFinalTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1setFirstDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setFirstDT(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1getFirstDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  result = (double)((OpenSim::Manager const *)arg1)->getFirstDT();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1initializeStates_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  result = (bool)(arg1)->initializeStates();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1initializeStates_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->initializeStates(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1initializeStates_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->initializeStates(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1integrate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  result = (bool)(arg1)->integrate();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1integrate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->integrate(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1integrate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->integrate(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AbstractTool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  result = (OpenSim::Model *)((OpenSim::AbstractTool const *)arg1)->getModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1setOutputPrecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setOutputPrecision(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1getOutputPrecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  result = (int)((OpenSim::AbstractTool const *)arg1)->getOutputPrecision();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1getAnalysisSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  OpenSim::AnalysisSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  {
    OpenSim::AnalysisSet &_result_ref = ((OpenSim::AbstractTool const *)arg1)->getAnalysisSet();
    result = (OpenSim::AnalysisSet *) &_result_ref;
  }
  *(OpenSim::AnalysisSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1getResultsDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::AbstractTool const *)arg1)->getResultsDir();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1setResultsDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setResultsDir((std::string const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1getStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  result = (double)((OpenSim::AbstractTool const *)arg1)->getStartTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1getFinalTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  result = (double)((OpenSim::AbstractTool const *)arg1)->getFinalTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1getModelFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getModelFilename();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1setModelFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setModelFilename((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1loadModel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ActuatorSet *arg3 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::ActuatorSet **)&jarg3; 
  (arg1)->loadModel((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1loadModel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->loadModel((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1addAnalysisSetToModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  (arg1)->addAnalysisSetToModel();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4) {
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  (arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractTool_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::AbstractTool *arg1 = (OpenSim::AbstractTool *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractTool **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->printResults((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ForwardTool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ForwardTool *arg1 = (OpenSim::ForwardTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ForwardTool **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ForwardTool_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ForwardTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ForwardTool *)new OpenSim::ForwardTool();
  *(OpenSim::ForwardTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ForwardTool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::ForwardTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::ForwardTool *)new OpenSim::ForwardTool((std::string const &)*arg1);
  *(OpenSim::ForwardTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ForwardTool_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ForwardTool *arg1 = 0 ;
  OpenSim::ForwardTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ForwardTool **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ForwardTool const & reference is null");
    return 0;
  } 
  result = (OpenSim::ForwardTool *)new OpenSim::ForwardTool((OpenSim::ForwardTool const &)*arg1);
  *(OpenSim::ForwardTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ForwardTool_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ForwardTool *arg1 = (OpenSim::ForwardTool *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ForwardTool **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::ForwardTool const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ForwardTool_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ForwardTool *arg1 = (OpenSim::ForwardTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ForwardTool **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ForwardTool_1initializeExternalLoads_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9, jlong jarg10) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  double arg6 ;
  OpenSim::ForceApplier **arg7 = (OpenSim::ForceApplier **) 0 ;
  OpenSim::ForceApplier **arg8 = (OpenSim::ForceApplier **) 0 ;
  OpenSim::TorqueApplier **arg9 = (OpenSim::TorqueApplier **) 0 ;
  OpenSim::TorqueApplier **arg10 = (OpenSim::TorqueApplier **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (double)jarg6; 
  arg7 = *(OpenSim::ForceApplier ***)&jarg7; 
  arg8 = *(OpenSim::ForceApplier ***)&jarg8; 
  arg9 = *(OpenSim::TorqueApplier ***)&jarg9; 
  arg10 = *(OpenSim::TorqueApplier ***)&jarg10; 
  OpenSim::ForwardTool::initializeExternalLoads(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ForwardTool_1initializeExternalLoads_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  double arg6 ;
  OpenSim::ForceApplier **arg7 = (OpenSim::ForceApplier **) 0 ;
  OpenSim::ForceApplier **arg8 = (OpenSim::ForceApplier **) 0 ;
  OpenSim::TorqueApplier **arg9 = (OpenSim::TorqueApplier **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (double)jarg6; 
  arg7 = *(OpenSim::ForceApplier ***)&jarg7; 
  arg8 = *(OpenSim::ForceApplier ***)&jarg8; 
  arg9 = *(OpenSim::TorqueApplier ***)&jarg9; 
  OpenSim::ForwardTool::initializeExternalLoads(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ForwardTool_1initializeExternalLoads_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  double arg6 ;
  OpenSim::ForceApplier **arg7 = (OpenSim::ForceApplier **) 0 ;
  OpenSim::ForceApplier **arg8 = (OpenSim::ForceApplier **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (double)jarg6; 
  arg7 = *(OpenSim::ForceApplier ***)&jarg7; 
  arg8 = *(OpenSim::ForceApplier ***)&jarg8; 
  OpenSim::ForwardTool::initializeExternalLoads(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ForwardTool_1initializeExternalLoads_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jdouble jarg6, jlong jarg7) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  double arg6 ;
  OpenSim::ForceApplier **arg7 = (OpenSim::ForceApplier **) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (double)jarg6; 
  arg7 = *(OpenSim::ForceApplier ***)&jarg7; 
  OpenSim::ForwardTool::initializeExternalLoads(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ForwardTool_1initializeExternalLoads_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jdouble jarg6) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = (double)jarg6; 
  OpenSim::ForwardTool::initializeExternalLoads(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1PerturbationTool_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::PerturbationTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::PerturbationTool *)new OpenSim::PerturbationTool();
  *(OpenSim::PerturbationTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1PerturbationTool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::PerturbationTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::PerturbationTool *)new OpenSim::PerturbationTool((std::string const &)*arg1);
  *(OpenSim::PerturbationTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1PerturbationTool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::PerturbationTool *arg1 = (OpenSim::PerturbationTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PerturbationTool **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1PerturbationTool_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::PerturbationTool *arg1 = 0 ;
  OpenSim::PerturbationTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PerturbationTool **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PerturbationTool const & reference is null");
    return 0;
  } 
  result = (OpenSim::PerturbationTool *)new OpenSim::PerturbationTool((OpenSim::PerturbationTool const &)*arg1);
  *(OpenSim::PerturbationTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_PerturbationTool_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::PerturbationTool *arg1 = (OpenSim::PerturbationTool *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PerturbationTool **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::PerturbationTool const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PerturbationTool_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::PerturbationTool *arg1 = (OpenSim::PerturbationTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PerturbationTool **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PerturbationTool_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  OpenSim::PerturbationTool *arg1 = (OpenSim::PerturbationTool *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PerturbationTool **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PerturbationTool_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4) {
  OpenSim::PerturbationTool *arg1 = (OpenSim::PerturbationTool *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PerturbationTool **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  (arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PerturbationTool_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::PerturbationTool *arg1 = (OpenSim::PerturbationTool *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PerturbationTool **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PerturbationTool_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::PerturbationTool *arg1 = (OpenSim::PerturbationTool *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::PerturbationTool **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->printResults((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1CreateAnimationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::SimtkAnimationCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::SimtkAnimationCallback *)OpenSim::SimtkAnimationCallback::CreateAnimationCallback(arg1);
  *(OpenSim::SimtkAnimationCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimtkAnimationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::SimtkAnimationCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::SimtkAnimationCallback *)new SwigDirector_SimtkAnimationCallback(jenv,arg1);
  *(OpenSim::SimtkAnimationCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1getCurrentTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  result = (double)((OpenSim::SimtkAnimationCallback const *)arg1)->getCurrentTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1step_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jint jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *arg9 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(void **)&jarg9; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1stepSwigExplicitSimtkAnimationCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jint jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *arg9 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(void **)&jarg9; 
  result = (int)(arg1)->OpenSim::SimtkAnimationCallback::step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1step_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1stepSwigExplicitSimtkAnimationCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  result = (int)(arg1)->OpenSim::SimtkAnimationCallback::step(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1beginSwigExplicitSimtkAnimationCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->OpenSim::SimtkAnimationCallback::begin(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1begin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1beginSwigExplicitSimtkAnimationCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->OpenSim::SimtkAnimationCallback::begin(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1getBodyTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  int arg2 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Transform *)((OpenSim::SimtkAnimationCallback const *)arg1)->getBodyTransform(arg2);
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1extractOffsets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  OpenSim::Model *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Model & reference is null");
    return ;
  } 
  (arg1)->extractOffsets(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1getTransformsFromKinematicsEngine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  OpenSim::Model *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Model & reference is null");
    return ;
  } 
  (arg1)->getTransformsFromKinematicsEngine(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OpenSim::SimtkAnimationCallback *obj = *((OpenSim::SimtkAnimationCallback **)&objarg);
  (void)jcls;
  SwigDirector_SimtkAnimationCallback *director = dynamic_cast<SwigDirector_SimtkAnimationCallback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OpenSim::SimtkAnimationCallback *obj = *((OpenSim::SimtkAnimationCallback **)&objarg);
  SwigDirector_SimtkAnimationCallback *director = dynamic_cast<SwigDirector_SimtkAnimationCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Kinematics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Kinematics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::Kinematics *)new OpenSim::Kinematics(arg1);
  *(OpenSim::Kinematics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Kinematics_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Kinematics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Kinematics *)new OpenSim::Kinematics();
  *(OpenSim::Kinematics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Kinematics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Kinematics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Kinematics *)new OpenSim::Kinematics((std::string const &)*arg1);
  *(OpenSim::Kinematics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Kinematics_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Kinematics *arg1 = 0 ;
  OpenSim::Kinematics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Kinematics const & reference is null");
    return 0;
  } 
  result = (OpenSim::Kinematics *)new OpenSim::Kinematics((OpenSim::Kinematics const &)*arg1);
  *(OpenSim::Kinematics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Kinematics const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Kinematics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1setStorageCapacityIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStorageCapacityIncrements(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1getAccelerationStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getAccelerationStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1getVelocityStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getVelocityStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1getPositionStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getPositionStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1begin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1step_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *arg9 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(void **)&jarg9; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1step_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1end_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1getStorageList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  {
    OpenSim::ArrayPtrs<OpenSim::Storage > &_result_ref = (arg1)->getStorageList();
    result = (OpenSim::ArrayPtrs<OpenSim::Storage > *) &_result_ref;
  }
  *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Actuation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Actuation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::Actuation *)new OpenSim::Actuation(arg1);
  *(OpenSim::Actuation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Actuation_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Actuation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Actuation *)new OpenSim::Actuation();
  *(OpenSim::Actuation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Actuation_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Actuation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Actuation *)new OpenSim::Actuation((std::string const &)*arg1);
  *(OpenSim::Actuation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Actuation_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Actuation *arg1 = 0 ;
  OpenSim::Actuation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Actuation const & reference is null");
    return 0;
  } 
  result = (OpenSim::Actuation *)new OpenSim::Actuation((OpenSim::Actuation const &)*arg1);
  *(OpenSim::Actuation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Actuation const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Actuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1setStorageCapacityIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStorageCapacityIncrements(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1getForceStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::Actuation const *)arg1)->getForceStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1getSpeedStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::Actuation const *)arg1)->getSpeedStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1getPowerStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::Actuation const *)arg1)->getPowerStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1begin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1step_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *arg9 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(void **)&jarg9; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1step_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1end_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IndAcc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::IndAcc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::IndAcc *)new OpenSim::IndAcc(arg1);
  *(OpenSim::IndAcc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IndAcc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jstring jarg5, jstring jarg6) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg3 = (OpenSim::Storage *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  OpenSim::IndAcc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  arg3 = *(OpenSim::Storage **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (OpenSim::IndAcc *)new OpenSim::IndAcc(arg1,arg2,arg3,arg4,arg5,arg6);
  *(OpenSim::IndAcc **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IndAcc_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg3 = (OpenSim::Storage *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  OpenSim::IndAcc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  arg3 = *(OpenSim::Storage **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (OpenSim::IndAcc *)new OpenSim::IndAcc(arg1,arg2,arg3,arg4,arg5);
  *(OpenSim::IndAcc **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IndAcc_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg3 = (OpenSim::Storage *) 0 ;
  char *arg4 = (char *) 0 ;
  OpenSim::IndAcc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  arg3 = *(OpenSim::Storage **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (OpenSim::IndAcc *)new OpenSim::IndAcc(arg1,arg2,arg3,arg4);
  *(OpenSim::IndAcc **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1IndAcc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getNumComponents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getNumComponents();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getNumIndependentComponents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getNumIndependentComponents();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getNumElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getNumElements();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getLastActuatorIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getLastActuatorIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getGravityIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getGravityIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getVelocityIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getVelocityIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getInertialIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getInertialIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getAllActuatorsIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getAllActuatorsIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getAllIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getAllIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1setContactThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setContactThreshold(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getContactThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (double)(arg1)->getContactThreshold();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getComponentName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getComponentName(arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1setStorageCapacityIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStorageCapacityIncrements(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getForceStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  OpenSim::Storage **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (OpenSim::Storage **)(arg1)->getForceStorage();
  *(OpenSim::Storage ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getUseNullDecomposition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (bool)(arg1)->getUseNullDecomposition();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1setComputeNormalizedAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setComputeNormalizedAccelerations(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getComputeNormalizedAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (bool)(arg1)->getComputeNormalizedAccelerations();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1computeAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->computeAccelerations();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1sumForceResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  (arg1)->sumForceResults();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1sumAccelerationResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  (arg1)->sumAccelerationResults();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1sumDecomposition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  (arg1)->sumDecomposition();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  (arg1)->store();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1GeneralizedForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::GeneralizedForces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::GeneralizedForces *)new OpenSim::GeneralizedForces(arg1);
  *(OpenSim::GeneralizedForces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1GeneralizedForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::GeneralizedForces *)new OpenSim::GeneralizedForces();
  *(OpenSim::GeneralizedForces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1GeneralizedForces_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::GeneralizedForces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::GeneralizedForces *)new OpenSim::GeneralizedForces((std::string const &)*arg1);
  *(OpenSim::GeneralizedForces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1GeneralizedForces_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = 0 ;
  OpenSim::GeneralizedForces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::GeneralizedForces const & reference is null");
    return 0;
  } 
  result = (OpenSim::GeneralizedForces *)new OpenSim::GeneralizedForces((OpenSim::GeneralizedForces const &)*arg1);
  *(OpenSim::GeneralizedForces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::GeneralizedForces const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1GeneralizedForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1setStorageCapacityIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStorageCapacityIncrements(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1getGravGenForcesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getGravGenForcesStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1getVelGenForcesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getVelGenForcesStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1getActuatorGenForcesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getActuatorGenForcesStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1getContactGenForcesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getContactGenForcesStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1begin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1step_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *arg9 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(void **)&jarg9; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1step_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1end_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MuscleAnalysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::MuscleAnalysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::MuscleAnalysis *)new OpenSim::MuscleAnalysis(arg1);
  *(OpenSim::MuscleAnalysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MuscleAnalysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MuscleAnalysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MuscleAnalysis *)new OpenSim::MuscleAnalysis();
  *(OpenSim::MuscleAnalysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MuscleAnalysis_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::MuscleAnalysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::MuscleAnalysis *)new OpenSim::MuscleAnalysis((std::string const &)*arg1);
  *(OpenSim::MuscleAnalysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MuscleAnalysis_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = 0 ;
  OpenSim::MuscleAnalysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleAnalysis const & reference is null");
    return 0;
  } 
  result = (OpenSim::MuscleAnalysis *)new OpenSim::MuscleAnalysis((OpenSim::MuscleAnalysis const &)*arg1);
  *(OpenSim::MuscleAnalysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::MuscleAnalysis const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1MuscleAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1setStorageCapacityIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStorageCapacityIncrements(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1getPennationAngleStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::MuscleAnalysis const *)arg1)->getPennationAngleStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1getMuscleTendonLengthStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::MuscleAnalysis const *)arg1)->getMuscleTendonLengthStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1getFiberLengthStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::MuscleAnalysis const *)arg1)->getFiberLengthStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1getNormalizedFiberLengthStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::MuscleAnalysis const *)arg1)->getNormalizedFiberLengthStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1getTendonLegthStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::MuscleAnalysis const *)arg1)->getTendonLegthStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1getForceStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::MuscleAnalysis const *)arg1)->getForceStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1getFiberForceStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::MuscleAnalysis const *)arg1)->getFiberForceStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1getActiveFiberForceStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::MuscleAnalysis const *)arg1)->getActiveFiberForceStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1getPassiveFiberForceStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::MuscleAnalysis const *)arg1)->getPassiveFiberForceStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1getActiveFiberForceAlongTendonStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::MuscleAnalysis const *)arg1)->getActiveFiberForceAlongTendonStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1getPassiveFiberForceAlongTendonStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::MuscleAnalysis const *)arg1)->getPassiveFiberForceAlongTendonStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1begin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1step_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jint jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *arg9 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(void **)&jarg9; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1step_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1end_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  jint jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4) {
  jint jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleAnalysis_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::MuscleAnalysis *arg1 = (OpenSim::MuscleAnalysis *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleAnalysis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MomentArmAnalysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::MomentArmAnalysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::MomentArmAnalysis *)new OpenSim::MomentArmAnalysis(arg1);
  *(OpenSim::MomentArmAnalysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MomentArmAnalysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MomentArmAnalysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MomentArmAnalysis *)new OpenSim::MomentArmAnalysis();
  *(OpenSim::MomentArmAnalysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MomentArmAnalysis_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::MomentArmAnalysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::MomentArmAnalysis *)new OpenSim::MomentArmAnalysis((std::string const &)*arg1);
  *(OpenSim::MomentArmAnalysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MomentArmAnalysis_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MomentArmAnalysis *arg1 = 0 ;
  OpenSim::MomentArmAnalysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MomentArmAnalysis const & reference is null");
    return 0;
  } 
  result = (OpenSim::MomentArmAnalysis *)new OpenSim::MomentArmAnalysis((OpenSim::MomentArmAnalysis const &)*arg1);
  *(OpenSim::MomentArmAnalysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MomentArmAnalysis_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MomentArmAnalysis *arg1 = (OpenSim::MomentArmAnalysis *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::MomentArmAnalysis const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1MomentArmAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MomentArmAnalysis *arg1 = (OpenSim::MomentArmAnalysis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MomentArmAnalysis_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MomentArmAnalysis *arg1 = (OpenSim::MomentArmAnalysis *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MomentArmAnalysis_1setStorageCapacityIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::MomentArmAnalysis *arg1 = (OpenSim::MomentArmAnalysis *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStorageCapacityIncrements(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MomentArmAnalysis_1getMomentArmStorageArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MomentArmAnalysis *arg1 = (OpenSim::MomentArmAnalysis *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1; 
  {
    OpenSim::ArrayPtrs<OpenSim::Storage > const &_result_ref = ((OpenSim::MomentArmAnalysis const *)arg1)->getMomentArmStorageArray();
    result = (OpenSim::ArrayPtrs<OpenSim::Storage > *) &_result_ref;
  }
  *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MomentArmAnalysis_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::MomentArmAnalysis *arg1 = (OpenSim::MomentArmAnalysis *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MomentArmAnalysis_1begin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::MomentArmAnalysis *arg1 = (OpenSim::MomentArmAnalysis *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MomentArmAnalysis_1step_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jint jresult = 0 ;
  OpenSim::MomentArmAnalysis *arg1 = (OpenSim::MomentArmAnalysis *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *arg9 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(void **)&jarg9; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MomentArmAnalysis_1step_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::MomentArmAnalysis *arg1 = (OpenSim::MomentArmAnalysis *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MomentArmAnalysis_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::MomentArmAnalysis *arg1 = (OpenSim::MomentArmAnalysis *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MomentArmAnalysis_1end_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::MomentArmAnalysis *arg1 = (OpenSim::MomentArmAnalysis *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MomentArmAnalysis_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  jint jresult = 0 ;
  OpenSim::MomentArmAnalysis *arg1 = (OpenSim::MomentArmAnalysis *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MomentArmAnalysis_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4) {
  jint jresult = 0 ;
  OpenSim::MomentArmAnalysis *arg1 = (OpenSim::MomentArmAnalysis *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MomentArmAnalysis_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenSim::MomentArmAnalysis *arg1 = (OpenSim::MomentArmAnalysis *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MomentArmAnalysis_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::MomentArmAnalysis *arg1 = (OpenSim::MomentArmAnalysis *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MomentArmAnalysis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->printResults((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrayBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  bool *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Array<bool > *result = 0 ;
  bool temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Array<bool > *)new OpenSim::Array<bool >((bool const &)*arg1,arg2,arg3);
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2) {
  jlong jresult = 0 ;
  bool *arg1 = 0 ;
  int arg2 ;
  OpenSim::Array<bool > *result = 0 ;
  bool temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Array<bool > *)new OpenSim::Array<bool >((bool const &)*arg1,arg2);
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayBool_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool *arg1 = 0 ;
  OpenSim::Array<bool > *result = 0 ;
  bool temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  result = (OpenSim::Array<bool > *)new OpenSim::Array<bool >((bool const &)*arg1);
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayBool_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Array<bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Array<bool > *)new OpenSim::Array<bool >();
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayBool_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Array<bool > *arg1 = 0 ;
  OpenSim::Array<bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<bool > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Array<bool > *)new OpenSim::Array<bool >((OpenSim::Array<bool > const &)*arg1);
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)(arg1)->append((bool const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  OpenSim::Array<bool > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = *(OpenSim::Array<bool > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<bool > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<bool > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool *arg3 = (bool *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(bool **)&jarg3; 
  result = (int)(arg1)->append(arg2,(bool const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  int result;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  result = (int)(arg1)->insert(arg2,(bool const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  (arg1)->set(arg2,(bool const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  result = (bool *)(arg1)->get();
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    bool &_result_ref = ((OpenSim::Array<bool > const *)arg1)->get(arg2);
    result = (bool *) &_result_ref;
  }
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)OpenSim_Array_Sl_bool_Sg__getitem(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  OpenSim_Array_Sl_bool_Sg__setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  {
    bool &_result_ref = ((OpenSim::Array<bool > const *)arg1)->getLast();
    result = (bool *) &_result_ref;
  }
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1findIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->findIndex((bool const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1rfindIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->rfindIndex((bool const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->searchBinary((bool const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->searchBinary((bool const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  bool arg3 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->searchBinary((bool const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->searchBinary((bool const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrayDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  double *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Array<double > *result = 0 ;
  double temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Array<double > *)new OpenSim::Array<double >((double const &)*arg1,arg2,arg3);
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jlong jresult = 0 ;
  double *arg1 = 0 ;
  int arg2 ;
  OpenSim::Array<double > *result = 0 ;
  double temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Array<double > *)new OpenSim::Array<double >((double const &)*arg1,arg2);
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayDouble_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double *arg1 = 0 ;
  OpenSim::Array<double > *result = 0 ;
  double temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  result = (OpenSim::Array<double > *)new OpenSim::Array<double >((double const &)*arg1);
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayDouble_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Array<double > *)new OpenSim::Array<double >();
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayDouble_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Array<double > *arg1 = 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Array<double > *)new OpenSim::Array<double >((OpenSim::Array<double > const &)*arg1);
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  result = (int)((OpenSim::Array<double > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  result = (int)((OpenSim::Array<double > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  result = (int)((OpenSim::Array<double > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)(arg1)->append((double const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<double > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->append(arg2,(double const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  int result;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  result = (int)(arg1)->insert(arg2,(double const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  (arg1)->set(arg2,(double const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  result = (double *)(arg1)->get();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    double &_result_ref = ((OpenSim::Array<double > const *)arg1)->get(arg2);
    result = (double *) &_result_ref;
  }
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)OpenSim_Array_Sl_double_Sg__getitem(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  OpenSim_Array_Sl_double_Sg__setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  {
    double &_result_ref = ((OpenSim::Array<double > const *)arg1)->getLast();
    result = (double *) &_result_ref;
  }
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1findIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<double > const *)arg1)->findIndex((double const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1rfindIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<double > const *)arg1)->rfindIndex((double const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Array<double > const *)arg1)->searchBinary((double const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Array<double > const *)arg1)->searchBinary((double const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  bool arg3 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Array<double > const *)arg1)->searchBinary((double const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<double > const *)arg1)->searchBinary((double const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrayInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Array<int > *result = 0 ;
  int temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Array<int > *)new OpenSim::Array<int >((int const &)*arg1,arg2,arg3);
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int *arg1 = 0 ;
  int arg2 ;
  OpenSim::Array<int > *result = 0 ;
  int temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Array<int > *)new OpenSim::Array<int >((int const &)*arg1,arg2);
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayInt_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int *arg1 = 0 ;
  OpenSim::Array<int > *result = 0 ;
  int temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  result = (OpenSim::Array<int > *)new OpenSim::Array<int >((int const &)*arg1);
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayInt_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Array<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Array<int > *)new OpenSim::Array<int >();
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayInt_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Array<int > *arg1 = 0 ;
  OpenSim::Array<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Array<int > *)new OpenSim::Array<int >((OpenSim::Array<int > const &)*arg1);
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  result = (int)((OpenSim::Array<int > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  result = (int)((OpenSim::Array<int > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  result = (int)((OpenSim::Array<int > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)(arg1)->append((int const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  OpenSim::Array<int > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = *(OpenSim::Array<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<int > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (int)(arg1)->append(arg2,(int const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int result;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  result = (int)(arg1)->insert(arg2,(int const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  (arg1)->set(arg2,(int const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  result = (int *)(arg1)->get();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    int &_result_ref = ((OpenSim::Array<int > const *)arg1)->get(arg2);
    result = (int *) &_result_ref;
  }
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)OpenSim_Array_Sl_int_Sg__getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  OpenSim_Array_Sl_int_Sg__setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  {
    int &_result_ref = ((OpenSim::Array<int > const *)arg1)->getLast();
    result = (int *) &_result_ref;
  }
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1findIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<int > const *)arg1)->findIndex((int const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1rfindIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<int > const *)arg1)->rfindIndex((int const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Array<int > const *)arg1)->searchBinary((int const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Array<int > const *)arg1)->searchBinary((int const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  bool arg3 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Array<int > const *)arg1)->searchBinary((int const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<int > const *)arg1)->searchBinary((int const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrayStr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayStr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Array<std::string > *)new OpenSim::Array<std::string >((std::string const &)*arg1,arg2,arg3);
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayStr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  result = (OpenSim::Array<std::string > *)new OpenSim::Array<std::string >((std::string const &)*arg1,arg2);
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayStr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Array<std::string > *)new OpenSim::Array<std::string >((std::string const &)*arg1);
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayStr_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Array<std::string > *)new OpenSim::Array<std::string >();
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayStr_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Array<std::string > *)new OpenSim::Array<std::string >((OpenSim::Array<std::string > const &)*arg1);
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->append((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<std::string > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = (std::string *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::string **)&jarg3; 
  result = (int)(arg1)->append(arg2,(std::string const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->insert(arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->set(arg2,(std::string const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  result = (std::string *)(arg1)->get();
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    std::string &_result_ref = ((OpenSim::Array<std::string > const *)arg1)->get(arg2);
    result = (std::string *) &_result_ref;
  }
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = OpenSim_Array_Sl_std_string_Sg__getitem(arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  arg3 =  std::string(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  OpenSim_Array_Sl_std_string_Sg__setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  {
    std::string &_result_ref = ((OpenSim::Array<std::string > const *)arg1)->getLast();
    result = (std::string *) &_result_ref;
  }
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1findIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->findIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1rfindIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->rfindIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->searchBinary((std::string const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->searchBinary((std::string const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->searchBinary((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->searchBinary((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrayPtrsObj(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayPtrsObj_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (OpenSim::ArrayPtrs<OpenSim::Object > *)new OpenSim::ArrayPtrs<OpenSim::Object >(arg1);
  *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayPtrsObj_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ArrayPtrs<OpenSim::Object > *)new OpenSim::ArrayPtrs<OpenSim::Object >();
  *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayPtrsObj_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Object > const & reference is null");
    return 0;
  } 
  result = (OpenSim::ArrayPtrs<OpenSim::Object > *)new OpenSim::ArrayPtrs<OpenSim::Object >((OpenSim::ArrayPtrs<OpenSim::Object > const &)*arg1);
  *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  result = (bool)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getIndex((OpenSim::Object const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getIndex((OpenSim::Object const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Object > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  OpenSim::Object *arg3 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Object **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Object const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  OpenSim::Object *arg3 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Object **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Object *)(arg1)->get(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Object *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getLast();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->searchBinary((OpenSim::Object const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->searchBinary((OpenSim::Object const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->searchBinary((OpenSim::Object const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->searchBinary((OpenSim::Object const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AbstractMarker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::AbstractMarker const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1updateFromMarker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  OpenSim::AbstractMarker *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  arg2 = *(OpenSim::AbstractMarker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractMarker const & reference is null");
    return ;
  } 
  (arg1)->updateFromMarker((OpenSim::AbstractMarker const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1getOffset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  ((OpenSim::AbstractMarker const *)arg1)->getOffset(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1getOffset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  result = (double *)((OpenSim::AbstractMarker const *)arg1)->getOffset();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1setOffset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setOffset(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1setOffset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  double *arg2 ;
  bool result;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return 0; 
  result = (bool)(arg1)->setOffset((double const (*))arg2);
  jresult = (jboolean)result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1getOffsetUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  result = (bool)((OpenSim::AbstractMarker const *)arg1)->getOffsetUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1getFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  result = (bool)((OpenSim::AbstractMarker const *)arg1)->getFixed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1setFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setFixed(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1getFixedUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  result = (bool)((OpenSim::AbstractMarker const *)arg1)->getFixedUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1getBodyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  result = (std::string *)((OpenSim::AbstractMarker const *)arg1)->getBodyName();
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1setBodyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setBodyName((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1getBodyNameUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  result = (bool)((OpenSim::AbstractMarker const *)arg1)->getBodyNameUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1setBodyNameUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setBodyNameUseDefault(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1getBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  result = (OpenSim::AbstractBody *)((OpenSim::AbstractMarker const *)arg1)->getBody();
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1setBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  OpenSim::AbstractBody *arg2 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2; 
  (arg1)->setBody(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->scale((OpenSim::Array<double > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1removeSelfFromDisplay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  (arg1)->removeSelfFromDisplay();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1getDisplayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  result = (OpenSim::VisibleObject *)(arg1)->getDisplayer();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1updateGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  (arg1)->updateGeometry();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  ((OpenSim::AbstractMarker const *)arg1)->peteTest();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::AbstractMarker::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::AbstractMarker const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1safeDownCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::AbstractMarker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::AbstractMarker *)OpenSim::AbstractMarker::safeDownCast(arg1);
  *(OpenSim::AbstractMarker **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMarker_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractMarker *arg1 = (OpenSim::AbstractMarker *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMarker **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMarkers_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::AbstractMarker > *)new OpenSim::Set<OpenSim::AbstractMarker >();
  *(OpenSim::Set<OpenSim::AbstractMarker > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMarkers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::AbstractMarker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::AbstractMarker > *)new OpenSim::Set<OpenSim::AbstractMarker >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::AbstractMarker > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMarkers_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::AbstractMarker > *)new OpenSim::Set<OpenSim::AbstractMarker >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::AbstractMarker > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMarkers_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::AbstractMarker > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::AbstractMarker > *)new OpenSim::Set<OpenSim::AbstractMarker >((OpenSim::Set<OpenSim::AbstractMarker > const &)*arg1);
  *(OpenSim::Set<OpenSim::AbstractMarker > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  OpenSim::AbstractMarker *arg2 = (OpenSim::AbstractMarker *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = *(OpenSim::AbstractMarker **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->getIndex((OpenSim::AbstractMarker const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  OpenSim::AbstractMarker *arg2 = (OpenSim::AbstractMarker *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = *(OpenSim::AbstractMarker **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->getIndex((OpenSim::AbstractMarker const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  OpenSim::AbstractMarker *arg2 = (OpenSim::AbstractMarker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = *(OpenSim::AbstractMarker **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::AbstractMarker > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::AbstractMarker > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::AbstractMarker > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  int arg2 ;
  OpenSim::AbstractMarker *arg3 = (OpenSim::AbstractMarker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractMarker **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  OpenSim::AbstractMarker *arg2 = (OpenSim::AbstractMarker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = *(OpenSim::AbstractMarker **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::AbstractMarker const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  int arg2 ;
  OpenSim::AbstractMarker *arg3 = (OpenSim::AbstractMarker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractMarker **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  int arg2 ;
  OpenSim::AbstractMarker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::AbstractMarker *)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->get(arg2);
  *(OpenSim::AbstractMarker **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::AbstractMarker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::AbstractMarker *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::AbstractMarker **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  OpenSim::AbstractMarker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  result = (OpenSim::AbstractMarker *)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->getLast();
  *(OpenSim::AbstractMarker **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  OpenSim::AbstractMarker *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = *(OpenSim::AbstractMarker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractMarker const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->searchBinary((OpenSim::AbstractMarker const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  OpenSim::AbstractMarker *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = *(OpenSim::AbstractMarker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractMarker const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->searchBinary((OpenSim::AbstractMarker const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  OpenSim::AbstractMarker *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = *(OpenSim::AbstractMarker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractMarker const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->searchBinary((OpenSim::AbstractMarker const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  OpenSim::AbstractMarker *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = *(OpenSim::AbstractMarker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractMarker const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->searchBinary((OpenSim::AbstractMarker const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractMarker > *arg1 = (OpenSim::Set<OpenSim::AbstractMarker > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::AbstractMarker > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MarkerSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MarkerSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MarkerSet *)new OpenSim::MarkerSet();
  *(OpenSim::MarkerSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MarkerSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::MarkerSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::MarkerSet *)new OpenSim::MarkerSet((std::string const &)*arg1);
  *(OpenSim::MarkerSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MarkerSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MarkerSet *arg1 = 0 ;
  OpenSim::MarkerSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MarkerSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::MarkerSet *)new OpenSim::MarkerSet((OpenSim::MarkerSet const &)*arg1);
  *(OpenSim::MarkerSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1MarkerSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MarkerSet *arg1 = (OpenSim::MarkerSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MarkerSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerSet_1getMarkerNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MarkerSet *arg1 = (OpenSim::MarkerSet *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MarkerSet **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  (arg1)->getMarkerNames(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerSet_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MarkerSet *arg1 = (OpenSim::MarkerSet *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MarkerSet **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->scale((OpenSim::ScaleSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerSet_1addNamePrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::MarkerSet *arg1 = (OpenSim::MarkerSet *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addNamePrefix((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Range_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Range *)new OpenSim::Range();
  *(OpenSim::Range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Range_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Range *arg1 = 0 ;
  OpenSim::Range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Range **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Range const & reference is null");
    return 0;
  } 
  result = (OpenSim::Range *)new OpenSim::Range((OpenSim::Range const &)*arg1);
  *(OpenSim::Range **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Range(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Range *arg1 = (OpenSim::Range *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Range **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Range_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Range *arg1 = (OpenSim::Range *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Range **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Range const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Range_1getMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Range *arg1 = (OpenSim::Range *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Range **)&jarg1; 
  result = (double)((OpenSim::Range const *)arg1)->getMin();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Range_1setMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Range *arg1 = (OpenSim::Range *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Range **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMin(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Range_1getMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Range *arg1 = (OpenSim::Range *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Range **)&jarg1; 
  result = (double)((OpenSim::Range const *)arg1)->getMax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Range_1setMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Range *arg1 = (OpenSim::Range *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Range **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMax(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Scale_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Scale *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Scale *)new OpenSim::Scale();
  *(OpenSim::Scale **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Scale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Scale *arg1 = 0 ;
  OpenSim::Scale *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Scale **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Scale const & reference is null");
    return 0;
  } 
  result = (OpenSim::Scale *)new OpenSim::Scale((OpenSim::Scale const &)*arg1);
  *(OpenSim::Scale **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Scale_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Scale *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Scale *)new OpenSim::Scale((std::string const &)*arg1);
  *(OpenSim::Scale **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Scale(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Scale_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Scale const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Scale_1getScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::Scale const *)arg1)->getScaleFactors(*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Scale_1getSegmentName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Scale const *)arg1)->getSegmentName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Scale_1setSegmentName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSegmentName((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Scale_1setScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->setScaleFactors(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Scale_1getApply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  result = (bool)((OpenSim::Scale const *)arg1)->getApply();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Scale_1setApply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setApply(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetScales(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetScales_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Scale > *)new OpenSim::Set<OpenSim::Scale >();
  *(OpenSim::Set<OpenSim::Scale > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetScales_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::Scale > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::Scale > *)new OpenSim::Set<OpenSim::Scale >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::Scale > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetScales_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Scale > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Scale > *)new OpenSim::Set<OpenSim::Scale >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Scale > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetScales_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Scale > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Scale > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Scale > *)new OpenSim::Set<OpenSim::Scale >((OpenSim::Set<OpenSim::Scale > const &)*arg1);
  *(OpenSim::Set<OpenSim::Scale > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Scale > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = (OpenSim::Scale *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getIndex((OpenSim::Scale const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = (OpenSim::Scale *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getIndex((OpenSim::Scale const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Scale > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = (OpenSim::Scale *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Scale > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Scale > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Scale > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  OpenSim::Scale *arg3 = (OpenSim::Scale *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Scale **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = (OpenSim::Scale *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Scale const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  OpenSim::Scale *arg3 = (OpenSim::Scale *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Scale **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  OpenSim::Scale *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Scale *)((OpenSim::Set<OpenSim::Scale > const *)arg1)->get(arg2);
  *(OpenSim::Scale **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Scale *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Scale *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Scale **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Scale > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  result = (OpenSim::Scale *)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getLast();
  *(OpenSim::Scale **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Scale const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->searchBinary((OpenSim::Scale const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Scale const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->searchBinary((OpenSim::Scale const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Scale const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->searchBinary((OpenSim::Scale const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Scale const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->searchBinary((OpenSim::Scale const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Scale > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ScaleSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ScaleSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ScaleSet *)new OpenSim::ScaleSet();
  *(OpenSim::ScaleSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ScaleSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::ScaleSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::ScaleSet *)new OpenSim::ScaleSet((std::string const &)*arg1);
  *(OpenSim::ScaleSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ScaleSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ScaleSet *arg1 = (OpenSim::ScaleSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ScaleSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AbstractWrapObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::AbstractWrapObject const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  OpenSim::AbstractWrapObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  arg2 = *(OpenSim::AbstractWrapObject **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractWrapObject const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::AbstractWrapObject const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->scale(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg3 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2; 
  arg3 = *(OpenSim::AbstractBody **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1getBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  result = (OpenSim::AbstractBody *)((OpenSim::AbstractWrapObject const *)arg1)->getBody();
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1getXYZBodyRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  result = (double *)((OpenSim::AbstractWrapObject const *)arg1)->getXYZBodyRotation();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1getTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  result = (double *)((OpenSim::AbstractWrapObject const *)arg1)->getTranslation();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1getActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  result = (bool)((OpenSim::AbstractWrapObject const *)arg1)->getActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1getActiveUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  result = (bool)((OpenSim::AbstractWrapObject const *)arg1)->getActiveUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1getQuadrantName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  result = (char *)((OpenSim::AbstractWrapObject const *)arg1)->getQuadrantName();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1getQuadrantNameUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  result = (bool)((OpenSim::AbstractWrapObject const *)arg1)->getQuadrantNameUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1setQuadrantName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setQuadrantName((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1getWrapTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  result = (char *)((OpenSim::AbstractWrapObject const *)arg1)->getWrapTypeName();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1getDimensionsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  result = ((OpenSim::AbstractWrapObject const *)arg1)->getDimensionsString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1wrapMuscleSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  OpenSim::MusclePoint *arg2 = 0 ;
  OpenSim::MusclePoint *arg3 = 0 ;
  OpenSim::MuscleWrap *arg4 = 0 ;
  OpenSim::WrapResult *arg5 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  arg2 = *(OpenSim::MusclePoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MusclePoint & reference is null");
    return 0;
  } 
  arg3 = *(OpenSim::MusclePoint **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MusclePoint & reference is null");
    return 0;
  } 
  arg4 = *(OpenSim::MuscleWrap **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleWrap const & reference is null");
    return 0;
  } 
  arg5 = *(OpenSim::WrapResult **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapResult & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::AbstractWrapObject const *)arg1)->wrapMuscleSegment(*arg2,*arg3,(OpenSim::MuscleWrap const &)*arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1wrapLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  OpenSim::Array<double > *arg3 = 0 ;
  OpenSim::MuscleWrap *arg4 = 0 ;
  OpenSim::WrapResult *arg5 = 0 ;
  bool *arg6 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  arg4 = *(OpenSim::MuscleWrap **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleWrap const & reference is null");
    return 0;
  } 
  arg5 = *(OpenSim::WrapResult **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapResult & reference is null");
    return 0;
  } 
  arg6 = *(bool **)&jarg6;
  if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::AbstractWrapObject const *)arg1)->wrapLine(*arg2,*arg3,(OpenSim::MuscleWrap const &)*arg4,*arg5,*arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1getDisplayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  result = (OpenSim::VisibleObject *)(arg1)->getDisplayer();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1updateGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  (arg1)->updateGeometry();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractWrapObject_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractWrapObject *arg1 = (OpenSim::AbstractWrapObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractWrapObject **)&jarg1; 
  ((OpenSim::AbstractWrapObject const *)arg1)->peteTest();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1WrapSphere_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::WrapSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::WrapSphere *)new OpenSim::WrapSphere();
  *(OpenSim::WrapSphere **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1WrapSphere_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::WrapSphere *arg1 = 0 ;
  OpenSim::WrapSphere *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapSphere **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapSphere const & reference is null");
    return 0;
  } 
  result = (OpenSim::WrapSphere *)new OpenSim::WrapSphere((OpenSim::WrapSphere const &)*arg1);
  *(OpenSim::WrapSphere **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1WrapSphere(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::WrapSphere *arg1 = (OpenSim::WrapSphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::WrapSphere **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapSphere_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::WrapSphere *arg1 = (OpenSim::WrapSphere *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapSphere **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::WrapSphere const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapSphere_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::WrapSphere *arg1 = (OpenSim::WrapSphere *) 0 ;
  OpenSim::WrapSphere *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::WrapSphere **)&jarg1; 
  arg2 = *(OpenSim::WrapSphere **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapSphere const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::WrapSphere const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapSphere_1getWrapTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::WrapSphere *arg1 = (OpenSim::WrapSphere *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapSphere **)&jarg1; 
  result = (char *)((OpenSim::WrapSphere const *)arg1)->getWrapTypeName();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapSphere_1getDimensionsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::WrapSphere *arg1 = (OpenSim::WrapSphere *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapSphere **)&jarg1; 
  result = ((OpenSim::WrapSphere const *)arg1)->getDimensionsString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapSphere_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::WrapSphere *arg1 = (OpenSim::WrapSphere *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::WrapSphere **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->scale(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapSphere_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenSim::WrapSphere *arg1 = (OpenSim::WrapSphere *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg3 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::WrapSphere **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2; 
  arg3 = *(OpenSim::AbstractBody **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapSphere_1wrapLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::WrapSphere *arg1 = (OpenSim::WrapSphere *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  OpenSim::Array<double > *arg3 = 0 ;
  OpenSim::MuscleWrap *arg4 = 0 ;
  OpenSim::WrapResult *arg5 = 0 ;
  bool *arg6 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenSim::WrapSphere **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  arg4 = *(OpenSim::MuscleWrap **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleWrap const & reference is null");
    return 0;
  } 
  arg5 = *(OpenSim::WrapResult **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapResult & reference is null");
    return 0;
  } 
  arg6 = *(bool **)&jarg6;
  if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::WrapSphere const *)arg1)->wrapLine(*arg2,*arg3,(OpenSim::MuscleWrap const &)*arg4,*arg5,*arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapSphere_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::WrapSphere *arg1 = (OpenSim::WrapSphere *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapSphere **)&jarg1; 
  ((OpenSim::WrapSphere const *)arg1)->peteTest();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1WrapCylinder_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::WrapCylinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::WrapCylinder *)new OpenSim::WrapCylinder();
  *(OpenSim::WrapCylinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1WrapCylinder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::WrapCylinder *arg1 = 0 ;
  OpenSim::WrapCylinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapCylinder **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapCylinder const & reference is null");
    return 0;
  } 
  result = (OpenSim::WrapCylinder *)new OpenSim::WrapCylinder((OpenSim::WrapCylinder const &)*arg1);
  *(OpenSim::WrapCylinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1WrapCylinder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::WrapCylinder *arg1 = (OpenSim::WrapCylinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::WrapCylinder **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapCylinder_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::WrapCylinder *arg1 = (OpenSim::WrapCylinder *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapCylinder **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::WrapCylinder const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapCylinder_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::WrapCylinder *arg1 = (OpenSim::WrapCylinder *) 0 ;
  OpenSim::WrapCylinder *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::WrapCylinder **)&jarg1; 
  arg2 = *(OpenSim::WrapCylinder **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapCylinder const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::WrapCylinder const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapCylinder_1getRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::WrapCylinder *arg1 = (OpenSim::WrapCylinder *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapCylinder **)&jarg1; 
  result = (double)((OpenSim::WrapCylinder const *)arg1)->getRadius();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapCylinder_1setRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::WrapCylinder *arg1 = (OpenSim::WrapCylinder *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapCylinder **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRadius(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapCylinder_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::WrapCylinder *arg1 = (OpenSim::WrapCylinder *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapCylinder **)&jarg1; 
  result = (double)((OpenSim::WrapCylinder const *)arg1)->getLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapCylinder_1setLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::WrapCylinder *arg1 = (OpenSim::WrapCylinder *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapCylinder **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLength(arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapCylinder_1getWrapTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::WrapCylinder *arg1 = (OpenSim::WrapCylinder *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapCylinder **)&jarg1; 
  result = (char *)((OpenSim::WrapCylinder const *)arg1)->getWrapTypeName();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapCylinder_1getDimensionsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::WrapCylinder *arg1 = (OpenSim::WrapCylinder *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapCylinder **)&jarg1; 
  result = ((OpenSim::WrapCylinder const *)arg1)->getDimensionsString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapCylinder_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::WrapCylinder *arg1 = (OpenSim::WrapCylinder *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::WrapCylinder **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->scale(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapCylinder_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenSim::WrapCylinder *arg1 = (OpenSim::WrapCylinder *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg3 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::WrapCylinder **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2; 
  arg3 = *(OpenSim::AbstractBody **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapCylinder_1wrapLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::WrapCylinder *arg1 = (OpenSim::WrapCylinder *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  OpenSim::Array<double > *arg3 = 0 ;
  OpenSim::MuscleWrap *arg4 = 0 ;
  OpenSim::WrapResult *arg5 = 0 ;
  bool *arg6 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenSim::WrapCylinder **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  arg4 = *(OpenSim::MuscleWrap **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleWrap const & reference is null");
    return 0;
  } 
  arg5 = *(OpenSim::WrapResult **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapResult & reference is null");
    return 0;
  } 
  arg6 = *(bool **)&jarg6;
  if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::WrapCylinder const *)arg1)->wrapLine(*arg2,*arg3,(OpenSim::MuscleWrap const &)*arg4,*arg5,*arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapCylinder_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::WrapCylinder *arg1 = (OpenSim::WrapCylinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapCylinder **)&jarg1; 
  ((OpenSim::WrapCylinder const *)arg1)->peteTest();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1WrapTorus_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::WrapTorus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::WrapTorus *)new OpenSim::WrapTorus();
  *(OpenSim::WrapTorus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1WrapTorus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::WrapTorus *arg1 = 0 ;
  OpenSim::WrapTorus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapTorus **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapTorus const & reference is null");
    return 0;
  } 
  result = (OpenSim::WrapTorus *)new OpenSim::WrapTorus((OpenSim::WrapTorus const &)*arg1);
  *(OpenSim::WrapTorus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1WrapTorus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::WrapTorus *arg1 = (OpenSim::WrapTorus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::WrapTorus **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapTorus_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::WrapTorus *arg1 = (OpenSim::WrapTorus *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapTorus **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::WrapTorus const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapTorus_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::WrapTorus *arg1 = (OpenSim::WrapTorus *) 0 ;
  OpenSim::WrapTorus *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::WrapTorus **)&jarg1; 
  arg2 = *(OpenSim::WrapTorus **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapTorus const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::WrapTorus const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapTorus_1getWrapTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::WrapTorus *arg1 = (OpenSim::WrapTorus *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapTorus **)&jarg1; 
  result = (char *)((OpenSim::WrapTorus const *)arg1)->getWrapTypeName();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapTorus_1getDimensionsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::WrapTorus *arg1 = (OpenSim::WrapTorus *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapTorus **)&jarg1; 
  result = ((OpenSim::WrapTorus const *)arg1)->getDimensionsString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapTorus_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::WrapTorus *arg1 = (OpenSim::WrapTorus *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::WrapTorus **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->scale(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapTorus_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenSim::WrapTorus *arg1 = (OpenSim::WrapTorus *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg3 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::WrapTorus **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2; 
  arg3 = *(OpenSim::AbstractBody **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapTorus_1wrapLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::WrapTorus *arg1 = (OpenSim::WrapTorus *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  OpenSim::Array<double > *arg3 = 0 ;
  OpenSim::MuscleWrap *arg4 = 0 ;
  OpenSim::WrapResult *arg5 = 0 ;
  bool *arg6 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenSim::WrapTorus **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  arg4 = *(OpenSim::MuscleWrap **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleWrap const & reference is null");
    return 0;
  } 
  arg5 = *(OpenSim::WrapResult **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapResult & reference is null");
    return 0;
  } 
  arg6 = *(bool **)&jarg6;
  if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::WrapTorus const *)arg1)->wrapLine(*arg2,*arg3,(OpenSim::MuscleWrap const &)*arg4,*arg5,*arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapTorus_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::WrapTorus *arg1 = (OpenSim::WrapTorus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapTorus **)&jarg1; 
  ((OpenSim::WrapTorus const *)arg1)->peteTest();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1WrapEllipsoid_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::WrapEllipsoid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::WrapEllipsoid *)new OpenSim::WrapEllipsoid();
  *(OpenSim::WrapEllipsoid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1WrapEllipsoid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::WrapEllipsoid *arg1 = 0 ;
  OpenSim::WrapEllipsoid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapEllipsoid **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapEllipsoid const & reference is null");
    return 0;
  } 
  result = (OpenSim::WrapEllipsoid *)new OpenSim::WrapEllipsoid((OpenSim::WrapEllipsoid const &)*arg1);
  *(OpenSim::WrapEllipsoid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1WrapEllipsoid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::WrapEllipsoid *arg1 = (OpenSim::WrapEllipsoid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::WrapEllipsoid **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapEllipsoid_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::WrapEllipsoid *arg1 = (OpenSim::WrapEllipsoid *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapEllipsoid **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::WrapEllipsoid const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapEllipsoid_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::WrapEllipsoid *arg1 = (OpenSim::WrapEllipsoid *) 0 ;
  OpenSim::WrapEllipsoid *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::WrapEllipsoid **)&jarg1; 
  arg2 = *(OpenSim::WrapEllipsoid **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapEllipsoid const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::WrapEllipsoid const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapEllipsoid_1getWrapTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::WrapEllipsoid *arg1 = (OpenSim::WrapEllipsoid *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapEllipsoid **)&jarg1; 
  result = (char *)((OpenSim::WrapEllipsoid const *)arg1)->getWrapTypeName();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapEllipsoid_1getDimensionsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::WrapEllipsoid *arg1 = (OpenSim::WrapEllipsoid *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapEllipsoid **)&jarg1; 
  result = ((OpenSim::WrapEllipsoid const *)arg1)->getDimensionsString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapEllipsoid_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::WrapEllipsoid *arg1 = (OpenSim::WrapEllipsoid *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::WrapEllipsoid **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->scale(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapEllipsoid_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenSim::WrapEllipsoid *arg1 = (OpenSim::WrapEllipsoid *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg3 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::WrapEllipsoid **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2; 
  arg3 = *(OpenSim::AbstractBody **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapEllipsoid_1wrapLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::WrapEllipsoid *arg1 = (OpenSim::WrapEllipsoid *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  OpenSim::Array<double > *arg3 = 0 ;
  OpenSim::MuscleWrap *arg4 = 0 ;
  OpenSim::WrapResult *arg5 = 0 ;
  bool *arg6 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenSim::WrapEllipsoid **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  arg4 = *(OpenSim::MuscleWrap **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleWrap const & reference is null");
    return 0;
  } 
  arg5 = *(OpenSim::WrapResult **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapResult & reference is null");
    return 0;
  } 
  arg6 = *(bool **)&jarg6;
  if(!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::WrapEllipsoid const *)arg1)->wrapLine(*arg2,*arg3,(OpenSim::MuscleWrap const &)*arg4,*arg5,*arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapEllipsoid_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::WrapEllipsoid *arg1 = (OpenSim::WrapEllipsoid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapEllipsoid **)&jarg1; 
  ((OpenSim::WrapEllipsoid const *)arg1)->peteTest();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapEllipsoid_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::WrapEllipsoid::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapEllipsoid_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::WrapEllipsoid *arg1 = (OpenSim::WrapEllipsoid *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapEllipsoid **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::WrapEllipsoid const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapEllipsoid_1safeDownCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::WrapEllipsoid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::WrapEllipsoid *)OpenSim::WrapEllipsoid::safeDownCast(arg1);
  *(OpenSim::WrapEllipsoid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_WrapEllipsoid_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::WrapEllipsoid *arg1 = (OpenSim::WrapEllipsoid *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::WrapEllipsoid **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetWrapObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetWrapObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::AbstractWrapObject > *)new OpenSim::Set<OpenSim::AbstractWrapObject >();
  *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetWrapObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::AbstractWrapObject > *)new OpenSim::Set<OpenSim::AbstractWrapObject >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetWrapObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::AbstractWrapObject > *)new OpenSim::Set<OpenSim::AbstractWrapObject >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetWrapObject_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::AbstractWrapObject > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::AbstractWrapObject > *)new OpenSim::Set<OpenSim::AbstractWrapObject >((OpenSim::Set<OpenSim::AbstractWrapObject > const &)*arg1);
  *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  OpenSim::AbstractWrapObject *arg2 = (OpenSim::AbstractWrapObject *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = *(OpenSim::AbstractWrapObject **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->getIndex((OpenSim::AbstractWrapObject const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  OpenSim::AbstractWrapObject *arg2 = (OpenSim::AbstractWrapObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = *(OpenSim::AbstractWrapObject **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->getIndex((OpenSim::AbstractWrapObject const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  OpenSim::AbstractWrapObject *arg2 = (OpenSim::AbstractWrapObject *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = *(OpenSim::AbstractWrapObject **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::AbstractWrapObject > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::AbstractWrapObject > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::AbstractWrapObject > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  int arg2 ;
  OpenSim::AbstractWrapObject *arg3 = (OpenSim::AbstractWrapObject *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractWrapObject **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  OpenSim::AbstractWrapObject *arg2 = (OpenSim::AbstractWrapObject *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = *(OpenSim::AbstractWrapObject **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::AbstractWrapObject const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  int arg2 ;
  OpenSim::AbstractWrapObject *arg3 = (OpenSim::AbstractWrapObject *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractWrapObject **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  int arg2 ;
  OpenSim::AbstractWrapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::AbstractWrapObject *)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->get(arg2);
  *(OpenSim::AbstractWrapObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::AbstractWrapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::AbstractWrapObject *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::AbstractWrapObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  OpenSim::AbstractWrapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  result = (OpenSim::AbstractWrapObject *)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->getLast();
  *(OpenSim::AbstractWrapObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  OpenSim::AbstractWrapObject *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = *(OpenSim::AbstractWrapObject **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractWrapObject const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->searchBinary((OpenSim::AbstractWrapObject const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  OpenSim::AbstractWrapObject *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = *(OpenSim::AbstractWrapObject **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractWrapObject const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->searchBinary((OpenSim::AbstractWrapObject const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  OpenSim::AbstractWrapObject *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = *(OpenSim::AbstractWrapObject **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractWrapObject const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->searchBinary((OpenSim::AbstractWrapObject const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  OpenSim::AbstractWrapObject *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = *(OpenSim::AbstractWrapObject **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractWrapObject const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->searchBinary((OpenSim::AbstractWrapObject const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetWrapObject_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractWrapObject > *arg1 = (OpenSim::Set<OpenSim::AbstractWrapObject > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::AbstractWrapObject > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1WrapObjectSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::WrapObjectSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::WrapObjectSet *)new OpenSim::WrapObjectSet();
  *(OpenSim::WrapObjectSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1WrapObjectSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::WrapObjectSet *arg1 = 0 ;
  OpenSim::WrapObjectSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::WrapObjectSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapObjectSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::WrapObjectSet *)new OpenSim::WrapObjectSet((OpenSim::WrapObjectSet const &)*arg1);
  *(OpenSim::WrapObjectSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1WrapObjectSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::WrapObjectSet *arg1 = (OpenSim::WrapObjectSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::WrapObjectSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MuscleWrap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MuscleWrap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MuscleWrap *)new OpenSim::MuscleWrap();
  *(OpenSim::MuscleWrap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MuscleWrap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleWrap *arg1 = 0 ;
  OpenSim::MuscleWrap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleWrap const & reference is null");
    return 0;
  } 
  result = (OpenSim::MuscleWrap *)new OpenSim::MuscleWrap((OpenSim::MuscleWrap const &)*arg1);
  *(OpenSim::MuscleWrap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1MuscleWrap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::MuscleWrap const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  OpenSim::MuscleWrap *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  arg2 = *(OpenSim::MuscleWrap **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleWrap const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::MuscleWrap const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractMuscle *arg3 = (OpenSim::AbstractMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2; 
  arg3 = *(OpenSim::AbstractMuscle **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1getStartPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  result = (int)((OpenSim::MuscleWrap const *)arg1)->getStartPoint();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1setStartPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStartPoint(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1getEndPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  result = (int)((OpenSim::MuscleWrap const *)arg1)->getEndPoint();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1setEndPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setEndPoint(arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1getWrapObjectName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::MuscleWrap const *)arg1)->getWrapObjectName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1getWrapObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  OpenSim::AbstractWrapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  result = (OpenSim::AbstractWrapObject *)((OpenSim::MuscleWrap const *)arg1)->getWrapObject();
  *(OpenSim::AbstractWrapObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1setWrapObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  OpenSim::AbstractWrapObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  arg2 = *(OpenSim::AbstractWrapObject **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractWrapObject & reference is null");
    return ;
  } 
  (arg1)->setWrapObject(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1getWrapPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  int arg2 ;
  MuscleWrapPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    MuscleWrapPoint &_result_ref = (arg1)->getWrapPoint(arg2);
    result = (MuscleWrapPoint *) &_result_ref;
  }
  *(MuscleWrapPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1getMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  OpenSim::MuscleWrap::WrapMethod result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  result = (OpenSim::MuscleWrap::WrapMethod)((OpenSim::MuscleWrap const *)arg1)->getMethod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1setMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  OpenSim::MuscleWrap::WrapMethod arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  arg2 = (OpenSim::MuscleWrap::WrapMethod)jarg2; 
  (arg1)->setMethod(arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1getMethodName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::MuscleWrap const *)arg1)->getMethodName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1getMuscle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  OpenSim::AbstractMuscle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  result = (OpenSim::AbstractMuscle *)((OpenSim::MuscleWrap const *)arg1)->getMuscle();
  *(OpenSim::AbstractMuscle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1getPreviousWrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  OpenSim::WrapResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  {
    OpenSim::WrapResult const &_result_ref = ((OpenSim::MuscleWrap const *)arg1)->getPreviousWrap();
    result = (OpenSim::WrapResult *) &_result_ref;
  }
  *(OpenSim::WrapResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1setPreviousWrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  OpenSim::WrapResult *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  arg2 = *(OpenSim::WrapResult **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapResult const & reference is null");
    return ;
  } 
  (arg1)->setPreviousWrap((OpenSim::WrapResult const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1resetPreviousWrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  (arg1)->resetPreviousWrap();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrap_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::MuscleWrap *arg1 = (OpenSim::MuscleWrap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrap **)&jarg1; 
  ((OpenSim::MuscleWrap const *)arg1)->peteTest();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetMuscleWrap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMuscleWrap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::MuscleWrap > *)new OpenSim::Set<OpenSim::MuscleWrap >();
  *(OpenSim::Set<OpenSim::MuscleWrap > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMuscleWrap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::MuscleWrap > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::MuscleWrap > *)new OpenSim::Set<OpenSim::MuscleWrap >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::MuscleWrap > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMuscleWrap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::MuscleWrap > *)new OpenSim::Set<OpenSim::MuscleWrap >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::MuscleWrap > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMuscleWrap_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::MuscleWrap > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::MuscleWrap > *)new OpenSim::Set<OpenSim::MuscleWrap >((OpenSim::Set<OpenSim::MuscleWrap > const &)*arg1);
  *(OpenSim::Set<OpenSim::MuscleWrap > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  OpenSim::MuscleWrap *arg2 = (OpenSim::MuscleWrap *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = *(OpenSim::MuscleWrap **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->getIndex((OpenSim::MuscleWrap const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  OpenSim::MuscleWrap *arg2 = (OpenSim::MuscleWrap *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = *(OpenSim::MuscleWrap **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->getIndex((OpenSim::MuscleWrap const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  OpenSim::MuscleWrap *arg2 = (OpenSim::MuscleWrap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = *(OpenSim::MuscleWrap **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::MuscleWrap > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::MuscleWrap > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::MuscleWrap > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  int arg2 ;
  OpenSim::MuscleWrap *arg3 = (OpenSim::MuscleWrap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::MuscleWrap **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  OpenSim::MuscleWrap *arg2 = (OpenSim::MuscleWrap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = *(OpenSim::MuscleWrap **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::MuscleWrap const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  int arg2 ;
  OpenSim::MuscleWrap *arg3 = (OpenSim::MuscleWrap *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::MuscleWrap **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  int arg2 ;
  OpenSim::MuscleWrap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::MuscleWrap *)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->get(arg2);
  *(OpenSim::MuscleWrap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::MuscleWrap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::MuscleWrap *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::MuscleWrap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  OpenSim::MuscleWrap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  result = (OpenSim::MuscleWrap *)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->getLast();
  *(OpenSim::MuscleWrap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  OpenSim::MuscleWrap *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = *(OpenSim::MuscleWrap **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleWrap const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->searchBinary((OpenSim::MuscleWrap const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  OpenSim::MuscleWrap *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = *(OpenSim::MuscleWrap **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleWrap const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->searchBinary((OpenSim::MuscleWrap const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  OpenSim::MuscleWrap *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = *(OpenSim::MuscleWrap **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleWrap const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->searchBinary((OpenSim::MuscleWrap const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  OpenSim::MuscleWrap *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = *(OpenSim::MuscleWrap **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleWrap const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->searchBinary((OpenSim::MuscleWrap const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMuscleWrap_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MuscleWrap > *arg1 = (OpenSim::Set<OpenSim::MuscleWrap > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::MuscleWrap > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MuscleWrapSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MuscleWrapSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MuscleWrapSet *)new OpenSim::MuscleWrapSet();
  *(OpenSim::MuscleWrapSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MuscleWrapSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleWrapSet *arg1 = 0 ;
  OpenSim::MuscleWrapSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrapSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleWrapSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::MuscleWrapSet *)new OpenSim::MuscleWrapSet((OpenSim::MuscleWrapSet const &)*arg1);
  *(OpenSim::MuscleWrapSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1MuscleWrapSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MuscleWrapSet *arg1 = (OpenSim::MuscleWrapSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MuscleWrapSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AbstractBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::AbstractBody const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::AbstractBody const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1getDynamicsEngine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  OpenSim::AbstractDynamicsEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  result = (OpenSim::AbstractDynamicsEngine *)(arg1)->getDynamicsEngine();
  *(OpenSim::AbstractDynamicsEngine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  result = (double)((OpenSim::AbstractBody const *)arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1setMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setMass(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1getMassCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractBody const *)arg1)->getMassCenter(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1setMassCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  double *arg2 ;
  bool result;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return 0; 
  result = (bool)(arg1)->setMassCenter(arg2);
  jresult = (jboolean)result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1getInertia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  double (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  ((OpenSim::AbstractBody const *)arg1)->getInertia((double (*)[3])arg2);
  
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1setInertia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setInertia((OpenSim::Array<double > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1scale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->scale((OpenSim::Array<double > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1scale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->scale((OpenSim::Array<double > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1scaleInertialProperties_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->scaleInertialProperties((OpenSim::Array<double > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1scaleInertialProperties_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->scaleInertialProperties((OpenSim::Array<double > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1scaleMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->scaleMass(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1getDisplayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  result = (OpenSim::VisibleObject *)((OpenSim::AbstractBody const *)arg1)->getDisplayer();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1getWrapObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::AbstractWrapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::AbstractWrapObject *)((OpenSim::AbstractBody const *)arg1)->getWrapObject((std::string const &)*arg2);
  *(OpenSim::AbstractWrapObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1getWrapObjectSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  OpenSim::WrapObjectSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  {
    OpenSim::WrapObjectSet &_result_ref = (arg1)->getWrapObjectSet();
    result = (OpenSim::WrapObjectSet *) &_result_ref;
  }
  *(OpenSim::WrapObjectSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  ((OpenSim::AbstractBody const *)arg1)->peteTest();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::AbstractBody::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::AbstractBody const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1safeDownCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::AbstractBody *)OpenSim::AbstractBody::safeDownCast(arg1);
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractBody_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractBody *arg1 = (OpenSim::AbstractBody *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractBody **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmBody_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmBody *)new OpenSim::SimmBody();
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmBody_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmBody *arg1 = 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmBody **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmBody const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmBody *)new OpenSim::SimmBody((OpenSim::SimmBody const &)*arg1);
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmBody const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::SimmBody *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(OpenSim::SimmBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmBody const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmBody const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  result = (double)((OpenSim::SimmBody const *)arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1setMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setMass(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1getMassCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmBody const *)arg1)->getMassCenter(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1setMassCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  double *arg2 ;
  bool result;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return 0; 
  result = (bool)(arg1)->setMassCenter(arg2);
  jresult = (jboolean)result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1getInertia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  double (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  ((OpenSim::SimmBody const *)arg1)->getInertia((double (*)[3])arg2);
  
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1setInertia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setInertia((OpenSim::Array<double > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1scale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->scale((OpenSim::Array<double > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1scale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->scale((OpenSim::Array<double > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1scaleInertialProperties_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->scaleInertialProperties((OpenSim::Array<double > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1scaleInertialProperties_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->scaleInertialProperties((OpenSim::Array<double > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1scaleMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->scaleMass(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1getDisplayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  result = (OpenSim::VisibleObject *)((OpenSim::SimmBody const *)arg1)->getDisplayer();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1getScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::SimmBody const *)arg1)->getScaleFactors(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  ((OpenSim::SimmBody const *)arg1)->peteTest();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetBodies_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::AbstractBody > *)new OpenSim::Set<OpenSim::AbstractBody >();
  *(OpenSim::Set<OpenSim::AbstractBody > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetBodies_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::AbstractBody > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::AbstractBody > *)new OpenSim::Set<OpenSim::AbstractBody >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::AbstractBody > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetBodies_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::AbstractBody > *)new OpenSim::Set<OpenSim::AbstractBody >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::AbstractBody > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetBodies_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::AbstractBody > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::AbstractBody > *)new OpenSim::Set<OpenSim::AbstractBody >((OpenSim::Set<OpenSim::AbstractBody > const &)*arg1);
  *(OpenSim::Set<OpenSim::AbstractBody > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  OpenSim::AbstractBody *arg2 = (OpenSim::AbstractBody *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->getIndex((OpenSim::AbstractBody const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  OpenSim::AbstractBody *arg2 = (OpenSim::AbstractBody *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->getIndex((OpenSim::AbstractBody const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  OpenSim::AbstractBody *arg2 = (OpenSim::AbstractBody *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::AbstractBody > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::AbstractBody > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::AbstractBody > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody *arg3 = (OpenSim::AbstractBody *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  OpenSim::AbstractBody *arg2 = (OpenSim::AbstractBody *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::AbstractBody const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody *arg3 = (OpenSim::AbstractBody *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::AbstractBody *)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->get(arg2);
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::AbstractBody *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  result = (OpenSim::AbstractBody *)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->getLast();
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->searchBinary((OpenSim::AbstractBody const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->searchBinary((OpenSim::AbstractBody const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->searchBinary((OpenSim::AbstractBody const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->searchBinary((OpenSim::AbstractBody const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractBody > *arg1 = (OpenSim::Set<OpenSim::AbstractBody > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::AbstractBody > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1BodySet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::BodySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::BodySet *)new OpenSim::BodySet();
  *(OpenSim::BodySet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1BodySet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::BodySet *arg1 = 0 ;
  OpenSim::BodySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::BodySet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::BodySet const & reference is null");
    return 0;
  } 
  result = (OpenSim::BodySet *)new OpenSim::BodySet((OpenSim::BodySet const &)*arg1);
  *(OpenSim::BodySet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1BodySet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::BodySet *arg1 = (OpenSim::BodySet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::BodySet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_BodySet_1scale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  OpenSim::BodySet *arg1 = (OpenSim::BodySet *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::BodySet **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->scale((OpenSim::ScaleSet const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_BodySet_1scale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::BodySet *arg1 = (OpenSim::BodySet *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::BodySet **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->scale((OpenSim::ScaleSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Function(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Function const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1setMinX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMinX(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1getMinX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (double)((OpenSim::Function const *)arg1)->getMinX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1setMaxX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxX(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1getMaxX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (double)((OpenSim::Function const *)arg1)->getMaxX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1setMinY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMinY(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1getMinY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (double)((OpenSim::Function const *)arg1)->getMinY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1setMaxY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxY(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1getMaxY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (double)((OpenSim::Function const *)arg1)->getMaxY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1setMinZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMinZ(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1getMinZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (double)((OpenSim::Function const *)arg1)->getMinZ();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1setMaxZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxZ(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1getMaxZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (double)((OpenSim::Function const *)arg1)->getMaxZ();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1updateBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  (arg1)->updateBoundingBox();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1getNumberOfPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (int)((OpenSim::Function const *)arg1)->getNumberOfPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1evaluate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1evaluate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->evaluate(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1evaluate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  int arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->evaluate(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1evaluate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->evaluate(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1evaluateTotalFirstDerivative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->evaluateTotalFirstDerivative(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1evaluateTotalSecondDerivative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->evaluateTotalSecondDerivative(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1scaleY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->scaleY(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::Function::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::Function const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1safeDownCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::Function *)OpenSim::Function::safeDownCast(arg1);
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Constant_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Constant *)new OpenSim::Constant();
  *(OpenSim::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Constant_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  std::string *arg4 = 0 ;
  OpenSim::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (OpenSim::Constant *)new OpenSim::Constant(arg1,(double const *)arg2,(double const *)arg3,(std::string const &)*arg4);
  *(OpenSim::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Constant_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  OpenSim::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (OpenSim::Constant *)new OpenSim::Constant(arg1,(double const *)arg2,(double const *)arg3);
  *(OpenSim::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Constant_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Constant *arg1 = 0 ;
  OpenSim::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Constant **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Constant const & reference is null");
    return 0;
  } 
  result = (OpenSim::Constant *)new OpenSim::Constant((OpenSim::Constant const &)*arg1);
  *(OpenSim::Constant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Constant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Constant const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1getNumberOfPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  result = (int)((OpenSim::Constant const *)arg1)->getNumberOfPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setValue(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  ((OpenSim::Constant const *)arg1)->peteTest();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1updateBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  (arg1)->updateBoundingBox();
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1evaluate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1evaluate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->evaluate(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1evaluate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  int arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->evaluate(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1evaluate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->evaluate(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1evaluate_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  result = (double)(arg1)->evaluate();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1scaleY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->scaleY(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AbstractDof(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AbstractDof *arg1 = (OpenSim::AbstractDof *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDof **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDof_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractDof *arg1 = (OpenSim::AbstractDof *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDof **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::AbstractDof const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDof_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractDof *arg1 = (OpenSim::AbstractDof *) 0 ;
  OpenSim::AbstractDof *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDof **)&jarg1; 
  arg2 = *(OpenSim::AbstractDof **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractDof const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::AbstractDof const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDof_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenSim::AbstractDof *arg1 = (OpenSim::AbstractDof *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractJoint *arg3 = (OpenSim::AbstractJoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::AbstractDof **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2; 
  arg3 = *(OpenSim::AbstractJoint **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDof_1getAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractDof *arg1 = (OpenSim::AbstractDof *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDof **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractDof const *)arg1)->getAxis(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDof_1getAxisPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractDof *arg1 = (OpenSim::AbstractDof *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDof **)&jarg1; 
  result = (double *)((OpenSim::AbstractDof const *)arg1)->getAxisPtr();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDof_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDof *arg1 = (OpenSim::AbstractDof *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDof **)&jarg1; 
  result = (double)(arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDof_1getMotionType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::AbstractDof *arg1 = (OpenSim::AbstractDof *) 0 ;
  OpenSim::AbstractDof::DofType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDof **)&jarg1; 
  result = (OpenSim::AbstractDof::DofType)((OpenSim::AbstractDof const *)arg1)->getMotionType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDof_1getCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractDof *arg1 = (OpenSim::AbstractDof *) 0 ;
  OpenSim::AbstractCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDof **)&jarg1; 
  result = (OpenSim::AbstractCoordinate *)((OpenSim::AbstractDof const *)arg1)->getCoordinate();
  *(OpenSim::AbstractCoordinate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDof_1getFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractDof *arg1 = (OpenSim::AbstractDof *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDof **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::AbstractDof const *)arg1)->getFunction();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDof_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractDof *arg1 = (OpenSim::AbstractDof *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDof **)&jarg1; 
  (arg1)->peteTest();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AbstractCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::AbstractCoordinate const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractCoordinate const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::AbstractCoordinate const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getDynamicsEngine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  OpenSim::AbstractDynamicsEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (OpenSim::AbstractDynamicsEngine *)(arg1)->getDynamicsEngine();
  *(OpenSim::AbstractDynamicsEngine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1updateFromCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractCoordinate const & reference is null");
    return ;
  } 
  (arg1)->updateFromCoordinate((OpenSim::AbstractCoordinate const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (double)((OpenSim::AbstractCoordinate const *)arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setValue(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getValueUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (bool)((OpenSim::AbstractCoordinate const *)arg1)->getValueUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractCoordinate const *)arg1)->getRange(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1setRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  double *arg2 ;
  bool result;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return 0; 
  result = (bool)(arg1)->setRange(arg2);
  jresult = (jboolean)result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getRangeMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (double)((OpenSim::AbstractCoordinate const *)arg1)->getRangeMin();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getRangeMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (double)((OpenSim::AbstractCoordinate const *)arg1)->getRangeMax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1setRangeMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setRangeMin(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1setRangeMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setRangeMax(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getRangeUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (bool)((OpenSim::AbstractCoordinate const *)arg1)->getRangeUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (double)((OpenSim::AbstractCoordinate const *)arg1)->getTolerance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1setTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setTolerance(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getToleranceUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (bool)((OpenSim::AbstractCoordinate const *)arg1)->getToleranceUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getStiffness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (double)((OpenSim::AbstractCoordinate const *)arg1)->getStiffness();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1setStiffness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setStiffness(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getStiffnessUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (bool)((OpenSim::AbstractCoordinate const *)arg1)->getStiffnessUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getDefaultValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (double)((OpenSim::AbstractCoordinate const *)arg1)->getDefaultValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1setDefaultValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setDefaultValue(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getDefaultValueUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (bool)((OpenSim::AbstractCoordinate const *)arg1)->getDefaultValueUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getClamped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (bool)((OpenSim::AbstractCoordinate const *)arg1)->getClamped();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1setClamped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setClamped(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getClampedUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (bool)((OpenSim::AbstractCoordinate const *)arg1)->getClampedUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getLocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (bool)((OpenSim::AbstractCoordinate const *)arg1)->getLocked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1setLocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setLocked(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getLockedUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (bool)((OpenSim::AbstractCoordinate const *)arg1)->getLockedUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1addJointToList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  OpenSim::AbstractJoint *arg2 = (OpenSim::AbstractJoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  arg2 = *(OpenSim::AbstractJoint **)&jarg2; 
  (arg1)->addJointToList(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1addPathToList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  OpenSim::SimmPath *arg2 = (OpenSim::SimmPath *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  arg2 = *(OpenSim::SimmPath **)&jarg2; 
  (arg1)->addPathToList(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1isUsedInModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (bool)((OpenSim::AbstractCoordinate const *)arg1)->isUsedInModel();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1isRestraintActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (bool)((OpenSim::AbstractCoordinate const *)arg1)->isRestraintActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getRestraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::AbstractCoordinate const *)arg1)->getRestraintFunction();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getMinRestraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::AbstractCoordinate const *)arg1)->getMinRestraintFunction();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getMaxRestraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::AbstractCoordinate const *)arg1)->getMaxRestraintFunction();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getMotionType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  OpenSim::AbstractDof::DofType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (OpenSim::AbstractDof::DofType)((OpenSim::AbstractCoordinate const *)arg1)->getMotionType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1determineType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  (arg1)->determineType();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1getConstrained(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  result = (bool)((OpenSim::AbstractCoordinate const *)arg1)->getConstrained();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractCoordinate_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractCoordinate *arg1 = (OpenSim::AbstractCoordinate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractCoordinate **)&jarg1; 
  ((OpenSim::AbstractCoordinate const *)arg1)->peteTest();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmCoordinate_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmCoordinate *)new OpenSim::SimmCoordinate();
  *(OpenSim::SimmCoordinate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmCoordinate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = 0 ;
  OpenSim::SimmCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmCoordinate const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmCoordinate *)new OpenSim::SimmCoordinate((OpenSim::SimmCoordinate const &)*arg1);
  *(OpenSim::SimmCoordinate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmCoordinate const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::SimmCoordinate *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmCoordinate const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmCoordinate const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1updateFromCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractCoordinate const & reference is null");
    return ;
  } 
  (arg1)->updateFromCoordinate((OpenSim::AbstractCoordinate const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (double)((OpenSim::SimmCoordinate const *)arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setValue(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getValueUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (bool)((OpenSim::SimmCoordinate const *)arg1)->getValueUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmCoordinate const *)arg1)->getRange(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1setRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double *arg2 ;
  bool result;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return 0; 
  result = (bool)(arg1)->setRange(arg2);
  jresult = (jboolean)result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getRangeMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (double)((OpenSim::SimmCoordinate const *)arg1)->getRangeMin();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getRangeMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (double)((OpenSim::SimmCoordinate const *)arg1)->getRangeMax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1setRangeMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setRangeMin(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1setRangeMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setRangeMax(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getRangeUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (bool)((OpenSim::SimmCoordinate const *)arg1)->getRangeUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (double)((OpenSim::SimmCoordinate const *)arg1)->getTolerance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1setTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setTolerance(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getToleranceUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (bool)((OpenSim::SimmCoordinate const *)arg1)->getToleranceUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getStiffness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (double)((OpenSim::SimmCoordinate const *)arg1)->getStiffness();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1setStiffness(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setStiffness(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getStiffnessUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (bool)((OpenSim::SimmCoordinate const *)arg1)->getStiffnessUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getDefaultValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (double)((OpenSim::SimmCoordinate const *)arg1)->getDefaultValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1setDefaultValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setDefaultValue(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getDefaultValueUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (bool)((OpenSim::SimmCoordinate const *)arg1)->getDefaultValueUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getClamped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (bool)((OpenSim::SimmCoordinate const *)arg1)->getClamped();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1setClamped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setClamped(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getClampedUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (bool)((OpenSim::SimmCoordinate const *)arg1)->getClampedUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getLocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (bool)((OpenSim::SimmCoordinate const *)arg1)->getLocked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1setLocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setLocked(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getLockedUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (bool)((OpenSim::SimmCoordinate const *)arg1)->getLockedUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1addJointToList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::AbstractJoint *arg2 = (OpenSim::AbstractJoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(OpenSim::AbstractJoint **)&jarg2; 
  (arg1)->addJointToList(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1addPathToList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::SimmPath *arg2 = (OpenSim::SimmPath *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(OpenSim::SimmPath **)&jarg2; 
  (arg1)->addPathToList(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1isUsedInModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (bool)((OpenSim::SimmCoordinate const *)arg1)->isUsedInModel();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1isRestraintActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (bool)((OpenSim::SimmCoordinate const *)arg1)->isRestraintActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getRestraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::SimmCoordinate const *)arg1)->getRestraintFunction();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getMinRestraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::SimmCoordinate const *)arg1)->getMinRestraintFunction();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getMaxRestraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::SimmCoordinate const *)arg1)->getMaxRestraintFunction();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getMotionType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::AbstractDof::DofType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (OpenSim::AbstractDof::DofType)((OpenSim::SimmCoordinate const *)arg1)->getMotionType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getKeys_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  std::string *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  ((OpenSim::SimmCoordinate const *)arg1)->getKeys(arg2);
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getKeys_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  {
    OpenSim::Array<std::string > const &_result_ref = ((OpenSim::SimmCoordinate const *)arg1)->getKeys();
    result = (OpenSim::Array<std::string > *) &_result_ref;
  }
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getJointList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::Array<OpenSim::AbstractJoint * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  {
    OpenSim::Array<OpenSim::AbstractJoint * > const &_result_ref = ((OpenSim::SimmCoordinate const *)arg1)->getJointList();
    result = (OpenSim::Array<OpenSim::AbstractJoint * > *) &_result_ref;
  }
  *(OpenSim::Array<OpenSim::AbstractJoint * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getPathList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::Array<OpenSim::SimmPath * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  {
    OpenSim::Array<OpenSim::SimmPath * > const &_result_ref = ((OpenSim::SimmCoordinate const *)arg1)->getPathList();
    result = (OpenSim::Array<OpenSim::SimmPath * > *) &_result_ref;
  }
  *(OpenSim::Array<OpenSim::SimmPath * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1determineType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  (arg1)->determineType();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  ((OpenSim::SimmCoordinate const *)arg1)->peteTest();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetCoordinates_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::AbstractCoordinate > *)new OpenSim::Set<OpenSim::AbstractCoordinate >();
  *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetCoordinates_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::AbstractCoordinate > *)new OpenSim::Set<OpenSim::AbstractCoordinate >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetCoordinates_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::AbstractCoordinate > *)new OpenSim::Set<OpenSim::AbstractCoordinate >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetCoordinates_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::AbstractCoordinate > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::AbstractCoordinate > *)new OpenSim::Set<OpenSim::AbstractCoordinate >((OpenSim::Set<OpenSim::AbstractCoordinate > const &)*arg1);
  *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = (OpenSim::AbstractCoordinate *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->getIndex((OpenSim::AbstractCoordinate const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = (OpenSim::AbstractCoordinate *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->getIndex((OpenSim::AbstractCoordinate const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::AbstractCoordinate > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::AbstractCoordinate > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::AbstractCoordinate > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  int arg2 ;
  OpenSim::AbstractCoordinate *arg3 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractCoordinate **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::AbstractCoordinate const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  int arg2 ;
  OpenSim::AbstractCoordinate *arg3 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractCoordinate **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  int arg2 ;
  OpenSim::AbstractCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::AbstractCoordinate *)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->get(arg2);
  *(OpenSim::AbstractCoordinate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::AbstractCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::AbstractCoordinate *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::AbstractCoordinate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  OpenSim::AbstractCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  result = (OpenSim::AbstractCoordinate *)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->getLast();
  *(OpenSim::AbstractCoordinate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractCoordinate const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->searchBinary((OpenSim::AbstractCoordinate const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractCoordinate const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->searchBinary((OpenSim::AbstractCoordinate const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractCoordinate const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->searchBinary((OpenSim::AbstractCoordinate const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractCoordinate const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->searchBinary((OpenSim::AbstractCoordinate const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCoordinates_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractCoordinate > *arg1 = (OpenSim::Set<OpenSim::AbstractCoordinate > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::AbstractCoordinate > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1CoordinateSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::CoordinateSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::CoordinateSet *)new OpenSim::CoordinateSet();
  *(OpenSim::CoordinateSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1CoordinateSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::CoordinateSet *arg1 = 0 ;
  OpenSim::CoordinateSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::CoordinateSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::CoordinateSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::CoordinateSet *)new OpenSim::CoordinateSet((OpenSim::CoordinateSet const &)*arg1);
  *(OpenSim::CoordinateSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1CoordinateSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::CoordinateSet *arg1 = (OpenSim::CoordinateSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::CoordinateSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AbstractJoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AbstractJoint *arg1 = (OpenSim::AbstractJoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractJoint **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractJoint_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractJoint *arg1 = (OpenSim::AbstractJoint *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractJoint **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::AbstractJoint const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractJoint_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractJoint *arg1 = (OpenSim::AbstractJoint *) 0 ;
  OpenSim::AbstractJoint *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractJoint **)&jarg1; 
  arg2 = *(OpenSim::AbstractJoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractJoint const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::AbstractJoint const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractJoint_1getDynamicsEngine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractJoint *arg1 = (OpenSim::AbstractJoint *) 0 ;
  OpenSim::AbstractDynamicsEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractJoint **)&jarg1; 
  result = (OpenSim::AbstractDynamicsEngine *)(arg1)->getDynamicsEngine();
  *(OpenSim::AbstractDynamicsEngine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractJoint_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractJoint *arg1 = (OpenSim::AbstractJoint *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractJoint **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractJoint_1invalidate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractJoint *arg1 = (OpenSim::AbstractJoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractJoint **)&jarg1; 
  (arg1)->invalidate();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractJoint_1getDofSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractJoint *arg1 = (OpenSim::AbstractJoint *) 0 ;
  OpenSim::DofSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractJoint **)&jarg1; 
  result = (OpenSim::DofSet *)((OpenSim::AbstractJoint const *)arg1)->getDofSet();
  *(OpenSim::DofSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractJoint_1getChildBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractJoint *arg1 = (OpenSim::AbstractJoint *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractJoint **)&jarg1; 
  result = (OpenSim::AbstractBody *)((OpenSim::AbstractJoint const *)arg1)->getChildBody();
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractJoint_1getParentBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractJoint *arg1 = (OpenSim::AbstractJoint *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractJoint **)&jarg1; 
  result = (OpenSim::AbstractBody *)((OpenSim::AbstractJoint const *)arg1)->getParentBody();
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractJoint_1getForwardTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractJoint *arg1 = (OpenSim::AbstractJoint *) 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractJoint **)&jarg1; 
  {
    OpenSim::Transform const &_result_ref = (arg1)->getForwardTransform();
    result = (OpenSim::Transform *) &_result_ref;
  }
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractJoint_1getInverseTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractJoint *arg1 = (OpenSim::AbstractJoint *) 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractJoint **)&jarg1; 
  {
    OpenSim::Transform const &_result_ref = (arg1)->getInverseTransform();
    result = (OpenSim::Transform *) &_result_ref;
  }
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractJoint_1isCoordinateUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractJoint *arg1 = (OpenSim::AbstractJoint *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractJoint **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2; 
  result = (bool)((OpenSim::AbstractJoint const *)arg1)->isCoordinateUsed(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractJoint_1hasXYZAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractJoint *arg1 = (OpenSim::AbstractJoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractJoint **)&jarg1; 
  result = (bool)((OpenSim::AbstractJoint const *)arg1)->hasXYZAxes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractJoint_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractJoint *arg1 = (OpenSim::AbstractJoint *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractJoint **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->scale((OpenSim::ScaleSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractJoint_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractJoint *arg1 = (OpenSim::AbstractJoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractJoint **)&jarg1; 
  (arg1)->peteTest();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmJoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmJoint *)new OpenSim::SimmJoint();
  *(OpenSim::SimmJoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmJoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = 0 ;
  OpenSim::SimmJoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmJoint **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmJoint const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmJoint *)new OpenSim::SimmJoint((OpenSim::SimmJoint const &)*arg1);
  *(OpenSim::SimmJoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmJoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmJoint const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::SimmJoint *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  arg2 = *(OpenSim::SimmJoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmJoint const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmJoint const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1getDofSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::DofSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  result = (OpenSim::DofSet *)((OpenSim::SimmJoint const *)arg1)->getDofSet();
  *(OpenSim::DofSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1getChildBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  result = (OpenSim::AbstractBody *)((OpenSim::SimmJoint const *)arg1)->getChildBody();
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1getParentBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  result = (OpenSim::AbstractBody *)((OpenSim::SimmJoint const *)arg1)->getParentBody();
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1getForwardTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  {
    OpenSim::Transform const &_result_ref = (arg1)->getForwardTransform();
    result = (OpenSim::Transform *) &_result_ref;
  }
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1getInverseTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  {
    OpenSim::Transform const &_result_ref = (arg1)->getInverseTransform();
    result = (OpenSim::Transform *) &_result_ref;
  }
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1isCoordinateUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = (OpenSim::AbstractCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2; 
  result = (bool)((OpenSim::SimmJoint const *)arg1)->isCoordinateUsed(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1hasXYZAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  result = (bool)((OpenSim::SimmJoint const *)arg1)->hasXYZAxes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1scale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->scale((OpenSim::ScaleSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1scale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->scale((OpenSim::Array<double > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  (arg1)->peteTest();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetJoints(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetJoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::AbstractJoint > *)new OpenSim::Set<OpenSim::AbstractJoint >();
  *(OpenSim::Set<OpenSim::AbstractJoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetJoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::AbstractJoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::AbstractJoint > *)new OpenSim::Set<OpenSim::AbstractJoint >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::AbstractJoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetJoints_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::AbstractJoint > *)new OpenSim::Set<OpenSim::AbstractJoint >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::AbstractJoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetJoints_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::AbstractJoint > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::AbstractJoint > *)new OpenSim::Set<OpenSim::AbstractJoint >((OpenSim::Set<OpenSim::AbstractJoint > const &)*arg1);
  *(OpenSim::Set<OpenSim::AbstractJoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  OpenSim::AbstractJoint *arg2 = (OpenSim::AbstractJoint *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = *(OpenSim::AbstractJoint **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->getIndex((OpenSim::AbstractJoint const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  OpenSim::AbstractJoint *arg2 = (OpenSim::AbstractJoint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = *(OpenSim::AbstractJoint **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->getIndex((OpenSim::AbstractJoint const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  OpenSim::AbstractJoint *arg2 = (OpenSim::AbstractJoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = *(OpenSim::AbstractJoint **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::AbstractJoint > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::AbstractJoint > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::AbstractJoint > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  int arg2 ;
  OpenSim::AbstractJoint *arg3 = (OpenSim::AbstractJoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractJoint **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  OpenSim::AbstractJoint *arg2 = (OpenSim::AbstractJoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = *(OpenSim::AbstractJoint **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::AbstractJoint const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  int arg2 ;
  OpenSim::AbstractJoint *arg3 = (OpenSim::AbstractJoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractJoint **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  int arg2 ;
  OpenSim::AbstractJoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::AbstractJoint *)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->get(arg2);
  *(OpenSim::AbstractJoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::AbstractJoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::AbstractJoint *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::AbstractJoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  OpenSim::AbstractJoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  result = (OpenSim::AbstractJoint *)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->getLast();
  *(OpenSim::AbstractJoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  OpenSim::AbstractJoint *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = *(OpenSim::AbstractJoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractJoint const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->searchBinary((OpenSim::AbstractJoint const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  OpenSim::AbstractJoint *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = *(OpenSim::AbstractJoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractJoint const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->searchBinary((OpenSim::AbstractJoint const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  OpenSim::AbstractJoint *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = *(OpenSim::AbstractJoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractJoint const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->searchBinary((OpenSim::AbstractJoint const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  OpenSim::AbstractJoint *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = *(OpenSim::AbstractJoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractJoint const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->searchBinary((OpenSim::AbstractJoint const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetJoints_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::AbstractJoint > *arg1 = (OpenSim::Set<OpenSim::AbstractJoint > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::AbstractJoint > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1JointSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::JointSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::JointSet *)new OpenSim::JointSet();
  *(OpenSim::JointSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1JointSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::JointSet *arg1 = 0 ;
  OpenSim::JointSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::JointSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::JointSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::JointSet *)new OpenSim::JointSet((OpenSim::JointSet const &)*arg1);
  *(OpenSim::JointSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1JointSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::JointSet *arg1 = (OpenSim::JointSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::JointSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_JointSet_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::JointSet *arg1 = (OpenSim::JointSet *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::JointSet **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->scale((OpenSim::ScaleSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AbstractDynamicsEngine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::AbstractDynamicsEngine const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getNumBodies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getNumBodies();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getNumJoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getNumJoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getNumCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getNumCoordinates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getNumSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getNumSpeeds();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getNumMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getNumMarkers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (OpenSim::Model *)((OpenSim::AbstractDynamicsEngine const *)arg1)->getModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getGravity(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  bool result;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return 0; 
  result = (bool)(arg1)->setGravity(arg2);
  jresult = (jboolean)result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getBodySet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::BodySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (OpenSim::BodySet *)(arg1)->getBodySet();
  *(OpenSim::BodySet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getGroundBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  {
    OpenSim::AbstractBody &_result_ref = ((OpenSim::AbstractDynamicsEngine const *)arg1)->getGroundBody();
    result = (OpenSim::AbstractBody *) &_result_ref;
  }
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getLeafBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractJoint *arg2 = (OpenSim::AbstractJoint *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractJoint **)&jarg2; 
  result = (OpenSim::AbstractBody *)((OpenSim::AbstractDynamicsEngine const *)arg1)->getLeafBody(arg2);
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getWrapObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::AbstractWrapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::AbstractWrapObject *)((OpenSim::AbstractDynamicsEngine const *)arg1)->getWrapObject((std::string const &)*arg2);
  *(OpenSim::AbstractWrapObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getJointSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::JointSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (OpenSim::JointSet *)(arg1)->getJointSet();
  *(OpenSim::JointSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getCoordinateSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::CoordinateSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (OpenSim::CoordinateSet *)(arg1)->getCoordinateSet();
  *(OpenSim::CoordinateSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1updateCoordinateSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::CoordinateSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::CoordinateSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::CoordinateSet & reference is null");
    return ;
  } 
  (arg1)->updateCoordinateSet(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getUnlockedCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::CoordinateSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::CoordinateSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::CoordinateSet & reference is null");
    return ;
  } 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getUnlockedCoordinates(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1findUnconstrainedDof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = 0 ;
  OpenSim::AbstractJoint **arg3 = 0 ;
  OpenSim::AbstractDof *result = 0 ;
  OpenSim::AbstractJoint *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractCoordinate const & reference is null");
    return 0;
  } 
  temp3 = *(OpenSim::AbstractJoint **)&jarg3;
  arg3 = &temp3; 
  result = (OpenSim::AbstractDof *)(arg1)->findUnconstrainedDof((OpenSim::AbstractCoordinate const &)*arg2,*arg3);
  *(OpenSim::AbstractDof **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getSpeedSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::SpeedSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (OpenSim::SpeedSet *)(arg1)->getSpeedSet();
  *(OpenSim::SpeedSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getMarkerSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::MarkerSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (OpenSim::MarkerSet *)(arg1)->getMarkerSet();
  *(OpenSim::MarkerSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1writeMarkerFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->writeMarkerFile((std::string const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1replaceMarkerSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::MarkerSet *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::MarkerSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MarkerSet & reference is null");
    return 0;
  } 
  result = (int)(arg1)->replaceMarkerSet(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1updateMarkerSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::MarkerSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::MarkerSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MarkerSet & reference is null");
    return ;
  } 
  (arg1)->updateMarkerSet(*arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1deleteUnusedMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->deleteUnusedMarkers((OpenSim::Array<std::string > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setConfiguration((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getConfiguration(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setConfiguration((double const (*))arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getConfiguration(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getCoordinates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getSpeeds(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getAccelerations(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1extractConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->extractConfiguration((double const (*))arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg2; 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyDefaultConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  (arg1)->applyDefaultConfiguration();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1assemble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jint jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  int *arg4 = (int *) 0 ;
  double arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(int **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  result = (int)(arg1)->assemble(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1scale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1scale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1scale_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getSystemInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 ;
  double (*arg4)[3] ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getSystemInertia(arg2,arg3,(double (*)[3])arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getSystemInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getSystemInertia(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getPosition((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getVelocity((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getAcceleration((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getDirectionCosines((OpenSim::AbstractBody const &)*arg2,(double (*)[3])arg3);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getDirectionCosines((OpenSim::AbstractBody const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getAngularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getAngularVelocity((OpenSim::AbstractBody const &)*arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getAngularVelocityBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getAngularVelocityBodyLocal((OpenSim::AbstractBody const &)*arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getAngularAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getAngularAcceleration((OpenSim::AbstractBody const &)*arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getAngularAccelerationBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getAngularAccelerationBodyLocal((OpenSim::AbstractBody const &)*arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  OpenSim::Transform result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return 0;
  } 
  result = (arg1)->getTransform((OpenSim::AbstractBody const &)*arg2);
  *(OpenSim::Transform **)&jresult = new OpenSim::Transform((OpenSim::Transform &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForce((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForces(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  
  
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForces(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const *)arg4,(double const *)arg5);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyForceBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForceBodyLocal((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyForcesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  
  
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyForcesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const *)arg4,(double const *)arg5);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorque((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyTorques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double (*arg4)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorques(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const (*)[3])arg4);
  
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyTorques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorques(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const *)arg4);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyTorqueBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorqueBodyLocal((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyTorquesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double (*arg4)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const (*)[3])arg4);
  
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyTorquesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const *)arg4);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractCoordinate const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->applyGeneralizedForce((OpenSim::AbstractCoordinate const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyGeneralizedForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->applyGeneralizedForces((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyGeneralizedForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractCoordinate **arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractCoordinate ***)&jarg3; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyGeneralizedForces(arg2,(OpenSim::AbstractCoordinate const *(*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  
  delete [] arg4; 
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getNetAppliedGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractCoordinate const & reference is null");
    return 0;
  } 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getNetAppliedGeneralizedForce((OpenSim::AbstractCoordinate const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1computeGeneralizedForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->computeGeneralizedForces(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1computeReactions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double (*arg2)[3] ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->computeReactions((double (*)[3])arg2,(double (*)[3])arg3);
  
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1computeConstrainedCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->computeConstrainedCoordinates(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formCompleteStorages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  OpenSim::Storage **arg3 = 0 ;
  OpenSim::Storage **arg4 = 0 ;
  OpenSim::Storage *temp3 = 0 ;
  OpenSim::Storage *temp4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return ;
  } 
  temp3 = *(OpenSim::Storage **)&jarg3;
  arg3 = &temp3; 
  temp4 = *(OpenSim::Storage **)&jarg4;
  arg4 = &temp4; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->formCompleteStorages((OpenSim::Storage const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formMassMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->formMassMatrix(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formEulerTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->formEulerTransform((OpenSim::AbstractBody const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formJacobianTranslation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  OpenSim::AbstractBody *arg5 = (OpenSim::AbstractBody *) 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(OpenSim::AbstractBody **)&jarg5; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->formJacobianTranslation((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,arg4,(OpenSim::AbstractBody const *)arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formJacobianTranslation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->formJacobianTranslation((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formJacobianOrientation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  OpenSim::AbstractBody *arg4 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3; 
  arg4 = *(OpenSim::AbstractBody **)&jarg4; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->formJacobianOrientation((OpenSim::AbstractBody const &)*arg2,arg3,(OpenSim::AbstractBody const *)arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formJacobianOrientation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->formJacobianOrientation((OpenSim::AbstractBody const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formJacobianEuler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  OpenSim::AbstractBody *arg4 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3; 
  arg4 = *(OpenSim::AbstractBody **)&jarg4; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->formJacobianEuler((OpenSim::AbstractBody const &)*arg2,arg3,(OpenSim::AbstractBody const *)arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formJacobianEuler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->formJacobianEuler((OpenSim::AbstractBody const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1computeDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  (arg1)->computeDerivatives(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1transform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jlong jarg4, jobject jarg4_, jdoubleArray jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  OpenSim::AbstractBody *arg4 = 0 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(OpenSim::AbstractBody **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->transform((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,(OpenSim::AbstractBody const &)*arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1transform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  OpenSim::Array<double > *arg3 = 0 ;
  OpenSim::AbstractBody *arg4 = 0 ;
  OpenSim::Array<double > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  arg4 = *(OpenSim::AbstractBody **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg5 = *(OpenSim::Array<double > **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->transform((OpenSim::AbstractBody const &)*arg2,(OpenSim::Array<double > const &)*arg3,(OpenSim::AbstractBody const &)*arg4,*arg5);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1transformPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jlong jarg4, jobject jarg4_, jdoubleArray jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  OpenSim::AbstractBody *arg4 = 0 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(OpenSim::AbstractBody **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->transformPosition((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,(OpenSim::AbstractBody const &)*arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1transformPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  OpenSim::Array<double > *arg3 = 0 ;
  OpenSim::AbstractBody *arg4 = 0 ;
  OpenSim::Array<double > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  arg4 = *(OpenSim::AbstractBody **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg5 = *(OpenSim::Array<double > **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->transformPosition((OpenSim::AbstractBody const &)*arg2,(OpenSim::Array<double > const &)*arg3,(OpenSim::AbstractBody const &)*arg4,*arg5);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1transformPosition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->transformPosition((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1transformPosition_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  OpenSim::Array<double > *arg3 = 0 ;
  OpenSim::Array<double > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  arg4 = *(OpenSim::Array<double > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->transformPosition((OpenSim::AbstractBody const &)*arg2,(OpenSim::Array<double > const &)*arg3,*arg4);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1calcDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jlong jarg4, jobject jarg4_, jdoubleArray jarg5) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  OpenSim::AbstractBody *arg4 = 0 ;
  double *arg5 ;
  double result;
  jdouble *jarr3 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return 0;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return 0; 
  arg4 = *(OpenSim::AbstractBody **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return 0;
  } 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return 0; 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->calcDistance((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,(OpenSim::AbstractBody const &)*arg4,(double const (*))arg5);
  jresult = (jdouble)result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg5; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1calcDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  OpenSim::Array<double > *arg3 = 0 ;
  OpenSim::AbstractBody *arg4 = 0 ;
  OpenSim::Array<double > *arg5 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return 0;
  } 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return 0;
  } 
  arg4 = *(OpenSim::AbstractBody **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return 0;
  } 
  arg5 = *(OpenSim::Array<double > **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return 0;
  } 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->calcDistance((OpenSim::AbstractBody const &)*arg2,(OpenSim::Array<double > const &)*arg3,(OpenSim::AbstractBody const &)*arg4,(OpenSim::Array<double > const &)*arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertQuaternionsToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertQuaternionsToAngles(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertQuaternionsToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertQuaternionsToAngles(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertAnglesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertAnglesToQuaternions(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertAnglesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertAnglesToQuaternions(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertRadiansToDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertRadiansToDegrees(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertDegreesToRadians_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertDegreesToRadians(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertDegreesToRadians_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertDegreesToRadians(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertRadiansToDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertRadiansToDegrees(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertAnglesToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double (*arg5)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,(double (*)[3])arg5);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertAnglesToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertDirectionCosinesToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertDirectionCosinesToAngles((double (*)[3])arg2,arg3,arg4,arg5);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertDirectionCosinesToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertDirectionCosinesToAngles(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertDirectionCosinesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertDirectionCosinesToQuaternions((double (*)[3])arg2,arg3,arg4,arg5,arg6);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertDirectionCosinesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertDirectionCosinesToQuaternions(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertQuaternionsToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double (*arg6)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double (**)[3])&jarg6; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,(double (*)[3])arg6);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertQuaternionsToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->peteTest();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmKinematicsEngine_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmKinematicsEngine *)new OpenSim::SimmKinematicsEngine();
  *(OpenSim::SimmKinematicsEngine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmKinematicsEngine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::SimmKinematicsEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::SimmKinematicsEngine *)new OpenSim::SimmKinematicsEngine((std::string const &)*arg1);
  *(OpenSim::SimmKinematicsEngine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmKinematicsEngine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmKinematicsEngine_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = 0 ;
  OpenSim::SimmKinematicsEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmKinematicsEngine const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmKinematicsEngine *)new OpenSim::SimmKinematicsEngine((OpenSim::SimmKinematicsEngine const &)*arg1);
  *(OpenSim::SimmKinematicsEngine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmKinematicsEngine const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1registerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::SimmKinematicsEngine::registerTypes();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1makePaths(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  (arg1)->makePaths();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1updateCoordinateSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::CoordinateSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::CoordinateSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::CoordinateSet & reference is null");
    return ;
  } 
  (arg1)->updateCoordinateSet(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getUnlockedCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::CoordinateSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::CoordinateSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::CoordinateSet & reference is null");
    return ;
  } 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getUnlockedCoordinates(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1findUnconstrainedDof(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = 0 ;
  OpenSim::AbstractJoint **arg3 = 0 ;
  OpenSim::AbstractDof *result = 0 ;
  OpenSim::AbstractJoint *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractCoordinate const & reference is null");
    return 0;
  } 
  temp3 = *(OpenSim::AbstractJoint **)&jarg3;
  arg3 = &temp3; 
  result = (OpenSim::AbstractDof *)(arg1)->findUnconstrainedDof((OpenSim::AbstractCoordinate const &)*arg2,*arg3);
  *(OpenSim::AbstractDof **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setConfiguration((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getConfiguration(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setConfiguration((double const (*))arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getConfiguration(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getCoordinates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getSpeeds(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getAccelerations(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAcceleration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getAcceleration(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAcceleration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getAcceleration((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1extractConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->extractConfiguration((double const (*))arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg2; 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyDefaultConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  (arg1)->applyDefaultConfiguration();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1assemble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jint jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  int *arg4 = (int *) 0 ;
  double arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(int **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  result = (int)(arg1)->assemble(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1scale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1scale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jboolean jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1scale_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getGroundBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  {
    OpenSim::AbstractBody &_result_ref = ((OpenSim::SimmKinematicsEngine const *)arg1)->getGroundBody();
    result = (OpenSim::AbstractBody *) &_result_ref;
  }
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getLeafBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractJoint *arg2 = (OpenSim::AbstractJoint *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractJoint **)&jarg2; 
  result = (OpenSim::AbstractBody *)((OpenSim::SimmKinematicsEngine const *)arg1)->getLeafBody(arg2);
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getSystemInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 ;
  double (*arg4)[3] ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getSystemInertia(arg2,arg3,(double (*)[3])arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getSystemInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getSystemInertia(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getPosition((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getVelocity((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAcceleration_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getAcceleration((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getDirectionCosines((OpenSim::AbstractBody const &)*arg2,(double (*)[3])arg3);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getDirectionCosines((OpenSim::AbstractBody const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAngularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getAngularVelocity((OpenSim::AbstractBody const &)*arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAngularVelocityBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getAngularVelocityBodyLocal((OpenSim::AbstractBody const &)*arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAngularAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getAngularAcceleration((OpenSim::AbstractBody const &)*arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAngularAccelerationBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getAngularAccelerationBodyLocal((OpenSim::AbstractBody const &)*arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  OpenSim::Transform result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return 0;
  } 
  result = (arg1)->getTransform((OpenSim::AbstractBody const &)*arg2);
  *(OpenSim::Transform **)&jresult = new OpenSim::Transform((OpenSim::Transform &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForce((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForces(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  
  
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForces(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const *)arg4,(double const *)arg5);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyForceBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForceBodyLocal((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyForcesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  
  
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyForcesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const *)arg4,(double const *)arg5);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorque((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyTorques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double (*arg4)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorques(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const (*)[3])arg4);
  
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyTorques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorques(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const *)arg4);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyTorqueBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorqueBodyLocal((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyTorquesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double (*arg4)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const (*)[3])arg4);
  
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyTorquesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody **arg3 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody ***)&jarg3; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(OpenSim::AbstractBody const *(*))arg3,(double const *)arg4);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractCoordinate const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->applyGeneralizedForce((OpenSim::AbstractCoordinate const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyGeneralizedForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->applyGeneralizedForces((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyGeneralizedForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  OpenSim::AbstractCoordinate **arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractCoordinate ***)&jarg3; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyGeneralizedForces(arg2,(OpenSim::AbstractCoordinate const *(*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  
  delete [] arg4; 
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getNetAppliedGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractCoordinate const & reference is null");
    return 0;
  } 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getNetAppliedGeneralizedForce((OpenSim::AbstractCoordinate const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1computeGeneralizedForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->computeGeneralizedForces(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1computeReactions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double (*arg2)[3] ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->computeReactions((double (*)[3])arg2,(double (*)[3])arg3);
  
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formMassMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->formMassMatrix(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formEulerTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->formEulerTransform((OpenSim::AbstractBody const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formJacobianTranslation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  OpenSim::AbstractBody *arg5 = (OpenSim::AbstractBody *) 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(OpenSim::AbstractBody **)&jarg5; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->formJacobianTranslation((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,arg4,(OpenSim::AbstractBody const *)arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formJacobianTranslation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->formJacobianTranslation((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formJacobianOrientation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  OpenSim::AbstractBody *arg4 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3; 
  arg4 = *(OpenSim::AbstractBody **)&jarg4; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->formJacobianOrientation((OpenSim::AbstractBody const &)*arg2,arg3,(OpenSim::AbstractBody const *)arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formJacobianOrientation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->formJacobianOrientation((OpenSim::AbstractBody const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formJacobianEuler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  OpenSim::AbstractBody *arg4 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3; 
  arg4 = *(OpenSim::AbstractBody **)&jarg4; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->formJacobianEuler((OpenSim::AbstractBody const &)*arg2,arg3,(OpenSim::AbstractBody const *)arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formJacobianEuler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->formJacobianEuler((OpenSim::AbstractBody const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1computeDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  (arg1)->computeDerivatives(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1transform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jlong jarg4, jobject jarg4_, jdoubleArray jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  OpenSim::AbstractBody *arg4 = 0 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(OpenSim::AbstractBody **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->transform((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,(OpenSim::AbstractBody const &)*arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1transform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  OpenSim::Array<double > *arg3 = 0 ;
  OpenSim::AbstractBody *arg4 = 0 ;
  OpenSim::Array<double > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  arg4 = *(OpenSim::AbstractBody **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg5 = *(OpenSim::Array<double > **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->transform((OpenSim::AbstractBody const &)*arg2,(OpenSim::Array<double > const &)*arg3,(OpenSim::AbstractBody const &)*arg4,*arg5);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1transformPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jlong jarg4, jobject jarg4_, jdoubleArray jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  OpenSim::AbstractBody *arg4 = 0 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(OpenSim::AbstractBody **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->transformPosition((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,(OpenSim::AbstractBody const &)*arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg5; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1transformPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  OpenSim::Array<double > *arg3 = 0 ;
  OpenSim::AbstractBody *arg4 = 0 ;
  OpenSim::Array<double > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  arg4 = *(OpenSim::AbstractBody **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg5 = *(OpenSim::Array<double > **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->transformPosition((OpenSim::AbstractBody const &)*arg2,(OpenSim::Array<double > const &)*arg3,(OpenSim::AbstractBody const &)*arg4,*arg5);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1transformPosition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->transformPosition((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1transformPosition_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  OpenSim::Array<double > *arg3 = 0 ;
  OpenSim::Array<double > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  arg4 = *(OpenSim::Array<double > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->transformPosition((OpenSim::AbstractBody const &)*arg2,(OpenSim::Array<double > const &)*arg3,*arg4);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1calcDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdoubleArray jarg3, jlong jarg4, jobject jarg4_, jdoubleArray jarg5) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  double *arg3 ;
  OpenSim::AbstractBody *arg4 = 0 ;
  double *arg5 ;
  double result;
  jdouble *jarr3 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return 0;
  } 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return 0; 
  arg4 = *(OpenSim::AbstractBody **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return 0;
  } 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return 0; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->calcDistance((OpenSim::AbstractBody const &)*arg2,(double const (*))arg3,(OpenSim::AbstractBody const &)*arg4,(double const (*))arg5);
  jresult = (jdouble)result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg5; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1calcDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  OpenSim::Array<double > *arg3 = 0 ;
  OpenSim::AbstractBody *arg4 = 0 ;
  OpenSim::Array<double > *arg5 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return 0;
  } 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return 0;
  } 
  arg4 = *(OpenSim::AbstractBody **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody const & reference is null");
    return 0;
  } 
  arg5 = *(OpenSim::Array<double > **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return 0;
  } 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->calcDistance((OpenSim::AbstractBody const &)*arg2,(OpenSim::Array<double > const &)*arg3,(OpenSim::AbstractBody const &)*arg4,(OpenSim::Array<double > const &)*arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertQuaternionsToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertQuaternionsToAngles(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertQuaternionsToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertQuaternionsToAngles(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertAnglesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertAnglesToQuaternions(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertAnglesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertAnglesToQuaternions(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertAnglesToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double (*arg5)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,(double (*)[3])arg5);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertAnglesToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertDirectionCosinesToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertDirectionCosinesToAngles((double (*)[3])arg2,arg3,arg4,arg5);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertDirectionCosinesToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertDirectionCosinesToAngles(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertDirectionCosinesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertDirectionCosinesToQuaternions((double (*)[3])arg2,arg3,arg4,arg5,arg6);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertDirectionCosinesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertDirectionCosinesToQuaternions(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertQuaternionsToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double (*arg6)[3] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double (**)[3])&jarg6; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,(double (*)[3])arg6);
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertQuaternionsToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1computeConstrainedCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->computeConstrainedCoordinates(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->peteTest();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MusclePoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MusclePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MusclePoint *)new OpenSim::MusclePoint();
  *(OpenSim::MusclePoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MusclePoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MusclePoint *arg1 = 0 ;
  OpenSim::MusclePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MusclePoint const & reference is null");
    return 0;
  } 
  result = (OpenSim::MusclePoint *)new OpenSim::MusclePoint((OpenSim::MusclePoint const &)*arg1);
  *(OpenSim::MusclePoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1MusclePoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::MusclePoint const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  OpenSim::MusclePoint *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  arg2 = *(OpenSim::MusclePoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MusclePoint const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::MusclePoint const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1getAttachment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = ((OpenSim::MusclePoint const *)arg1)->getAttachment();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1setAttachment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setAttachment(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1setAttachment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setAttachment(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1getBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  result = (OpenSim::AbstractBody *)((OpenSim::MusclePoint const *)arg1)->getBody();
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1setBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  OpenSim::AbstractBody *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody & reference is null");
    return ;
  } 
  (arg1)->setBody(*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1getBodyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::MusclePoint const *)arg1)->getBodyName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->scale(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1getMuscle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  OpenSim::AbstractMuscle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  result = (OpenSim::AbstractMuscle *)((OpenSim::MusclePoint const *)arg1)->getMuscle();
  *(OpenSim::AbstractMuscle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1isActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  result = (bool)((OpenSim::MusclePoint const *)arg1)->isActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1getWrapObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  OpenSim::AbstractWrapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  result = (OpenSim::AbstractWrapObject *)((OpenSim::MusclePoint const *)arg1)->getWrapObject();
  *(OpenSim::AbstractWrapObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  OpenSim::AbstractMuscle *arg3 = (OpenSim::AbstractMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  arg3 = *(OpenSim::AbstractMuscle **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1getDisplayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  result = (OpenSim::VisibleObject *)(arg1)->getDisplayer();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1updateGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  (arg1)->updateGeometry();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  ((OpenSim::MusclePoint const *)arg1)->peteTest();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::MusclePoint::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::MusclePoint const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1safeDownCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::MusclePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::MusclePoint *)OpenSim::MusclePoint::safeDownCast(arg1);
  *(OpenSim::MusclePoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MusclePoint_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MusclePoint *arg1 = (OpenSim::MusclePoint *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MusclePoint **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MuscleWrapPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MuscleWrapPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MuscleWrapPoint *)new OpenSim::MuscleWrapPoint();
  *(OpenSim::MuscleWrapPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MuscleWrapPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleWrapPoint *arg1 = 0 ;
  OpenSim::MuscleWrapPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrapPoint **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleWrapPoint const & reference is null");
    return 0;
  } 
  result = (OpenSim::MuscleWrapPoint *)new OpenSim::MuscleWrapPoint((OpenSim::MuscleWrapPoint const &)*arg1);
  *(OpenSim::MuscleWrapPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1MuscleWrapPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MuscleWrapPoint *arg1 = (OpenSim::MuscleWrapPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MuscleWrapPoint **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrapPoint_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleWrapPoint *arg1 = (OpenSim::MuscleWrapPoint *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrapPoint **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::MuscleWrapPoint const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrapPoint_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MuscleWrapPoint *arg1 = (OpenSim::MuscleWrapPoint *) 0 ;
  OpenSim::MuscleWrapPoint *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MuscleWrapPoint **)&jarg1; 
  arg2 = *(OpenSim::MuscleWrapPoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleWrapPoint const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::MuscleWrapPoint const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrapPoint_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenSim::MuscleWrapPoint *arg1 = (OpenSim::MuscleWrapPoint *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  OpenSim::AbstractMuscle *arg3 = (OpenSim::AbstractMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::MuscleWrapPoint **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  arg3 = *(OpenSim::AbstractMuscle **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrapPoint_1getWrapPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleWrapPoint *arg1 = (OpenSim::MuscleWrapPoint *) 0 ;
  OpenSim::Array<SimmPoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrapPoint **)&jarg1; 
  {
    OpenSim::Array<SimmPoint > &_result_ref = (arg1)->getWrapPath();
    result = (OpenSim::Array<SimmPoint > *) &_result_ref;
  }
  *(OpenSim::Array<SimmPoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrapPoint_1getWrapLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::MuscleWrapPoint *arg1 = (OpenSim::MuscleWrapPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrapPoint **)&jarg1; 
  result = (double)((OpenSim::MuscleWrapPoint const *)arg1)->getWrapLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrapPoint_1setWrapLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::MuscleWrapPoint *arg1 = (OpenSim::MuscleWrapPoint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrapPoint **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setWrapLength(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrapPoint_1getWrapObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleWrapPoint *arg1 = (OpenSim::MuscleWrapPoint *) 0 ;
  OpenSim::AbstractWrapObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrapPoint **)&jarg1; 
  result = (OpenSim::AbstractWrapObject *)((OpenSim::MuscleWrapPoint const *)arg1)->getWrapObject();
  *(OpenSim::AbstractWrapObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrapPoint_1setWrapObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MuscleWrapPoint *arg1 = (OpenSim::MuscleWrapPoint *) 0 ;
  OpenSim::AbstractWrapObject *arg2 = (OpenSim::AbstractWrapObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MuscleWrapPoint **)&jarg1; 
  arg2 = *(OpenSim::AbstractWrapObject **)&jarg2; 
  (arg1)->setWrapObject(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrapPoint_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::MuscleWrapPoint *arg1 = (OpenSim::MuscleWrapPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrapPoint **)&jarg1; 
  ((OpenSim::MuscleWrapPoint const *)arg1)->peteTest();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrapPoint_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::MuscleWrapPoint::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrapPoint_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::MuscleWrapPoint *arg1 = (OpenSim::MuscleWrapPoint *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleWrapPoint **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::MuscleWrapPoint const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrapPoint_1safeDownCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::MuscleWrapPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::MuscleWrapPoint *)OpenSim::MuscleWrapPoint::safeDownCast(arg1);
  *(OpenSim::MuscleWrapPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleWrapPoint_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MuscleWrapPoint *arg1 = (OpenSim::MuscleWrapPoint *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MuscleWrapPoint **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MuscleViaPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MuscleViaPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MuscleViaPoint *)new OpenSim::MuscleViaPoint();
  *(OpenSim::MuscleViaPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MuscleViaPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleViaPoint *arg1 = 0 ;
  OpenSim::MuscleViaPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleViaPoint **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleViaPoint const & reference is null");
    return 0;
  } 
  result = (OpenSim::MuscleViaPoint *)new OpenSim::MuscleViaPoint((OpenSim::MuscleViaPoint const &)*arg1);
  *(OpenSim::MuscleViaPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1MuscleViaPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MuscleViaPoint *arg1 = (OpenSim::MuscleViaPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MuscleViaPoint **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleViaPoint_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleViaPoint *arg1 = (OpenSim::MuscleViaPoint *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleViaPoint **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::MuscleViaPoint const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleViaPoint_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MuscleViaPoint *arg1 = (OpenSim::MuscleViaPoint *) 0 ;
  OpenSim::MuscleViaPoint *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MuscleViaPoint **)&jarg1; 
  arg2 = *(OpenSim::MuscleViaPoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MuscleViaPoint const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::MuscleViaPoint const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleViaPoint_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleViaPoint *arg1 = (OpenSim::MuscleViaPoint *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleViaPoint **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = ((OpenSim::MuscleViaPoint const *)arg1)->getRange();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleViaPoint_1getCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MuscleViaPoint *arg1 = (OpenSim::MuscleViaPoint *) 0 ;
  OpenSim::AbstractCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleViaPoint **)&jarg1; 
  result = (OpenSim::AbstractCoordinate *)((OpenSim::MuscleViaPoint const *)arg1)->getCoordinate();
  *(OpenSim::AbstractCoordinate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleViaPoint_1setCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MuscleViaPoint *arg1 = (OpenSim::MuscleViaPoint *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MuscleViaPoint **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractCoordinate & reference is null");
    return ;
  } 
  (arg1)->setCoordinate(*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleViaPoint_1getCoordinateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::MuscleViaPoint *arg1 = (OpenSim::MuscleViaPoint *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleViaPoint **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::MuscleViaPoint const *)arg1)->getCoordinateName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleViaPoint_1setRangeMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::MuscleViaPoint *arg1 = (OpenSim::MuscleViaPoint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleViaPoint **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRangeMin(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleViaPoint_1setRangeMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::MuscleViaPoint *arg1 = (OpenSim::MuscleViaPoint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleViaPoint **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRangeMax(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleViaPoint_1isActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::MuscleViaPoint *arg1 = (OpenSim::MuscleViaPoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleViaPoint **)&jarg1; 
  result = (bool)((OpenSim::MuscleViaPoint const *)arg1)->isActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleViaPoint_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  OpenSim::MuscleViaPoint *arg1 = (OpenSim::MuscleViaPoint *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  OpenSim::AbstractMuscle *arg3 = (OpenSim::AbstractMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::MuscleViaPoint **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  arg3 = *(OpenSim::AbstractMuscle **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleViaPoint_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::MuscleViaPoint *arg1 = (OpenSim::MuscleViaPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleViaPoint **)&jarg1; 
  ((OpenSim::MuscleViaPoint const *)arg1)->peteTest();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleViaPoint_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::MuscleViaPoint::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleViaPoint_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::MuscleViaPoint *arg1 = (OpenSim::MuscleViaPoint *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MuscleViaPoint **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::MuscleViaPoint const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleViaPoint_1safeDownCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::MuscleViaPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::MuscleViaPoint *)OpenSim::MuscleViaPoint::safeDownCast(arg1);
  *(OpenSim::MuscleViaPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MuscleViaPoint_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MuscleViaPoint *arg1 = (OpenSim::MuscleViaPoint *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MuscleViaPoint **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetMusclePoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMusclePoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::MusclePoint > *)new OpenSim::Set<OpenSim::MusclePoint >();
  *(OpenSim::Set<OpenSim::MusclePoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMusclePoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::MusclePoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::MusclePoint > *)new OpenSim::Set<OpenSim::MusclePoint >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::MusclePoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMusclePoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::MusclePoint > *)new OpenSim::Set<OpenSim::MusclePoint >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::MusclePoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMusclePoint_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::MusclePoint > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::MusclePoint > *)new OpenSim::Set<OpenSim::MusclePoint >((OpenSim::Set<OpenSim::MusclePoint > const &)*arg1);
  *(OpenSim::Set<OpenSim::MusclePoint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  OpenSim::MusclePoint *arg2 = (OpenSim::MusclePoint *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::MusclePoint **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->getIndex((OpenSim::MusclePoint const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  OpenSim::MusclePoint *arg2 = (OpenSim::MusclePoint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::MusclePoint **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->getIndex((OpenSim::MusclePoint const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  OpenSim::MusclePoint *arg2 = (OpenSim::MusclePoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::MusclePoint **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::MusclePoint > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::MusclePoint > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::MusclePoint > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  int arg2 ;
  OpenSim::MusclePoint *arg3 = (OpenSim::MusclePoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::MusclePoint **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  OpenSim::MusclePoint *arg2 = (OpenSim::MusclePoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::MusclePoint **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::MusclePoint const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  int arg2 ;
  OpenSim::MusclePoint *arg3 = (OpenSim::MusclePoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::MusclePoint **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  int arg2 ;
  OpenSim::MusclePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::MusclePoint *)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->get(arg2);
  *(OpenSim::MusclePoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::MusclePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::MusclePoint *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::MusclePoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  OpenSim::MusclePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  result = (OpenSim::MusclePoint *)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->getLast();
  *(OpenSim::MusclePoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  OpenSim::MusclePoint *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::MusclePoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MusclePoint const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->searchBinary((OpenSim::MusclePoint const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  OpenSim::MusclePoint *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::MusclePoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MusclePoint const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->searchBinary((OpenSim::MusclePoint const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  OpenSim::MusclePoint *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::MusclePoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MusclePoint const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->searchBinary((OpenSim::MusclePoint const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  OpenSim::MusclePoint *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::MusclePoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MusclePoint const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->searchBinary((OpenSim::MusclePoint const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMusclePoint_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::MusclePoint > *arg1 = (OpenSim::Set<OpenSim::MusclePoint > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::MusclePoint > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrayMusclePoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayMusclePoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  OpenSim::MusclePoint **arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Array<OpenSim::MusclePoint * > *result = 0 ;
  OpenSim::MusclePoint *temp1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = *(OpenSim::MusclePoint **)&jarg1;
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Array<OpenSim::MusclePoint * > *)new OpenSim::Array<OpenSim::MusclePoint * >((OpenSim::MusclePoint *const &)*arg1,arg2,arg3);
  *(OpenSim::Array<OpenSim::MusclePoint * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayMusclePoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::MusclePoint **arg1 = 0 ;
  int arg2 ;
  OpenSim::Array<OpenSim::MusclePoint * > *result = 0 ;
  OpenSim::MusclePoint *temp1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = *(OpenSim::MusclePoint **)&jarg1;
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Array<OpenSim::MusclePoint * > *)new OpenSim::Array<OpenSim::MusclePoint * >((OpenSim::MusclePoint *const &)*arg1,arg2);
  *(OpenSim::Array<OpenSim::MusclePoint * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayMusclePoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::MusclePoint **arg1 = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *result = 0 ;
  OpenSim::MusclePoint *temp1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = *(OpenSim::MusclePoint **)&jarg1;
  arg1 = &temp1; 
  result = (OpenSim::Array<OpenSim::MusclePoint * > *)new OpenSim::Array<OpenSim::MusclePoint * >((OpenSim::MusclePoint *const &)*arg1);
  *(OpenSim::Array<OpenSim::MusclePoint * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayMusclePoint_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Array<OpenSim::MusclePoint * > *)new OpenSim::Array<OpenSim::MusclePoint * >();
  *(OpenSim::Array<OpenSim::MusclePoint * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayMusclePoint_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<OpenSim::MusclePoint * > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Array<OpenSim::MusclePoint * > *)new OpenSim::Array<OpenSim::MusclePoint * >((OpenSim::Array<OpenSim::MusclePoint * > const &)*arg1);
  *(OpenSim::Array<OpenSim::MusclePoint * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  result = (int)((OpenSim::Array<OpenSim::MusclePoint * > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  result = (int)((OpenSim::Array<OpenSim::MusclePoint * > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  result = (int)((OpenSim::Array<OpenSim::MusclePoint * > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  OpenSim::MusclePoint **arg2 = 0 ;
  int result;
  OpenSim::MusclePoint *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  temp2 = *(OpenSim::MusclePoint **)&jarg2;
  arg2 = &temp2; 
  result = (int)(arg1)->append((OpenSim::MusclePoint *const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  arg2 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<OpenSim::MusclePoint * > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<OpenSim::MusclePoint * > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  int arg2 ;
  OpenSim::MusclePoint **arg3 = (OpenSim::MusclePoint **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::MusclePoint ***)&jarg3; 
  result = (int)(arg1)->append(arg2,(OpenSim::MusclePoint *const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  int arg2 ;
  OpenSim::MusclePoint **arg3 = 0 ;
  int result;
  OpenSim::MusclePoint *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(OpenSim::MusclePoint **)&jarg3;
  arg3 = &temp3; 
  result = (int)(arg1)->insert(arg2,(OpenSim::MusclePoint *const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  int arg2 ;
  OpenSim::MusclePoint **arg3 = 0 ;
  OpenSim::MusclePoint *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(OpenSim::MusclePoint **)&jarg3;
  arg3 = &temp3; 
  (arg1)->set(arg2,(OpenSim::MusclePoint *const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  OpenSim::MusclePoint **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  result = (OpenSim::MusclePoint **)(arg1)->get();
  *(OpenSim::MusclePoint ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  int arg2 ;
  OpenSim::MusclePoint **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    OpenSim::MusclePoint *&_result_ref = ((OpenSim::Array<OpenSim::MusclePoint * > const *)arg1)->get(arg2);
    result = (OpenSim::MusclePoint **) &_result_ref;
  }
  *(OpenSim::MusclePoint **)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  int arg2 ;
  OpenSim::MusclePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::MusclePoint *)OpenSim_Array_Sl_OpenSim_MusclePoint_Sm__Sg__getitem(arg1,arg2);
  *(OpenSim::MusclePoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  int arg2 ;
  OpenSim::MusclePoint *arg3 = (OpenSim::MusclePoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::MusclePoint **)&jarg3; 
  OpenSim_Array_Sl_OpenSim_MusclePoint_Sm__Sg__setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  OpenSim::MusclePoint **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  {
    OpenSim::MusclePoint *&_result_ref = ((OpenSim::Array<OpenSim::MusclePoint * > const *)arg1)->getLast();
    result = (OpenSim::MusclePoint **) &_result_ref;
  }
  *(OpenSim::MusclePoint **)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1findIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  OpenSim::MusclePoint **arg2 = 0 ;
  int result;
  OpenSim::MusclePoint *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  temp2 = *(OpenSim::MusclePoint **)&jarg2;
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<OpenSim::MusclePoint * > const *)arg1)->findIndex((OpenSim::MusclePoint *const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1rfindIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  OpenSim::MusclePoint **arg2 = 0 ;
  int result;
  OpenSim::MusclePoint *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  temp2 = *(OpenSim::MusclePoint **)&jarg2;
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<OpenSim::MusclePoint * > const *)arg1)->rfindIndex((OpenSim::MusclePoint *const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  OpenSim::MusclePoint **arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  OpenSim::MusclePoint *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  temp2 = *(OpenSim::MusclePoint **)&jarg2;
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Array<OpenSim::MusclePoint * > const *)arg1)->searchBinary((OpenSim::MusclePoint *const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  OpenSim::MusclePoint **arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  OpenSim::MusclePoint *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  temp2 = *(OpenSim::MusclePoint **)&jarg2;
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Array<OpenSim::MusclePoint * > const *)arg1)->searchBinary((OpenSim::MusclePoint *const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  OpenSim::MusclePoint **arg2 = 0 ;
  bool arg3 ;
  int result;
  OpenSim::MusclePoint *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  temp2 = *(OpenSim::MusclePoint **)&jarg2;
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Array<OpenSim::MusclePoint * > const *)arg1)->searchBinary((OpenSim::MusclePoint *const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayMusclePoint_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > *arg1 = (OpenSim::Array<OpenSim::MusclePoint * > *) 0 ;
  OpenSim::MusclePoint **arg2 = 0 ;
  int result;
  OpenSim::MusclePoint *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Array<OpenSim::MusclePoint * > **)&jarg1; 
  temp2 = *(OpenSim::MusclePoint **)&jarg2;
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<OpenSim::MusclePoint * > const *)arg1)->searchBinary((OpenSim::MusclePoint *const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MusclePointSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MusclePointSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MusclePointSet *)new OpenSim::MusclePointSet();
  *(OpenSim::MusclePointSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MusclePointSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MusclePointSet *arg1 = 0 ;
  OpenSim::MusclePointSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MusclePointSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MusclePointSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::MusclePointSet *)new OpenSim::MusclePointSet((OpenSim::MusclePointSet const &)*arg1);
  *(OpenSim::MusclePointSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1MusclePointSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MusclePointSet *arg1 = (OpenSim::MusclePointSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MusclePointSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AbstractMuscle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::AbstractMuscle const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  OpenSim::AbstractMuscle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = *(OpenSim::AbstractMuscle **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractMuscle const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::AbstractMuscle const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getAttachmentSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  OpenSim::MusclePointSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  {
    OpenSim::MusclePointSet const &_result_ref = ((OpenSim::AbstractMuscle const *)arg1)->getAttachmentSet();
    result = (OpenSim::MusclePointSet *) &_result_ref;
  }
  *(OpenSim::MusclePointSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getCurrentPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  OpenSim::Array<OpenSim::MusclePoint * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (arg1)->getCurrentPath();
  *(OpenSim::Array<OpenSim::MusclePoint * > **)&jresult = new OpenSim::Array<OpenSim::MusclePoint * >((OpenSim::Array<OpenSim::MusclePoint * > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getMuscleModelIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (int)((OpenSim::AbstractMuscle const *)arg1)->getMuscleModelIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getMuscleModelIndexUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (bool)((OpenSim::AbstractMuscle const *)arg1)->getMuscleModelIndexUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getWrapSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  OpenSim::MuscleWrapSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  {
    OpenSim::MuscleWrapSet &_result_ref = (arg1)->getWrapSet();
    result = (OpenSim::MuscleWrapSet *) &_result_ref;
  }
  *(OpenSim::MuscleWrapSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1addAttachmentPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  int arg2 ;
  OpenSim::AbstractBody *arg3 = 0 ;
  OpenSim::MusclePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::AbstractBody **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractBody & reference is null");
    return 0;
  } 
  result = (OpenSim::MusclePoint *)(arg1)->addAttachmentPoint(arg2,*arg3);
  *(OpenSim::MusclePoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1deleteAttachmentPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->deleteAttachmentPoint(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1addMuscleWrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  OpenSim::AbstractWrapObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = *(OpenSim::AbstractWrapObject **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractWrapObject & reference is null");
    return ;
  } 
  (arg1)->addMuscleWrap(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1moveUpMuscleWrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->moveUpMuscleWrap(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1moveDownMuscleWrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->moveDownMuscleWrap(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1deleteMuscleWrap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->deleteMuscleWrap(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getPennationAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (double)(arg1)->getPennationAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getPennationAngleAtOptimalFiberLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (double)(arg1)->getPennationAngleAtOptimalFiberLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (double)(arg1)->getLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getTendonLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (double)(arg1)->getTendonLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getFiberLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (double)(arg1)->getFiberLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getNormalizedFiberLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (double)(arg1)->getNormalizedFiberLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getFiberLengthAlongTendon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (double)(arg1)->getFiberLengthAlongTendon();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getShorteningSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (double)(arg1)->getShorteningSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getFiberForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (double)(arg1)->getFiberForce();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getActiveFiberForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (double)(arg1)->getActiveFiberForce();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getPassiveFiberForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (double)(arg1)->getPassiveFiberForce();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getActiveFiberForceAlongTendon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (double)(arg1)->getActiveFiberForceAlongTendon();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getPassiveFiberForceAlongTendon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (double)(arg1)->getPassiveFiberForceAlongTendon();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  (arg1)->computeActuation();
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1computeMomentArm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractCoordinate & reference is null");
    return 0;
  } 
  result = (double)(arg1)->computeMomentArm(*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1computeMomentArms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->computeMomentArms(*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1computePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  (arg1)->computePath();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1applyWrapObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  (arg1)->applyWrapObjects();
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1_1calc_1muscle_1length_1change(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  OpenSim::AbstractWrapObject *arg2 = 0 ;
  OpenSim::WrapResult *arg3 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = *(OpenSim::AbstractWrapObject **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractWrapObject & reference is null");
    return 0;
  } 
  arg3 = *(OpenSim::WrapResult **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::WrapResult & reference is null");
    return 0;
  } 
  result = (double)(arg1)->_calc_muscle_length_change(*arg2,*arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1calcLengthAfterPathComputation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  (arg1)->calcLengthAfterPathComputation();
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1calcPennation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)((OpenSim::AbstractMuscle const *)arg1)->calcPennation(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1invalidatePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  (arg1)->invalidatePath();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1preScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->preScale((OpenSim::ScaleSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->scale((OpenSim::ScaleSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1postScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->postScale((OpenSim::ScaleSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  (arg1)->apply();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  ((OpenSim::AbstractMuscle const *)arg1)->peteTest();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1updateGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  (arg1)->updateGeometry();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1getDisplayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  result = (OpenSim::VisibleObject *)((OpenSim::AbstractMuscle const *)arg1)->getDisplayer();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::AbstractMuscle::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::AbstractMuscle const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1safeDownCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::AbstractMuscle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::AbstractMuscle *)OpenSim::AbstractMuscle::safeDownCast(arg1);
  *(OpenSim::AbstractMuscle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractMuscle_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AbstractMuscle *arg1 = (OpenSim::AbstractMuscle *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AbstractMuscle **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Force_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Force *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Force *)new OpenSim::Force((std::string const &)*arg1,(std::string const &)*arg2);
  *(OpenSim::Force **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Force_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Force *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Force *)new OpenSim::Force((std::string const &)*arg1);
  *(OpenSim::Force **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Force_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Force *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Force *)new OpenSim::Force();
  *(OpenSim::Force **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Force_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Force *arg1 = 0 ;
  OpenSim::Force *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Force const & reference is null");
    return 0;
  } 
  result = (OpenSim::Force *)new OpenSim::Force((OpenSim::Force const &)*arg1);
  *(OpenSim::Force **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Force(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Force **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Force const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1setBodyA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  OpenSim::AbstractBody *arg2 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2; 
  (arg1)->setBodyA(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1getBodyA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  result = (OpenSim::AbstractBody *)((OpenSim::Force const *)arg1)->getBodyA();
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1setPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPointA((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1getPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Force const *)arg1)->getPointA(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1setForceDirectionA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setForceDirectionA((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1getForceDirectionA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Force const *)arg1)->getForceDirectionA(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1setBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  OpenSim::AbstractBody *arg2 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2; 
  (arg1)->setBodyB(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1getBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  result = (OpenSim::AbstractBody *)((OpenSim::Force const *)arg1)->getBodyB();
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1setPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPointB((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1getPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Force const *)arg1)->getPointB(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1getForceDirectionB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Force const *)arg1)->getForceDirectionB(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1setPointAFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  VectorFunction *arg2 = (VectorFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  arg2 = *(VectorFunction **)&jarg2; 
  (arg1)->setPointAFunction(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1getPointAFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  VectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  result = (VectorFunction *)((OpenSim::Force const *)arg1)->getPointAFunction();
  *(VectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1setPointBFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  VectorFunction *arg2 = (VectorFunction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  arg2 = *(VectorFunction **)&jarg2; 
  (arg1)->setPointBFunction(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1getPointBFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  VectorFunction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  result = (VectorFunction *)((OpenSim::Force const *)arg1)->getPointBFunction();
  *(VectorFunction **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1setScaleFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  OpenSim::Function *arg2 = (OpenSim::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  arg2 = *(OpenSim::Function **)&jarg2; 
  (arg1)->setScaleFunction(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1getScaleFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::Force const *)arg1)->getScaleFunction();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1setScaleFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setScaleFactor(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1getScaleFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  result = (double)(arg1)->getScaleFactor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1setOptimalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setOptimalForce(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1getOptimalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  result = (double)((OpenSim::Force const *)arg1)->getOptimalForce();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1getStress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  result = (double)((OpenSim::Force const *)arg1)->getStress();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  (arg1)->apply();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  (arg1)->computeActuation();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1computeForceDirectionForBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  (arg1)->computeForceDirectionForBodyB();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1computeSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  (arg1)->computeSpeed();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1updatePointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  (arg1)->updatePointA();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1updatePointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  (arg1)->updatePointB();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  result = (bool)((OpenSim::Force const *)arg1)->check();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1computeLineOfAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Force const *)arg1)->computeLineOfAction(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::Force::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::Force const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1safeDownCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Force *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::Force *)OpenSim::Force::safeDownCast(arg1);
  *(OpenSim::Force **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Force_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Force *arg1 = (OpenSim::Force *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Force **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Torque_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Torque *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Torque *)new OpenSim::Torque((std::string const &)*arg1,(std::string const &)*arg2);
  *(OpenSim::Torque **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Torque_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Torque *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Torque *)new OpenSim::Torque((std::string const &)*arg1);
  *(OpenSim::Torque **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Torque_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Torque *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Torque *)new OpenSim::Torque();
  *(OpenSim::Torque **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Torque_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Torque *arg1 = 0 ;
  OpenSim::Torque *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Torque const & reference is null");
    return 0;
  } 
  result = (OpenSim::Torque *)new OpenSim::Torque((OpenSim::Torque const &)*arg1);
  *(OpenSim::Torque **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Torque(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Torque const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1setBodyA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  OpenSim::AbstractBody *arg2 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2; 
  (arg1)->setBodyA(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1getBodyA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  result = (OpenSim::AbstractBody *)((OpenSim::Torque const *)arg1)->getBodyA();
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1setDirectionA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setDirectionA((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1getDirectionA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Torque const *)arg1)->getDirectionA(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1setBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  OpenSim::AbstractBody *arg2 = (OpenSim::AbstractBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  arg2 = *(OpenSim::AbstractBody **)&jarg2; 
  (arg1)->setBodyB(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1getBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  OpenSim::AbstractBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  result = (OpenSim::AbstractBody *)((OpenSim::Torque const *)arg1)->getBodyB();
  *(OpenSim::AbstractBody **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1getDirectionB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Torque const *)arg1)->getDirectionB(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1setOptimalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setOptimalForce(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1getOptimalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  result = (double)((OpenSim::Torque const *)arg1)->getOptimalForce();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1getStress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  result = (double)((OpenSim::Torque const *)arg1)->getStress();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  (arg1)->apply();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  (arg1)->computeActuation();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1computeDirectionForBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  (arg1)->computeDirectionForBodyB();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1computeSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  (arg1)->computeSpeed();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  result = (bool)((OpenSim::Torque const *)arg1)->check();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::Torque::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::Torque const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1safeDownCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Torque *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::Torque *)OpenSim::Torque::safeDownCast(arg1);
  *(OpenSim::Torque **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Torque_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Torque *arg1 = (OpenSim::Torque *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Torque **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1GeneralizedForce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  OpenSim::GeneralizedForce *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  arg1 =  std::string(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::GeneralizedForce *)new OpenSim::GeneralizedForce(arg1);
  *(OpenSim::GeneralizedForce **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1GeneralizedForce_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForce *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::GeneralizedForce *)new OpenSim::GeneralizedForce();
  *(OpenSim::GeneralizedForce **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1GeneralizedForce_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForce *arg1 = 0 ;
  OpenSim::GeneralizedForce *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::GeneralizedForce const & reference is null");
    return 0;
  } 
  result = (OpenSim::GeneralizedForce *)new OpenSim::GeneralizedForce((OpenSim::GeneralizedForce const &)*arg1);
  *(OpenSim::GeneralizedForce **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1GeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::GeneralizedForce const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  OpenSim::GeneralizedForce *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  arg2 = *(OpenSim::GeneralizedForce **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::GeneralizedForce const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::GeneralizedForce const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1setQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  OpenSim::AbstractCoordinate *arg2 = (OpenSim::AbstractCoordinate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  arg2 = *(OpenSim::AbstractCoordinate **)&jarg2; 
  (arg1)->setQ(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1getQ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  OpenSim::AbstractCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  result = (OpenSim::AbstractCoordinate *)((OpenSim::GeneralizedForce const *)arg1)->getQ();
  *(OpenSim::AbstractCoordinate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1setOptimalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setOptimalForce(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1getOptimalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  result = (double)((OpenSim::GeneralizedForce const *)arg1)->getOptimalForce();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1getStress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  result = (double)((OpenSim::GeneralizedForce const *)arg1)->getStress();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  (arg1)->apply();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  (arg1)->computeActuation();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1check(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  result = (bool)((OpenSim::GeneralizedForce const *)arg1)->check();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1isQValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  result = (bool)((OpenSim::GeneralizedForce const *)arg1)->isQValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1updateFromXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  (arg1)->updateFromXMLNode();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::GeneralizedForce::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::GeneralizedForce const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1safeDownCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::GeneralizedForce *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::GeneralizedForce *)OpenSim::GeneralizedForce::safeDownCast(arg1);
  *(OpenSim::GeneralizedForce **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForce_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::GeneralizedForce *arg1 = (OpenSim::GeneralizedForce *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::GeneralizedForce **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmDarrylMuscle_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmDarrylMuscle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmDarrylMuscle *)new OpenSim::SimmDarrylMuscle();
  *(OpenSim::SimmDarrylMuscle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmDarrylMuscle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = 0 ;
  OpenSim::SimmDarrylMuscle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmDarrylMuscle const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmDarrylMuscle *)new OpenSim::SimmDarrylMuscle((OpenSim::SimmDarrylMuscle const &)*arg1);
  *(OpenSim::SimmDarrylMuscle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmDarrylMuscle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmDarrylMuscle const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  OpenSim::SimmDarrylMuscle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  arg2 = *(OpenSim::SimmDarrylMuscle **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmDarrylMuscle const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmDarrylMuscle const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getMaxIsometricForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getMaxIsometricForce();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getOptimalFiberLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getOptimalFiberLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getTendonSlackLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getTendonSlackLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getPennationAngleAtOptimalFiberLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getPennationAngleAtOptimalFiberLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getActivationTimeConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getActivationTimeConstant();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getDeactivationTimeConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getDeactivationTimeConstant();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getVmax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getVmax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getVmax0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getVmax0();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getFmaxTendonStrain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getFmaxTendonStrain();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getFmaxMuscleStrain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getFmaxMuscleStrain();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getKshapeActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getKshapeActive();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getKshapePassive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getKshapePassive();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getDamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getDamping();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getAf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getAf();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getFlen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getFlen();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getPennationAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getPennationAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getFiberLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getFiberLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getNormalizedFiberLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getNormalizedFiberLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getPassiveFiberForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)(arg1)->getPassiveFiberForce();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1getStress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  result = (double)((OpenSim::SimmDarrylMuscle const *)arg1)->getStress();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1computeStateDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->computeStateDerivatives(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  (arg1)->computeActuation();
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1calcTendonForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)((OpenSim::SimmDarrylMuscle const *)arg1)->calcTendonForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1calcPassiveForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)((OpenSim::SimmDarrylMuscle const *)arg1)->calcPassiveForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1calcActiveForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)((OpenSim::SimmDarrylMuscle const *)arg1)->calcActiveForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1calcFiberVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)((OpenSim::SimmDarrylMuscle const *)arg1)->calcFiberVelocity(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1computeIsometricForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->computeIsometricForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1postScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->postScale((OpenSim::ScaleSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->scale((OpenSim::ScaleSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  ((OpenSim::SimmDarrylMuscle const *)arg1)->peteTest();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::SimmDarrylMuscle::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::SimmDarrylMuscle const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1safeDownCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::SimmDarrylMuscle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::SimmDarrylMuscle *)OpenSim::SimmDarrylMuscle::safeDownCast(arg1);
  *(OpenSim::SimmDarrylMuscle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDarrylMuscle_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmDarrylMuscle *arg1 = (OpenSim::SimmDarrylMuscle *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmDarrylMuscle **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmZajacHill_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmZajacHill *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmZajacHill *)new OpenSim::SimmZajacHill();
  *(OpenSim::SimmZajacHill **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmZajacHill_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = 0 ;
  OpenSim::SimmZajacHill *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmZajacHill const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmZajacHill *)new OpenSim::SimmZajacHill((OpenSim::SimmZajacHill const &)*arg1);
  *(OpenSim::SimmZajacHill **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmZajacHill(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmZajacHill const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  OpenSim::SimmZajacHill *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  arg2 = *(OpenSim::SimmZajacHill **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmZajacHill const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmZajacHill const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getMaxIsometricForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (double)(arg1)->getMaxIsometricForce();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getOptimalFiberLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (double)(arg1)->getOptimalFiberLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getTendonSlackLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (double)(arg1)->getTendonSlackLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getPennationAngleAtOptimalFiberLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (double)(arg1)->getPennationAngleAtOptimalFiberLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getMaxContractionVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (double)(arg1)->getMaxContractionVelocity();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getTimeScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (double)(arg1)->getTimeScale();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getDamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (double)(arg1)->getDamping();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getPennationAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (double)(arg1)->getPennationAngle();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getFiberLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (double)(arg1)->getFiberLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getNormalizedFiberLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (double)(arg1)->getNormalizedFiberLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getPassiveFiberForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (double)(arg1)->getPassiveFiberForce();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1computeStateDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->computeStateDerivatives(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1computeEquilibrium(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  (arg1)->computeEquilibrium();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  (arg1)->computeActuation();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1postScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->postScale((OpenSim::ScaleSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->scale((OpenSim::ScaleSet const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setup(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getActiveForceLengthCurve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::SimmZajacHill const *)arg1)->getActiveForceLengthCurve();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getPassiveForceLengthCurve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::SimmZajacHill const *)arg1)->getPassiveForceLengthCurve();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getTendonForceLengthCurve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::SimmZajacHill const *)arg1)->getTendonForceLengthCurve();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getForceVelocityCurve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::SimmZajacHill const *)arg1)->getForceVelocityCurve();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1calcNonzeroPassiveForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)((OpenSim::SimmZajacHill const *)arg1)->calcNonzeroPassiveForce(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1calcFiberVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)((OpenSim::SimmZajacHill const *)arg1)->calcFiberVelocity(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1calcTendonForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)((OpenSim::SimmZajacHill const *)arg1)->calcTendonForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1getStress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  result = (double)((OpenSim::SimmZajacHill const *)arg1)->getStress();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1computeIsometricForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->computeIsometricForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  ((OpenSim::SimmZajacHill const *)arg1)->peteTest();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1isKindOf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (bool)OpenSim::SimmZajacHill::isKindOf((char const *)arg1);
  jresult = (jboolean)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((OpenSim::SimmZajacHill const *)arg1)->isA((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1safeDownCast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::SimmZajacHill *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::SimmZajacHill *)OpenSim::SimmZajacHill::safeDownCast(arg1);
  *(OpenSim::SimmZajacHill **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmZajacHill_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmZajacHill *arg1 = (OpenSim::SimmZajacHill *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmZajacHill **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->copy((OpenSim::Object const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmPoint *)new OpenSim::SimmPoint();
  *(OpenSim::SimmPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1) {
  jlong jresult = 0 ;
  double *arg1 ;
  OpenSim::SimmPoint *result = 0 ;
  jdouble *jarr1 ;
  
  (void)jenv;
  (void)jcls;
  if (jarg1 && jenv->GetArrayLength(jarg1) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr1, &arg1, jarg1)) return 0; 
  result = (OpenSim::SimmPoint *)new OpenSim::SimmPoint(arg1);
  *(OpenSim::SimmPoint **)&jresult = result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr1, arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmPoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmPoint *arg1 = 0 ;
  OpenSim::SimmPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmPoint **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmPoint const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmPoint *)new OpenSim::SimmPoint((OpenSim::SimmPoint const &)*arg1);
  *(OpenSim::SimmPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmPoint *arg1 = (OpenSim::SimmPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPoint **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPoint_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmPoint *arg1 = (OpenSim::SimmPoint *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmPoint **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmPoint const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenSim::SimmPoint *arg1 = (OpenSim::SimmPoint *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmPoint **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmPoint *arg1 = (OpenSim::SimmPoint *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmPoint **)&jarg1; 
  result = (double *)(arg1)->get();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPoint_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::SimmPoint *arg1 = (OpenSim::SimmPoint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmPoint **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->scale(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPoint_1isVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::SimmPoint *arg1 = (OpenSim::SimmPoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmPoint **)&jarg1; 
  result = (bool)((OpenSim::SimmPoint const *)arg1)->isVisible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPoint_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmPoint *arg1 = (OpenSim::SimmPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmPoint **)&jarg1; 
  ((OpenSim::SimmPoint const *)arg1)->peteTest();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmRotationDof_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmRotationDof *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmRotationDof *)new OpenSim::SimmRotationDof();
  *(OpenSim::SimmRotationDof **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmRotationDof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmRotationDof *arg1 = 0 ;
  OpenSim::SimmRotationDof *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmRotationDof const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmRotationDof *)new OpenSim::SimmRotationDof((OpenSim::SimmRotationDof const &)*arg1);
  *(OpenSim::SimmRotationDof **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmRotationDof(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmRotationDof const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  OpenSim::SimmRotationDof *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  arg2 = *(OpenSim::SimmRotationDof **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmRotationDof const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmRotationDof const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1getAxis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmRotationDof const *)arg1)->getAxis(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1getAxis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  {
    OpenSim::Array<double > const &_result_ref = ((OpenSim::SimmRotationDof const *)arg1)->getAxis();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1getAxisPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  result = (double *)((OpenSim::SimmRotationDof const *)arg1)->getAxisPtr();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  result = (double)(arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1getMotionType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  OpenSim::AbstractDof::DofType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  result = (OpenSim::AbstractDof::DofType)((OpenSim::SimmRotationDof const *)arg1)->getMotionType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  (arg1)->peteTest();
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_TX_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *) "tx";
  
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_TY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *) "ty";
  
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_TZ_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *) "tz";
  
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1xTranslation_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::SimmTranslationDof::AxisIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmTranslationDof::AxisIndex)OpenSim::SimmTranslationDof::xTranslation;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmTranslationDof_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmTranslationDof *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmTranslationDof *)new OpenSim::SimmTranslationDof();
  *(OpenSim::SimmTranslationDof **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmTranslationDof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmTranslationDof *arg1 = 0 ;
  OpenSim::SimmTranslationDof *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmTranslationDof const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmTranslationDof *)new OpenSim::SimmTranslationDof((OpenSim::SimmTranslationDof const &)*arg1);
  *(OpenSim::SimmTranslationDof **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmTranslationDof(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmTranslationDof const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1updateFromXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  (arg1)->updateFromXMLNode();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  OpenSim::SimmTranslationDof *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  arg2 = *(OpenSim::SimmTranslationDof **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmTranslationDof const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmTranslationDof const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1getAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmTranslationDof const *)arg1)->getAxis(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1getAxisPtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  result = (double *)((OpenSim::SimmTranslationDof const *)arg1)->getAxisPtr();
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  result = (double)(arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1getMotionType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  OpenSim::AbstractDof::DofType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  result = (OpenSim::AbstractDof::DofType)((OpenSim::SimmTranslationDof const *)arg1)->getMotionType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1getTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->getTranslation(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1getAxisIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  OpenSim::SimmTranslationDof::AxisIndex result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  result = (OpenSim::SimmTranslationDof::AxisIndex)((OpenSim::SimmTranslationDof const *)arg1)->getAxisIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  (arg1)->peteTest();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Units_1simmUnknownUnits_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Units::UnitType result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Units::UnitType)OpenSim::Units::simmUnknownUnits;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Units_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Units *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Units *)new OpenSim::Units();
  *(OpenSim::Units **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Units_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Units *arg1 = 0 ;
  OpenSim::Units *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Units **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Units const & reference is null");
    return 0;
  } 
  result = (OpenSim::Units *)new OpenSim::Units((OpenSim::Units const &)*arg1);
  *(OpenSim::Units **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Units_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Units *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (OpenSim::Units *)new OpenSim::Units(*arg1);
  *(OpenSim::Units **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Units_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  OpenSim::Units::UnitType arg1 ;
  OpenSim::Units *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OpenSim::Units::UnitType)jarg1; 
  result = (OpenSim::Units *)new OpenSim::Units(arg1);
  *(OpenSim::Units **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Units(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Units *arg1 = (OpenSim::Units *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Units **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Units_1convertTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  OpenSim::Units *arg1 = (OpenSim::Units *) 0 ;
  OpenSim::Units::UnitType arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Units **)&jarg1; 
  arg2 = (OpenSim::Units::UnitType)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)((OpenSim::Units const *)arg1)->convertTo(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Units_1convertTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Units *arg1 = (OpenSim::Units *) 0 ;
  OpenSim::Units::UnitType arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Units **)&jarg1; 
  arg2 = (OpenSim::Units::UnitType)jarg2; 
  result = (double)((OpenSim::Units const *)arg1)->convertTo(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Units_1convertTo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  OpenSim::Units *arg1 = (OpenSim::Units *) 0 ;
  OpenSim::Units *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Units **)&jarg1; 
  arg2 = *(OpenSim::Units **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Units const & reference is null");
    return 0;
  } 
  result = (double)((OpenSim::Units const *)arg1)->convertTo((OpenSim::Units const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Units_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Units *arg1 = (OpenSim::Units *) 0 ;
  OpenSim::Units::UnitType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Units **)&jarg1; 
  result = (OpenSim::Units::UnitType)((OpenSim::Units const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Units_1getLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::Units *arg1 = (OpenSim::Units *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Units **)&jarg1; 
  result = (char *)((OpenSim::Units const *)arg1)->getLabel();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Units_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Units *arg1 = (OpenSim::Units *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Units **)&jarg1; 
  ((OpenSim::Units const *)arg1)->peteTest();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1GenericModelMaker_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::GenericModelMaker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::GenericModelMaker *)new OpenSim::GenericModelMaker();
  *(OpenSim::GenericModelMaker **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1GenericModelMaker_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::GenericModelMaker *arg1 = 0 ;
  OpenSim::GenericModelMaker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GenericModelMaker **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::GenericModelMaker const & reference is null");
    return 0;
  } 
  result = (OpenSim::GenericModelMaker *)new OpenSim::GenericModelMaker((OpenSim::GenericModelMaker const &)*arg1);
  *(OpenSim::GenericModelMaker **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1GenericModelMaker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::GenericModelMaker *arg1 = (OpenSim::GenericModelMaker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GenericModelMaker **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GenericModelMaker_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::GenericModelMaker *arg1 = (OpenSim::GenericModelMaker *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GenericModelMaker **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::GenericModelMaker const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GenericModelMaker_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::GenericModelMaker *arg1 = (OpenSim::GenericModelMaker *) 0 ;
  OpenSim::GenericModelMaker *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::GenericModelMaker **)&jarg1; 
  arg2 = *(OpenSim::GenericModelMaker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::GenericModelMaker const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::GenericModelMaker const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GenericModelMaker_1processModel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::GenericModelMaker *arg1 = (OpenSim::GenericModelMaker *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GenericModelMaker **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Model *)(arg1)->processModel((std::string const &)*arg2);
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GenericModelMaker_1processModel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::GenericModelMaker *arg1 = (OpenSim::GenericModelMaker *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GenericModelMaker **)&jarg1; 
  result = (OpenSim::Model *)(arg1)->processModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GenericModelMaker_1registerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::GenericModelMaker::registerTypes();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GenericModelMaker_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::GenericModelMaker *arg1 = (OpenSim::GenericModelMaker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GenericModelMaker **)&jarg1; 
  ((OpenSim::GenericModelMaker const *)arg1)->peteTest();
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_GenericModelMaker_1getModelFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::GenericModelMaker *arg1 = (OpenSim::GenericModelMaker *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GenericModelMaker **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::GenericModelMaker const *)arg1)->getModelFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GenericModelMaker_1setModelFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::GenericModelMaker *arg1 = (OpenSim::GenericModelMaker *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GenericModelMaker **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setModelFileName((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GenericModelMaker_1getMarkerSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::GenericModelMaker *arg1 = (OpenSim::GenericModelMaker *) 0 ;
  OpenSim::MarkerSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::GenericModelMaker **)&jarg1; 
  {
    OpenSim::MarkerSet &_result_ref = (arg1)->getMarkerSet();
    result = (OpenSim::MarkerSet *) &_result_ref;
  }
  *(OpenSim::MarkerSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ModelScaler_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ModelScaler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ModelScaler *)new OpenSim::ModelScaler();
  *(OpenSim::ModelScaler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ModelScaler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ModelScaler *arg1 = 0 ;
  OpenSim::ModelScaler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ModelScaler const & reference is null");
    return 0;
  } 
  result = (OpenSim::ModelScaler *)new OpenSim::ModelScaler((OpenSim::ModelScaler const &)*arg1);
  *(OpenSim::ModelScaler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ModelScaler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::ModelScaler const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  OpenSim::ModelScaler *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  arg2 = *(OpenSim::ModelScaler **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ModelScaler const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::ModelScaler const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1processModel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jdouble jarg4) {
  jboolean jresult = 0 ;
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->processModel(arg2,(std::string const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1processModel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->processModel(arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1processModel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  result = (bool)(arg1)->processModel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1registerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::ModelScaler::registerTypes();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1getPreserveMassDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  result = (bool)((OpenSim::ModelScaler const *)arg1)->getPreserveMassDist();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  ((OpenSim::ModelScaler const *)arg1)->peteTest();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1addMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  Measurement *arg2 = (Measurement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  arg2 = *(Measurement **)&jarg2; 
  (arg1)->addMeasurement(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1addScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  OpenSim::Scale *arg2 = (OpenSim::Scale *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2; 
  (arg1)->addScale(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1getMeasurementSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  MeasurementSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  {
    MeasurementSet &_result_ref = (arg1)->getMeasurementSet();
    result = (MeasurementSet *) &_result_ref;
  }
  *(MeasurementSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1setMeasurementSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  MeasurementSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  arg2 = *(MeasurementSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MeasurementSet & reference is null");
    return ;
  } 
  (arg1)->setMeasurementSet(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1getScaleSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  OpenSim::ScaleSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  {
    OpenSim::ScaleSet &_result_ref = (arg1)->getScaleSet();
    result = (OpenSim::ScaleSet *) &_result_ref;
  }
  *(OpenSim::ScaleSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1setScaleSetFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setScaleSetFile((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1getTimeRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  OpenSim::Array<double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  result = (arg1)->getTimeRange();
  *(OpenSim::Array<double > **)&jresult = new OpenSim::Array<double >((OpenSim::Array<double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1setTimeRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  OpenSim::Array<double > arg2 ;
  OpenSim::Array<double > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  argp2 = *(OpenSim::Array<double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenSim::Array<double >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTimeRange(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1setPreserveMassDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPreserveMassDist(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1getScalingOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  OpenSim::Array<std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  result = (arg1)->getScalingOrder();
  *(OpenSim::Array<std::string > **)&jresult = new OpenSim::Array<std::string >((OpenSim::Array<std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1setScalingOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  (arg1)->setScalingOrder(*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1getMarkerFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getMarkerFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1setMarkerFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMarkerFileName((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1setMaxMarkerMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxMarkerMovement(arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1getMaxMarkerMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  result = (double)((OpenSim::ModelScaler const *)arg1)->getMaxMarkerMovement();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1getOutputJointFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputJointFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1setOutputJointFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputJointFileName((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1getOutputMuscleFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputMuscleFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1setOutputMuscleFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputMuscleFileName((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1getOutputModelFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputModelFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1setOutputModelFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputModelFileName((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1getOutputScaleFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputScaleFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelScaler_1setOutputScaleFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::ModelScaler *arg1 = (OpenSim::ModelScaler *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ModelScaler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputScaleFileName((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MarkerPlacer_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MarkerPlacer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MarkerPlacer *)new OpenSim::MarkerPlacer();
  *(OpenSim::MarkerPlacer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MarkerPlacer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MarkerPlacer *arg1 = 0 ;
  OpenSim::MarkerPlacer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MarkerPlacer const & reference is null");
    return 0;
  } 
  result = (OpenSim::MarkerPlacer *)new OpenSim::MarkerPlacer((OpenSim::MarkerPlacer const &)*arg1);
  *(OpenSim::MarkerPlacer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1MarkerPlacer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::MarkerPlacer const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  OpenSim::MarkerPlacer *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  arg2 = *(OpenSim::MarkerPlacer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MarkerPlacer const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::MarkerPlacer const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1processModel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->processModel(arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1processModel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  result = (bool)(arg1)->processModel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1getStaticPoseFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::MarkerPlacer const *)arg1)->getStaticPoseFilename();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1setStaticPoseFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setStaticPoseFilename((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1getTimeRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  OpenSim::Array<double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  result = (arg1)->getTimeRange();
  *(OpenSim::Array<double > **)&jresult = new OpenSim::Array<double >((OpenSim::Array<double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1setTimeRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  OpenSim::Array<double > arg2 ;
  OpenSim::Array<double > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  argp2 = *(OpenSim::Array<double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenSim::Array<double >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTimeRange(arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1getCoordinateFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::MarkerPlacer const *)arg1)->getCoordinateFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1getMaxMarkerMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  result = (double)((OpenSim::MarkerPlacer const *)arg1)->getMaxMarkerMovement();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1setMaxMarkerMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxMarkerMovement(arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1getOutputModelFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputModelFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1setOutputModelFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputModelFileName((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1getOutputJointFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputJointFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1setOutputJointFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputJointFileName((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1getOutputMuscleFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputMuscleFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1setOutputMuscleFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputMuscleFileName((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1getOutputMarkerFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputMarkerFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1setOutputMarkerFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputMarkerFileName((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1getOutputMotionFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputMotionFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1setOutputMotionFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputMotionFileName((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerPlacer_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::MarkerPlacer *arg1 = (OpenSim::MarkerPlacer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerPlacer **)&jarg1; 
  ((OpenSim::MarkerPlacer const *)arg1)->peteTest();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IKTrial_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::IKTrial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::IKTrial *)new OpenSim::IKTrial();
  *(OpenSim::IKTrial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IKTrial_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::IKTrial *arg1 = 0 ;
  OpenSim::IKTrial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTrial const & reference is null");
    return 0;
  } 
  result = (OpenSim::IKTrial *)new OpenSim::IKTrial((OpenSim::IKTrial const &)*arg1);
  *(OpenSim::IKTrial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1IKTrial(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::IKTrial const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  OpenSim::IKTrial *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  arg2 = *(OpenSim::IKTrial **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTrial const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::IKTrial const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1getStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  result = (double)((OpenSim::IKTrial const *)arg1)->getStartTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1getEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  result = (double)((OpenSim::IKTrial const *)arg1)->getEndTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1getKinematicsSmoothing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  result = (double)((OpenSim::IKTrial const *)arg1)->getKinematicsSmoothing();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1getGroundReactionSmoothing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  result = (double)((OpenSim::IKTrial const *)arg1)->getGroundReactionSmoothing();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1getIncludeMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  result = (bool)((OpenSim::IKTrial const *)arg1)->getIncludeMarkers();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1setStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setStartTime(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1setEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setEndTime(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1setIncludeMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIncludeMarkers(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1findFrameRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return ;
  } 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  arg4 = *(int **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  ((OpenSim::IKTrial const *)arg1)->findFrameRange((OpenSim::Storage const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1processTrial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  OpenSim::Model *arg2 = 0 ;
  OpenSim::IKTaskSet *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Model & reference is null");
    return 0;
  } 
  arg3 = *(OpenSim::IKTaskSet **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTaskSet & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->processTrial(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1processTrialCommon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  OpenSim::Model *arg2 = 0 ;
  OpenSim::IKTaskSet *arg3 = 0 ;
  OpenSim::MarkerData *arg4 = 0 ;
  OpenSim::Storage *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Model & reference is null");
    return 0;
  } 
  arg3 = *(OpenSim::IKTaskSet **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTaskSet & reference is null");
    return 0;
  } 
  arg4 = *(OpenSim::MarkerData **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MarkerData & reference is null");
    return 0;
  } 
  arg5 = *(OpenSim::Storage **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->processTrialCommon(*arg2,*arg3,*arg4,*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1getMarkerDataFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  result = ((OpenSim::IKTrial const *)arg1)->getMarkerDataFilename();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1getOutputMotionFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  result = ((OpenSim::IKTrial const *)arg1)->getOutputMotionFilename();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1setOutputMotionFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputMotionFilename((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1getCoordinateFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::IKTrial const *)arg1)->getCoordinateFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1setCoordinateFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setCoordinateFileName((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1setOptimizerAlgorithm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOptimizerAlgorithm((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1getOptimizerAlgorithm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  result = ((OpenSim::IKTrial const *)arg1)->getOptimizerAlgorithm();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTrial_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::IKTrial *arg1 = (OpenSim::IKTrial *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrial **)&jarg1; 
  ((OpenSim::IKTrial const *)arg1)->peteTest();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetIKTrial(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetIKTrial_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::IKTrial > *)new OpenSim::Set<OpenSim::IKTrial >();
  *(OpenSim::Set<OpenSim::IKTrial > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetIKTrial_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::IKTrial > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::IKTrial > *)new OpenSim::Set<OpenSim::IKTrial >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::IKTrial > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetIKTrial_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::IKTrial > *)new OpenSim::Set<OpenSim::IKTrial >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::IKTrial > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetIKTrial_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::IKTrial > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::IKTrial > *)new OpenSim::Set<OpenSim::IKTrial >((OpenSim::Set<OpenSim::IKTrial > const &)*arg1);
  *(OpenSim::Set<OpenSim::IKTrial > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  OpenSim::IKTrial *arg2 = (OpenSim::IKTrial *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = *(OpenSim::IKTrial **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->getIndex((OpenSim::IKTrial const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  OpenSim::IKTrial *arg2 = (OpenSim::IKTrial *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = *(OpenSim::IKTrial **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->getIndex((OpenSim::IKTrial const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  OpenSim::IKTrial *arg2 = (OpenSim::IKTrial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = *(OpenSim::IKTrial **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::IKTrial > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::IKTrial > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::IKTrial > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  int arg2 ;
  OpenSim::IKTrial *arg3 = (OpenSim::IKTrial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::IKTrial **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  OpenSim::IKTrial *arg2 = (OpenSim::IKTrial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = *(OpenSim::IKTrial **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::IKTrial const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  int arg2 ;
  OpenSim::IKTrial *arg3 = (OpenSim::IKTrial *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::IKTrial **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  int arg2 ;
  OpenSim::IKTrial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::IKTrial *)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->get(arg2);
  *(OpenSim::IKTrial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::IKTrial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::IKTrial *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::IKTrial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  OpenSim::IKTrial *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  result = (OpenSim::IKTrial *)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->getLast();
  *(OpenSim::IKTrial **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  OpenSim::IKTrial *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = *(OpenSim::IKTrial **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTrial const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->searchBinary((OpenSim::IKTrial const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  OpenSim::IKTrial *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = *(OpenSim::IKTrial **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTrial const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->searchBinary((OpenSim::IKTrial const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  OpenSim::IKTrial *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = *(OpenSim::IKTrial **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTrial const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->searchBinary((OpenSim::IKTrial const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  OpenSim::IKTrial *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = *(OpenSim::IKTrial **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTrial const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->searchBinary((OpenSim::IKTrial const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTrial_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTrial > *arg1 = (OpenSim::Set<OpenSim::IKTrial > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::IKTrial > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IKTrialSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::IKTrialSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::IKTrialSet *)new OpenSim::IKTrialSet();
  *(OpenSim::IKTrialSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IKTrialSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::IKTrialSet *arg1 = 0 ;
  OpenSim::IKTrialSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTrialSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTrialSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::IKTrialSet *)new OpenSim::IKTrialSet((OpenSim::IKTrialSet const &)*arg1);
  *(OpenSim::IKTrialSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1IKTrialSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IKTrialSet *arg1 = (OpenSim::IKTrialSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IKTrialSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmFileWriter_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmFileWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmFileWriter *)new OpenSim::SimmFileWriter();
  *(OpenSim::SimmFileWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmFileWriter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::SimmFileWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::SimmFileWriter *)new OpenSim::SimmFileWriter(arg1);
  *(OpenSim::SimmFileWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmFileWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmFileWriter *arg1 = (OpenSim::SimmFileWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmFileWriter **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmFileWriter_1writeJointFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmFileWriter *arg1 = (OpenSim::SimmFileWriter *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmFileWriter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((OpenSim::SimmFileWriter const *)arg1)->writeJointFile((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmFileWriter_1writeMuscleFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmFileWriter *arg1 = (OpenSim::SimmFileWriter *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::SimmFileWriter **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((OpenSim::SimmFileWriter const *)arg1)->writeMuscleFile((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTask_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::IKTask *arg1 = (OpenSim::IKTask *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTask **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::IKTask const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTask_1getWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::IKTask *arg1 = (OpenSim::IKTask *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTask **)&jarg1; 
  result = (double)(arg1)->getWeight();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1IKTask(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IKTask *arg1 = (OpenSim::IKTask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IKTask **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetIKTasks(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetIKTasks_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::IKTask > *)new OpenSim::Set<OpenSim::IKTask >();
  *(OpenSim::Set<OpenSim::IKTask > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetIKTasks_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::IKTask > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::IKTask > *)new OpenSim::Set<OpenSim::IKTask >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::IKTask > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetIKTasks_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::IKTask > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::IKTask > *)new OpenSim::Set<OpenSim::IKTask >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::IKTask > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetIKTasks_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = 0 ;
  OpenSim::Set<OpenSim::IKTask > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::IKTask > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::IKTask > *)new OpenSim::Set<OpenSim::IKTask >((OpenSim::Set<OpenSim::IKTask > const &)*arg1);
  *(OpenSim::Set<OpenSim::IKTask > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  OpenSim::IKTask *arg2 = (OpenSim::IKTask *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = *(OpenSim::IKTask **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->getIndex((OpenSim::IKTask const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  OpenSim::IKTask *arg2 = (OpenSim::IKTask *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = *(OpenSim::IKTask **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->getIndex((OpenSim::IKTask const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::IKTask > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  OpenSim::IKTask *arg2 = (OpenSim::IKTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = *(OpenSim::IKTask **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::IKTask > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::IKTask > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::IKTask > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  int arg2 ;
  OpenSim::IKTask *arg3 = (OpenSim::IKTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::IKTask **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  OpenSim::IKTask *arg2 = (OpenSim::IKTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = *(OpenSim::IKTask **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::IKTask const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  int arg2 ;
  OpenSim::IKTask *arg3 = (OpenSim::IKTask *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::IKTask **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  int arg2 ;
  OpenSim::IKTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::IKTask *)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->get(arg2);
  *(OpenSim::IKTask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::IKTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::IKTask *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::IKTask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::IKTask > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  OpenSim::IKTask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  result = (OpenSim::IKTask *)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->getLast();
  *(OpenSim::IKTask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  OpenSim::IKTask *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = *(OpenSim::IKTask **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTask const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->searchBinary((OpenSim::IKTask const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  OpenSim::IKTask *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = *(OpenSim::IKTask **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTask const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->searchBinary((OpenSim::IKTask const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  OpenSim::IKTask *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = *(OpenSim::IKTask **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTask const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->searchBinary((OpenSim::IKTask const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  OpenSim::IKTask *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = *(OpenSim::IKTask **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTask const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->searchBinary((OpenSim::IKTask const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::IKTask > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetIKTasks_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::IKTask > *arg1 = (OpenSim::Set<OpenSim::IKTask > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::IKTask > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IKTaskSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::IKTaskSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::IKTaskSet *)new OpenSim::IKTaskSet();
  *(OpenSim::IKTaskSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IKTaskSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::IKTaskSet *arg1 = 0 ;
  OpenSim::IKTaskSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTaskSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTaskSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::IKTaskSet *)new OpenSim::IKTaskSet((OpenSim::IKTaskSet const &)*arg1);
  *(OpenSim::IKTaskSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IKTaskSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::IKTaskSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::IKTaskSet *)new OpenSim::IKTaskSet((std::string const &)*arg1);
  *(OpenSim::IKTaskSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1IKTaskSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IKTaskSet *arg1 = (OpenSim::IKTaskSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IKTaskSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MarkerData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MarkerData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MarkerData *)new OpenSim::MarkerData();
  *(OpenSim::MarkerData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MarkerData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::MarkerData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::MarkerData *)new OpenSim::MarkerData((std::string const &)*arg1);
  *(OpenSim::MarkerData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1MarkerData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1findFrameRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  double arg2 ;
  double arg3 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(int **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  arg5 = *(int **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  ((OpenSim::MarkerData const *)arg1)->findFrameRange(arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1averageFrames_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->averageFrames(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1averageFrames_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->averageFrames(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1averageFrames_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->averageFrames(arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1averageFrames_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  (arg1)->averageFrames();
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::MarkerData const *)arg1)->getFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1makeRdStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  (arg1)->makeRdStorage(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1getFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  int arg2 ;
  MarkerFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (MarkerFrame *)((OpenSim::MarkerData const *)arg1)->getFrame(arg2);
  *(MarkerFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1getMarkerIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::MarkerData const *)arg1)->getMarkerIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1getUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  OpenSim::Units *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  {
    OpenSim::Units const &_result_ref = ((OpenSim::MarkerData const *)arg1)->getUnits();
    result = (OpenSim::Units *) &_result_ref;
  }
  *(OpenSim::Units **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1convertToUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  OpenSim::Units *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  arg2 = *(OpenSim::Units **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Units const & reference is null");
    return ;
  } 
  (arg1)->convertToUnits((OpenSim::Units const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1getMarkerNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  {
    OpenSim::Array<std::string > const &_result_ref = ((OpenSim::MarkerData const *)arg1)->getMarkerNames();
    result = (OpenSim::Array<std::string > *) &_result_ref;
  }
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1getNumFrames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  result = (int)((OpenSim::MarkerData const *)arg1)->getNumFrames();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1getStartFrameTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  result = (double)((OpenSim::MarkerData const *)arg1)->getStartFrameTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1getLastFrameTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  result = (double)((OpenSim::MarkerData const *)arg1)->getLastFrameTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerData_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::MarkerData *arg1 = (OpenSim::MarkerData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MarkerData **)&jarg1; 
  ((OpenSim::MarkerData const *)arg1)->peteTest();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IKSolverInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::IKTarget *arg1 = 0 ;
  OpenSim::IKSolverInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IKTarget **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTarget & reference is null");
    return 0;
  } 
  result = (OpenSim::IKSolverInterface *)new OpenSim::IKSolverInterface(*arg1);
  *(OpenSim::IKSolverInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1IKSolverInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IKSolverInterface *arg1 = (OpenSim::IKSolverInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IKSolverInterface **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IKSolverInterface_1solveFrames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenSim::IKSolverInterface *arg1 = (OpenSim::IKSolverInterface *) 0 ;
  OpenSim::IKTrial *arg2 = 0 ;
  OpenSim::Storage *arg3 = 0 ;
  OpenSim::Storage *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenSim::IKSolverInterface **)&jarg1; 
  arg2 = *(OpenSim::IKTrial **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTrial const & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Storage **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  arg4 = *(OpenSim::Storage **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  (arg1)->solveFrames((OpenSim::IKTrial const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1IKTool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IKTool *arg1 = (OpenSim::IKTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IKTool **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IKTool_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::IKTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::IKTool *)new OpenSim::IKTool();
  *(OpenSim::IKTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IKTool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  OpenSim::IKTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(OpenSim::Model **)&jarg2; 
  result = (OpenSim::IKTool *)new OpenSim::IKTool((std::string const &)*arg1,arg2);
  *(OpenSim::IKTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IKTool_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::IKTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::IKTool *)new OpenSim::IKTool((std::string const &)*arg1);
  *(OpenSim::IKTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IKTool_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::IKTool *arg1 = 0 ;
  OpenSim::IKTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTool **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTool const & reference is null");
    return 0;
  } 
  result = (OpenSim::IKTool *)new OpenSim::IKTool((OpenSim::IKTool const &)*arg1);
  *(OpenSim::IKTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTool_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::IKTool *arg1 = (OpenSim::IKTool *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTool **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::IKTool const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTool_1registerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::IKTool::registerTypes();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTool_1getIKTrialSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::IKTool *arg1 = (OpenSim::IKTool *) 0 ;
  OpenSim::IKTrialSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTool **)&jarg1; 
  {
    OpenSim::IKTrialSet &_result_ref = (arg1)->getIKTrialSet();
    result = (OpenSim::IKTrialSet *) &_result_ref;
  }
  *(OpenSim::IKTrialSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IKTool_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::IKTool *arg1 = (OpenSim::IKTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::IKTool **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Measurement_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Measurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Measurement *)new OpenSim::Measurement();
  *(OpenSim::Measurement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Measurement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Measurement *arg1 = 0 ;
  OpenSim::Measurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Measurement **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Measurement const & reference is null");
    return 0;
  } 
  result = (OpenSim::Measurement *)new OpenSim::Measurement((OpenSim::Measurement const &)*arg1);
  *(OpenSim::Measurement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Measurement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Measurement *arg1 = (OpenSim::Measurement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Measurement **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Measurement_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Measurement *arg1 = (OpenSim::Measurement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Measurement **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Measurement const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Measurement_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Measurement *arg1 = (OpenSim::Measurement *) 0 ;
  OpenSim::Measurement *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Measurement **)&jarg1; 
  arg2 = *(OpenSim::Measurement **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Measurement const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::Measurement const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Measurement_1getNumMarkerPairs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Measurement *arg1 = (OpenSim::Measurement *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Measurement **)&jarg1; 
  result = (int)((OpenSim::Measurement const *)arg1)->getNumMarkerPairs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Measurement_1getMarkerPair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Measurement *arg1 = (OpenSim::Measurement *) 0 ;
  int arg2 ;
  MarkerPair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Measurement **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    MarkerPair const &_result_ref = ((OpenSim::Measurement const *)arg1)->getMarkerPair(arg2);
    result = (MarkerPair *) &_result_ref;
  }
  *(MarkerPair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Measurement_1getApply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Measurement *arg1 = (OpenSim::Measurement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Measurement **)&jarg1; 
  result = (bool)((OpenSim::Measurement const *)arg1)->getApply();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Measurement_1applyScaleFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Measurement *arg1 = (OpenSim::Measurement *) 0 ;
  double arg2 ;
  OpenSim::ScaleSet *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Measurement **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::ScaleSet **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet & reference is null");
    return ;
  } 
  (arg1)->applyScaleFactor(arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Measurement_1registerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::Measurement::registerTypes();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Measurement_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Measurement *arg1 = (OpenSim::Measurement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Measurement **)&jarg1; 
  ((OpenSim::Measurement const *)arg1)->peteTest();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetMeasurements(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMeasurements_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Measurement > *)new OpenSim::Set<OpenSim::Measurement >();
  *(OpenSim::Set<OpenSim::Measurement > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMeasurements_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Set<OpenSim::Measurement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Set<OpenSim::Measurement > *)new OpenSim::Set<OpenSim::Measurement >((std::string const &)*arg1,arg2);
  *(OpenSim::Set<OpenSim::Measurement > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMeasurements_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Measurement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Measurement > *)new OpenSim::Set<OpenSim::Measurement >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Measurement > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMeasurements_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Measurement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Measurement > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Measurement > *)new OpenSim::Set<OpenSim::Measurement >((OpenSim::Set<OpenSim::Measurement > const &)*arg1);
  *(OpenSim::Set<OpenSim::Measurement > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  OpenSim::Measurement *arg2 = (OpenSim::Measurement *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = *(OpenSim::Measurement **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->getIndex((OpenSim::Measurement const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  OpenSim::Measurement *arg2 = (OpenSim::Measurement *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = *(OpenSim::Measurement **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->getIndex((OpenSim::Measurement const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1getGroupNamesContaining(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Array<std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(OpenSim::Array<std::string > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Measurement > const *)arg1)->getGroupNamesContaining((std::string const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  OpenSim::Measurement *arg2 = (OpenSim::Measurement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = *(OpenSim::Measurement **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Measurement > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Measurement > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Measurement > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  int arg2 ;
  OpenSim::Measurement *arg3 = (OpenSim::Measurement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Measurement **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  OpenSim::Measurement *arg2 = (OpenSim::Measurement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = *(OpenSim::Measurement **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Measurement const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  int arg2 ;
  OpenSim::Measurement *arg3 = (OpenSim::Measurement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Measurement **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  int arg2 ;
  OpenSim::Measurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Measurement *)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->get(arg2);
  *(OpenSim::Measurement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Measurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Measurement *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Measurement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1getNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Measurement > const *)arg1)->getNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  OpenSim::Measurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  result = (OpenSim::Measurement *)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->getLast();
  *(OpenSim::Measurement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  OpenSim::Measurement *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = *(OpenSim::Measurement **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Measurement const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->searchBinary((OpenSim::Measurement const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  OpenSim::Measurement *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = *(OpenSim::Measurement **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Measurement const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->searchBinary((OpenSim::Measurement const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  OpenSim::Measurement *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = *(OpenSim::Measurement **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Measurement const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->searchBinary((OpenSim::Measurement const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  OpenSim::Measurement *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = *(OpenSim::Measurement **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Measurement const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->searchBinary((OpenSim::Measurement const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1getNumGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->getNumGroups();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1addGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1removeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->removeGroup((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1renameGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->renameGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1addObjectToGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->addObjectToGroup((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  ((OpenSim::Set<OpenSim::Measurement > const *)arg1)->getGroupNames(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1getGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->getGroup((std::string const &)*arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMeasurements_1getGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Measurement > *arg1 = (OpenSim::Set<OpenSim::Measurement > *) 0 ;
  int arg2 ;
  OpenSim::ObjectGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::ObjectGroup *)((OpenSim::Set<OpenSim::Measurement > const *)arg1)->getGroup(arg2);
  *(OpenSim::ObjectGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MeasurementSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MeasurementSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MeasurementSet *)new OpenSim::MeasurementSet();
  *(OpenSim::MeasurementSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MeasurementSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::MeasurementSet *arg1 = 0 ;
  OpenSim::MeasurementSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::MeasurementSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MeasurementSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::MeasurementSet *)new OpenSim::MeasurementSet((OpenSim::MeasurementSet const &)*arg1);
  *(OpenSim::MeasurementSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1MeasurementSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MeasurementSet *arg1 = (OpenSim::MeasurementSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MeasurementSet **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IKSolverImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::IKTarget *arg1 = 0 ;
  OpenSim::IKSolverImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IKTarget **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTarget & reference is null");
    return 0;
  } 
  result = (OpenSim::IKSolverImpl *)new OpenSim::IKSolverImpl(*arg1);
  *(OpenSim::IKSolverImpl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1IKSolverImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IKSolverImpl *arg1 = (OpenSim::IKSolverImpl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IKSolverImpl **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IKSolverImpl_1solveFrames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  OpenSim::IKSolverImpl *arg1 = (OpenSim::IKSolverImpl *) 0 ;
  OpenSim::IKTrial *arg2 = 0 ;
  OpenSim::Storage *arg3 = 0 ;
  OpenSim::Storage *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(OpenSim::IKSolverImpl **)&jarg1; 
  arg2 = *(OpenSim::IKTrial **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IKTrial const & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Storage **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  arg4 = *(OpenSim::Storage **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  (arg1)->solveFrames((OpenSim::IKTrial const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1CMCTool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::CMCTool *arg1 = (OpenSim::CMCTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::CMCTool **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1CMCTool_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::CMCTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::CMCTool *)new OpenSim::CMCTool();
  *(OpenSim::CMCTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1CMCTool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::CMCTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::CMCTool *)new OpenSim::CMCTool((std::string const &)*arg1);
  *(OpenSim::CMCTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1CMCTool_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::CMCTool *arg1 = 0 ;
  OpenSim::CMCTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::CMCTool **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::CMCTool const & reference is null");
    return 0;
  } 
  result = (OpenSim::CMCTool *)new OpenSim::CMCTool((OpenSim::CMCTool const &)*arg1);
  *(OpenSim::CMCTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_CMCTool_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::CMCTool *arg1 = (OpenSim::CMCTool *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::CMCTool **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::CMCTool const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_CMCTool_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::CMCTool *arg1 = (OpenSim::CMCTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::CMCTool **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ScaleTool_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ScaleTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ScaleTool *)new OpenSim::ScaleTool();
  *(OpenSim::ScaleTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ScaleTool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::ScaleTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::ScaleTool *)new OpenSim::ScaleTool((std::string const &)*arg1);
  *(OpenSim::ScaleTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ScaleTool_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ScaleTool *arg1 = 0 ;
  OpenSim::ScaleTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleTool const & reference is null");
    return 0;
  } 
  result = (OpenSim::ScaleTool *)new OpenSim::ScaleTool((OpenSim::ScaleTool const &)*arg1);
  *(OpenSim::ScaleTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ScaleTool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::ScaleTool const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  OpenSim::ScaleTool *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  arg2 = *(OpenSim::ScaleTool **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleTool const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::ScaleTool const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1processModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  result = (bool)(arg1)->processModel();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1createModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  result = (OpenSim::Model *)(arg1)->createModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1getGenericModelMaker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  OpenSim::GenericModelMaker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  {
    OpenSim::GenericModelMaker &_result_ref = (arg1)->getGenericModelMaker();
    result = (OpenSim::GenericModelMaker *) &_result_ref;
  }
  *(OpenSim::GenericModelMaker **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1getModelScaler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  OpenSim::ModelScaler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  {
    OpenSim::ModelScaler &_result_ref = (arg1)->getModelScaler();
    result = (OpenSim::ModelScaler *) &_result_ref;
  }
  *(OpenSim::ModelScaler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1getMarkerPlacer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  OpenSim::MarkerPlacer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  {
    OpenSim::MarkerPlacer &_result_ref = (arg1)->getMarkerPlacer();
    result = (OpenSim::MarkerPlacer *) &_result_ref;
  }
  *(OpenSim::MarkerPlacer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  result = (double)((OpenSim::ScaleTool const *)arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1isDefaultGenericModelMaker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  result = (bool)(arg1)->isDefaultGenericModelMaker();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1isDefaultModelScaler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  result = (bool)(arg1)->isDefaultModelScaler();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1isDefaultMarkerPlacer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  result = (bool)(arg1)->isDefaultMarkerPlacer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1registerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::ScaleTool::registerTypes();
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1getSubjectMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  {
    double const &_result_ref = (arg1)->getSubjectMass();
    result = (double *) &_result_ref;
  }
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1getSubjectAge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  {
    double const &_result_ref = (arg1)->getSubjectAge();
    result = (double *) &_result_ref;
  }
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1getSubjectHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  {
    double const &_result_ref = (arg1)->getSubjectHeight();
    result = (double *) &_result_ref;
  }
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1getPathToSubject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getPathToSubject();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1setPathToSubject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setPathToSubject((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ScaleTool_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::ScaleTool *arg1 = (OpenSim::ScaleTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::ScaleTool **)&jarg1; 
  ((OpenSim::ScaleTool const *)arg1)->peteTest();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AnalyzeTool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AnalyzeTool *arg1 = (OpenSim::AnalyzeTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalyzeTool **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalyzeTool_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::AnalyzeTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::AnalyzeTool *)new OpenSim::AnalyzeTool();
  *(OpenSim::AnalyzeTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalyzeTool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::AnalyzeTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::AnalyzeTool *)new OpenSim::AnalyzeTool((std::string const &)*arg1);
  *(OpenSim::AnalyzeTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalyzeTool_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AnalyzeTool *arg1 = 0 ;
  OpenSim::AnalyzeTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyzeTool **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AnalyzeTool const & reference is null");
    return 0;
  } 
  result = (OpenSim::AnalyzeTool *)new OpenSim::AnalyzeTool((OpenSim::AnalyzeTool const &)*arg1);
  *(OpenSim::AnalyzeTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalyzeTool_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::AnalyzeTool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::AnalyzeTool *)new OpenSim::AnalyzeTool(arg1);
  *(OpenSim::AnalyzeTool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyzeTool_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AnalyzeTool *arg1 = (OpenSim::AnalyzeTool *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyzeTool **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::AnalyzeTool const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyzeTool_1setControlSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AnalyzeTool *arg1 = (OpenSim::AnalyzeTool *) 0 ;
  OpenSim::ControlSet *arg2 = (OpenSim::ControlSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AnalyzeTool **)&jarg1; 
  arg2 = *(OpenSim::ControlSet **)&jarg2; 
  (arg1)->setControlSet(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyzeTool_1getControlSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AnalyzeTool *arg1 = (OpenSim::AnalyzeTool *) 0 ;
  OpenSim::ControlSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyzeTool **)&jarg1; 
  result = (OpenSim::ControlSet *)(arg1)->getControlSet();
  *(OpenSim::ControlSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyzeTool_1setStatesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AnalyzeTool *arg1 = (OpenSim::AnalyzeTool *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AnalyzeTool **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->setStatesStorage(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyzeTool_1getStatesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AnalyzeTool *arg1 = (OpenSim::AnalyzeTool *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyzeTool **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getStatesStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyzeTool_1setPseudoStatesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OpenSim::AnalyzeTool *arg1 = (OpenSim::AnalyzeTool *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OpenSim::AnalyzeTool **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->setPseudoStatesStorage(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyzeTool_1getPseudoStatesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OpenSim::AnalyzeTool *arg1 = (OpenSim::AnalyzeTool *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyzeTool **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getPseudoStatesStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyzeTool_1loadControlsStatesPseudoStatesExternalLoadsFromFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AnalyzeTool *arg1 = (OpenSim::AnalyzeTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyzeTool **)&jarg1; 
  (arg1)->loadControlsStatesPseudoStatesExternalLoadsFromFiles();
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyzeTool_1verifyControlsStatesPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AnalyzeTool *arg1 = (OpenSim::AnalyzeTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyzeTool **)&jarg1; 
  (arg1)->verifyControlsStatesPseudoStates();
}


SWIGEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyzeTool_1getControlsStatesPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jdouble jresult = 0 ;
  OpenSim::AnalyzeTool *arg1 = (OpenSim::AnalyzeTool *) 0 ;
  int arg2 ;
  OpenSim::Array<double > *arg3 = 0 ;
  OpenSim::Array<double > *arg4 = 0 ;
  OpenSim::Array<double > *arg5 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(OpenSim::AnalyzeTool **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  arg4 = *(OpenSim::Array<double > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  arg5 = *(OpenSim::Array<double > **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  result = (double)(arg1)->getControlsStatesPseudoStates(arg2,*arg3,*arg4,*arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyzeTool_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OpenSim::AnalyzeTool *arg1 = (OpenSim::AnalyzeTool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OpenSim::AnalyzeTool **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGObjectGroupUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::ObjectGroup **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMaterialUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Material **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGVisiblePropertiesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::VisibleProperties **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGLineGeometryUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Geometry **)&baseptr = *(OpenSim::LineGeometry **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGArrowGeometryUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::LineGeometry **)&baseptr = *(OpenSim::ArrowGeometry **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAnalyticGeometryUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Geometry **)&baseptr = *(OpenSim::AnalyticGeometry **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAnalyticSphereUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AnalyticGeometry **)&baseptr = *(OpenSim::AnalyticSphere **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAnalyticEllipsoidUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AnalyticGeometry **)&baseptr = *(OpenSim::AnalyticEllipsoid **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAnalyticCylinderUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AnalyticGeometry **)&baseptr = *(OpenSim::AnalyticCylinder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAnalyticTorusUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AnalyticGeometry **)&baseptr = *(OpenSim::AnalyticTorus **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGPolyhedralGeometryUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Geometry **)&baseptr = *(OpenSim::PolyhedralGeometry **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGVisibleObjectUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::VisibleObject **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetMaterialsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Material > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMaterialSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::Material > **)&baseptr = *(OpenSim::MaterialSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGStorageUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Storage **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAbstractActuatorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::AbstractActuator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetActuatorsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::AbstractActuator > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGActuatorSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::AbstractActuator > **)&baseptr = *(OpenSim::ActuatorSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGContactForceSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::ActuatorSet **)&baseptr = *(OpenSim::ContactForceSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGCallbackUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Callback **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetCallbackUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Callback > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGCallbackSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::Callback > **)&baseptr = *(OpenSim::CallbackSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGIntegCallbackUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Callback **)&baseptr = *(OpenSim::IntegCallback **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAnalysisUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::IntegCallback **)&baseptr = *(OpenSim::Analysis **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetAnalysisUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAnalysisSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::Analysis > **)&baseptr = *(OpenSim::AnalysisSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGModelUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Model **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGControlUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Control **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetControlsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Control > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGControlSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::Control > **)&baseptr = *(OpenSim::ControlSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGControlConstantUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Control **)&baseptr = *(OpenSim::ControlConstant **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGControlLinearUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Control **)&baseptr = *(OpenSim::ControlLinear **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGIntegrandUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Integrand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGModelIntegrandUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Integrand **)&baseptr = *(OpenSim::ModelIntegrand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGIntegRKFUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::RKF **)&baseptr = *(OpenSim::IntegRKF **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAbstractToolUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::AbstractTool **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGForwardToolUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractTool **)&baseptr = *(OpenSim::ForwardTool **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGPerturbationToolUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractTool **)&baseptr = *(OpenSim::PerturbationTool **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimtkAnimationCallbackUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::IntegCallback **)&baseptr = *(OpenSim::SimtkAnimationCallback **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGKinematicsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Analysis **)&baseptr = *(OpenSim::Kinematics **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGActuationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Analysis **)&baseptr = *(OpenSim::Actuation **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGIndAccUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Analysis **)&baseptr = *(OpenSim::IndAcc **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGGeneralizedForcesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Analysis **)&baseptr = *(OpenSim::GeneralizedForces **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMuscleAnalysisUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Analysis **)&baseptr = *(OpenSim::MuscleAnalysis **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMomentArmAnalysisUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Analysis **)&baseptr = *(OpenSim::MomentArmAnalysis **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAbstractMarkerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::AbstractMarker **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetMarkersUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::AbstractMarker > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMarkerSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::AbstractMarker > **)&baseptr = *(OpenSim::MarkerSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGRangeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Range **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGScaleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Scale **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetScalesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Scale > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGScaleSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::Scale > **)&baseptr = *(OpenSim::ScaleSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAbstractWrapObjectUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::AbstractWrapObject **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGWrapSphereUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractWrapObject **)&baseptr = *(OpenSim::WrapSphere **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGWrapCylinderUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractWrapObject **)&baseptr = *(OpenSim::WrapCylinder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGWrapTorusUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractWrapObject **)&baseptr = *(OpenSim::WrapTorus **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGWrapEllipsoidUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractWrapObject **)&baseptr = *(OpenSim::WrapEllipsoid **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetWrapObjectUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGWrapObjectSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::AbstractWrapObject > **)&baseptr = *(OpenSim::WrapObjectSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMuscleWrapUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::MuscleWrap **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetMuscleWrapUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::MuscleWrap > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMuscleWrapSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::MuscleWrap > **)&baseptr = *(OpenSim::MuscleWrapSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAbstractBodyUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::AbstractBody **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmBodyUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractBody **)&baseptr = *(OpenSim::SimmBody **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetBodiesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::AbstractBody > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGBodySetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::AbstractBody > **)&baseptr = *(OpenSim::BodySet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGFunctionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Function **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGConstantUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Function **)&baseptr = *(OpenSim::Constant **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAbstractDofUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::AbstractDof **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAbstractCoordinateUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::AbstractCoordinate **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmCoordinateUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractCoordinate **)&baseptr = *(OpenSim::SimmCoordinate **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetCoordinatesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGCoordinateSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::AbstractCoordinate > **)&baseptr = *(OpenSim::CoordinateSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAbstractJointUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::AbstractJoint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmJointUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractJoint **)&baseptr = *(OpenSim::SimmJoint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetJointsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::AbstractJoint > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGJointSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::AbstractJoint > **)&baseptr = *(OpenSim::JointSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAbstractDynamicsEngineUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::AbstractDynamicsEngine **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmKinematicsEngineUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractDynamicsEngine **)&baseptr = *(OpenSim::SimmKinematicsEngine **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMusclePointUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::MusclePoint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMuscleWrapPointUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::MusclePoint **)&baseptr = *(OpenSim::MuscleWrapPoint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMuscleViaPointUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::MusclePoint **)&baseptr = *(OpenSim::MuscleViaPoint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetMusclePointUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::MusclePoint > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMusclePointSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::MusclePoint > **)&baseptr = *(OpenSim::MusclePointSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAbstractMuscleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractActuator **)&baseptr = *(OpenSim::AbstractMuscle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGForceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractActuator **)&baseptr = *(OpenSim::Force **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGTorqueUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractActuator **)&baseptr = *(OpenSim::Torque **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGGeneralizedForceUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractActuator **)&baseptr = *(OpenSim::GeneralizedForce **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmDarrylMuscleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractMuscle **)&baseptr = *(OpenSim::SimmDarrylMuscle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmZajacHillUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractMuscle **)&baseptr = *(OpenSim::SimmZajacHill **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmPointUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmPoint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmRotationDofUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractDof **)&baseptr = *(OpenSim::SimmRotationDof **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmTranslationDofUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractDof **)&baseptr = *(OpenSim::SimmTranslationDof **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGGenericModelMakerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::GenericModelMaker **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGModelScalerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::ModelScaler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMarkerPlacerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::MarkerPlacer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGIKTrialUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::IKTrial **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetIKTrialUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::IKTrial > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGIKTrialSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::IKTrial > **)&baseptr = *(OpenSim::IKTrialSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGIKTaskUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::IKTask **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetIKTasksUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::IKTask > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGIKTaskSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::IKTask > **)&baseptr = *(OpenSim::IKTaskSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMarkerDataUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::MarkerData **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGIKToolUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractTool **)&baseptr = *(OpenSim::IKTool **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMeasurementUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Measurement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetMeasurementsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Measurement > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMeasurementSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::Measurement > **)&baseptr = *(OpenSim::MeasurementSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGIKSolverImplUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::IKSolverInterface **)&baseptr = *(OpenSim::IKSolverImpl **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGCMCToolUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractTool **)&baseptr = *(OpenSim::CMCTool **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGScaleToolUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::ScaleTool **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAnalyzeToolUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractTool **)&baseptr = *(OpenSim::AnalyzeTool **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[19] = {
    {
      "SwigDirector_SimtkAnimationCallback_copy", "(Lorg/opensim/modeling/SimtkAnimationCallback;)J" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_copy__SWIG_1", "(Lorg/opensim/modeling/SimtkAnimationCallback;J)J" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_copy__SWIG_2", "(Lorg/opensim/modeling/SimtkAnimationCallback;J)V" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_getDisplayer", "(Lorg/opensim/modeling/SimtkAnimationCallback;)J" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_isValidDefaultType", "(Lorg/opensim/modeling/SimtkAnimationCallback;J)Z" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_updateFromXMLNode", "(Lorg/opensim/modeling/SimtkAnimationCallback;)V" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_updateDefaultObjectsFromXMLNode", "(Lorg/opensim/modeling/SimtkAnimationCallback;)V" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_updateXMLNode", "(Lorg/opensim/modeling/SimtkAnimationCallback;J)V" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_updateDefaultObjectsXMLNode", "(Lorg/opensim/modeling/SimtkAnimationCallback;J)V" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_generateXMLNode", "(Lorg/opensim/modeling/SimtkAnimationCallback;J)V" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_update", "(Lorg/opensim/modeling/SimtkAnimationCallback;JJ)V" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_isA", "(Lorg/opensim/modeling/SimtkAnimationCallback;Ljava/lang/String;)Z" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_setModel", "(Lorg/opensim/modeling/SimtkAnimationCallback;J)V" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_begin__SWIG_0", "(Lorg/opensim/modeling/SimtkAnimationCallback;IDDJJJ)I" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_begin__SWIG_1", "(Lorg/opensim/modeling/SimtkAnimationCallback;IDDJJ)I" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_step__SWIG_0", "(Lorg/opensim/modeling/SimtkAnimationCallback;JJIDDJJJ)I" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_step__SWIG_1", "(Lorg/opensim/modeling/SimtkAnimationCallback;JJIDDJJ)I" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_end__SWIG_0", "(Lorg/opensim/modeling/SimtkAnimationCallback;IDDJJJ)I" 
    },
    {
      "SwigDirector_SimtkAnimationCallback_end__SWIG_1", "(Lorg/opensim/modeling/SimtkAnimationCallback;IDDJJ)I" 
    }
  };
  Swig::jclass_opensimModelJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_opensimModelJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

