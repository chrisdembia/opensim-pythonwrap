/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <OpenSim/Tools/rdToolsDLL.h>
#include <OpenSim/Simulation/rdSimulationDLL.h>
#include <OpenSim/Tools/Exception.h>
#include <OpenSim/Tools/Array.h>
#include <OpenSim/Tools/ArrayPtrs.h>
#include <OpenSim/Tools/Property.h>
#include <OpenSim/Tools/PropertySet.h>
#include <OpenSim/Tools/Object.h>
#include <OpenSim/Tools/Material.h>
#include <OpenSim/Tools/VisibleProperties.h>
#include <OpenSim/Tools/Transform.h>
#include <OpenSim/Tools/Geometry.h>
#include <OpenSim/Tools/VisibleObject.h>

#include <OpenSim/Tools/Set.h>
#include <OpenSim/Simulation/Model/Body.h>
#include <OpenSim/Simulation/Model/BodySet.h>

#include <OpenSim/Tools/MaterialSet.h>

#include <OpenSim/Simulation/Model/Actuator.h>
#include <OpenSim/Simulation/Model/ActuatorSet.h>

#include <OpenSim/Simulation/Model/ContactForceSet.h>

#include <OpenSim/Tools/StateVector.h>
#include <OpenSim/Tools/Storage.h>

#include <OpenSim/Simulation/Model/Model.h>
#include <OpenSim/Simulation/Control/Control.h>
#include <OpenSim/Simulation/Control/ControlSet.h>
#include <OpenSim/Simulation/Control/ControlConstant.h>
#include <OpenSim/Simulation/Control/ControlLinear.h>
#include <OpenSim/Simulation/Control/Controller.h>
#include <OpenSim/Simulation/Integrator/Integrand.h>
#include <OpenSim/Simulation/Integrator/RKF.h>
#include <OpenSim/Simulation/Integrator/IntegRKF.h>
#include <OpenSim/Simulation/Model/ModelIntegrand.h>
#include <OpenSim/Simulation/Manager/Manager.h>
#include <OpenSim/Simulation/Model/Callback.h>
#include <OpenSim/Simulation/Model/CallbackSet.h>
#include <OpenSim/Simulation/Model/IntegCallback.h>
#include <OpenSim/Simulation/Model/Analysis.h>
#include <OpenSim/Simulation/Model/AnalysisSet.h>
#include <OpenSim/Simulation/Model/AnalysisFactory.h>
#include <OpenSim/Simulation/Model/Investigation.h>
#include <OpenSim/Analyses/suAnalysesDLL.h>
#include <OpenSim/Analyses/InvestigationForward.h>
#include <OpenSim/Analyses/InvestigationPerturbation.h>

#include <OpenSim/Simulation/Simtk/SimtkAnimationCallback.h>

#include <OpenSim/Analyses/Actuation.h>
#include <OpenSim/Analyses/IndAcc.h>
#include <OpenSim/Analyses/Kinematics.h>
#include <OpenSim/Analyses/GeneralizedForces.h>

#include <OpenSim/Simulation/Model/Marker.h>
#include <OpenSim/Simulation/Model/MarkerSet.h>
#include <OpenSim/Simulation/SIMM/SimmMarkerSet.h>
#include <OpenSim/Tools/Range.h>
#include <OpenSim/Tools/Scale.h>
#include <OpenSim/Tools/ScaleSet.h>

	/* This group of headers added by KMS 3/22/06 */
#include <OpenSim/Simulation/Model/AbstractDynamicsEngine.h>
#include <OpenSim/Simulation/SIMM/SimmBody.h>
#include <OpenSim/Simulation/SIMM/SimmBodySet.h>

#include <OpenSim/Simulation/SIMM/SimmBone.h>
#include <OpenSim/Tools/Function.h>
#include <OpenSim/Simulation/SIMM/Constant.h>
#include <OpenSim/Simulation/SIMM/Coordinate.h>
#include <OpenSim/Simulation/SIMM/SimmCoordinate.h>
#include <OpenSim/Simulation/SIMM/SimmCoordinateSet.h>

#include <OpenSim/Simulation/SIMM/SimmDof.h>
#include <OpenSim/Simulation/SIMM/SimmJoint.h>
#include <OpenSim/Simulation/SIMM/SimmKinematicsEngine.h>
#include <OpenSim/Simulation/SIMM/SimmMarker.h>
#include <OpenSim/Simulation/SIMM/SimmModel.h>
#include <OpenSim/Simulation/SIMM/SimmMuscle.h>
#include <OpenSim/Simulation/SIMM/SimmMuscleGroup.h>
#include <OpenSim/Simulation/SIMM/SimmMusclePoint.h>
#include <OpenSim/Simulation/SIMM/SimmMusclePointSet.h>
#include <OpenSim/Simulation/SIMM/SimmMuscleViaPoint.h>
#include <OpenSim/Simulation/SIMM/SimmPath.h>
#include <OpenSim/Simulation/SIMM/SimmPathMatrix.h>
#include <OpenSim/Simulation/SIMM/SimmPoint.h>
#include <OpenSim/Simulation/SIMM/SimmRotationDof.h>
#include <OpenSim/Simulation/SIMM/SimmStep.h>
#include <OpenSim/Simulation/SIMM/SimmTranslationDof.h>
#include <OpenSim/Simulation/SIMM/SimmUnits.h>
#include <OpenSim/Simulation/SIMM/SimmModelIterator.h>

#include <OpenSim/Simulation/SIMM/SimmGenericModelParams.h>
#include <OpenSim/Simulation/SIMM/SimmScalingParams.h>
#include <OpenSim/Simulation/SIMM/SimmMarkerPlacementParams.h>
#include <OpenSim/Simulation/SIMM/SimmIKTrialParams.h>
#include <OpenSim/Simulation/SIMM/SimmIKTrialParamsSet.h>

#include <OpenSim/Simulation/SIMM/SimmIKParams.h>
#include <OpenSim/Simulation/SIMM/SimmSubject.h>
#include <OpenSim/Simulation/SIMM/SimmMotionData.h>
#include <OpenSim/Simulation/SIMM/SimmMarkerData.h>

#include <OpenSim/Applications/Workflow/workflowDLL.h>
#include <OpenSim/Simulation/SIMM/ScalerInterface.h>
#include <OpenSim/Simulation/SIMM/IKSolverInterface.h>
#include <OpenSim/Applications/Scale/SimmScalerImpl.h>
#include <OpenSim/Simulation/SIMM/SimmMeasurement.h>
#include <OpenSim/Simulation/SIMM/SimmMeasurementSet.h>
#include <OpenSim/Applications/IK/SimmIKSolverImpl.h>
#include <OpenSim/SQP/rdSQPDLL.h>
#include <OpenSim/SQP/rdOptimizationTarget.h>
#include <OpenSim/Applications/IK/InvestigationIK.h>
#include <OpenSim/Applications/IK/SimmInverseKinematicsTarget.h>

using namespace OpenSim;


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include <string>

SWIGINTERN OpenSim::AnalyticGeometry *OpenSim_AnalyticGeometry_dynamic_cast(OpenSim::Geometry *geometry){
        return dynamic_cast<AnalyticGeometry *>(geometry);
    }
SWIGINTERN bool OpenSim_Array_Sl_bool_Sg__getitem(OpenSim::Array<bool > *self,int index){
      return self->get(index);
    }
SWIGINTERN void OpenSim_Array_Sl_bool_Sg__setitem(OpenSim::Array<bool > *self,int index,bool val){
      self->set(index,val);
    }
SWIGINTERN double OpenSim_Array_Sl_double_Sg__getitem(OpenSim::Array<double > *self,int index){
      return self->get(index);
    }
SWIGINTERN void OpenSim_Array_Sl_double_Sg__setitem(OpenSim::Array<double > *self,int index,double val){
      self->set(index,val);
    }
SWIGINTERN int OpenSim_Array_Sl_int_Sg__getitem(OpenSim::Array<int > *self,int index){
      return self->get(index);
    }
SWIGINTERN void OpenSim_Array_Sl_int_Sg__setitem(OpenSim::Array<int > *self,int index,int val){
      self->set(index,val);
    }
SWIGINTERN std::string OpenSim_Array_Sl_std_string_Sg__getitem(OpenSim::Array<std::string > *self,int index){
      return self->get(index);
    }
SWIGINTERN void OpenSim_Array_Sl_std_string_Sg__setitem(OpenSim::Array<std::string > *self,int index,std::string val){
      self->set(index,val);
    }

#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  OpenSim::Exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (OpenSim::Exception *)new OpenSim::Exception((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  *(OpenSim::Exception **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimException_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Exception *)new OpenSim::Exception((std::string const &)*arg1,(std::string const &)*arg2);
  *(OpenSim::Exception **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimException_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Exception *)new OpenSim::Exception((std::string const &)*arg1);
  *(OpenSim::Exception **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimException_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Exception *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Exception *)new OpenSim::Exception();
  *(OpenSim::Exception **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimException_1setMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Exception *arg1 = (OpenSim::Exception *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Exception **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMessage((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimException_1getMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Exception *arg1 = (OpenSim::Exception *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Exception **)&jarg1; 
  result = (char *)(arg1)->getMessage();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimException_1print(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Exception *arg1 = (OpenSim::Exception *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Exception **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  (arg1)->print(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1OpenSimException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Exception *arg1 = (OpenSim::Exception *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Exception **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Array_1CAPMIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)Array_CAPMIN;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Property::PropertyType result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Property::PropertyType)OpenSim::Property::None;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  result = (OpenSim::Property *)((OpenSim::Property const *)arg1)->copy();
  *(OpenSim::Property **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Property(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setNull(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  (arg1)->setNull();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Property::PropertyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (OpenSim::Property::PropertyType)jarg2; 
  (arg1)->setType(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Property::PropertyType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  result = (OpenSim::Property::PropertyType)((OpenSim::Property const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getTypeAsString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  result = (char *)((OpenSim::Property const *)arg1)->getTypeAsString();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setName((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Property const *)arg1)->getName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setComment((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getComment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Property const *)arg1)->getComment();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->toString();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setValue(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    bool &_result_ref = (arg1)->getValueBool();
    result = (bool *) &_result_ref;
  }
  *(bool **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setValue(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    int &_result_ref = (arg1)->getValueInt();
    result = (int *) &_result_ref;
  }
  *(int **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setValue(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueDbl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    double &_result_ref = (arg1)->getValueDbl();
    result = (double *) &_result_ref;
  }
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setValue((std::string const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueStr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    std::string &_result_ref = (arg1)->getValueStr();
    result = (std::string *) &_result_ref;
  }
  *(std::string **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::Object const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueObj(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::Object &_result_ref = (arg1)->getValueObj();
    result = (OpenSim::Object *) &_result_ref;
  }
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jbooleanArray jarg3) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  bool *arg3 ;
  jboolean *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInBool(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setValue(arg2,(bool const (*))arg3);
  SWIG_JavaArrayArgoutBool(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<bool > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Array<bool > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<bool > const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::Array<bool > const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueBoolArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::Array<bool > &_result_ref = (arg1)->getValueBoolArray();
    result = (OpenSim::Array<bool > *) &_result_ref;
  }
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  int *arg3 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setValue(arg2,(int const (*))arg3);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Array<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::Array<int > const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueIntArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::Array<int > &_result_ref = (arg1)->getValueIntArray();
    result = (OpenSim::Array<int > *) &_result_ref;
  }
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setValue(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::Array<double > const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueDblArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = (arg1)->getValueDblArray();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  std::string *arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::string **)&jarg3; 
  (arg1)->setValue(arg2,(std::string const (*))arg3);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::Array<std::string > const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueStrArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::Array<std::string > &_result_ref = (arg1)->getValueStrArray();
    result = (OpenSim::Array<std::string > *) &_result_ref;
  }
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  OpenSim::Object **arg3 = (OpenSim::Object **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Object ***)&jarg3; 
  (arg1)->setValue(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setValue_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Object > const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::ArrayPtrs<OpenSim::Object > const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getValueObjArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::ArrayPtrs<OpenSim::Object > &_result_ref = (arg1)->getValueObjArray();
    result = (OpenSim::ArrayPtrs<OpenSim::Object > *) &_result_ref;
  }
  *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1setUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseDefault(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Property_1getUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  result = (bool)((OpenSim::Property const *)arg1)->getUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1_1array_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg2 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg2; 
  if (arg1) (arg1)->_array = *arg2;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1_1array_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  result = (OpenSim::ArrayPtrs<OpenSim::Property > *)& ((arg1)->_array);
  *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1PropertySet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::PropertySet *)new OpenSim::PropertySet();
  *(OpenSim::PropertySet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1PropertySet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *arg1 = 0 ;
  OpenSim::PropertySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PropertySet const & reference is null");
    return 0;
  } 
  result = (OpenSim::PropertySet *)new OpenSim::PropertySet((OpenSim::PropertySet const &)*arg1);
  *(OpenSim::PropertySet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1PropertySet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  result = (bool)((OpenSim::PropertySet const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  result = (int)((OpenSim::PropertySet const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  int arg2 ;
  OpenSim::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Property *)(arg1)->get(arg2);
  *(OpenSim::Property **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Property *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Property **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  OpenSim::Property *arg2 = (OpenSim::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2; 
  (arg1)->append(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->remove((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_PropertySet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleObject *)new OpenSim::VisibleObject();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::VisibleObject *)new OpenSim::VisibleObject((std::string const &)*arg1);
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::VisibleObject *)new OpenSim::VisibleObject(arg1);
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleObject_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::VisibleObject const & reference is null");
    return 0;
  } 
  result = (OpenSim::VisibleObject *)new OpenSim::VisibleObject((OpenSim::VisibleObject const &)*arg1);
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1VisibleObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::VisibleObject const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::VisibleObject const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1setOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  (arg1)->setOwner(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  result = (OpenSim::Object *)(arg1)->getOwner();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1setNumGeometryFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNumGeometryFiles(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1setGeometryFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->setGeometryFileName(arg2,(std::string const &)*arg3);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getNumGeometryFiles(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  result = (int)((OpenSim::VisibleObject const *)arg1)->getNumGeometryFiles();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getGeometryFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    std::string const &_result_ref = ((OpenSim::VisibleObject const *)arg1)->getGeometryFileName(arg2);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1setVisibleProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  VisibleProperties *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(VisibleProperties **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VisibleProperties const & reference is null");
    return ;
  } 
  (arg1)->setVisibleProperties((VisibleProperties const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getVisibleProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  {
    VisibleProperties &_result_ref = (arg1)->getVisibleProperties();
    result = (VisibleProperties *) &_result_ref;
  }
  *(VisibleProperties **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1setTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  Transform *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(Transform **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Transform const & reference is null");
    return ;
  } 
  (arg1)->setTransform((Transform const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  {
    Transform &_result_ref = (arg1)->getTransform();
    result = (Transform *) &_result_ref;
  }
  *(Transform **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1setScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setScaleFactors((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::VisibleObject const *)arg1)->getScaleFactors(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateRadians_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->rotateRadians((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateRadians_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  Transform::RotationOrder arg3 ;
  jdouble *jarr2 ;
  Transform::RotationOrder const *argp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  argp3 = *(Transform::RotationOrder **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Transform::RotationOrder const");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->rotateRadians((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateRadiansX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateRadiansX(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateRadiansY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateRadiansY(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateRadiansZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateRadiansZ(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateRadiansAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->rotateRadiansAxis(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->rotateDegrees((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  Transform::RotationOrder arg3 ;
  jdouble *jarr2 ;
  Transform::RotationOrder const *argp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  argp3 = *(Transform::RotationOrder **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Transform::RotationOrder const");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->rotateDegrees((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateDegreesX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateDegreesX(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateDegreesY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateDegreesY(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateDegreesZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateDegreesZ(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1rotateDegreesAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->rotateDegreesAxis(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->translate((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1addDependent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::VisibleObject *arg2 = (OpenSim::VisibleObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(OpenSim::VisibleObject **)&jarg2; 
  (arg1)->addDependent(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1removeDependent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::VisibleObject *arg2 = (OpenSim::VisibleObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(OpenSim::VisibleObject **)&jarg2; 
  (arg1)->removeDependent(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1countDependents(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  result = (int)(arg1)->countDependents();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getDependent(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int arg2 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::VisibleObject *)(arg1)->getDependent(arg2);
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1addGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Geometry *arg2 = (OpenSim::Geometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(OpenSim::Geometry **)&jarg2; 
  (arg1)->addGeometry(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int arg2 ;
  OpenSim::Geometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Geometry *)(arg1)->getGeometry(arg2);
  *(OpenSim::Geometry **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1countGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  result = (int)(arg1)->countGeometry();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1getDefaultGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Geometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  result = (OpenSim::Geometry *)(arg1)->getDefaultGeometry();
  *(OpenSim::Geometry **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleObject_1setupProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  (arg1)->setupProperties();
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ObjectDEFAULT_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)ObjectDEFAULT_NAME;
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1OpenSimObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Object *)new OpenSim::Object();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  try {
    result = (OpenSim::Object *)new OpenSim::Object((std::string const &)*arg1);
  }
  catch(OpenSim::Exception &_e) {
    {
      jclass excep = jenv->FindClass("java/io/IOException");
      if (excep)
      jenv->ThrowNew(excep, (_e).getMessage());
      return 0;
    }
  }
  
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::XMLDocument *arg1 = (OpenSim::XMLDocument *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::XMLDocument **)&jarg1; 
  result = (OpenSim::Object *)new OpenSim::Object((OpenSim::XMLDocument const *)arg1);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimObject_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Object *)new OpenSim::Object(arg1);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1OpenSimObject_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return 0;
  } 
  result = (OpenSim::Object *)new OpenSim::Object((OpenSim::Object const &)*arg1);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Object const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Object const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getDisplayer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::VisibleObject *)(arg1)->getDisplayer();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Object const *)arg1)->getType();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setName((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Object const *)arg1)->getName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setDescription((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Object const *)arg1)->getDescription();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Object const *)arg1)->toString();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getPropertySet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::PropertySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  {
    OpenSim::PropertySet &_result_ref = (arg1)->getPropertySet();
    result = (OpenSim::PropertySet *) &_result_ref;
  }
  *(OpenSim::PropertySet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1RegisterType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Object *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  OpenSim::Object::RegisterType((OpenSim::Object const &)*arg1);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1makeObjectFromFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Object *)OpenSim::Object::makeObjectFromFile((std::string const &)*arg1);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1newInstanceOfType(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Object *)OpenSim::Object::newInstanceOfType((std::string const &)*arg1);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getRegisteredTypenames(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  OpenSim::Object::getRegisteredTypenames(*arg1);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1isValidDefaultType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  result = (bool)((OpenSim::Object const *)arg1)->isValidDefaultType((OpenSim::Object const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1updateFromXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  (arg1)->updateFromXMLNode();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1updateDefaultObjectsFromXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  (arg1)->updateDefaultObjectsFromXMLNode();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1updateXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  (arg1)->updateXMLNode(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1generateXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  (arg1)->generateXMLNode(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1setInlined_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jstring jarg3) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setInlined(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1setInlined_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInlined(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getInlined(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (bool)((OpenSim::Object const *)arg1)->getInlined();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getOffLineFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (char *)((OpenSim::Object const *)arg1)->getOffLineFileName();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1clearXMLNodes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  (arg1)->clearXMLNodes();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getDocument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::XMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::XMLDocument *)((OpenSim::Object const *)arg1)->getDocument();
  *(OpenSim::XMLDocument **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  DOMElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (DOMElement *)((OpenSim::Object const *)arg1)->getXMLNode();
  *(DOMElement **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1print(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->print((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1addObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object & reference is null");
    return ;
  } 
  (arg1)->addObserver(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1deleteObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object & reference is null");
    return ;
  } 
  (arg1)->deleteObserver(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1addObserverEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  Event *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object & reference is null");
    return ;
  } 
  arg3 = *(Event **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Event & reference is null");
    return ;
  } 
  (arg1)->addObserverEvent(*arg2,*arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1notifyObservers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  Event *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(Event **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Event & reference is null");
    return ;
  } 
  (arg1)->notifyObservers(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1deleteObservers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  (arg1)->deleteObservers();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1countObservers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (int)((OpenSim::Object const *)arg1)->countObservers();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  Event *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  arg3 = *(Event **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Event & reference is null");
    return ;
  } 
  (arg1)->update((OpenSim::Object const &)*arg2,*arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1setSerializeAllDefaults(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  OpenSim::Object::setSerializeAllDefaults(arg1);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_OpenSimObject_1getSerializeAllDefaults(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)OpenSim::Object::getSerializeAllDefaults();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propTranslucency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDbl arg2 ;
  PropertyDbl *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  argp2 = *(PropertyDbl **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDbl");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_propTranslucency = arg2;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propTranslucency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDbl result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result =  ((arg1)->_propTranslucency);
  *(PropertyDbl **)&jresult = new PropertyDbl((PropertyDbl &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propAmbientColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray arg2 ;
  PropertyDblArray *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  argp2 = *(PropertyDblArray **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDblArray");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_propAmbientColor = arg2;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propAmbientColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result =  ((arg1)->_propAmbientColor);
  *(PropertyDblArray **)&jresult = new PropertyDblArray((PropertyDblArray &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propDiffuseColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray arg2 ;
  PropertyDblArray *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  argp2 = *(PropertyDblArray **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDblArray");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_propDiffuseColor = arg2;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propDiffuseColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result =  ((arg1)->_propDiffuseColor);
  *(PropertyDblArray **)&jresult = new PropertyDblArray((PropertyDblArray &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propSpecularColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray arg2 ;
  PropertyDblArray *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  argp2 = *(PropertyDblArray **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDblArray");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_propSpecularColor = arg2;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1propSpecularColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result =  ((arg1)->_propSpecularColor);
  *(PropertyDblArray **)&jresult = new PropertyDblArray((PropertyDblArray &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1translucency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_translucency = *arg2;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1translucency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  {
    double &_result_ref = (double &) ((arg1)->_translucency);
    result = (double *) &_result_ref;
  }
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1ambientColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_ambientColor = *arg2;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1ambientColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = (OpenSim::Array<double > &) ((arg1)->_ambientColor);
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1diffuseColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_diffuseColor = *arg2;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1diffuseColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = (OpenSim::Array<double > &) ((arg1)->_diffuseColor);
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1specularColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_specularColor = *arg2;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1specularColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = (OpenSim::Array<double > &) ((arg1)->_specularColor);
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1defaultMaterial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  OpenSim::Material::_defaultMaterial = arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1_1defaultMaterial_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Material *)OpenSim::Material::_defaultMaterial;
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Material_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Material *)new OpenSim::Material();
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Material_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Material *)new OpenSim::Material((std::string const &)*arg1);
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Material_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Material *)new OpenSim::Material(arg1);
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Material_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material const & reference is null");
    return 0;
  } 
  result = (OpenSim::Material *)new OpenSim::Material((OpenSim::Material const &)*arg1);
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Material(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Material const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Material const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1setTranslucency(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTranslucency(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1getTranslucency(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (double)((OpenSim::Material const *)arg1)->getTranslucency();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1setAmbientColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setAmbientColor((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1getAmbientColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (double *)((OpenSim::Material const *)arg1)->getAmbientColor();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1setDiffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setDiffuseColor((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1getDiffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (double *)((OpenSim::Material const *)arg1)->getDiffuseColor();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1setSpecularColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setSpecularColor((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1getSpecularColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (double *)((OpenSim::Material const *)arg1)->getSpecularColor();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1GetDefaultMaterialName(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    std::string const &_result_ref = OpenSim::Material::GetDefaultMaterialName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1GetDefaultMaterial(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenSim::Material const &_result_ref = OpenSim::Material::GetDefaultMaterial();
    result = (OpenSim::Material *) &_result_ref;
  }
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Material_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  DOMElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (DOMElement *)((OpenSim::Material const *)arg1)->getNode();
  *(DOMElement **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::None;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1WireFrame_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::WireFrame;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1SolidFill_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::SolidFill;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1FlatShaded_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::FlatShaded;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1GouraudShaded_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::GouraudShaded;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1PhongShaded_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::PhongShaded;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1BoundingBox_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::BoundingBox;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleProperties_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties *)new OpenSim::VisibleProperties();
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleProperties_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::VisibleProperties *)new OpenSim::VisibleProperties((std::string const &)*arg1);
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleProperties_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::XMLDocument *arg1 = (OpenSim::XMLDocument *) 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::XMLDocument **)&jarg1; 
  result = (OpenSim::VisibleProperties *)new OpenSim::VisibleProperties((OpenSim::XMLDocument const *)arg1);
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleProperties_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::VisibleProperties *)new OpenSim::VisibleProperties(arg1);
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1VisibleProperties_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::VisibleProperties const & reference is null");
    return 0;
  } 
  result = (OpenSim::VisibleProperties *)new OpenSim::VisibleProperties((OpenSim::VisibleProperties const &)*arg1);
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1VisibleProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::VisibleProperties const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::VisibleProperties const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1setDisplayPreference(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  OpenSim::VisibleProperties::DisplayPreference arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  arg2 = (OpenSim::VisibleProperties::DisplayPreference)jarg2; 
  (arg1)->setDisplayPreference(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1getDisplayPreference(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  result = (OpenSim::VisibleProperties::DisplayPreference)((OpenSim::VisibleProperties const *)arg1)->getDisplayPreference();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1setShowNormals(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setShowNormals(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1getShowNormals(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  result = (bool)((OpenSim::VisibleProperties const *)arg1)->getShowNormals();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1setShowAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setShowAxes(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1getShowAxes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  result = (bool)((OpenSim::VisibleProperties const *)arg1)->getShowAxes();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1setMaterialName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setMaterialName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1getMaterialName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  result = (char *)((OpenSim::VisibleProperties const *)arg1)->getMaterialName();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1getColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->getColor(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_VisibleProperties_1setColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setColor(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1X_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::AxisName result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::AxisName)OpenSim::Transform::X;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1Y_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::AxisName result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::AxisName)OpenSim::Transform::Y;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1Z_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::AxisName result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::AxisName)OpenSim::Transform::Z;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1W_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::AxisName result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::AxisName)OpenSim::Transform::W;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1NoAxis_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::AxisName result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::AxisName)OpenSim::Transform::NoAxis;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1XYZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::XYZ;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1XZY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::XZY;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1YXZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::YXZ;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1YZX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::YZX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1ZXY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::ZXY;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1ZYX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::ZYX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Transform_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform *)new OpenSim::Transform();
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Transform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Transform *arg1 = 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Transform const & reference is null");
    return 0;
  } 
  result = (OpenSim::Transform *)new OpenSim::Transform((OpenSim::Transform const &)*arg1);
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Transform_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2, jdoubleArray jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  OpenSim::Transform::AnglePreference arg2 ;
  double *arg3 ;
  OpenSim::Transform *result = 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (OpenSim::Transform::AnglePreference)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return 0; 
  result = (OpenSim::Transform *)new OpenSim::Transform(arg1,arg2,(double const (*))arg3);
  *(OpenSim::Transform **)&jresult = result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Transform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  result = (OpenSim::Transform *)((OpenSim::Transform const *)arg1)->copy();
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1printMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  (arg1)->printMatrix();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Transform const *)arg1)->getPosition(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPosition((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1setIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  (arg1)->setIdentity();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1rotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jint jarg3, jint jarg4) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  OpenSim::Transform::RotationOrder arg4 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  arg4 = (OpenSim::Transform::RotationOrder)jarg4; 
  (arg1)->rotate((double const (*))arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1rotateX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  (arg1)->rotateX(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1rotateY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  (arg1)->rotateY(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1rotateZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  (arg1)->rotateZ(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1rotateAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jdoubleArray jarg4) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->rotateAxis(arg2,arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1translateX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->translateX(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1translateY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->translateY(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1translateZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->translateZ(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->translate((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1transformPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Transform const *)arg1)->transformPoint(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1transformPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::Transform const *)arg1)->transformPoint(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1transformVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Transform const *)arg1)->transformVector(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1getMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  result = (double *)(arg1)->getMatrix();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1getMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Transform const *)arg1)->getMatrix(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Transform_1setRotationSubmatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  (arg1)->setRotationSubmatrix((double (*)[3])arg2);
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Geometry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Geometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Geometry *)new OpenSim::Geometry();
  *(OpenSim::Geometry **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Geometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Geometry *arg1 = (OpenSim::Geometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Geometry **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalyticGeometry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::AnalyticGeometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::AnalyticGeometry *)new OpenSim::AnalyticGeometry();
  *(OpenSim::AnalyticGeometry **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticGeometry_1isAnalytic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::AnalyticGeometry *arg1 = (OpenSim::AnalyticGeometry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalyticGeometry **)&jarg1; 
  result = (bool)((OpenSim::AnalyticGeometry const *)arg1)->isAnalytic();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticGeometry_1getShape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::AnalyticGeometry *arg1 = (OpenSim::AnalyticGeometry *) 0 ;
  OpenSim::AnalyticGeometry::AnalyticGeometryType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalyticGeometry **)&jarg1; 
  result = (OpenSim::AnalyticGeometry::AnalyticGeometryType)((OpenSim::AnalyticGeometry const *)arg1)->getShape();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticGeometry_1getSphereRadius(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::AnalyticGeometry *arg1 = (OpenSim::AnalyticGeometry *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalyticGeometry **)&jarg1; 
  {
    double const &_result_ref = ((OpenSim::AnalyticGeometry const *)arg1)->getSphereRadius();
    result = (double *) &_result_ref;
  }
  jresult = (jdouble)*result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticGeometry_1setSphereRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::AnalyticGeometry *arg1 = (OpenSim::AnalyticGeometry *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalyticGeometry **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSphereRadius(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticGeometry_1getCylinderParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::AnalyticGeometry *arg1 = (OpenSim::AnalyticGeometry *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalyticGeometry **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  ((OpenSim::AnalyticGeometry const *)arg1)->getCylinderParams(*arg2,*arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticGeometry_1getConeParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::AnalyticGeometry *arg1 = (OpenSim::AnalyticGeometry *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalyticGeometry **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = *(double **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  ((OpenSim::AnalyticGeometry const *)arg1)->getConeParams(*arg2,*arg3,*arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticGeometry_1getEllipsoidParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::AnalyticGeometry *arg1 = (OpenSim::AnalyticGeometry *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalyticGeometry **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = *(double **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  ((OpenSim::AnalyticGeometry const *)arg1)->getEllipsoidParams(*arg2,*arg3,*arg4);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticGeometry_1createSphere(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  OpenSim::AnalyticGeometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (OpenSim::AnalyticGeometry *)OpenSim::AnalyticGeometry::createSphere(arg1);
  *(OpenSim::AnalyticGeometry **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalyticGeometry_1dynamic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Geometry *arg1 = (OpenSim::Geometry *) 0 ;
  OpenSim::AnalyticGeometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Geometry **)&jarg1; 
  {
    result = (OpenSim::AnalyticGeometry *)OpenSim_AnalyticGeometry_dynamic_cast(arg1);
    if (!result) {
      jclass excep = jenv->FindClass("java/lang/ClassCastException");
      if (excep) {
        jenv->ThrowNew(excep, "dynamic_cast exception");
      }
    }
  }
  *(OpenSim::AnalyticGeometry **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AnalyticGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AnalyticGeometry *arg1 = (OpenSim::AnalyticGeometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalyticGeometry **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1PolyhedralGeometry(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::PolyhedralGeometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::PolyhedralGeometry *)new OpenSim::PolyhedralGeometry((std::string const &)*arg1);
  *(OpenSim::PolyhedralGeometry **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_PolyhedralGeometry_1getGeometryFilename(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::PolyhedralGeometry *arg1 = (OpenSim::PolyhedralGeometry *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PolyhedralGeometry **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::PolyhedralGeometry const *)arg1)->getGeometryFilename();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_PolyhedralGeometry_1isAnalytic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::PolyhedralGeometry *arg1 = (OpenSim::PolyhedralGeometry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PolyhedralGeometry **)&jarg1; 
  result = (bool)((OpenSim::PolyhedralGeometry const *)arg1)->isAnalytic();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1PolyhedralGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::PolyhedralGeometry *arg1 = (OpenSim::PolyhedralGeometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PolyhedralGeometry **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Body_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double *arg2 = (double *) 0 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (OpenSim::Body *)new OpenSim::Body(arg1,arg2);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Body_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (OpenSim::Body *)new OpenSim::Body(arg1);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Body_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Body *)new OpenSim::Body();
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Body_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Body *arg1 = 0 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Body const & reference is null");
    return 0;
  } 
  result = (OpenSim::Body *)new OpenSim::Body((OpenSim::Body const &)*arg1);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Body_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Body *)new OpenSim::Body((std::string const &)*arg1);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Body_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Body *)new OpenSim::Body(arg1);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Body(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Body_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Body const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Body_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Body const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Body_1setMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMass(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Body_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  result = (double)(arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Body_1setInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->setInertia(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Body_1setInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setInertia(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Body_1setInertia_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->setInertia(arg2,arg3,arg4,arg5,arg6,arg7);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Body_1getInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->getInertia(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Body_1getInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  (arg1)->getInertia((double (*)[3])arg2);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Body_1setCenterOfMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setCenterOfMass((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Body_1getCenterOfMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Body const *)arg1)->getCenterOfMass(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Body_1scaleBy(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->scaleBy((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Body_1setNull(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  (arg1)->setNull();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Body_1setupProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  (arg1)->setupProperties();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetBodies_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Body > *)new OpenSim::Set<OpenSim::Body >();
  *(OpenSim::Set<OpenSim::Body > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetBodies_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Body > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Body > *)new OpenSim::Set<OpenSim::Body >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Body > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetBodies_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::Body > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::Body > *)new OpenSim::Set<OpenSim::Body >(arg1);
  *(OpenSim::Set<OpenSim::Body > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetBodies_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Body > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Body > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Body > *)new OpenSim::Set<OpenSim::Body >((OpenSim::Set<OpenSim::Body > const &)*arg1);
  *(OpenSim::Set<OpenSim::Body > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Body > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Body > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = (OpenSim::Body *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->getIndex((OpenSim::Body const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = (OpenSim::Body *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->getIndex((OpenSim::Body const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = (OpenSim::Body *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Body > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Body > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Body > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  OpenSim::Body *arg3 = (OpenSim::Body *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Body **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = (OpenSim::Body *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Body const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  OpenSim::Body *arg3 = (OpenSim::Body *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Body **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Body *)((OpenSim::Set<OpenSim::Body > const *)arg1)->get(arg2);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Body *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  result = (OpenSim::Body *)((OpenSim::Set<OpenSim::Body > const *)arg1)->getLast();
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Body const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->searchBinary((OpenSim::Body const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Body const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->searchBinary((OpenSim::Body const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Body const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->searchBinary((OpenSim::Body const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetBodies_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Body const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->searchBinary((OpenSim::Body const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMaterials_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Material > *)new OpenSim::Set<OpenSim::Material >();
  *(OpenSim::Set<OpenSim::Material > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMaterials_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Material > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Material > *)new OpenSim::Set<OpenSim::Material >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Material > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMaterials_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::Material > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::Material > *)new OpenSim::Set<OpenSim::Material >(arg1);
  *(OpenSim::Set<OpenSim::Material > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMaterials_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Material > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Material > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Material > *)new OpenSim::Set<OpenSim::Material >((OpenSim::Set<OpenSim::Material > const &)*arg1);
  *(OpenSim::Set<OpenSim::Material > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Material > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Material > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = (OpenSim::Material *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getIndex((OpenSim::Material const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = (OpenSim::Material *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getIndex((OpenSim::Material const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = (OpenSim::Material *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Material > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Material > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Material > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  OpenSim::Material *arg3 = (OpenSim::Material *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Material **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = (OpenSim::Material *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Material const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  OpenSim::Material *arg3 = (OpenSim::Material *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Material **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Material *)((OpenSim::Set<OpenSim::Material > const *)arg1)->get(arg2);
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Material *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (OpenSim::Material *)((OpenSim::Set<OpenSim::Material > const *)arg1)->getLast();
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->searchBinary((OpenSim::Material const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->searchBinary((OpenSim::Material const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->searchBinary((OpenSim::Material const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMaterials_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->searchBinary((OpenSim::Material const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MaterialSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MaterialSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MaterialSet *)new OpenSim::MaterialSet();
  *(OpenSim::MaterialSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MaterialSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::MaterialSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::MaterialSet *)new OpenSim::MaterialSet((std::string const &)*arg1);
  *(OpenSim::MaterialSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MaterialSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::MaterialSet *arg1 = 0 ;
  OpenSim::MaterialSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MaterialSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::MaterialSet *)new OpenSim::MaterialSet((OpenSim::MaterialSet const &)*arg1);
  *(OpenSim::MaterialSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1MaterialSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MaterialSet_1addMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addMaterial(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MaterialSet_1updateMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->updateMaterial(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MaterialSet_1removeMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->removeMaterial(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MaterialSet_1materialExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((OpenSim::MaterialSet const *)arg1)->materialExists((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_MaterialSet_1getNumberOfMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  result = (int)((OpenSim::MaterialSet const *)arg1)->getNumberOfMaterials();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MaterialSet_1getMaterialByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  int arg2 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    OpenSim::Material const &_result_ref = ((OpenSim::MaterialSet const *)arg1)->getMaterialByIndex(arg2);
    result = (OpenSim::Material *) &_result_ref;
  }
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MaterialSet_1getMaterialByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    OpenSim::Material const &_result_ref = ((OpenSim::MaterialSet const *)arg1)->getMaterialByName((char const *)arg2);
    result = (OpenSim::Material *) &_result_ref;
  }
  *(OpenSim::Material **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1LARGE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)OpenSim::Actuator::LARGE;
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Actuator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Actuator const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Actuator const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  Model *arg2 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = *(Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (Model *)((OpenSim::Actuator const *)arg1)->getModel();
  *(Model **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (int)((OpenSim::Actuator const *)arg1)->getNX();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Actuator const *)arg1)->getControlName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Actuator const *)arg1)->getControlIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControl(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setControl((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setControls((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Actuator const *)arg1)->getControl(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Actuator const *)arg1)->getControl((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Actuator const *)arg1)->getControls(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (int)((OpenSim::Actuator const *)arg1)->getNY();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    std::string const &_result_ref = ((OpenSim::Actuator const *)arg1)->getStateName(arg2);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Actuator const *)arg1)->getStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1setState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setState(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1setState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setState((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Actuator const *)arg1)->getState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Actuator const *)arg1)->getState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Actuator const *)arg1)->getStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getNYP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (int)((OpenSim::Actuator const *)arg1)->getNYP();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    std::string const &_result_ref = ((OpenSim::Actuator const *)arg1)->getPseudoStateName(arg2);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Actuator const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1setPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setPseudoState(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1setPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setPseudoState((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Actuator const *)arg1)->getPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Actuator const *)arg1)->getPseudoState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Actuator const *)arg1)->getPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1setArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setArea(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getArea();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getAppliesForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (bool)((OpenSim::Actuator const *)arg1)->getAppliesForce();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1setForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setForce(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getForce();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getStress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getStress();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getPower(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getPower();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1setMaxForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxForce(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getMaxForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getMaxForce();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1setMinForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMinForce(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getMinForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getMinForce();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1setOptimalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setOptimalForce(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1getOptimalForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getOptimalForce();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdouble jarg3) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  double arg3 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (double)jarg3; 
  (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  (arg1)->computeActuation();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1computeStateDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->computeStateDerivatives(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1updatePseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  (arg1)->updatePseudoStates();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  (arg1)->apply();
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuator_1check(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (bool)((OpenSim::Actuator const *)arg1)->check();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetActuators(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetActuators_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Actuator > *)new OpenSim::Set<OpenSim::Actuator >();
  *(OpenSim::Set<OpenSim::Actuator > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetActuators_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Actuator > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Actuator > *)new OpenSim::Set<OpenSim::Actuator >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Actuator > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetActuators_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::Actuator > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::Actuator > *)new OpenSim::Set<OpenSim::Actuator >(arg1);
  *(OpenSim::Set<OpenSim::Actuator > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetActuators_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Actuator > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Actuator > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Actuator > *)new OpenSim::Set<OpenSim::Actuator >((OpenSim::Set<OpenSim::Actuator > const &)*arg1);
  *(OpenSim::Set<OpenSim::Actuator > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = (OpenSim::Actuator *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getIndex((OpenSim::Actuator const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = (OpenSim::Actuator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getIndex((OpenSim::Actuator const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Actuator > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Actuator > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Actuator > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  OpenSim::Actuator *arg3 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Actuator **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Actuator const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  OpenSim::Actuator *arg3 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Actuator **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  OpenSim::Actuator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Actuator *)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->get(arg2);
  *(OpenSim::Actuator **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Actuator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Actuator *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Actuator **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  result = (OpenSim::Actuator *)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getLast();
  *(OpenSim::Actuator **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Actuator const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->searchBinary((OpenSim::Actuator const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Actuator const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->searchBinary((OpenSim::Actuator const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Actuator const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->searchBinary((OpenSim::Actuator const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetActuators_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Actuator const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->searchBinary((OpenSim::Actuator const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ActuatorSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ActuatorSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ActuatorSet *)new OpenSim::ActuatorSet();
  *(OpenSim::ActuatorSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ActuatorSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenSim::ActuatorSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (OpenSim::ActuatorSet *)new OpenSim::ActuatorSet((char const *)arg1);
  *(OpenSim::ActuatorSet **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ActuatorSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  Model *arg2 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = *(Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (Model *)((OpenSim::ActuatorSet const *)arg1)->getModel();
  *(Model **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::Actuator *arg2 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  OpenSim::Actuator *arg3 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Actuator **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getNX();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1mapActuatorToControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapActuatorToControl(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1mapControlToActuator(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapControlToActuator(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getControlIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::ActuatorSet const *)arg1)->getControlName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControl(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setControl((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setControls((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getControl(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getControl((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ActuatorSet const *)arg1)->getControls(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getNY();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1mapActuatorToState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapActuatorToState(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1mapStateToActuator(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapStateToActuator(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::ActuatorSet const *)arg1)->getStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setState(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setState((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ActuatorSet const *)arg1)->getStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getNYP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getNYP();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1mapActuatorToPseudoState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapActuatorToPseudoState(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1mapPseudoStateToActuator(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapPseudoStateToActuator(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::ActuatorSet const *)arg1)->getPseudoStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setPseudoState(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setPseudoState((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getPseudoState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ActuatorSet const *)arg1)->getPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  double arg3 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (double)jarg3; 
  (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  (arg1)->computeActuation();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1computeStateDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->computeStateDerivatives(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1updatePseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  (arg1)->updatePseudoStates();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  (arg1)->apply();
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ActuatorSet_1check(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (bool)((OpenSim::ActuatorSet const *)arg1)->check();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ContactForceSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ContactForceSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ContactForceSet *)new OpenSim::ContactForceSet();
  *(OpenSim::ContactForceSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ContactForceSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenSim::ContactForceSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (OpenSim::ContactForceSet *)new OpenSim::ContactForceSet((char const *)arg1);
  *(OpenSim::ContactForceSet **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ContactForceSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  ContactForce *arg2 = (ContactForce *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = *(ContactForce **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  ContactForce *arg3 = (ContactForce *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(ContactForce **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  (arg1)->computeContact();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1updatePseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  (arg1)->updatePseudoStates();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  (arg1)->apply();
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ContactForceSet_1check(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  result = (bool)((OpenSim::ContactForceSet const *)arg1)->check();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1StateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (OpenSim::StateVector *)new OpenSim::StateVector(arg1,arg2,(double const *)arg3);
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1StateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  int arg2 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::StateVector *)new OpenSim::StateVector(arg1,arg2);
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1StateVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (OpenSim::StateVector *)new OpenSim::StateVector(arg1);
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1StateVector_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::StateVector *)new OpenSim::StateVector();
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1StateVector_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::StateVector *arg1 = 0 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::StateVector const & reference is null");
    return 0;
  } 
  result = (OpenSim::StateVector *)new OpenSim::StateVector((OpenSim::StateVector const &)*arg1);
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1StateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jdoubleArray jarg4) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  int arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->setStates(arg2,arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  result = (int)((OpenSim::StateVector const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTime(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  result = (double)((OpenSim::StateVector const *)arg1)->getTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1getDataValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getDataValue(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1setDataValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  (arg1)->setDataValue(arg2,*arg3);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = (arg1)->getData();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1shiftTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->shiftTime(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1scaleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->scaleTime(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->add(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->add(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->add(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->add(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1subtract_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->subtract(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1subtract_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->subtract(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1subtract_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->subtract(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1multiply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->multiply(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1multiply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->multiply(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1multiply_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->multiply(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1divide_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->divide(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1divide_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->divide(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1divide_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->divide(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  (arg1)->print();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_StateVector_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  result = (int)(arg1)->print(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1DEFAULT_1CAPACITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)Storage_DEFAULT_CAPACITY;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1LARGE_1NEGATIVE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)OpenSim::Storage::LARGE_NEGATIVE;
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1LARGE_1POSITIVE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)OpenSim::Storage::LARGE_POSITIVE;
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1DEFAULT_1HEADER_1TOKEN_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      OpenSim::Storage::DEFAULT_HEADER_TOKEN = (char const *) (new char[strlen(arg1)+1]);
      strcpy((char *) OpenSim::Storage::DEFAULT_HEADER_TOKEN,arg1);
    } else {
      OpenSim::Storage::DEFAULT_HEADER_TOKEN = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1DEFAULT_1HEADER_1TOKEN_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)OpenSim::Storage::DEFAULT_HEADER_TOKEN;
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1DEFAULT_1HEADER_1SEPARATOR_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      OpenSim::Storage::DEFAULT_HEADER_SEPARATOR = (char const *) (new char[strlen(arg1)+1]);
      strcpy((char *) OpenSim::Storage::DEFAULT_HEADER_SEPARATOR,arg1);
    } else {
      OpenSim::Storage::DEFAULT_HEADER_SEPARATOR = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1DEFAULT_1HEADER_1SEPARATOR_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)OpenSim::Storage::DEFAULT_HEADER_SEPARATOR;
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (OpenSim::Storage *)new OpenSim::Storage(arg1,(char const *)arg2);
  *(OpenSim::Storage **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (OpenSim::Storage *)new OpenSim::Storage(arg1);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Storage *)new OpenSim::Storage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (OpenSim::Storage *)new OpenSim::Storage((char const *)arg1);
  *(OpenSim::Storage **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Storage *)new OpenSim::Storage((OpenSim::Storage const &)*arg1,arg2);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  result = (OpenSim::Storage *)new OpenSim::Storage((OpenSim::Storage const &)*arg1);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (OpenSim::Storage *)new OpenSim::Storage((OpenSim::Storage const &)*arg1,arg2,arg3,(char const *)arg4);
  *(OpenSim::Storage **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Storage_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Storage *)new OpenSim::Storage((OpenSim::Storage const &)*arg1,arg2,arg3);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Storage const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Storage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (int)((OpenSim::Storage const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getSmallestNumberOfStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (int)(arg1)->getSmallestNumberOfStates();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::StateVector *)((OpenSim::Storage const *)arg1)->getStateVector(arg2);
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getLastStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (OpenSim::StateVector *)((OpenSim::Storage const *)arg1)->getLastStateVector();
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getFirstTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (double)(arg1)->getFirstTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getLastTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (double)(arg1)->getLastTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Storage const *)arg1)->getTime(arg2,*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Storage const *)arg1)->getTime(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getTimeColumn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double **arg2 = 0 ;
  int arg3 ;
  int result;
  double *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  temp2 = *(double **)&jarg2;
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getTimeColumn(*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getTimeColumn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double **arg2 = 0 ;
  int result;
  double *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  temp2 = *(double **)&jarg2;
  arg2 = &temp2; 
  result = (int)(arg1)->getTimeColumn(*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Storage const *)arg1)->getData(arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)((OpenSim::Storage const *)arg1)->getData(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double ***)&jarg4; 
  result = (int)((OpenSim::Storage const *)arg1)->getData(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getDataAtTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double ***)&jarg4; 
  result = (int)(arg1)->getDataAtTime(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getDataAtTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)(arg1)->getDataAtTime(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getDataColumn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double **arg3 = 0 ;
  int result;
  double *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(double **)&jarg3;
  arg3 = &temp3; 
  result = (int)((OpenSim::Storage const *)arg1)->getDataColumn(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1setDataColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  OpenSim::Array<double > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->setDataColumn(arg2,(OpenSim::Array<double > const &)*arg3);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getDataColumn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  double **arg3 = 0 ;
  int result;
  double *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  temp3 = *(double **)&jarg3;
  arg3 = &temp3; 
  result = (int)((OpenSim::Storage const *)arg1)->getDataColumn(*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1setStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStepInterval(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (int)((OpenSim::Storage const *)arg1)->getStepInterval();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (int)((OpenSim::Storage const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1setWriteSIMMHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setWriteSIMMHeader(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getWriteSIMMHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (bool)((OpenSim::Storage const *)arg1)->getWriteSIMMHeader();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1setHeaderToken(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setHeaderToken((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getHeaderToken(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (char *)((OpenSim::Storage const *)arg1)->getHeaderToken();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getColumnIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Storage const *)arg1)->getColumnIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getColumnIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Storage const *)arg1)->getColumnIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1setColumnLabels_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setColumnLabels((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1setColumnLabels_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  (arg1)->setColumnLabels();
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getColumnLabels(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (char *)((OpenSim::Storage const *)arg1)->getColumnLabels();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1getColumnLabelsArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  {
    OpenSim::Array<std::string > const &_result_ref = ((OpenSim::Storage const *)arg1)->getColumnLabelsArray();
    result = (OpenSim::Array<std::string > *) &_result_ref;
  }
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1reset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->reset(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1reset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (int)(arg1)->reset();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1reset_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->reset(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::StateVector const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::StateVector const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Array<OpenSim::StateVector > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Array<OpenSim::StateVector > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<OpenSim::StateVector > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<OpenSim::StateVector > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)(arg1)->append(arg2,arg3,(double const *)arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)(arg1)->store(arg2,arg3,arg4,(double const *)arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1shiftTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->shiftTime(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1scaleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->scaleTime(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->add(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->add(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->add(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->add(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1add_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->add(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1subtract_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->subtract(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1subtract_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->subtract(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1subtract_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->subtract(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1subtract_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->subtract(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1multiply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->multiply(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1multiplyColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->multiplyColumn(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1multiply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->multiply(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1multiply_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->multiply(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1multiply_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->multiply(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1divide_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->divide(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1divide_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->divide(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1divide_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->divide(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1divide_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->divide(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1integrate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Storage *)(arg1)->integrate(arg2,arg3);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1integrate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Storage *)(arg1)->integrate(arg2);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1integrate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->integrate();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1integrate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (OpenSim::Storage *)(arg1)->integrate(arg2,arg3);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1computeArea_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->computeArea(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1computeArea_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)(arg1)->computeArea(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1computeAverage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->computeAverage(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1computeAverage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)(arg1)->computeAverage(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1pad(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->pad(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1lowpassFIR(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->lowpassFIR(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1findIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->findIndex(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1findIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (int)(arg1)->findIndex(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1resample(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->resample(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  (arg1)->print();
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->print((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1print_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->print((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1print_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3, jstring jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (int)(arg1)->print((char const *)arg2,arg3,(char const *)arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Storage_1print_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  result = (int)(arg1)->print((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Model(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getModelDescriptionFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (char *)((OpenSim::Model const *)arg1)->getModelDescriptionFileName();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setModelDescriptionFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setModelDescriptionFileName((std::string const &)*arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNB();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNJ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNJ();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNQ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNQ();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNU(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNU();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNX();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNA();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNP();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNY();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNYP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNYP();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setName((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getBodyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Model const *)arg1)->getBodyName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getCoordinateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Model const *)arg1)->getCoordinateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getSpeedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Model const *)arg1)->getSpeedName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getActuatorName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Model const *)arg1)->getActuatorName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Model const *)arg1)->getControlName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Model const *)arg1)->getStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Model const *)arg1)->getPseudoStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getBodyIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Model const *)arg1)->getBodyIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getCoordinateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Model const *)arg1)->getCoordinateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getSpeedIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Model const *)arg1)->getSpeedIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getActuatorIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Model const *)arg1)->getActuatorIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Model const *)arg1)->getControlIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Model const *)arg1)->getStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Model const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Body *)((OpenSim::Model const *)arg1)->getBody(arg2);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1constructBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  (arg1)->constructBodies();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getBodySet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::BodySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::BodySet *)(arg1)->getBodySet();
  *(OpenSim::BodySet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getMaterialSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::MaterialSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::MaterialSet *)(arg1)->getMaterialSet();
  *(OpenSim::MaterialSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getVisibleObjectByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::VisibleObject *)((OpenSim::Model const *)arg1)->getVisibleObjectByName((std::string const &)*arg2);
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->set(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTime(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (double)((OpenSim::Model const *)arg1)->getTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setTimeNormConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTimeNormConstant(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getTimeNormConstant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (double)((OpenSim::Model const *)arg1)->getTimeNormConstant();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setControls((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControl(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setControl((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getControls(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getControl(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Model const *)arg1)->getControl((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setInitialStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getInitialStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getInitialState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getInitialState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getInitialState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Model const *)arg1)->getInitialState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Model const *)arg1)->getState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setInitialPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getInitialPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getInitialPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getInitialPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getInitialPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Model const *)arg1)->getInitialPseudoState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getPseudoState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setConfiguration((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setConfiguration((double const (*))arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getCoordinates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getCoordinate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getCoordinate(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getCoordinate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Model const *)arg1)->getCoordinate((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getSpeeds(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getSpeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getSpeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Model const *)arg1)->getSpeed((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getAccelerations(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getAcceleration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getAcceleration(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getAcceleration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Model const *)arg1)->getAcceleration((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1extractConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->extractConfiguration((double const (*))arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg2; 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1assemble(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jint jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  int *arg4 = (int *) 0 ;
  double arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(int **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  result = (int)(arg1)->assemble(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getGravity(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setGravity(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getGroundID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getGroundID();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setBodyToJointBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getBodyToJointBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setInboardToJointBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getInboardToJointBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setPin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->setPin(arg2,arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getPin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->getPin(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getJointInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jintArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  int *arg4 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 50) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->getJointInfo(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutInt(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getMass(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getInertiaBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double (*arg3)[3] ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  result = (int)((OpenSim::Model const *)arg1)->getInertiaBodyLocal(arg2,(double (*)[3])arg3);
  jresult = (jint)result; 
  
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getInertiaBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)((OpenSim::Model const *)arg1)->getInertiaBodyLocal(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getSystemInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 ;
  double (*arg4)[3] ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  ((OpenSim::Model const *)arg1)->getSystemInertia(arg2,arg3,(double (*)[3])arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getSystemInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::Model const *)arg1)->getSystemInertia(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->getPosition(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->getVelocity(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getAcceleration_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->getAcceleration(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::Model const *)arg1)->getDirectionCosines(arg2,(double (*)[3])arg3);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->getDirectionCosines(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getAngularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getAngularVelocity(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getAngularVelocityBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getAngularVelocityBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getAngularAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getAngularAcceleration(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getAngularAccelerationBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getAngularAccelerationBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForce(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForces(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForces(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyForceBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForceBodyLocal(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyForcesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyForcesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorque(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyTorques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorques(arg2,(int const (*))arg3,(double const (*)[3])arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyTorques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorques(arg2,(int const (*))arg3,(double const *)arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyTorqueBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorqueBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyTorquesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyTorquesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->applyGeneralizedForce(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyGeneralizedForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->applyGeneralizedForces((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyGeneralizedForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 ;
  jint *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyGeneralizedForces(arg2,(int const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNetAppliedGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getNetAppliedGeneralizedForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1computeGeneralizedForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->computeGeneralizedForces(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1computeReactions(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double (*arg2)[3] ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::Model const *)arg1)->computeReactions((double (*)[3])arg2,(double (*)[3])arg3);
  
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1prescribeMotion(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->prescribeMotion(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1formMassMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->formMassMatrix(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1formEulerTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->formEulerTransform(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1formJacobianTranslation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jlong jarg4, jint jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = (int)jarg5; 
  ((OpenSim::Model const *)arg1)->formJacobianTranslation(arg2,(double const (*))arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1formJacobianTranslation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::Model const *)arg1)->formJacobianTranslation(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1formJacobianOrientation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  ((OpenSim::Model const *)arg1)->formJacobianOrientation(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1formJacobianOrientation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->formJacobianOrientation(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1formJacobianEuler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  ((OpenSim::Model const *)arg1)->formJacobianEuler(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1formJacobianEuler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->formJacobianEuler(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1ComputeEffectiveMassMatrix(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)OpenSim::Model::ComputeEffectiveMassMatrix(arg1,arg2,(double const *)arg3,(double const *)arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1ComputeJacobianInverse(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)OpenSim::Model::ComputeJacobianInverse(arg1,arg2,(double const *)arg3,(double const *)arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1computeAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->computeAccelerations(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1computeAuxiliaryDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->computeAuxiliaryDerivatives(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdouble jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  double arg3 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (double)jarg3; 
  (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1computePerformance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  void *arg6 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int)(arg1)->computePerformance(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1computePerformance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)(arg1)->computePerformance(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1computeConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->computeConstraint(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1computeConstraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->computeConstraint(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jint jarg4, jdoubleArray jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  int arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = (int)jarg4; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::Model const *)arg1)->transform(arg2,(double const (*))arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1transformPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->transformPosition(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertQuaternionsToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->convertQuaternionsToAngles(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertQuaternionsToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::Model const *)arg1)->convertQuaternionsToAngles(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertAnglesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->convertAnglesToQuaternions(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertAnglesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::Model const *)arg1)->convertAnglesToQuaternions(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertRadiansToDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->convertRadiansToDegrees(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertRadiansToDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::Model const *)arg1)->convertRadiansToDegrees(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertDegreesToRadians_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->convertDegreesToRadians(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertDegreesToRadians_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::Model const *)arg1)->convertDegreesToRadians(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertAnglesToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double (*arg5)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  ((OpenSim::Model const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,(double (*)[3])arg5);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertAnglesToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::Model const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,arg5);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertDirectionCosinesToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::Model const *)arg1)->convertDirectionCosinesToAngles((double (*)[3])arg2,arg3,arg4,arg5);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertDirectionCosinesToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::Model const *)arg1)->convertDirectionCosinesToAngles(arg2,arg3,arg4,arg5);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertDirectionCosinesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::Model const *)arg1)->convertDirectionCosinesToQuaternions((double (*)[3])arg2,arg3,arg4,arg5,arg6);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertDirectionCosinesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::Model const *)arg1)->convertDirectionCosinesToQuaternions(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertQuaternionsToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double (*arg6)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double (**)[3])&jarg6; 
  ((OpenSim::Model const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,(double (*)[3])arg6);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1convertQuaternionsToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::Model const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  (arg1)->computeActuation();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->applyActuatorForce(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyActuatorForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  (arg1)->applyActuatorForces();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setActuatorForce(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getActuatorForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getActuatorStress(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getActuatorStress(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getActuatorSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getActuatorSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getActuatorPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getActuatorPower(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  (arg1)->computeContact();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyContactForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->applyContactForce(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1applyContactForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  (arg1)->applyContactForces();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getContactBodyA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::Model const *)arg1)->getContactBodyA(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getContactBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::Model const *)arg1)->getContactBodyB(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setContactPointA(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getContactPointA(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setContactPointB(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getContactPointB(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getContactForce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getContactForce(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getContactNormalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::Model const *)arg1)->getContactNormalForce(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getContactTangentForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::Model const *)arg1)->getContactTangentForce(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getContactStiffness(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->getContactStiffness(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getContactViscosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->getContactViscosity(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getContactFrictionCorrection(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getContactFrictionCorrection(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getContactForce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getContactForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getContactSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getContactSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getContactPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getContactPower(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getAnalysisSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::AnalysisSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::AnalysisSet *)(arg1)->getAnalysisSet();
  *(OpenSim::AnalysisSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1addAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Analysis *arg2 = (OpenSim::Analysis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2; 
  (arg1)->addAnalysis(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getNumAnalyses(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNumAnalyses();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    OpenSim::Analysis &_result_ref = ((OpenSim::Model const *)arg1)->getAnalysis(arg2);
    result = (OpenSim::Analysis *) &_result_ref;
  }
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getIntegCallbackSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::IntegCallbackSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::IntegCallbackSet *)(arg1)->getIntegCallbackSet();
  *(OpenSim::IntegCallbackSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1addIntegCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::IntegCallback *arg2 = (OpenSim::IntegCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::IntegCallback **)&jarg2; 
  (arg1)->addIntegCallback(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getIntegCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  OpenSim::IntegCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    OpenSim::IntegCallback &_result_ref = ((OpenSim::Model const *)arg1)->getIntegCallback(arg2);
    result = (OpenSim::IntegCallback *) &_result_ref;
  }
  *(OpenSim::IntegCallback **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1getDerivCallbackSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::DerivCallbackSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::DerivCallbackSet *)(arg1)->getDerivCallbackSet();
  *(OpenSim::DerivCallbackSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1addDerivCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::DerivCallback *arg2 = (OpenSim::DerivCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::DerivCallback **)&jarg2; 
  (arg1)->addDerivCallback(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1setIncludePipelineActuators(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIncludePipelineActuators(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1computeConstrainedCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->computeConstrainedCoordinates(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1formCompleteStorages(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  OpenSim::Storage **arg3 = 0 ;
  OpenSim::Storage **arg4 = 0 ;
  OpenSim::Storage *temp3 = 0 ;
  OpenSim::Storage *temp4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return ;
  } 
  temp3 = *(OpenSim::Storage **)&jarg3;
  arg3 = &temp3; 
  temp4 = *(OpenSim::Storage **)&jarg4;
  arg4 = &temp4; 
  (arg1)->formCompleteStorages((OpenSim::Storage const &)*arg2,*arg3,*arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1printBasicInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  ((OpenSim::Model const *)arg1)->printBasicInfo(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Model_1printDetailedInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  ((OpenSim::Model const *)arg1)->printDetailedInfo(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Control(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setIsModelControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIsModelControl(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getIsModelControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (bool)((OpenSim::Control const *)arg1)->getIsModelControl();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setExtrapolate(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setExtrapolate(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getExtrapolate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (bool)((OpenSim::Control const *)arg1)->getExtrapolate();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setFilterOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setFilterOn(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getFilterOn(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (bool)((OpenSim::Control const *)arg1)->getFilterOn();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getNumParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (int)((OpenSim::Control const *)arg1)->getNumParameters();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setDefaultParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDefaultParameterMin(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getDefaultParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (double)((OpenSim::Control const *)arg1)->getDefaultParameterMin();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setDefaultParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDefaultParameterMax(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getDefaultParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (double)((OpenSim::Control const *)arg1)->getDefaultParameterMax();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterMin(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Control const *)arg1)->getParameterMin(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterMax(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Control const *)arg1)->getParameterMax(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getParameterTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Control const *)arg1)->getParameterTime(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getParameterNeighborhood(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = *(double **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  ((OpenSim::Control const *)arg1)->getParameterNeighborhood(arg2,*arg3,*arg4);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getParameterList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  OpenSim::Array<int > *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getParameterList(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getParameterList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::Array<int > *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(OpenSim::Array<int > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getParameterList(arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Control const *)arg1)->getParameterValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterValue(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getControlValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getControlValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (double)(arg1)->getControlValue();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValue(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getControlValueMin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValueMin(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getControlValueMin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (double)(arg1)->getControlValueMin();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setControlValueMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValueMin(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getControlValueMax_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValueMax(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getControlValueMax_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (double)(arg1)->getControlValueMax();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1setControlValueMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValueMax(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getFirstTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (double)((OpenSim::Control const *)arg1)->getFirstTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1getLastTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  result = (double)((OpenSim::Control const *)arg1)->getLastTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1simplify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  OpenSim::PropertySet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = *(OpenSim::PropertySet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PropertySet const & reference is null");
    return ;
  } 
  (arg1)->simplify((OpenSim::PropertySet const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Control_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Control *arg1 = (OpenSim::Control *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->filter(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetControls(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetControls_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Control > *)new OpenSim::Set<OpenSim::Control >();
  *(OpenSim::Set<OpenSim::Control > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetControls_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Control > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Control > *)new OpenSim::Set<OpenSim::Control >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Control > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetControls_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::Control > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::Control > *)new OpenSim::Set<OpenSim::Control >(arg1);
  *(OpenSim::Set<OpenSim::Control > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetControls_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Control > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Control > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Control > *)new OpenSim::Set<OpenSim::Control >((OpenSim::Set<OpenSim::Control > const &)*arg1);
  *(OpenSim::Set<OpenSim::Control > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Control > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Control > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = (OpenSim::Control *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->getIndex((OpenSim::Control const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = (OpenSim::Control *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->getIndex((OpenSim::Control const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = (OpenSim::Control *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Control > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Control > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Control > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  OpenSim::Control *arg3 = (OpenSim::Control *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Control **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = (OpenSim::Control *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Control const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  OpenSim::Control *arg3 = (OpenSim::Control *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Control **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  int arg2 ;
  OpenSim::Control *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Control *)((OpenSim::Set<OpenSim::Control > const *)arg1)->get(arg2);
  *(OpenSim::Control **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Control *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Control *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Control **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  result = (OpenSim::Control *)((OpenSim::Set<OpenSim::Control > const *)arg1)->getLast();
  *(OpenSim::Control **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Control const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->searchBinary((OpenSim::Control const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Control const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->searchBinary((OpenSim::Control const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Control const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->searchBinary((OpenSim::Control const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetControls_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Control > *arg1 = (OpenSim::Set<OpenSim::Control > *) 0 ;
  OpenSim::Control *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Control > **)&jarg1; 
  arg2 = *(OpenSim::Control **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Control const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Control > const *)arg1)->searchBinary((OpenSim::Control const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ControlSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ControlSet *)new OpenSim::ControlSet();
  *(OpenSim::ControlSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::ControlSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::ControlSet *)new OpenSim::ControlSet((std::string const &)*arg1);
  *(OpenSim::ControlSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ControlSet *arg1 = 0 ;
  OpenSim::ControlSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ControlSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::ControlSet *)new OpenSim::ControlSet((OpenSim::ControlSet const &)*arg1);
  *(OpenSim::ControlSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ControlSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getSize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jint jresult = 0 ;
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((OpenSim::ControlSet const *)arg1)->getSize(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getSize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  result = (int)((OpenSim::ControlSet const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getControlList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jboolean jarg4) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenSim::Array<int > *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(OpenSim::Array<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  ((OpenSim::ControlSet const *)arg1)->getControlList((char const *)arg2,*arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getControlList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenSim::Array<int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(OpenSim::Array<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getControlList((char const *)arg2,*arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getControlValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3, jboolean jarg4) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  double *arg3 ;
  bool arg4 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = jarg4 ? true : false; 
  ((OpenSim::ControlSet const *)arg1)->getControlValues(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getControlValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::ControlSet const *)arg1)->getControlValues(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getControlValues_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jboolean jarg4) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  OpenSim::Array<double > *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  ((OpenSim::ControlSet const *)arg1)->getControlValues(arg2,*arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getControlValues_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  OpenSim::Array<double > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getControlValues(arg2,*arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setControlValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3, jboolean jarg4) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  double *arg3 ;
  bool arg4 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setControlValues(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setControlValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setControlValues(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setControlValues_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jboolean jarg4) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  OpenSim::Array<double > *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->setControlValues(arg2,(OpenSim::Array<double > const &)*arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setControlValues_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  OpenSim::Array<double > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->setControlValues(arg2,(OpenSim::Array<double > const &)*arg3);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getNumParameters_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jint jresult = 0 ;
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((OpenSim::ControlSet const *)arg1)->getNumParameters(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getNumParameters_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  result = (int)((OpenSim::ControlSet const *)arg1)->getNumParameters();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<int > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  ((OpenSim::ControlSet const *)arg1)->getParameterList(*arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getParameterList(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jboolean jarg4) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  OpenSim::Array<int > *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  ((OpenSim::ControlSet const *)arg1)->getParameterList(arg2,*arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterList_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  OpenSim::Array<int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getParameterList(arg2,*arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterList_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4, jboolean jarg5) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::Array<int > *arg4 = 0 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(OpenSim::Array<int > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  ((OpenSim::ControlSet const *)arg1)->getParameterList(arg2,arg3,*arg4,arg5);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterList_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::Array<int > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(OpenSim::Array<int > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getParameterList(arg2,arg3,*arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterMins_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  OpenSim::Array<int > *arg3 = (OpenSim::Array<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Array<int > **)&jarg3; 
  ((OpenSim::ControlSet const *)arg1)->getParameterMins(*arg2,(OpenSim::Array<int > const *)arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterMins_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getParameterMins(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterMaxs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  OpenSim::Array<int > *arg3 = (OpenSim::Array<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Array<int > **)&jarg3; 
  ((OpenSim::ControlSet const *)arg1)->getParameterMaxs(*arg2,(OpenSim::Array<int > const *)arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterMaxs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getParameterMaxs(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double *arg2 ;
  OpenSim::Array<int > *arg3 = (OpenSim::Array<int > *) 0 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = *(OpenSim::Array<int > **)&jarg3; 
  ((OpenSim::ControlSet const *)arg1)->getParameterValues(arg2,(OpenSim::Array<int > const *)arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ControlSet const *)arg1)->getParameterValues(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterValues_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  OpenSim::Array<int > *arg3 = (OpenSim::Array<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Array<int > **)&jarg3; 
  ((OpenSim::ControlSet const *)arg1)->getParameterValues(*arg2,(OpenSim::Array<int > const *)arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1getParameterValues_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::ControlSet const *)arg1)->getParameterValues(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setParameterValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double *arg2 ;
  OpenSim::Array<int > *arg3 = (OpenSim::Array<int > *) 0 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = *(OpenSim::Array<int > **)&jarg3; 
  (arg1)->setParameterValues((double const (*))arg2,(OpenSim::Array<int > const *)arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setParameterValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setParameterValues((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setParameterValues_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  OpenSim::Array<int > *arg3 = (OpenSim::Array<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Array<int > **)&jarg3; 
  (arg1)->setParameterValues((OpenSim::Array<double > const &)*arg2,(OpenSim::Array<int > const *)arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1setParameterValues_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->setParameterValues((OpenSim::Array<double > const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1simplify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  OpenSim::PropertySet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = *(OpenSim::PropertySet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PropertySet const & reference is null");
    return ;
  } 
  (arg1)->simplify((OpenSim::PropertySet const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->filter(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1constructStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (OpenSim::Storage *)(arg1)->constructStorage(arg2,arg3,arg4,arg5);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1mapParameterToControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ControlSet const *)arg1)->mapParameterToControl(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1mapParameterToParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ControlSet const *)arg1)->mapParameterToParameter(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlSet_1generateParameterMaps(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ControlSet *arg1 = (OpenSim::ControlSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlSet **)&jarg1; 
  (arg1)->generateParameterMaps();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlConstant_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  char *arg2 = (char *) 0 ;
  OpenSim::ControlConstant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (OpenSim::ControlConstant *)new OpenSim::ControlConstant(arg1,(char const *)arg2);
  *(OpenSim::ControlConstant **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlConstant_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  OpenSim::ControlConstant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (OpenSim::ControlConstant *)new OpenSim::ControlConstant(arg1);
  *(OpenSim::ControlConstant **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlConstant_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ControlConstant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ControlConstant *)new OpenSim::ControlConstant();
  *(OpenSim::ControlConstant **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlConstant_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::ControlConstant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::ControlConstant *)new OpenSim::ControlConstant(arg1);
  *(OpenSim::ControlConstant **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlConstant_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ControlConstant *arg1 = 0 ;
  OpenSim::ControlConstant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ControlConstant const & reference is null");
    return 0;
  } 
  result = (OpenSim::ControlConstant *)new OpenSim::ControlConstant((OpenSim::ControlConstant const &)*arg1);
  *(OpenSim::ControlConstant **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ControlConstant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::ControlConstant const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::ControlConstant const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getNumParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  result = (int)((OpenSim::ControlConstant const *)arg1)->getNumParameters();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1setParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterMin(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlConstant const *)arg1)->getParameterMin(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1setParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterMax(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlConstant const *)arg1)->getParameterMax(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getParameterTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlConstant const *)arg1)->getParameterTime(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getParameterNeighborhood(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = *(double **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  ((OpenSim::ControlConstant const *)arg1)->getParameterNeighborhood(arg2,*arg3,*arg4);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getParameterList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  OpenSim::Array<int > *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getParameterList(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getParameterList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::Array<int > *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(OpenSim::Array<int > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getParameterList(arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1setParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterValue(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlConstant const *)arg1)->getParameterValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1setControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValue(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getControlValueMin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValueMin(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getControlValueMin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  result = (double)(arg1)->getControlValueMin();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1setControlValueMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValueMin(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getControlValueMax_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValueMax(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1getControlValueMax_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  result = (double)(arg1)->getControlValueMax();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1setControlValueMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  OpenSim::ControlConstant *arg1 = (OpenSim::ControlConstant *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlConstant **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValueMax(arg2,arg3);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Control *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Control const & reference is null");
    return 0;
  } 
  result = (bool)OpenSim::ControlConstant::isA((OpenSim::Control const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlConstant_1downcast_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Control *arg1 = 0 ;
  OpenSim::ControlConstant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Control const & reference is null");
    return 0;
  } 
  {
    OpenSim::ControlConstant const &_result_ref = OpenSim::ControlConstant::downcast((OpenSim::Control const &)*arg1);
    result = (OpenSim::ControlConstant *) &_result_ref;
  }
  *(OpenSim::ControlConstant **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1DEFAULT_1NODE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ControlLinearNode result;
  
  (void)jenv;
  (void)jcls;
  result = (ControlLinearNode)OpenSim::ControlLinear::DEFAULT_NODE;
  *(ControlLinearNode **)&jresult = new ControlLinearNode((ControlLinearNode &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlLinear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<ControlLinearNode > *arg1 = (OpenSim::ArrayPtrs<ControlLinearNode > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::ControlLinear *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<ControlLinearNode > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::ControlLinear *)new OpenSim::ControlLinear(arg1,(std::string const &)*arg2);
  *(OpenSim::ControlLinear **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlLinear_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<ControlLinearNode > *arg1 = (OpenSim::ArrayPtrs<ControlLinearNode > *) 0 ;
  OpenSim::ControlLinear *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<ControlLinearNode > **)&jarg1; 
  result = (OpenSim::ControlLinear *)new OpenSim::ControlLinear(arg1);
  *(OpenSim::ControlLinear **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlLinear_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ControlLinear *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ControlLinear *)new OpenSim::ControlLinear();
  *(OpenSim::ControlLinear **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlLinear_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::ControlLinear *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::ControlLinear *)new OpenSim::ControlLinear(arg1);
  *(OpenSim::ControlLinear **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ControlLinear_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ControlLinear *arg1 = 0 ;
  OpenSim::ControlLinear *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ControlLinear const & reference is null");
    return 0;
  } 
  result = (OpenSim::ControlLinear *)new OpenSim::ControlLinear((OpenSim::ControlLinear const &)*arg1);
  *(OpenSim::ControlLinear **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ControlLinear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::ControlLinear const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::ControlLinear const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setUseSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseSteps(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getUseSteps(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (bool)((OpenSim::ControlLinear const *)arg1)->getUseSteps();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setKp(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setKp(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getKp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getKp();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setKv(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setKv(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getKv(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getKv();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getNumParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (int)((OpenSim::ControlLinear const *)arg1)->getNumParameters();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterMin(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getParameterMin(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterMax(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getParameterMax(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getParameterTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getParameterTime(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getParameterNeighborhood(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = *(double **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  ((OpenSim::ControlLinear const *)arg1)->getParameterNeighborhood(arg2,*arg3,*arg4);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getParameterList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  OpenSim::Array<int > *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::Array<int > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getParameterList(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getParameterList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::Array<int > *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(OpenSim::Array<int > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getParameterList(arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setParameterValue(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getParameterValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValue(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getControlValueMin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValueMin(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getControlValueMin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (double)(arg1)->getControlValueMin();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setControlValueMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValueMin(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getControlValueMax_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->getControlValueMax(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getControlValueMax_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (double)(arg1)->getControlValueMax();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1setControlValueMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControlValueMax(arg2,arg3);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getNodeArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  OpenSim::ArrayPtrs<ControlLinearNode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  {
    OpenSim::ArrayPtrs<ControlLinearNode > &_result_ref = (arg1)->getNodeArray();
    result = (OpenSim::ArrayPtrs<ControlLinearNode > *) &_result_ref;
  }
  *(OpenSim::ArrayPtrs<ControlLinearNode > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getFirstTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getFirstTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1getLastTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  result = (double)((OpenSim::ControlLinear const *)arg1)->getLastTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1simplify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  OpenSim::PropertySet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = *(OpenSim::PropertySet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PropertySet const & reference is null");
    return ;
  } 
  (arg1)->simplify((OpenSim::PropertySet const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::ControlLinear *arg1 = (OpenSim::ControlLinear *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ControlLinear **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->filter(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1isA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Control *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Control const & reference is null");
    return 0;
  } 
  result = (bool)OpenSim::ControlLinear::isA((OpenSim::Control const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ControlLinear_1downcast_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Control *arg1 = 0 ;
  OpenSim::ControlLinear *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Control **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Control const & reference is null");
    return 0;
  } 
  {
    OpenSim::ControlLinear const &_result_ref = OpenSim::ControlLinear::downcast((OpenSim::Control const &)*arg1);
    result = (OpenSim::ControlLinear *) &_result_ref;
  }
  *(OpenSim::ControlLinear **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControllerNAME_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)ControllerNAME_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ControllerDESCRIP_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)ControllerDESCRIP_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1NAME_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)OpenSim::Controller::NAME_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1DESCRIP_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)OpenSim::Controller::DESCRIP_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Controller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1setNull(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  (arg1)->setNull();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  result = (OpenSim::Model *)(arg1)->getModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1setOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOn(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1getOn(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  result = (bool)(arg1)->getOn();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  result = (char *)(arg1)->getName();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setDescription((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  result = (char *)(arg1)->getDescription();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Controller_1computeControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::Controller *arg1 = (OpenSim::Controller *) 0 ;
  double *arg2 = 0 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  OpenSim::ControlSet *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Controller **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(OpenSim::ControlSet **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ControlSet & reference is null");
    return ;
  } 
  (arg1)->computeControls(*arg2,arg3,(double const *)arg4,*arg5);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Integrand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  result = (int)((OpenSim::Integrand const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setInitialStates(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Integrand const *)arg1)->getInitialStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1compute(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->compute(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1computeJacobian(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  (arg1)->computeJacobian(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5, jdoubleArray jarg6) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double *arg6 ;
  jdouble *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr6, &arg6, jarg6)) return ; 
  (arg1)->initialize(arg2,*arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutDouble(jenv, jarr6, arg6, jarg6); 
  delete [] arg6; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1processAfterStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jdouble jarg4, jdoubleArray jarg5) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double arg4 ;
  double *arg5 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  (arg1)->processAfterStep(arg2,*arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Integrand_1finalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdoubleArray jarg4) {
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  int arg2 ;
  double arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->finalize(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ModelIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::ModelIntegrand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::ModelIntegrand *)new OpenSim::ModelIntegrand(arg1);
  *(OpenSim::ModelIntegrand **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ModelIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (int)((OpenSim::ModelIntegrand const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::Model *)(arg1)->getModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1setControlSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::ControlSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = *(OpenSim::ControlSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ControlSet const & reference is null");
    return ;
  } 
  (arg1)->setControlSet((OpenSim::ControlSet const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getControlSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::ControlSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::ControlSet *)(arg1)->getControlSet();
  *(OpenSim::ControlSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1setControlStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->setControlStorage(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getControlStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getControlStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1setStateStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->setStateStorage(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getStateStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getStateStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1setPseudoStateStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->setPseudoStateStorage(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getPseudoStateStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getPseudoStateStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1setController(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Controller *arg2 = (OpenSim::Controller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = *(OpenSim::Controller **)&jarg2; 
  (arg1)->setController(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::Controller *)(arg1)->getController();
  *(OpenSim::Controller **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1constructControlSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::ControlSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::ControlSet *)((OpenSim::ModelIntegrand const *)arg1)->constructControlSet();
  *(OpenSim::ControlSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1convertStatesIntegrandToModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->convertStatesIntegrandToModel(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1convertStatesModelToIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::ModelIntegrand const *)arg1)->convertStatesModelToIntegrand((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  double arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setInitialStates(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ModelIntegrand const *)arg1)->getInitialStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1compute(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->compute(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5, jdoubleArray jarg6) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double *arg6 ;
  jdouble *jarr6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr6, &arg6, jarg6)) return ; 
  (arg1)->initialize(arg2,*arg3,arg4,arg5,arg6);
  SWIG_JavaArrayArgoutDouble(jenv, jarr6, arg6, jarg6); 
  delete [] arg6; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1processAfterStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jdouble jarg4, jdoubleArray jarg5) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double arg4 ;
  double *arg5 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg4 = (double)jarg4; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  (arg1)->processAfterStep(arg2,*arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ModelIntegrand_1finalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdoubleArray jarg4) {
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  int arg2 ;
  double arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->finalize(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1RKF_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::RKF::status result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::RKF::status)OpenSim::RKF::RKF_NORMAL;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1RKF_1FINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::RKF::status result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::RKF::status)OpenSim::RKF::RKF_FINE;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1RKF_1POOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::RKF::status result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::RKF::status)OpenSim::RKF::RKF_POOR;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1RKF_1NAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::RKF::status result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::RKF::status)OpenSim::RKF::RKF_NAN;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1RKF_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::RKF::status result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::RKF::status)OpenSim::RKF::RKF_ERROR;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1RKF_1TOO_1MANY_1STEPS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::RKF::status result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::RKF::status)OpenSim::RKF::RKF_TOO_MANY_STEPS;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1RKF_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::RKF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (OpenSim::RKF *)new OpenSim::RKF(arg1,arg2,arg3);
  *(OpenSim::RKF **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1RKF_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double arg2 ;
  OpenSim::RKF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (OpenSim::RKF *)new OpenSim::RKF(arg1,arg2);
  *(OpenSim::RKF **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1RKF_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  OpenSim::RKF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  result = (OpenSim::RKF *)new OpenSim::RKF(arg1);
  *(OpenSim::RKF **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1RKF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1getIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  OpenSim::Integrand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  result = (OpenSim::Integrand *)(arg1)->getIntegrand();
  *(OpenSim::Integrand **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1setTolerance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setTolerance(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1setTolerance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTolerance(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  result = (double)(arg1)->getTolerance();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1setFineTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setFineTolerance(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1getFineTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  result = (double)(arg1)->getFineTolerance();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1step(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)(arg1)->step(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_RKF_1stepFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::RKF *arg1 = (OpenSim::RKF *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::RKF **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)(arg1)->stepFixed(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegRKF_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::IntegRKF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (OpenSim::IntegRKF *)new OpenSim::IntegRKF(arg1,arg2,arg3);
  *(OpenSim::IntegRKF **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegRKF_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  double arg2 ;
  OpenSim::IntegRKF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (OpenSim::IntegRKF *)new OpenSim::IntegRKF(arg1,arg2);
  *(OpenSim::IntegRKF **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegRKF_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Integrand *arg1 = (OpenSim::Integrand *) 0 ;
  OpenSim::IntegRKF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Integrand **)&jarg1; 
  result = (OpenSim::IntegRKF *)new OpenSim::IntegRKF(arg1);
  *(OpenSim::IntegRKF **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1IntegRKF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setMinDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMinDT(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getMinDT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (double)(arg1)->getMinDT();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setMaxDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxDT(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getMaxDT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (double)(arg1)->getMaxDT();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setMaximumNumberOfSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMaximumNumberOfSteps(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getMaximumNumberOfSteps(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (int)(arg1)->getMaximumNumberOfSteps();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (int)(arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setUseSpecifiedDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseSpecifiedDT(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getUseSpecifiedDT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (bool)((OpenSim::IntegRKF const *)arg1)->getUseSpecifiedDT();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setUseConstantDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseConstantDT(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getUseConstantDT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (bool)((OpenSim::IntegRKF const *)arg1)->getUseConstantDT();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDT(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getDT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (double)((OpenSim::IntegRKF const *)arg1)->getDT();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getDTArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  {
    OpenSim::Array<double > const &_result_ref = (arg1)->getDTArray();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setDTArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdouble jarg4) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  int arg2 ;
  double *arg3 ;
  double arg4 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = (double)jarg4; 
  (arg1)->setDTArray(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1setDTArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setDTArray(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getDTArrayDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getDTArrayDT(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1printDTArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->printDTArray((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1printDTArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  (arg1)->printDTArray();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getTimeArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  {
    OpenSim::Array<double > const &_result_ref = (arg1)->getTimeArray();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getTimeArrayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getTimeArrayTime(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1getTimeArrayStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->getTimeArrayStep(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1printTimeArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->printTimeArray((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1printTimeArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  (arg1)->printTimeArray();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1resetTimeAndDTArrays(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->resetTimeAndDTArrays(arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::IntegRKF const *)arg1)->toString();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1integrate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5) {
  jboolean jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = (double)jarg5; 
  result = (bool)(arg1)->integrate(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1integrate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (bool)(arg1)->integrate(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1halt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  (arg1)->halt();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1clearHalt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  (arg1)->clearHalt();
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegRKF_1checkHalt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::IntegRKF *arg1 = (OpenSim::IntegRKF *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegRKF **)&jarg1; 
  result = (bool)(arg1)->checkHalt();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Manager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Manager_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ModelIntegrand *arg1 = (OpenSim::ModelIntegrand *) 0 ;
  OpenSim::Manager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ModelIntegrand **)&jarg1; 
  result = (OpenSim::Manager *)new OpenSim::Manager(arg1);
  *(OpenSim::Manager **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Manager_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Manager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Manager *)new OpenSim::Manager();
  *(OpenSim::Manager **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1setSessionName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSessionName((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1getSessionName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Manager const *)arg1)->getSessionName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Manager const *)arg1)->toString();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1setIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  OpenSim::ModelIntegrand *arg2 = (OpenSim::ModelIntegrand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = *(OpenSim::ModelIntegrand **)&jarg2; 
  (arg1)->setIntegrand(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1getIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  OpenSim::ModelIntegrand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  result = (OpenSim::ModelIntegrand *)((OpenSim::Manager const *)arg1)->getIntegrand();
  *(OpenSim::ModelIntegrand **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1getIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  OpenSim::IntegRKF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  result = (OpenSim::IntegRKF *)((OpenSim::Manager const *)arg1)->getIntegrator();
  *(OpenSim::IntegRKF **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1setInitialTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setInitialTime(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1getInitialTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  result = (double)((OpenSim::Manager const *)arg1)->getInitialTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1setFinalTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setFinalTime(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1getFinalTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  result = (double)((OpenSim::Manager const *)arg1)->getFinalTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1setFirstDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setFirstDT(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1getFirstDT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  result = (double)((OpenSim::Manager const *)arg1)->getFirstDT();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1initializeStates_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  result = (bool)(arg1)->initializeStates();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1initializeStates_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)(arg1)->initializeStates(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1initializeStates_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (bool)(arg1)->initializeStates(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1integrate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  result = (bool)(arg1)->integrate();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1integrate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->integrate(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Manager_1integrate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Manager *arg1 = (OpenSim::Manager *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Manager **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->integrate(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Callback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::Callback *)new OpenSim::Callback(arg1);
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Callback_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Callback *)new OpenSim::Callback();
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Callback_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Callback *arg1 = 0 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Callback **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Callback const & reference is null");
    return 0;
  } 
  result = (OpenSim::Callback *)new OpenSim::Callback((OpenSim::Callback const &)*arg1);
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Callback_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Callback *)new OpenSim::Callback((std::string const &)*arg1);
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Callback_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Callback *)new OpenSim::Callback(arg1);
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Callback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Callback const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Callback const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  result = (OpenSim::Model *)((OpenSim::Callback const *)arg1)->getModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1setOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOn(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1getOn(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  result = (bool)((OpenSim::Callback const *)arg1)->getOn();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1setStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setStartTime(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1getStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  result = (double)((OpenSim::Callback const *)arg1)->getStartTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1setEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setEndTime(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Callback_1getEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Callback *arg1 = (OpenSim::Callback *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Callback **)&jarg1; 
  result = (double)((OpenSim::Callback const *)arg1)->getEndTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Callback > *)new OpenSim::Set<OpenSim::Callback >();
  *(OpenSim::Set<OpenSim::Callback > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Callback > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Callback > *)new OpenSim::Set<OpenSim::Callback >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Callback > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetCallback_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::Callback > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::Callback > *)new OpenSim::Set<OpenSim::Callback >(arg1);
  *(OpenSim::Set<OpenSim::Callback > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetCallback_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Callback > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Callback > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Callback > *)new OpenSim::Set<OpenSim::Callback >((OpenSim::Set<OpenSim::Callback > const &)*arg1);
  *(OpenSim::Set<OpenSim::Callback > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Callback > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = (OpenSim::Callback *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getIndex((OpenSim::Callback const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = (OpenSim::Callback *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getIndex((OpenSim::Callback const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = (OpenSim::Callback *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Callback > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Callback > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Callback > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  OpenSim::Callback *arg3 = (OpenSim::Callback *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Callback **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = (OpenSim::Callback *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Callback const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  OpenSim::Callback *arg3 = (OpenSim::Callback *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Callback **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  int arg2 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Callback *)((OpenSim::Set<OpenSim::Callback > const *)arg1)->get(arg2);
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Callback *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  result = (OpenSim::Callback *)((OpenSim::Set<OpenSim::Callback > const *)arg1)->getLast();
  *(OpenSim::Callback **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Callback const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->searchBinary((OpenSim::Callback const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Callback const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->searchBinary((OpenSim::Callback const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Callback const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->searchBinary((OpenSim::Callback const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetCallback_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Callback > *arg1 = (OpenSim::Set<OpenSim::Callback > *) 0 ;
  OpenSim::Callback *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Callback > **)&jarg1; 
  arg2 = *(OpenSim::Callback **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Callback const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Callback > const *)arg1)->searchBinary((OpenSim::Callback const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1CallbackSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::CallbackSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::CallbackSet *)new OpenSim::CallbackSet(arg1);
  *(OpenSim::CallbackSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1CallbackSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::CallbackSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::CallbackSet *)new OpenSim::CallbackSet();
  *(OpenSim::CallbackSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1CallbackSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::CallbackSet *arg1 = (OpenSim::CallbackSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::CallbackSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_CallbackSet_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::CallbackSet *arg1 = (OpenSim::CallbackSet *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::CallbackSet **)&jarg1; 
  result = (OpenSim::Model *)(arg1)->getModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_CallbackSet_1setOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::CallbackSet *arg1 = (OpenSim::CallbackSet *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::CallbackSet **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOn(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::IntegCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::IntegCallback *)new OpenSim::IntegCallback(arg1);
  *(OpenSim::IntegCallback **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::IntegCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::IntegCallback *)new OpenSim::IntegCallback();
  *(OpenSim::IntegCallback **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegCallback_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::IntegCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::IntegCallback *)new OpenSim::IntegCallback((std::string const &)*arg1);
  *(OpenSim::IntegCallback **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegCallback_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::IntegCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::IntegCallback *)new OpenSim::IntegCallback(arg1);
  *(OpenSim::IntegCallback **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IntegCallback_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::IntegCallback *arg1 = 0 ;
  OpenSim::IntegCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegCallback **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::IntegCallback const & reference is null");
    return 0;
  } 
  result = (OpenSim::IntegCallback *)new OpenSim::IntegCallback((OpenSim::IntegCallback const &)*arg1);
  *(OpenSim::IntegCallback **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1IntegCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::IntegCallback const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::IntegCallback const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1setStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStepInterval(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1getStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  result = (int)((OpenSim::IntegCallback const *)arg1)->getStepInterval();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1begin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1step_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jint jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *arg9 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(void **)&jarg9; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1step_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IntegCallback_1end_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::IntegCallback *arg1 = (OpenSim::IntegCallback *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IntegCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrayStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayStorage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (OpenSim::ArrayPtrs<OpenSim::Storage > *)new OpenSim::ArrayPtrs<OpenSim::Storage >(arg1);
  *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayStorage_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ArrayPtrs<OpenSim::Storage > *)new OpenSim::ArrayPtrs<OpenSim::Storage >();
  *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayStorage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Storage > const & reference is null");
    return 0;
  } 
  result = (OpenSim::ArrayPtrs<OpenSim::Storage > *)new OpenSim::ArrayPtrs<OpenSim::Storage >((OpenSim::ArrayPtrs<OpenSim::Storage > const &)*arg1);
  *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  result = (bool)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getIndex((OpenSim::Storage const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getIndex((OpenSim::Storage const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Storage > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  OpenSim::Storage *arg3 = (OpenSim::Storage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Storage **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Storage const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  OpenSim::Storage *arg3 = (OpenSim::Storage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Storage **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  int arg2 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Storage *)(arg1)->get(arg2);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Storage *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->getLast();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->searchBinary((OpenSim::Storage const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->searchBinary((OpenSim::Storage const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->searchBinary((OpenSim::Storage const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStorage_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Storage > *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Storage > const *)arg1)->searchBinary((OpenSim::Storage const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Analysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::Analysis *)new OpenSim::Analysis(arg1);
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Analysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Analysis *)new OpenSim::Analysis();
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Analysis_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Analysis *)new OpenSim::Analysis((std::string const &)*arg1);
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Analysis_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Analysis *)new OpenSim::Analysis(arg1);
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Analysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Analysis_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Analysis *arg1 = 0 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Analysis const & reference is null");
    return 0;
  } 
  result = (OpenSim::Analysis *)new OpenSim::Analysis((OpenSim::Analysis const &)*arg1);
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Analysis const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Analysis const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1setInDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInDegrees(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1getInDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  result = (bool)((OpenSim::Analysis const *)arg1)->getInDegrees();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1setColumnLabels(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setColumnLabels((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1getColumnLabels(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  result = (char *)((OpenSim::Analysis const *)arg1)->getColumnLabels();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1getStorageList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  {
    OpenSim::ArrayPtrs<OpenSim::Storage > &_result_ref = (arg1)->getStorageList();
    result = (OpenSim::ArrayPtrs<OpenSim::Storage > *) &_result_ref;
  }
  *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1proceed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->proceed(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1proceed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  result = (bool)(arg1)->proceed();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  jint jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4) {
  jint jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Analysis_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Analysis *arg1 = (OpenSim::Analysis *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Analysis **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->printResults((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetAnalysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Analysis > *)new OpenSim::Set<OpenSim::Analysis >();
  *(OpenSim::Set<OpenSim::Analysis > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetAnalysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Analysis > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Analysis > *)new OpenSim::Set<OpenSim::Analysis >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Analysis > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetAnalysis_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::Analysis > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::Analysis > *)new OpenSim::Set<OpenSim::Analysis >(arg1);
  *(OpenSim::Set<OpenSim::Analysis > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetAnalysis_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Analysis > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Analysis > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Analysis > *)new OpenSim::Set<OpenSim::Analysis >((OpenSim::Set<OpenSim::Analysis > const &)*arg1);
  *(OpenSim::Set<OpenSim::Analysis > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = (OpenSim::Analysis *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getIndex((OpenSim::Analysis const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = (OpenSim::Analysis *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getIndex((OpenSim::Analysis const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = (OpenSim::Analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Analysis > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Analysis > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Analysis > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  OpenSim::Analysis *arg3 = (OpenSim::Analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Analysis **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = (OpenSim::Analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Analysis const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  OpenSim::Analysis *arg3 = (OpenSim::Analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Analysis **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  int arg2 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Analysis *)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->get(arg2);
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Analysis *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  result = (OpenSim::Analysis *)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->getLast();
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Analysis const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->searchBinary((OpenSim::Analysis const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Analysis const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->searchBinary((OpenSim::Analysis const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Analysis const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->searchBinary((OpenSim::Analysis const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetAnalysis_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Analysis > *arg1 = (OpenSim::Set<OpenSim::Analysis > *) 0 ;
  OpenSim::Analysis *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Analysis const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Analysis > const *)arg1)->searchBinary((OpenSim::Analysis const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalysisSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::AnalysisSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::AnalysisSet *)new OpenSim::AnalysisSet(arg1);
  *(OpenSim::AnalysisSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalysisSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::AnalysisSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::AnalysisSet *)new OpenSim::AnalysisSet();
  *(OpenSim::AnalysisSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalysisSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::AnalysisSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::AnalysisSet *)new OpenSim::AnalysisSet((std::string const &)*arg1);
  *(OpenSim::AnalysisSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalysisSet_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::AnalysisSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::AnalysisSet *)new OpenSim::AnalysisSet(arg1);
  *(OpenSim::AnalysisSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1AnalysisSet_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::AnalysisSet *arg1 = 0 ;
  OpenSim::AnalysisSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AnalysisSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::AnalysisSet *)new OpenSim::AnalysisSet((OpenSim::AnalysisSet const &)*arg1);
  *(OpenSim::AnalysisSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AnalysisSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::AnalysisSet const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::AnalysisSet const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  result = (OpenSim::Model *)(arg1)->getModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1setOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setOn(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  (arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1begin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  (arg1)->begin(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1step_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *arg9 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(void **)&jarg9; 
  (arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1step_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  (arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  (arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1end_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  (arg1)->end(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  (arg1)->printResults((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (double)jarg4; 
  (arg1)->printResults((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->printResults((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisSet_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::AnalysisSet *arg1 = (OpenSim::AnalysisSet *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisSet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->printResults((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AnalysisFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AnalysisFactory *arg1 = (OpenSim::AnalysisFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisFactory **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisFactory_1getInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::AnalysisFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::AnalysisFactory *)OpenSim::AnalysisFactory::getInstance();
  *(OpenSim::AnalysisFactory **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisFactory_1createAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::AnalysisFactory *arg1 = (OpenSim::AnalysisFactory *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisFactory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Analysis *)((OpenSim::AnalysisFactory const *)arg1)->createAnalysis((std::string const &)*arg2);
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisFactory_1registerAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AnalysisFactory *arg1 = (OpenSim::AnalysisFactory *) 0 ;
  OpenSim::Analysis *arg2 = (OpenSim::Analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisFactory **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2; 
  result = (bool)(arg1)->registerAnalysis(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisFactory_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::AnalysisFactory *arg1 = (OpenSim::AnalysisFactory *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisFactory **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::AnalysisFactory const *)arg1)->toString();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AnalysisFactory_1getRegisteredAnalyses(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::AnalysisFactory *arg1 = (OpenSim::AnalysisFactory *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Analysis > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AnalysisFactory **)&jarg1; 
  {
    OpenSim::ArrayPtrs<OpenSim::Analysis > const &_result_ref = (arg1)->getRegisteredAnalyses();
    result = (OpenSim::ArrayPtrs<OpenSim::Analysis > *) &_result_ref;
  }
  *(OpenSim::ArrayPtrs<OpenSim::Analysis > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Investigation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  OpenSim::Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  result = (OpenSim::Model *)((OpenSim::Investigation const *)arg1)->getModel();
  *(OpenSim::Model **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1setOutputPrecision(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setOutputPrecision(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1getOutputPrecision(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  result = (int)((OpenSim::Investigation const *)arg1)->getOutputPrecision();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1getAnalysisSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  OpenSim::AnalysisSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  {
    OpenSim::AnalysisSet &_result_ref = ((OpenSim::Investigation const *)arg1)->getAnalysisSet();
    result = (OpenSim::AnalysisSet *) &_result_ref;
  }
  *(OpenSim::AnalysisSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1getResultsDir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Investigation const *)arg1)->getResultsDir();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1setResultsDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setResultsDir((std::string const &)*arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1getStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  result = (double)((OpenSim::Investigation const *)arg1)->getStartTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1getFinalTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  result = (double)((OpenSim::Investigation const *)arg1)->getFinalTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1getModelFilename(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getModelFilename();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1setModelFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setModelFilename((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1constructCommandLineForLoadModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  (arg1)->constructCommandLineForLoadModel(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1loadModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  (arg1)->loadModel();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1addAnalysisSetToModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  (arg1)->addAnalysisSetToModel();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1run(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  (arg1)->run();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  (arg1)->printResults((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4) {
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (double)jarg4; 
  (arg1)->printResults((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->printResults((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Investigation_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Investigation *arg1 = (OpenSim::Investigation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Investigation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->printResults((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1InvestigationForward(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::InvestigationForward *arg1 = (OpenSim::InvestigationForward *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationForward **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1InvestigationForward_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::InvestigationForward *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::InvestigationForward *)new OpenSim::InvestigationForward();
  *(OpenSim::InvestigationForward **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1InvestigationForward_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::InvestigationForward *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::InvestigationForward *)new OpenSim::InvestigationForward((std::string const &)*arg1);
  *(OpenSim::InvestigationForward **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1InvestigationForward_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::InvestigationForward *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::InvestigationForward *)new OpenSim::InvestigationForward(arg1);
  *(OpenSim::InvestigationForward **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1InvestigationForward_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::InvestigationForward *arg1 = 0 ;
  OpenSim::InvestigationForward *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationForward **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::InvestigationForward const & reference is null");
    return 0;
  } 
  result = (OpenSim::InvestigationForward *)new OpenSim::InvestigationForward((OpenSim::InvestigationForward const &)*arg1);
  *(OpenSim::InvestigationForward **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationForward_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::InvestigationForward *arg1 = (OpenSim::InvestigationForward *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationForward **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::InvestigationForward const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationForward_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::InvestigationForward *arg1 = (OpenSim::InvestigationForward *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationForward **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::InvestigationForward const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationForward_1run(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::InvestigationForward *arg1 = (OpenSim::InvestigationForward *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationForward **)&jarg1; 
  (arg1)->run();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationForward_1initializeExternalLoads(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::InvestigationForward *arg1 = (OpenSim::InvestigationForward *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationForward **)&jarg1; 
  (arg1)->initializeExternalLoads();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1InvestigationPerturbation_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::InvestigationPerturbation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::InvestigationPerturbation *)new OpenSim::InvestigationPerturbation();
  *(OpenSim::InvestigationPerturbation **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1InvestigationPerturbation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::InvestigationPerturbation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::InvestigationPerturbation *)new OpenSim::InvestigationPerturbation((std::string const &)*arg1);
  *(OpenSim::InvestigationPerturbation **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1InvestigationPerturbation_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::InvestigationPerturbation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::InvestigationPerturbation *)new OpenSim::InvestigationPerturbation(arg1);
  *(OpenSim::InvestigationPerturbation **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1InvestigationPerturbation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::InvestigationPerturbation *arg1 = (OpenSim::InvestigationPerturbation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationPerturbation **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1InvestigationPerturbation_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::InvestigationPerturbation *arg1 = 0 ;
  OpenSim::InvestigationPerturbation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationPerturbation **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::InvestigationPerturbation const & reference is null");
    return 0;
  } 
  result = (OpenSim::InvestigationPerturbation *)new OpenSim::InvestigationPerturbation((OpenSim::InvestigationPerturbation const &)*arg1);
  *(OpenSim::InvestigationPerturbation **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationPerturbation_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::InvestigationPerturbation *arg1 = (OpenSim::InvestigationPerturbation *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationPerturbation **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::InvestigationPerturbation const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationPerturbation_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::InvestigationPerturbation *arg1 = (OpenSim::InvestigationPerturbation *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationPerturbation **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::InvestigationPerturbation const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationPerturbation_1run(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::InvestigationPerturbation *arg1 = (OpenSim::InvestigationPerturbation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationPerturbation **)&jarg1; 
  (arg1)->run();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationPerturbation_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  OpenSim::InvestigationPerturbation *arg1 = (OpenSim::InvestigationPerturbation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationPerturbation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  (arg1)->printResults((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationPerturbation_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4) {
  OpenSim::InvestigationPerturbation *arg1 = (OpenSim::InvestigationPerturbation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationPerturbation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (double)jarg4; 
  (arg1)->printResults((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationPerturbation_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  OpenSim::InvestigationPerturbation *arg1 = (OpenSim::InvestigationPerturbation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationPerturbation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->printResults((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationPerturbation_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::InvestigationPerturbation *arg1 = (OpenSim::InvestigationPerturbation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationPerturbation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->printResults((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimtkAnimationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::SimtkAnimationCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::SimtkAnimationCallback *)new OpenSim::SimtkAnimationCallback(arg1);
  *(OpenSim::SimtkAnimationCallback **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimtkAnimationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1getCurrentTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  result = (double)((OpenSim::SimtkAnimationCallback const *)arg1)->getCurrentTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1step_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jint jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *arg9 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(void **)&jarg9; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1step_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1begin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1getBodyTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  int arg2 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Transform *)((OpenSim::SimtkAnimationCallback const *)arg1)->getBodyTransform(arg2);
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1getBodyRotations(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimtkAnimationCallback const *)arg1)->getBodyRotations(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1getMutex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  (arg1)->getMutex();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1releaseMutex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  (arg1)->releaseMutex();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimtkAnimationCallback_1extractOffsets(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimtkAnimationCallback *arg1 = (OpenSim::SimtkAnimationCallback *) 0 ;
  SimmModel *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimtkAnimationCallback **)&jarg1; 
  arg2 = *(SimmModel **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimmModel & reference is null");
    return ;
  } 
  (arg1)->extractOffsets(*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Kinematics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Kinematics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::Kinematics *)new OpenSim::Kinematics(arg1);
  *(OpenSim::Kinematics **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Kinematics_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Kinematics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Kinematics *)new OpenSim::Kinematics();
  *(OpenSim::Kinematics **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Kinematics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Kinematics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Kinematics *)new OpenSim::Kinematics((std::string const &)*arg1);
  *(OpenSim::Kinematics **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Kinematics_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Kinematics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Kinematics *)new OpenSim::Kinematics(arg1);
  *(OpenSim::Kinematics **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Kinematics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Kinematics *arg1 = 0 ;
  OpenSim::Kinematics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Kinematics const & reference is null");
    return 0;
  } 
  result = (OpenSim::Kinematics *)new OpenSim::Kinematics((OpenSim::Kinematics const &)*arg1);
  *(OpenSim::Kinematics **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Kinematics const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Kinematics const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Kinematics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1setStorageCapacityIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStorageCapacityIncrements(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1getAccelerationStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getAccelerationStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1getVelocityStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getVelocityStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1getPositionStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getPositionStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1begin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1step_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *arg9 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(void **)&jarg9; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1step_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1end_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->printResults((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Kinematics_1getStorageList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Kinematics *arg1 = (OpenSim::Kinematics *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Storage > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Kinematics **)&jarg1; 
  {
    OpenSim::ArrayPtrs<OpenSim::Storage > &_result_ref = (arg1)->getStorageList();
    result = (OpenSim::ArrayPtrs<OpenSim::Storage > *) &_result_ref;
  }
  *(OpenSim::ArrayPtrs<OpenSim::Storage > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Actuation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Actuation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::Actuation *)new OpenSim::Actuation(arg1);
  *(OpenSim::Actuation **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Actuation_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Actuation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Actuation *)new OpenSim::Actuation();
  *(OpenSim::Actuation **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Actuation_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Actuation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Actuation *)new OpenSim::Actuation((std::string const &)*arg1);
  *(OpenSim::Actuation **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Actuation_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Actuation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Actuation *)new OpenSim::Actuation(arg1);
  *(OpenSim::Actuation **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Actuation_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Actuation *arg1 = 0 ;
  OpenSim::Actuation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Actuation const & reference is null");
    return 0;
  } 
  result = (OpenSim::Actuation *)new OpenSim::Actuation((OpenSim::Actuation const &)*arg1);
  *(OpenSim::Actuation **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Actuation const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Actuation const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Actuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1setStorageCapacityIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStorageCapacityIncrements(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1getForceStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::Actuation const *)arg1)->getForceStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1getSpeedStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::Actuation const *)arg1)->getSpeedStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1getPowerStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  result = (OpenSim::Storage *)((OpenSim::Actuation const *)arg1)->getPowerStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1begin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1step_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *arg9 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(void **)&jarg9; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1step_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1end_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Actuation_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Actuation *arg1 = (OpenSim::Actuation *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuation **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->printResults((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IndAcc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::IndAcc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::IndAcc *)new OpenSim::IndAcc(arg1);
  *(OpenSim::IndAcc **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IndAcc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jstring jarg5, jstring jarg6) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg3 = (OpenSim::Storage *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  OpenSim::IndAcc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  arg3 = *(OpenSim::Storage **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (OpenSim::IndAcc *)new OpenSim::IndAcc(arg1,arg2,arg3,arg4,arg5,arg6);
  *(OpenSim::IndAcc **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, arg6);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IndAcc_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg3 = (OpenSim::Storage *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  OpenSim::IndAcc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  arg3 = *(OpenSim::Storage **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (OpenSim::IndAcc *)new OpenSim::IndAcc(arg1,arg2,arg3,arg4,arg5);
  *(OpenSim::IndAcc **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IndAcc_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg3 = (OpenSim::Storage *) 0 ;
  char *arg4 = (char *) 0 ;
  OpenSim::IndAcc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  arg3 = *(OpenSim::Storage **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (OpenSim::IndAcc *)new OpenSim::IndAcc(arg1,arg2,arg3,arg4);
  *(OpenSim::IndAcc **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1IndAcc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getNumComponents(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getNumComponents();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getNumIndependentComponents(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getNumIndependentComponents();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getNumElements(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getNumElements();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getLastActuatorIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getLastActuatorIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getGravityIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getGravityIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getVelocityIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getVelocityIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getInertialIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getInertialIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getAllActuatorsIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getAllActuatorsIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getAllIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->getAllIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1setContactThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setContactThreshold(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getContactThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (double)(arg1)->getContactThreshold();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getComponentName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getComponentName(arg2);
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1setStorageCapacityIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStorageCapacityIncrements(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getForceStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  OpenSim::Storage **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (OpenSim::Storage **)(arg1)->getForceStorage();
  *(OpenSim::Storage ***)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getUseNullDecomposition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (bool)(arg1)->getUseNullDecomposition();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1setComputeNormalizedAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setComputeNormalizedAccelerations(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1getComputeNormalizedAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (bool)(arg1)->getComputeNormalizedAccelerations();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1computeAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  result = (int)(arg1)->computeAccelerations();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1sumForceResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  (arg1)->sumForceResults();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1sumAccelerationResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  (arg1)->sumAccelerationResults();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1sumDecomposition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  (arg1)->sumDecomposition();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1store(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  (arg1)->store();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_IndAcc_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::IndAcc *arg1 = (OpenSim::IndAcc *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IndAcc **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->printResults((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1GeneralizedForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::GeneralizedForces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::GeneralizedForces *)new OpenSim::GeneralizedForces(arg1);
  *(OpenSim::GeneralizedForces **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1GeneralizedForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::GeneralizedForces *)new OpenSim::GeneralizedForces();
  *(OpenSim::GeneralizedForces **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1GeneralizedForces_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::GeneralizedForces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::GeneralizedForces *)new OpenSim::GeneralizedForces((std::string const &)*arg1);
  *(OpenSim::GeneralizedForces **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1GeneralizedForces_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::GeneralizedForces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::GeneralizedForces *)new OpenSim::GeneralizedForces(arg1);
  *(OpenSim::GeneralizedForces **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1GeneralizedForces_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = 0 ;
  OpenSim::GeneralizedForces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::GeneralizedForces const & reference is null");
    return 0;
  } 
  result = (OpenSim::GeneralizedForces *)new OpenSim::GeneralizedForces((OpenSim::GeneralizedForces const &)*arg1);
  *(OpenSim::GeneralizedForces **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::GeneralizedForces const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::GeneralizedForces const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1GeneralizedForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1setStorageCapacityIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStorageCapacityIncrements(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1getGravGenForcesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getGravGenForcesStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1getVelGenForcesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getVelGenForcesStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1getActuatorGenForcesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getActuatorGenForcesStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1getContactGenForcesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->getContactGenForcesStorage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1begin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1step_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  void *arg9 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(void **)&jarg9; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1step_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1end_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1printResults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1printResults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (double)jarg4; 
  result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1printResults_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_GeneralizedForces_1printResults_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::GeneralizedForces *arg1 = (OpenSim::GeneralizedForces *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::GeneralizedForces **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->printResults((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrayBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  bool *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Array<bool > *result = 0 ;
  bool temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Array<bool > *)new OpenSim::Array<bool >((bool const &)*arg1,arg2,arg3);
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2) {
  jlong jresult = 0 ;
  bool *arg1 = 0 ;
  int arg2 ;
  OpenSim::Array<bool > *result = 0 ;
  bool temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Array<bool > *)new OpenSim::Array<bool >((bool const &)*arg1,arg2);
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayBool_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool *arg1 = 0 ;
  OpenSim::Array<bool > *result = 0 ;
  bool temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  result = (OpenSim::Array<bool > *)new OpenSim::Array<bool >((bool const &)*arg1);
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayBool_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<bool > *arg1 = 0 ;
  OpenSim::Array<bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<bool > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Array<bool > *)new OpenSim::Array<bool >((OpenSim::Array<bool > const &)*arg1);
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)(arg1)->append((bool const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  OpenSim::Array<bool > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = *(OpenSim::Array<bool > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<bool > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<bool > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool *arg3 = (bool *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(bool **)&jarg3; 
  result = (int)(arg1)->append(arg2,(bool const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  int result;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  result = (int)(arg1)->insert(arg2,(bool const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  (arg1)->set(arg2,(bool const &)*arg3);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  result = (bool *)(arg1)->get();
  *(bool **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    bool &_result_ref = ((OpenSim::Array<bool > const *)arg1)->get(arg2);
    result = (bool *) &_result_ref;
  }
  *(bool **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)OpenSim_Array_Sl_bool_Sg__getitem(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  OpenSim_Array_Sl_bool_Sg__setitem(arg1,arg2,arg3);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  {
    bool &_result_ref = ((OpenSim::Array<bool > const *)arg1)->getLast();
    result = (bool *) &_result_ref;
  }
  *(bool **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->searchBinary((bool const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->searchBinary((bool const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  bool arg3 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->searchBinary((bool const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayBool_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->searchBinary((bool const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrayDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  double *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Array<double > *result = 0 ;
  double temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Array<double > *)new OpenSim::Array<double >((double const &)*arg1,arg2,arg3);
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jlong jresult = 0 ;
  double *arg1 = 0 ;
  int arg2 ;
  OpenSim::Array<double > *result = 0 ;
  double temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Array<double > *)new OpenSim::Array<double >((double const &)*arg1,arg2);
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayDouble_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double *arg1 = 0 ;
  OpenSim::Array<double > *result = 0 ;
  double temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  result = (OpenSim::Array<double > *)new OpenSim::Array<double >((double const &)*arg1);
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayDouble_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<double > *arg1 = 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Array<double > *)new OpenSim::Array<double >((OpenSim::Array<double > const &)*arg1);
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  result = (int)((OpenSim::Array<double > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  result = (int)((OpenSim::Array<double > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  result = (int)((OpenSim::Array<double > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)(arg1)->append((double const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<double > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->append(arg2,(double const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  int result;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  result = (int)(arg1)->insert(arg2,(double const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  (arg1)->set(arg2,(double const &)*arg3);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  result = (double *)(arg1)->get();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    double &_result_ref = ((OpenSim::Array<double > const *)arg1)->get(arg2);
    result = (double *) &_result_ref;
  }
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)OpenSim_Array_Sl_double_Sg__getitem(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  OpenSim_Array_Sl_double_Sg__setitem(arg1,arg2,arg3);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  {
    double &_result_ref = ((OpenSim::Array<double > const *)arg1)->getLast();
    result = (double *) &_result_ref;
  }
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Array<double > const *)arg1)->searchBinary((double const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Array<double > const *)arg1)->searchBinary((double const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  bool arg3 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Array<double > const *)arg1)->searchBinary((double const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayDouble_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<double > const *)arg1)->searchBinary((double const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrayInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Array<int > *result = 0 ;
  int temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Array<int > *)new OpenSim::Array<int >((int const &)*arg1,arg2,arg3);
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int *arg1 = 0 ;
  int arg2 ;
  OpenSim::Array<int > *result = 0 ;
  int temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Array<int > *)new OpenSim::Array<int >((int const &)*arg1,arg2);
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayInt_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int *arg1 = 0 ;
  OpenSim::Array<int > *result = 0 ;
  int temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  result = (OpenSim::Array<int > *)new OpenSim::Array<int >((int const &)*arg1);
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayInt_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<int > *arg1 = 0 ;
  OpenSim::Array<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Array<int > *)new OpenSim::Array<int >((OpenSim::Array<int > const &)*arg1);
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  result = (int)((OpenSim::Array<int > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  result = (int)((OpenSim::Array<int > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  result = (int)((OpenSim::Array<int > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)(arg1)->append((int const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  OpenSim::Array<int > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = *(OpenSim::Array<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<int > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (int)(arg1)->append(arg2,(int const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int result;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  result = (int)(arg1)->insert(arg2,(int const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  (arg1)->set(arg2,(int const &)*arg3);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  result = (int *)(arg1)->get();
  *(int **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    int &_result_ref = ((OpenSim::Array<int > const *)arg1)->get(arg2);
    result = (int *) &_result_ref;
  }
  *(int **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)OpenSim_Array_Sl_int_Sg__getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  OpenSim_Array_Sl_int_Sg__setitem(arg1,arg2,arg3);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  {
    int &_result_ref = ((OpenSim::Array<int > const *)arg1)->getLast();
    result = (int *) &_result_ref;
  }
  *(int **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Array<int > const *)arg1)->searchBinary((int const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Array<int > const *)arg1)->searchBinary((int const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  bool arg3 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Array<int > const *)arg1)->searchBinary((int const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayInt_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<int > const *)arg1)->searchBinary((int const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrayStr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayStr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Array<std::string > *)new OpenSim::Array<std::string >((std::string const &)*arg1,arg2,arg3);
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayStr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  result = (OpenSim::Array<std::string > *)new OpenSim::Array<std::string >((std::string const &)*arg1,arg2);
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayStr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Array<std::string > *)new OpenSim::Array<std::string >((std::string const &)*arg1);
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayStr_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Array<std::string > *)new OpenSim::Array<std::string >((OpenSim::Array<std::string > const &)*arg1);
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->append((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<std::string > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = (std::string *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::string **)&jarg3; 
  result = (int)(arg1)->append(arg2,(std::string const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->insert(arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->set(arg2,(std::string const &)*arg3);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  result = (std::string *)(arg1)->get();
  *(std::string **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    std::string &_result_ref = ((OpenSim::Array<std::string > const *)arg1)->get(arg2);
    result = (std::string *) &_result_ref;
  }
  *(std::string **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = OpenSim_Array_Sl_std_string_Sg__getitem(arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  arg3 =  std::string(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  OpenSim_Array_Sl_std_string_Sg__setitem(arg1,arg2,arg3);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  {
    std::string &_result_ref = ((OpenSim::Array<std::string > const *)arg1)->getLast();
    result = (std::string *) &_result_ref;
  }
  *(std::string **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->searchBinary((std::string const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->searchBinary((std::string const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->searchBinary((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayStr_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->searchBinary((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ArrayPtrsObj(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayPtrsObj_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (OpenSim::ArrayPtrs<OpenSim::Object > *)new OpenSim::ArrayPtrs<OpenSim::Object >(arg1);
  *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayPtrsObj_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ArrayPtrs<OpenSim::Object > *)new OpenSim::ArrayPtrs<OpenSim::Object >();
  *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ArrayPtrsObj_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Object > const & reference is null");
    return 0;
  } 
  result = (OpenSim::ArrayPtrs<OpenSim::Object > *)new OpenSim::ArrayPtrs<OpenSim::Object >((OpenSim::ArrayPtrs<OpenSim::Object > const &)*arg1);
  *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  result = (bool)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getIndex((OpenSim::Object const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getIndex((OpenSim::Object const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Object > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  OpenSim::Object *arg3 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Object **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Object const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  OpenSim::Object *arg3 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Object **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Object *)(arg1)->get(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Object *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getLast();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->searchBinary((OpenSim::Object const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->searchBinary((OpenSim::Object const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->searchBinary((OpenSim::Object const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_ArrayPtrsObj_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->searchBinary((OpenSim::Object const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Marker_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Marker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Marker *)new OpenSim::Marker();
  *(OpenSim::Marker **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Marker_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Marker *arg1 = 0 ;
  OpenSim::Marker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Marker **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Marker const & reference is null");
    return 0;
  } 
  result = (OpenSim::Marker *)new OpenSim::Marker((OpenSim::Marker const &)*arg1);
  *(OpenSim::Marker **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Marker_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Marker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Marker *)new OpenSim::Marker(arg1);
  *(OpenSim::Marker **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Marker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Marker *arg1 = (OpenSim::Marker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Marker **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Marker_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Marker *arg1 = (OpenSim::Marker *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Marker **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Marker const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Marker_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Marker *arg1 = (OpenSim::Marker *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Marker **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Marker const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Marker_1getWeight(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Marker *arg1 = (OpenSim::Marker *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Marker **)&jarg1; 
  result = (double)((OpenSim::Marker const *)arg1)->getWeight();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Marker_1setWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Marker *arg1 = (OpenSim::Marker *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Marker **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setWeight(arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Marker_1getReferenceSegmentName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Marker *arg1 = (OpenSim::Marker *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Marker **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Marker const *)arg1)->getReferenceSegmentName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Marker_1getRefSegment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Marker *arg1 = (OpenSim::Marker *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Marker **)&jarg1; 
  result = (int)((OpenSim::Marker const *)arg1)->getRefSegment();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Marker_1setRefSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Marker *arg1 = (OpenSim::Marker *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Marker **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setRefSegment(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Marker_1getLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Marker *arg1 = (OpenSim::Marker *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Marker **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::Marker const *)arg1)->getLocation(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Marker_1setLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Marker *arg1 = (OpenSim::Marker *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Marker **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->setLocation(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Marker_1scaleBy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Marker *arg1 = (OpenSim::Marker *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Marker **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->scaleBy(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Marker_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::Marker *arg1 = (OpenSim::Marker *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  Event *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Marker **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  arg3 = *(Event **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Event & reference is null");
    return ;
  } 
  (arg1)->update((OpenSim::Object const &)*arg2,*arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMarkers_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Marker > *)new OpenSim::Set<OpenSim::Marker >();
  *(OpenSim::Set<OpenSim::Marker > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMarkers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Marker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Marker > *)new OpenSim::Set<OpenSim::Marker >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Marker > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMarkers_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::Marker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::Marker > *)new OpenSim::Set<OpenSim::Marker >(arg1);
  *(OpenSim::Set<OpenSim::Marker > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetMarkers_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Marker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Marker > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Marker > *)new OpenSim::Set<OpenSim::Marker >((OpenSim::Set<OpenSim::Marker > const &)*arg1);
  *(OpenSim::Set<OpenSim::Marker > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Marker > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Marker > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Marker > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Marker > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Marker > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  OpenSim::Marker *arg2 = (OpenSim::Marker *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = *(OpenSim::Marker **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Marker > const *)arg1)->getIndex((OpenSim::Marker const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  OpenSim::Marker *arg2 = (OpenSim::Marker *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = *(OpenSim::Marker **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Marker > const *)arg1)->getIndex((OpenSim::Marker const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Marker > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Marker > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  OpenSim::Marker *arg2 = (OpenSim::Marker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = *(OpenSim::Marker **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Marker > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Marker > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Marker > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  int arg2 ;
  OpenSim::Marker *arg3 = (OpenSim::Marker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Marker **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  OpenSim::Marker *arg2 = (OpenSim::Marker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = *(OpenSim::Marker **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Marker const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  int arg2 ;
  OpenSim::Marker *arg3 = (OpenSim::Marker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Marker **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  int arg2 ;
  OpenSim::Marker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Marker *)((OpenSim::Set<OpenSim::Marker > const *)arg1)->get(arg2);
  *(OpenSim::Marker **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Marker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Marker *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Marker **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  OpenSim::Marker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  result = (OpenSim::Marker *)((OpenSim::Set<OpenSim::Marker > const *)arg1)->getLast();
  *(OpenSim::Marker **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  OpenSim::Marker *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = *(OpenSim::Marker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Marker const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Marker > const *)arg1)->searchBinary((OpenSim::Marker const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  OpenSim::Marker *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = *(OpenSim::Marker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Marker const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Marker > const *)arg1)->searchBinary((OpenSim::Marker const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  OpenSim::Marker *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = *(OpenSim::Marker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Marker const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Marker > const *)arg1)->searchBinary((OpenSim::Marker const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetMarkers_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Marker > *arg1 = (OpenSim::Set<OpenSim::Marker > *) 0 ;
  OpenSim::Marker *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Marker > **)&jarg1; 
  arg2 = *(OpenSim::Marker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Marker const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Marker > const *)arg1)->searchBinary((OpenSim::Marker const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MarkerSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MarkerSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MarkerSet *)new OpenSim::MarkerSet();
  *(OpenSim::MarkerSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MarkerSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::MarkerSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::MarkerSet *)new OpenSim::MarkerSet((std::string const &)*arg1);
  *(OpenSim::MarkerSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1MarkerSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::MarkerSet *arg1 = 0 ;
  OpenSim::MarkerSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MarkerSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MarkerSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::MarkerSet *)new OpenSim::MarkerSet((OpenSim::MarkerSet const &)*arg1);
  *(OpenSim::MarkerSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1MarkerSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MarkerSet *arg1 = (OpenSim::MarkerSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MarkerSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerSet_1usesWeights(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::MarkerSet *arg1 = (OpenSim::MarkerSet *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MarkerSet **)&jarg1; 
  result = (bool)((OpenSim::MarkerSet const *)arg1)->usesWeights();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerSet_1bindMarkersToModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::MarkerSet *arg1 = (OpenSim::MarkerSet *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MarkerSet **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  result = (bool)(arg1)->bindMarkersToModel(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerSet_1getMarkerNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::MarkerSet *arg1 = (OpenSim::MarkerSet *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MarkerSet **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  (arg1)->getMarkerNames(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerSet_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::MarkerSet *arg1 = (OpenSim::MarkerSet *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MarkerSet **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet & reference is null");
    return ;
  } 
  (arg1)->scale(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerSet_1makeRelativeToCom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::MarkerSet *arg1 = (OpenSim::MarkerSet *) 0 ;
  OpenSim::Model *arg2 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MarkerSet **)&jarg1; 
  arg2 = *(OpenSim::Model **)&jarg2; 
  (arg1)->makeRelativeToCom(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_MarkerSet_1getMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::MarkerSet *arg1 = (OpenSim::MarkerSet *) 0 ;
  OpenSim::Set<OpenSim::Marker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MarkerSet **)&jarg1; 
  {
    OpenSim::Set<OpenSim::Marker > const &_result_ref = ((OpenSim::MarkerSet const *)arg1)->getMarkers();
    result = (OpenSim::Set<OpenSim::Marker > *) &_result_ref;
  }
  *(OpenSim::Set<OpenSim::Marker > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Range_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Range *)new OpenSim::Range();
  *(OpenSim::Range **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Range_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Range *arg1 = 0 ;
  OpenSim::Range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Range **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Range const & reference is null");
    return 0;
  } 
  result = (OpenSim::Range *)new OpenSim::Range((OpenSim::Range const &)*arg1);
  *(OpenSim::Range **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Range_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Range *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Range *)new OpenSim::Range(arg1);
  *(OpenSim::Range **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Range(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Range *arg1 = (OpenSim::Range *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Range **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Range_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Range *arg1 = (OpenSim::Range *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Range **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Range const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Range_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Range *arg1 = (OpenSim::Range *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Range **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Range const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Range_1getMin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Range *arg1 = (OpenSim::Range *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Range **)&jarg1; 
  result = (double)((OpenSim::Range const *)arg1)->getMin();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Range_1setMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Range *arg1 = (OpenSim::Range *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Range **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMin(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Range_1getMax(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Range *arg1 = (OpenSim::Range *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Range **)&jarg1; 
  result = (double)((OpenSim::Range const *)arg1)->getMax();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Range_1setMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Range *arg1 = (OpenSim::Range *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Range **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMax(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Scale_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Scale *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Scale *)new OpenSim::Scale();
  *(OpenSim::Scale **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Scale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Scale *arg1 = 0 ;
  OpenSim::Scale *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Scale **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Scale const & reference is null");
    return 0;
  } 
  result = (OpenSim::Scale *)new OpenSim::Scale((OpenSim::Scale const &)*arg1);
  *(OpenSim::Scale **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Scale_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Scale *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Scale *)new OpenSim::Scale(arg1);
  *(OpenSim::Scale **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Scale_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Scale *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Scale *)new OpenSim::Scale((std::string const &)*arg1);
  *(OpenSim::Scale **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Scale(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Scale_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Scale const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Scale_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Scale const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Scale_1getScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::Scale const *)arg1)->getScaleFactors(*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_Scale_1getSegmentName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Scale const *)arg1)->getSegmentName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Scale_1setSegmentName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSegmentName((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Scale_1setScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->setScaleFactors(*arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_Scale_1getApply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  result = (bool)((OpenSim::Scale const *)arg1)->getApply();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Scale_1setApply(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Scale *arg1 = (OpenSim::Scale *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Scale **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setApply(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetScales(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetScales_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Scale > *)new OpenSim::Set<OpenSim::Scale >();
  *(OpenSim::Set<OpenSim::Scale > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetScales_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Scale > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Scale > *)new OpenSim::Set<OpenSim::Scale >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Scale > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetScales_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::Scale > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::Scale > *)new OpenSim::Set<OpenSim::Scale >(arg1);
  *(OpenSim::Set<OpenSim::Scale > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetScales_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Scale > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Scale > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Scale > *)new OpenSim::Set<OpenSim::Scale >((OpenSim::Set<OpenSim::Scale > const &)*arg1);
  *(OpenSim::Set<OpenSim::Scale > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Scale > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = (OpenSim::Scale *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getIndex((OpenSim::Scale const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = (OpenSim::Scale *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getIndex((OpenSim::Scale const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = (OpenSim::Scale *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Scale > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Scale > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Scale > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  OpenSim::Scale *arg3 = (OpenSim::Scale *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Scale **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = (OpenSim::Scale *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Scale const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  OpenSim::Scale *arg3 = (OpenSim::Scale *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Scale **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  int arg2 ;
  OpenSim::Scale *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Scale *)((OpenSim::Set<OpenSim::Scale > const *)arg1)->get(arg2);
  *(OpenSim::Scale **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Scale *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Scale *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Scale **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  result = (OpenSim::Scale *)((OpenSim::Set<OpenSim::Scale > const *)arg1)->getLast();
  *(OpenSim::Scale **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Scale const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->searchBinary((OpenSim::Scale const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Scale const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->searchBinary((OpenSim::Scale const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Scale const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->searchBinary((OpenSim::Scale const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetScales_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Scale > *arg1 = (OpenSim::Set<OpenSim::Scale > *) 0 ;
  OpenSim::Scale *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Scale > **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Scale const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Scale > const *)arg1)->searchBinary((OpenSim::Scale const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ScaleSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ScaleSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ScaleSet *)new OpenSim::ScaleSet();
  *(OpenSim::ScaleSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ScaleSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::ScaleSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::ScaleSet *)new OpenSim::ScaleSet((std::string const &)*arg1);
  *(OpenSim::ScaleSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ScaleSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ScaleSet *arg1 = (OpenSim::ScaleSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ScaleSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1AbstractDynamicsEngine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getNumBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getNumBodies();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getNumJoints(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getNumJoints();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getNumCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getNumCoordinates();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getNumSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getNumSpeeds();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getNumControls(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getNumControls();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getNumContacts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getNumContacts();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getNumStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getNumStates();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getNumPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getNumPseudoStates();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setBodyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->setBodyName(arg2,(std::string const &)*arg3);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getBodyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::AbstractDynamicsEngine const *)arg1)->getBodyName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getCoordinateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::AbstractDynamicsEngine const *)arg1)->getCoordinateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getSpeedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::AbstractDynamicsEngine const *)arg1)->getSpeedName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::AbstractDynamicsEngine const *)arg1)->getControlName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::AbstractDynamicsEngine const *)arg1)->getStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::AbstractDynamicsEngine const *)arg1)->getPseudoStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getBodyIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getBodyIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getCoordinateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getCoordinateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getSpeedIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getSpeedIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getControlIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Coordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Coordinate *)((OpenSim::AbstractDynamicsEngine const *)arg1)->getCoordinate((std::string const &)*arg2);
  *(OpenSim::Coordinate **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->set(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setInitialStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getInitialStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getInitialState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getInitialState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getInitialState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getInitialState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyDefaultPose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  (arg1)->applyDefaultPose();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setInitialPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getInitialPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getInitialPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getInitialPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getInitialPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getInitialPseudoState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getPseudoState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setConfiguration((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setConfiguration((double const (*))arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getCoordinateValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getCoordinateValues(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getCoordinateValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getCoordinateValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getCoordinateValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getCoordinateValue((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getSpeeds(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getSpeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getSpeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getSpeed((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getAccelerations(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getAcceleration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getAcceleration(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getAcceleration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getAcceleration((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1extractConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->extractConfiguration((double const (*))arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg2; 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1assemble(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jint jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  int *arg4 = (int *) 0 ;
  double arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(int **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  result = (int)(arg1)->assemble(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1scale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1scale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jdouble jarg4) {
  jboolean jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getGravity(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setGravity(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getGroundBodyIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getGroundBodyIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setBodyToJointBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getBodyToJointBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setInboardToJointBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getInboardToJointBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getMass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getMass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getMass(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getInertiaBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double (*arg3)[3] ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getInertiaBodyLocal(arg2,(double (*)[3])arg3);
  jresult = (jint)result; 
  
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getInertiaBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getInertiaBodyLocal(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getSystemInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 ;
  double (*arg4)[3] ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getSystemInertia(arg2,arg3,(double (*)[3])arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getSystemInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getSystemInertia(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getPosition(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getVelocity(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getAcceleration_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getAcceleration(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getDirectionCosines(arg2,(double (*)[3])arg3);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getDirectionCosines(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getAngularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getAngularVelocity(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getAngularVelocityBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getAngularVelocityBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getAngularAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getAngularAcceleration(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getAngularAccelerationBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getAngularAccelerationBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForce(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForces(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForces(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyForceBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForceBodyLocal(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyForcesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyForcesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorque(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyTorques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorques(arg2,(int const (*))arg3,(double const (*)[3])arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyTorques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorques(arg2,(int const (*))arg3,(double const *)arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyTorqueBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorqueBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyTorquesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyTorquesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->applyGeneralizedForce(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyGeneralizedForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->applyGeneralizedForces((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyGeneralizedForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 ;
  jint *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyGeneralizedForces(arg2,(int const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getNetAppliedGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getNetAppliedGeneralizedForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1computeGeneralizedForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->computeGeneralizedForces(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1computeReactions(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double (*arg2)[3] ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->computeReactions((double (*)[3])arg2,(double (*)[3])arg3);
  
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formMassMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->formMassMatrix(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formEulerTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->formEulerTransform(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formJacobianTranslation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jlong jarg4, jint jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = (int)jarg5; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->formJacobianTranslation(arg2,(double const (*))arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formJacobianTranslation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->formJacobianTranslation(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formJacobianOrientation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->formJacobianOrientation(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formJacobianOrientation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->formJacobianOrientation(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formJacobianEuler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->formJacobianEuler(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1formJacobianEuler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->formJacobianEuler(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1computeAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->computeAccelerations(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1computeAuxiliaryDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->computeAuxiliaryDerivatives(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jint jarg4, jdoubleArray jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  int arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = (int)jarg4; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->transform(arg2,(double const (*))arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1transformPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->transformPosition(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertQuaternionsToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertQuaternionsToAngles(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertQuaternionsToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertQuaternionsToAngles(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertAnglesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertAnglesToQuaternions(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertAnglesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertAnglesToQuaternions(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertRadiansToDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertRadiansToDegrees(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertRadiansToDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertRadiansToDegrees(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertDegreesToRadians_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertDegreesToRadians(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertDegreesToRadians_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertDegreesToRadians(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertAnglesToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double (*arg5)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,(double (*)[3])arg5);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertAnglesToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,arg5);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertDirectionCosinesToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertDirectionCosinesToAngles((double (*)[3])arg2,arg3,arg4,arg5);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertDirectionCosinesToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertDirectionCosinesToAngles(arg2,arg3,arg4,arg5);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertDirectionCosinesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertDirectionCosinesToQuaternions((double (*)[3])arg2,arg3,arg4,arg5,arg6);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertDirectionCosinesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertDirectionCosinesToQuaternions(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertQuaternionsToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double (*arg6)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double (**)[3])&jarg6; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,(double (*)[3])arg6);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1convertQuaternionsToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  (arg1)->computeContact();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyContactForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->applyContactForce(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1applyContactForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  (arg1)->applyContactForces();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getContactBodyA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getContactBodyA(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getContactBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::AbstractDynamicsEngine const *)arg1)->getContactBodyB(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setContactPointA(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getContactPointA(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1setContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setContactPointB(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getContactPointB(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getContactForce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getContactForce(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getContactNormalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getContactNormalForce(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getContactTangentForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getContactTangentForce(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getContactStiffness(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getContactStiffness(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getContactViscosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getContactViscosity(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getContactFrictionCorrection(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::AbstractDynamicsEngine const *)arg1)->getContactFrictionCorrection(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getContactForce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getContactForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getContactSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getContactSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_AbstractDynamicsEngine_1getContactPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::AbstractDynamicsEngine *arg1 = (OpenSim::AbstractDynamicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::AbstractDynamicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::AbstractDynamicsEngine const *)arg1)->getContactPower(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmBody_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmBody *)new OpenSim::SimmBody();
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmBody_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmBody *)new OpenSim::SimmBody(arg1);
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmBody_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmBody *arg1 = 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmBody const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmBody *)new OpenSim::SimmBody((OpenSim::SimmBody const &)*arg1);
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmBody const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmBody const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::SimmBody *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(OpenSim::SimmBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmBody const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmBody const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::SimmKinematicsEngine *arg2 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(OpenSim::SimmKinematicsEngine **)&jarg2; 
  (arg1)->setup(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  result = (double)((OpenSim::SimmBody const *)arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1getMassCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->getMassCenter(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1getInertia(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  {
    OpenSim::Array<double > const &_result_ref = (arg1)->getInertia();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1getDisplayer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  result = (OpenSim::VisibleObject *)(arg1)->getDisplayer();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1getNumMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  result = (int)(arg1)->getNumMarkers();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1getMarker(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  int arg2 ;
  SimmMarker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (SimmMarker *)((OpenSim::SimmBody const *)arg1)->getMarker(arg2);
  *(SimmMarker **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1deleteAllMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  result = (int)(arg1)->deleteAllMarkers();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1deleteMarker(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  SimmMarker *arg2 = (SimmMarker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(SimmMarker **)&jarg2; 
  (arg1)->deleteMarker((SimmMarker const *)arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1deleteUnusedMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->deleteUnusedMarkers((OpenSim::Array<std::string > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1scale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->scale(*arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1scale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->scale(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1scaleInertialProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->scaleInertialProperties(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1addMarker(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  SimmMarker *arg2 = (SimmMarker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(SimmMarker **)&jarg2; 
  (arg1)->addMarker(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1writeSIMM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  std::ofstream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(std::ofstream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ofstream & reference is null");
    return ;
  } 
  ((OpenSim::SimmBody const *)arg1)->writeSIMM(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1writeMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  std::ofstream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(std::ofstream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ofstream & reference is null");
    return ;
  } 
  ((OpenSim::SimmBody const *)arg1)->writeMarkers(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  ((OpenSim::SimmBody const *)arg1)->peteTest();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBody_1getScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmBody *arg1 = (OpenSim::SimmBody *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBody **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::SimmBody const *)arg1)->getScaleFactors(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetSimmBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmBodies_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::SimmBody > *)new OpenSim::Set<OpenSim::SimmBody >();
  *(OpenSim::Set<OpenSim::SimmBody > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmBodies_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::SimmBody > *)new OpenSim::Set<OpenSim::SimmBody >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::SimmBody > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmBodies_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::SimmBody > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::SimmBody > *)new OpenSim::Set<OpenSim::SimmBody >(arg1);
  *(OpenSim::Set<OpenSim::SimmBody > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmBodies_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::SimmBody > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::SimmBody > *)new OpenSim::Set<OpenSim::SimmBody >((OpenSim::Set<OpenSim::SimmBody > const &)*arg1);
  *(OpenSim::Set<OpenSim::SimmBody > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::SimmBody > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::SimmBody > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmBody > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmBody > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmBody > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  OpenSim::SimmBody *arg2 = (OpenSim::SimmBody *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = *(OpenSim::SimmBody **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::SimmBody > const *)arg1)->getIndex((OpenSim::SimmBody const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  OpenSim::SimmBody *arg2 = (OpenSim::SimmBody *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = *(OpenSim::SimmBody **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::SimmBody > const *)arg1)->getIndex((OpenSim::SimmBody const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::SimmBody > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::SimmBody > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  OpenSim::SimmBody *arg2 = (OpenSim::SimmBody *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = *(OpenSim::SimmBody **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::SimmBody > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::SimmBody > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::SimmBody > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  int arg2 ;
  OpenSim::SimmBody *arg3 = (OpenSim::SimmBody *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::SimmBody **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  OpenSim::SimmBody *arg2 = (OpenSim::SimmBody *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = *(OpenSim::SimmBody **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::SimmBody const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  int arg2 ;
  OpenSim::SimmBody *arg3 = (OpenSim::SimmBody *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::SimmBody **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  int arg2 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::SimmBody *)((OpenSim::Set<OpenSim::SimmBody > const *)arg1)->get(arg2);
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::SimmBody *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  result = (OpenSim::SimmBody *)((OpenSim::Set<OpenSim::SimmBody > const *)arg1)->getLast();
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  OpenSim::SimmBody *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = *(OpenSim::SimmBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmBody const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::SimmBody > const *)arg1)->searchBinary((OpenSim::SimmBody const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  OpenSim::SimmBody *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = *(OpenSim::SimmBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmBody const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::SimmBody > const *)arg1)->searchBinary((OpenSim::SimmBody const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  OpenSim::SimmBody *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = *(OpenSim::SimmBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmBody const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::SimmBody > const *)arg1)->searchBinary((OpenSim::SimmBody const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmBodies_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmBody > *arg1 = (OpenSim::Set<OpenSim::SimmBody > *) 0 ;
  OpenSim::SimmBody *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1; 
  arg2 = *(OpenSim::SimmBody **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmBody const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::SimmBody > const *)arg1)->searchBinary((OpenSim::SimmBody const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmBodySet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmBodySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmBodySet *)new OpenSim::SimmBodySet();
  *(OpenSim::SimmBodySet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmBodySet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmBodySet *arg1 = 0 ;
  OpenSim::SimmBodySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBodySet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmBodySet const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmBodySet *)new OpenSim::SimmBodySet((OpenSim::SimmBodySet const &)*arg1);
  *(OpenSim::SimmBodySet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmBodySet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmBodySet *arg1 = (OpenSim::SimmBodySet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBodySet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmBone_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmBone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmBone *)new OpenSim::SimmBone();
  *(OpenSim::SimmBone **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmBone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmBone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmBone *)new OpenSim::SimmBone(arg1);
  *(OpenSim::SimmBone **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmBone_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmBone *arg1 = 0 ;
  OpenSim::SimmBone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBone **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmBone const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmBone *)new OpenSim::SimmBone((OpenSim::SimmBone const &)*arg1);
  *(OpenSim::SimmBone **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmBone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmBone *arg1 = (OpenSim::SimmBone *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBone **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBone_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmBone *arg1 = (OpenSim::SimmBone *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBone **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmBone const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBone_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmBone *arg1 = (OpenSim::SimmBone *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBone **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmBone const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBone_1getGeometryFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmBone *arg1 = (OpenSim::SimmBone *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBone **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    std::string &_result_ref = ((OpenSim::SimmBone const *)arg1)->getGeometryFileName(arg2);
    result = (std::string *) &_result_ref;
  }
  *(std::string **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBone_1getNumGeometryFiles(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmBone *arg1 = (OpenSim::SimmBone *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBone **)&jarg1; 
  result = (int)((OpenSim::SimmBone const *)arg1)->getNumGeometryFiles();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBone_1addGeometryFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmBone *arg1 = (OpenSim::SimmBone *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBone **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (arg1)->addGeometryFile(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBone_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmBone *arg1 = (OpenSim::SimmBone *) 0 ;
  OpenSim::SimmBone *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBone **)&jarg1; 
  arg2 = *(OpenSim::SimmBone **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmBone const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmBone const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBone_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmBone *arg1 = (OpenSim::SimmBone *) 0 ;
  OpenSim::SimmKinematicsEngine *arg2 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBone **)&jarg1; 
  arg2 = *(OpenSim::SimmKinematicsEngine **)&jarg2; 
  (arg1)->setup(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBone_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmBone *arg1 = (OpenSim::SimmBone *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBone **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->scale(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBone_1writeSIMM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmBone *arg1 = (OpenSim::SimmBone *) 0 ;
  std::ofstream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBone **)&jarg1; 
  arg2 = *(std::ofstream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ofstream & reference is null");
    return ;
  } 
  ((OpenSim::SimmBone const *)arg1)->writeSIMM(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmBone_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmBone *arg1 = (OpenSim::SimmBone *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmBone **)&jarg1; 
  ((OpenSim::SimmBone const *)arg1)->peteTest();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Function(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Function const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Function const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1setMinX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMinX(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1getMinX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (double)((OpenSim::Function const *)arg1)->getMinX();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1setMaxX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxX(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1getMaxX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (double)((OpenSim::Function const *)arg1)->getMaxX();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1setMinY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMinY(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1getMinY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (double)((OpenSim::Function const *)arg1)->getMinY();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1setMaxY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxY(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1getMaxY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (double)((OpenSim::Function const *)arg1)->getMaxY();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1setMinZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMinZ(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1getMinZ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (double)((OpenSim::Function const *)arg1)->getMinZ();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1setMaxZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxZ(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1getMaxZ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (double)((OpenSim::Function const *)arg1)->getMaxZ();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1updateBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  (arg1)->updateBoundingBox();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1getNumberOfPoints(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  result = (int)((OpenSim::Function const *)arg1)->getNumberOfPoints();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1evaluate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1evaluate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->evaluate(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1evaluate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  int arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->evaluate(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1evaluate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->evaluate(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1scaleY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->scaleY(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Function_1writeSIMM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  OpenSim::Function *arg1 = (OpenSim::Function *) 0 ;
  std::ofstream *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Function **)&jarg1; 
  arg2 = *(std::ofstream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ofstream & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  ((OpenSim::Function const *)arg1)->writeSIMM(*arg2,arg3);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Constant_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Constant *)new OpenSim::Constant();
  *(OpenSim::Constant **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Constant_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  std::string *arg4 = 0 ;
  OpenSim::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (OpenSim::Constant *)new OpenSim::Constant(arg1,(double const *)arg2,(double const *)arg3,(std::string const &)*arg4);
  *(OpenSim::Constant **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Constant_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  OpenSim::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (OpenSim::Constant *)new OpenSim::Constant(arg1,(double const *)arg2,(double const *)arg3);
  *(OpenSim::Constant **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Constant_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Constant *)new OpenSim::Constant(arg1);
  *(OpenSim::Constant **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Constant_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Constant *arg1 = 0 ;
  OpenSim::Constant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Constant const & reference is null");
    return 0;
  } 
  result = (OpenSim::Constant *)new OpenSim::Constant((OpenSim::Constant const &)*arg1);
  *(OpenSim::Constant **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Constant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Constant const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Constant const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1getNumberOfPoints(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  result = (int)((OpenSim::Constant const *)arg1)->getNumberOfPoints();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setValue(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  ((OpenSim::Constant const *)arg1)->peteTest();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1updateBoundingBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  (arg1)->updateBoundingBox();
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1evaluate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)(arg1)->evaluate(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1evaluate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->evaluate(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1evaluate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  int arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)(arg1)->evaluate(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1evaluate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->evaluate(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1evaluate_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  result = (double)(arg1)->evaluate();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1scaleY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->scaleY(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1updateFromXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  (arg1)->updateFromXMLNode();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_Constant_1writeSIMM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  OpenSim::Constant *arg1 = (OpenSim::Constant *) 0 ;
  std::ofstream *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Constant **)&jarg1; 
  arg2 = *(std::ofstream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ofstream & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  ((OpenSim::Constant const *)arg1)->writeSIMM(*arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1Coordinate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Coordinate *arg1 = (OpenSim::Coordinate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Coordinate **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Coordinate_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Coordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Coordinate *)new OpenSim::Coordinate();
  *(OpenSim::Coordinate **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Coordinate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Coordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Coordinate *)new OpenSim::Coordinate((std::string const &)*arg1);
  *(OpenSim::Coordinate **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1Coordinate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Coordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Coordinate *)new OpenSim::Coordinate(arg1);
  *(OpenSim::Coordinate **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Coordinate_1getRangeMin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Coordinate *arg1 = (OpenSim::Coordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Coordinate **)&jarg1; 
  result = (double)((OpenSim::Coordinate const *)arg1)->getRangeMin();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_Coordinate_1getRangeMax(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Coordinate *arg1 = (OpenSim::Coordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Coordinate **)&jarg1; 
  result = (double)((OpenSim::Coordinate const *)arg1)->getRangeMax();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmCoordinate_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmCoordinate *)new OpenSim::SimmCoordinate();
  *(OpenSim::SimmCoordinate **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmCoordinate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmCoordinate *)new OpenSim::SimmCoordinate(arg1);
  *(OpenSim::SimmCoordinate **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmCoordinate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = 0 ;
  OpenSim::SimmCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmCoordinate const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmCoordinate *)new OpenSim::SimmCoordinate((OpenSim::SimmCoordinate const &)*arg1);
  *(OpenSim::SimmCoordinate **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmCoordinate const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmCoordinate const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::SimmCoordinate *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmCoordinate const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmCoordinate const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1addJointToList(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::SimmJoint *arg2 = (OpenSim::SimmJoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(OpenSim::SimmJoint **)&jarg2; 
  (arg1)->addJointToList(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1addPathToList(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  SimmPath *arg2 = (SimmPath *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(SimmPath **)&jarg2; 
  (arg1)->addPathToList(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::SimmKinematicsEngine *arg2 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(OpenSim::SimmKinematicsEngine **)&jarg2; 
  (arg1)->setup(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setValue(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setValue(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (double)((OpenSim::SimmCoordinate const *)arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getValueStr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::SimmCoordinate const *)arg1)->getValueStr();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (double)((OpenSim::SimmCoordinate const *)arg1)->getTolerance();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getDefaultValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (double)((OpenSim::SimmCoordinate const *)arg1)->getDefaultValue();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getPDStiffness(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (double)((OpenSim::SimmCoordinate const *)arg1)->getPDStiffness();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getIKweight(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (double)((OpenSim::SimmCoordinate const *)arg1)->getIKweight();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmCoordinate const *)arg1)->getRange(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getRangeMin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (double)((OpenSim::SimmCoordinate const *)arg1)->getRangeMin();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getRangeMax(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (double)((OpenSim::SimmCoordinate const *)arg1)->getRangeMax();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  std::string *arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  ((OpenSim::SimmCoordinate const *)arg1)->getKeys(arg2);
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getJointList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::Array<OpenSim::SimmJoint * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  {
    OpenSim::Array<OpenSim::SimmJoint * > const &_result_ref = ((OpenSim::SimmCoordinate const *)arg1)->getJointList();
    result = (OpenSim::Array<OpenSim::SimmJoint * > *) &_result_ref;
  }
  *(OpenSim::Array<OpenSim::SimmJoint * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getPathList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::Array<SimmPath * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  {
    OpenSim::Array<SimmPath * > const &_result_ref = ((OpenSim::SimmCoordinate const *)arg1)->getPathList();
    result = (OpenSim::Array<SimmPath * > *) &_result_ref;
  }
  *(OpenSim::Array<SimmPath * > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1isUsedInModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (bool)(arg1)->isUsedInModel();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1isClamped(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (bool)((OpenSim::SimmCoordinate const *)arg1)->isClamped();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1isLocked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (bool)((OpenSim::SimmCoordinate const *)arg1)->isLocked();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1setLocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLocked(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1isRestraintActive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (bool)((OpenSim::SimmCoordinate const *)arg1)->isRestraintActive();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getRestraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::SimmCoordinate const *)arg1)->getRestraintFunction();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getMinRestraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::SimmCoordinate const *)arg1)->getMinRestraintFunction();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1getMaxRestraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::SimmCoordinate const *)arg1)->getMaxRestraintFunction();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1updateFromCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::SimmCoordinate *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmCoordinate const & reference is null");
    return ;
  } 
  (arg1)->updateFromCoordinate((OpenSim::SimmCoordinate const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1writeSIMM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  std::ofstream *arg2 = 0 ;
  int *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(std::ofstream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ofstream & reference is null");
    return ;
  } 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  ((OpenSim::SimmCoordinate const *)arg1)->writeSIMM(*arg2,*arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  ((OpenSim::SimmCoordinate const *)arg1)->peteTest();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmCoordinate_1setRestraintFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmCoordinate *arg1 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::Function *arg2 = (OpenSim::Function *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinate **)&jarg1; 
  arg2 = *(OpenSim::Function **)&jarg2; 
  (arg1)->setRestraintFunction(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetSimmCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmCoordinate_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::SimmCoordinate > *)new OpenSim::Set<OpenSim::SimmCoordinate >();
  *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmCoordinate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::SimmCoordinate > *)new OpenSim::Set<OpenSim::SimmCoordinate >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmCoordinate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::SimmCoordinate > *)new OpenSim::Set<OpenSim::SimmCoordinate >(arg1);
  *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmCoordinate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::SimmCoordinate > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::SimmCoordinate > *)new OpenSim::Set<OpenSim::SimmCoordinate >((OpenSim::Set<OpenSim::SimmCoordinate > const &)*arg1);
  *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::SimmCoordinate > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::SimmCoordinate > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmCoordinate > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmCoordinate > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmCoordinate > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  OpenSim::SimmCoordinate *arg2 = (OpenSim::SimmCoordinate *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinate **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::SimmCoordinate > const *)arg1)->getIndex((OpenSim::SimmCoordinate const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  OpenSim::SimmCoordinate *arg2 = (OpenSim::SimmCoordinate *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinate **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::SimmCoordinate > const *)arg1)->getIndex((OpenSim::SimmCoordinate const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::SimmCoordinate > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::SimmCoordinate > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  OpenSim::SimmCoordinate *arg2 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinate **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::SimmCoordinate > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::SimmCoordinate > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::SimmCoordinate > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  int arg2 ;
  OpenSim::SimmCoordinate *arg3 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::SimmCoordinate **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  OpenSim::SimmCoordinate *arg2 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinate **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::SimmCoordinate const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  int arg2 ;
  OpenSim::SimmCoordinate *arg3 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::SimmCoordinate **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  int arg2 ;
  OpenSim::SimmCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::SimmCoordinate *)((OpenSim::Set<OpenSim::SimmCoordinate > const *)arg1)->get(arg2);
  *(OpenSim::SimmCoordinate **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::SimmCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::SimmCoordinate *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::SimmCoordinate **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  OpenSim::SimmCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  result = (OpenSim::SimmCoordinate *)((OpenSim::Set<OpenSim::SimmCoordinate > const *)arg1)->getLast();
  *(OpenSim::SimmCoordinate **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  OpenSim::SimmCoordinate *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmCoordinate const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::SimmCoordinate > const *)arg1)->searchBinary((OpenSim::SimmCoordinate const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  OpenSim::SimmCoordinate *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmCoordinate const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::SimmCoordinate > const *)arg1)->searchBinary((OpenSim::SimmCoordinate const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  OpenSim::SimmCoordinate *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmCoordinate const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::SimmCoordinate > const *)arg1)->searchBinary((OpenSim::SimmCoordinate const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmCoordinate_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmCoordinate > *arg1 = (OpenSim::Set<OpenSim::SimmCoordinate > *) 0 ;
  OpenSim::SimmCoordinate *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinate **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmCoordinate const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::SimmCoordinate > const *)arg1)->searchBinary((OpenSim::SimmCoordinate const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmCoordinateSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinateSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmCoordinateSet *)new OpenSim::SimmCoordinateSet();
  *(OpenSim::SimmCoordinateSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmCoordinateSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmCoordinateSet *arg1 = 0 ;
  OpenSim::SimmCoordinateSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinateSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmCoordinateSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmCoordinateSet *)new OpenSim::SimmCoordinateSet((OpenSim::SimmCoordinateSet const &)*arg1);
  *(OpenSim::SimmCoordinateSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmCoordinateSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmCoordinateSet *arg1 = (OpenSim::SimmCoordinateSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmCoordinateSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmDof(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmDof *arg1 = (OpenSim::SimmDof *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmDof **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDof_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmDof *arg1 = (OpenSim::SimmDof *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmDof **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmDof const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDof_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmDof *arg1 = (OpenSim::SimmDof *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmDof **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmDof const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDof_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmDof *arg1 = (OpenSim::SimmDof *) 0 ;
  OpenSim::SimmDof *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmDof **)&jarg1; 
  arg2 = *(OpenSim::SimmDof **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmDof const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmDof const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDof_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmDof *arg1 = (OpenSim::SimmDof *) 0 ;
  OpenSim::SimmKinematicsEngine *arg2 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::SimmJoint *arg3 = (OpenSim::SimmJoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmDof **)&jarg1; 
  arg2 = *(OpenSim::SimmKinematicsEngine **)&jarg2; 
  arg3 = *(OpenSim::SimmJoint **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDof_1getAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmDof *arg1 = (OpenSim::SimmDof *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmDof **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmDof const *)arg1)->getAxis(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDof_1getAxisPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmDof *arg1 = (OpenSim::SimmDof *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmDof **)&jarg1; 
  result = (double *)((OpenSim::SimmDof const *)arg1)->getAxisPtr();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDof_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmDof *arg1 = (OpenSim::SimmDof *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmDof **)&jarg1; 
  result = (double)(arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDof_1getDofType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmDof *arg1 = (OpenSim::SimmDof *) 0 ;
  OpenSim::SimmDof::DofType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmDof **)&jarg1; 
  result = (OpenSim::SimmDof::DofType)((OpenSim::SimmDof const *)arg1)->getDofType();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDof_1getCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmDof *arg1 = (OpenSim::SimmDof *) 0 ;
  OpenSim::SimmCoordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmDof **)&jarg1; 
  result = (OpenSim::SimmCoordinate *)((OpenSim::SimmDof const *)arg1)->getCoordinate();
  *(OpenSim::SimmCoordinate **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDof_1getFunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmDof *arg1 = (OpenSim::SimmDof *) 0 ;
  OpenSim::Function *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmDof **)&jarg1; 
  result = (OpenSim::Function *)((OpenSim::SimmDof const *)arg1)->getFunction();
  *(OpenSim::Function **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmDof_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmDof *arg1 = (OpenSim::SimmDof *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmDof **)&jarg1; 
  (arg1)->peteTest();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmJoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmJoint *)new OpenSim::SimmJoint();
  *(OpenSim::SimmJoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmJoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmJoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmJoint *)new OpenSim::SimmJoint(arg1);
  *(OpenSim::SimmJoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmJoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = 0 ;
  OpenSim::SimmJoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmJoint const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmJoint *)new OpenSim::SimmJoint((OpenSim::SimmJoint const &)*arg1);
  *(OpenSim::SimmJoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmJoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmJoint const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmJoint const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::SimmKinematicsEngine *arg2 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  arg2 = *(OpenSim::SimmKinematicsEngine **)&jarg2; 
  (arg1)->setup(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::SimmJoint *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  arg2 = *(OpenSim::SimmJoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmJoint const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmJoint const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1invalidate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  (arg1)->invalidate();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1getBodyNames(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  {
    OpenSim::Array<std::string > &_result_ref = ((OpenSim::SimmJoint const *)arg1)->getBodyNames();
    result = (OpenSim::Array<std::string > *) &_result_ref;
  }
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1getDofSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  SimmDofSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  {
    SimmDofSet &_result_ref = ((OpenSim::SimmJoint const *)arg1)->getDofSet();
    result = (SimmDofSet *) &_result_ref;
  }
  *(SimmDofSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1getChildBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  result = (OpenSim::SimmBody *)((OpenSim::SimmJoint const *)arg1)->getChildBody();
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1getParentBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  result = (OpenSim::SimmBody *)((OpenSim::SimmJoint const *)arg1)->getParentBody();
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1getForwardTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  {
    OpenSim::Transform const &_result_ref = (arg1)->getForwardTransform();
    result = (OpenSim::Transform *) &_result_ref;
  }
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1getInverseTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  {
    OpenSim::Transform const &_result_ref = (arg1)->getInverseTransform();
    result = (OpenSim::Transform *) &_result_ref;
  }
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1isCoordinateUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::SimmCoordinate *arg2 = (OpenSim::SimmCoordinate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinate **)&jarg2; 
  result = (bool)((OpenSim::SimmJoint const *)arg1)->isCoordinateUsed(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1identifyDpType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::SimmModel *arg2 = (OpenSim::SimmModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  arg2 = *(OpenSim::SimmModel **)&jarg2; 
  (arg1)->identifyDpType(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1makeSdfastJoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jboolean jarg6) {
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  std::ofstream *arg2 = 0 ;
  OpenSim::ArrayPtrs<SimmSdfastBody > *arg3 = 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  bool arg6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  arg2 = *(std::ofstream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ofstream & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::ArrayPtrs<SimmSdfastBody > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<SimmSdfastBody > & reference is null");
    return ;
  } 
  arg4 = *(int **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->makeSdfastJoint(*arg2,*arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->scale((OpenSim::ScaleSet const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1writeSIMM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  std::ofstream *arg2 = 0 ;
  int *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  arg2 = *(std::ofstream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ofstream & reference is null");
    return ;
  } 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  ((OpenSim::SimmJoint const *)arg1)->writeSIMM(*arg2,*arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmJoint_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  (arg1)->peteTest();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1_1sdfastInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  SimmSdfastInfo arg2 ;
  SimmSdfastInfo *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  argp2 = *(SimmSdfastInfo **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SimmSdfastInfo");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_sdfastInfo = arg2;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1_1sdfastInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  SimmSdfastInfo result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result =  ((arg1)->_sdfastInfo);
  *(SimmSdfastInfo **)&jresult = new SimmSdfastInfo((SimmSdfastInfo &)result); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmKinematicsEngine_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmKinematicsEngine *)new OpenSim::SimmKinematicsEngine();
  *(OpenSim::SimmKinematicsEngine **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmKinematicsEngine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::SimmKinematicsEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::SimmKinematicsEngine *)new OpenSim::SimmKinematicsEngine((std::string const &)*arg1);
  *(OpenSim::SimmKinematicsEngine **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmKinematicsEngine_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmKinematicsEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmKinematicsEngine *)new OpenSim::SimmKinematicsEngine(arg1);
  *(OpenSim::SimmKinematicsEngine **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmKinematicsEngine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1registerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::SimmKinematicsEngine::registerTypes();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmKinematicsEngine_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = 0 ;
  OpenSim::SimmKinematicsEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmKinematicsEngine const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmKinematicsEngine *)new OpenSim::SimmKinematicsEngine((OpenSim::SimmKinematicsEngine const &)*arg1);
  *(OpenSim::SimmKinematicsEngine **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmKinematicsEngine const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmKinematicsEngine const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1saveDynamics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return ;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  (arg1)->saveDynamics((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1saveDynamics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->saveDynamics((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1saveDynamics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->saveDynamics((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1saveDynamics_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->saveDynamics((std::string const &)*arg2,(std::string const &)*arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1saveDynamics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->saveDynamics((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1saveDynamics_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  (arg1)->saveDynamics();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getLeafBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::SimmJoint *arg2 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::SimmJoint **)&jarg2; 
  result = (OpenSim::SimmBody *)((OpenSim::SimmKinematicsEngine const *)arg1)->getLeafBody(arg2);
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1markUnconstrainedDof(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::SimmCoordinate *arg2 = (OpenSim::SimmCoordinate *) 0 ;
  OpenSim::SimmDof *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinate **)&jarg2; 
  result = (OpenSim::SimmDof *)(arg1)->markUnconstrainedDof((OpenSim::SimmCoordinate const *)arg2);
  *(OpenSim::SimmDof **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::SimmModel *arg2 = (OpenSim::SimmModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::SimmModel **)&jarg2; 
  (arg1)->setup(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1makePaths(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  (arg1)->makePaths();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getGroundBodyPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result = (OpenSim::SimmBody *)((OpenSim::SimmKinematicsEngine const *)arg1)->getGroundBodyPtr();
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  OpenSim::SimmBody *arg3 = (OpenSim::SimmBody *) 0 ;
  OpenSim::SimmBody *arg4 = (OpenSim::SimmBody *) 0 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = *(OpenSim::SimmBody **)&jarg3; 
  arg4 = *(OpenSim::SimmBody **)&jarg4; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertPoint(arg2,(OpenSim::SimmBody const *)arg3,(OpenSim::SimmBody const *)arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  OpenSim::SimmBody *arg3 = (OpenSim::SimmBody *) 0 ;
  OpenSim::SimmBody *arg4 = (OpenSim::SimmBody *) 0 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = *(OpenSim::SimmBody **)&jarg3; 
  arg4 = *(OpenSim::SimmBody **)&jarg4; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertVector(arg2,(OpenSim::SimmBody const *)arg3,(OpenSim::SimmBody const *)arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  OpenSim::SimmBody *arg3 = (OpenSim::SimmBody *) 0 ;
  OpenSim::SimmBody *arg4 = (OpenSim::SimmBody *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::SimmBody **)&jarg3; 
  arg4 = *(OpenSim::SimmBody **)&jarg4; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertPoint(*arg2,(OpenSim::SimmBody const *)arg3,(OpenSim::SimmBody const *)arg4);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1calcDistance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  OpenSim::SimmBody *arg3 = (OpenSim::SimmBody *) 0 ;
  OpenSim::Array<double > *arg4 = 0 ;
  OpenSim::SimmBody *arg5 = (OpenSim::SimmBody *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  arg3 = *(OpenSim::SimmBody **)&jarg3; 
  arg4 = *(OpenSim::Array<double > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return 0;
  } 
  arg5 = *(OpenSim::SimmBody **)&jarg5; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->calcDistance(*arg2,(OpenSim::SimmBody const *)arg3,*arg4,(OpenSim::SimmBody const *)arg5);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1calcDistance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jlong jarg3, jdoubleArray jarg4, jlong jarg5) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  OpenSim::SimmBody *arg3 = (OpenSim::SimmBody *) 0 ;
  double *arg4 ;
  OpenSim::SimmBody *arg5 = (OpenSim::SimmBody *) 0 ;
  double result;
  jdouble *jarr2 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return 0; 
  arg3 = *(OpenSim::SimmBody **)&jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return 0; 
  arg5 = *(OpenSim::SimmBody **)&jarg5; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->calcDistance((double const (*))arg2,(OpenSim::SimmBody const *)arg3,(double const (*))arg4,(OpenSim::SimmBody const *)arg5);
  jresult = (jdouble)result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg2; 
  delete [] arg4; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getNumMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getNumMarkers();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1moveMarkersToCloud(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  (arg1)->moveMarkersToCloud(*arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1deleteUnusedMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->deleteUnusedMarkers((OpenSim::Array<std::string > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1replaceMarkerSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  SimmMarkerSet *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(SimmMarkerSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimmMarkerSet & reference is null");
    return 0;
  } 
  result = (int)(arg1)->replaceMarkerSet(*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1updateMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  SimmMarkerSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(SimmMarkerSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimmMarkerSet & reference is null");
    return ;
  } 
  (arg1)->updateMarkers(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1updateCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::SimmCoordinateSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinateSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmCoordinateSet & reference is null");
    return ;
  } 
  (arg1)->updateCoordinates(*arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1takeMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  SimmMeasurement *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(SimmMeasurement **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimmMeasurement const & reference is null");
    return 0;
  } 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->takeMeasurement((SimmMeasurement const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1writeSIMMJointFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->writeSIMMJointFile((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1writeMarkerFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->writeMarkerFile((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->peteTest();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getUnlockedCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::SimmCoordinateArray *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinateArray **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmCoordinateArray & reference is null");
    return ;
  } 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getUnlockedCoordinates(*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::SimmBody *)((OpenSim::SimmKinematicsEngine const *)arg1)->getBody((std::string const &)*arg2);
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Coordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Coordinate *)((OpenSim::SimmKinematicsEngine const *)arg1)->getCoordinate((std::string const &)*arg2);
  *(OpenSim::Coordinate **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getJoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  OpenSim::SimmJoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::SimmJoint *)(arg1)->getJoint(arg2);
  *(OpenSim::SimmJoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::SimmBodySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  {
    OpenSim::SimmBodySet &_result_ref = (arg1)->getBodies();
    result = (OpenSim::SimmBodySet *) &_result_ref;
  }
  *(OpenSim::SimmBodySet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::SimmCoordinateSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  {
    OpenSim::SimmCoordinateSet &_result_ref = (arg1)->getCoordinates();
    result = (OpenSim::SimmCoordinateSet *) &_result_ref;
  }
  *(OpenSim::SimmCoordinateSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getNumBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getNumBodies();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getNumJoints(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getNumJoints();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getNumCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getNumCoordinates();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getNumSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getNumSpeeds();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getNumControls(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getNumControls();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getNumContacts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getNumContacts();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getNumStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getNumStates();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getNumPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getNumPseudoStates();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setBodyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->setBodyName(arg2,(std::string const &)*arg3);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getBodyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::SimmKinematicsEngine const *)arg1)->getBodyName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getCoordinateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::SimmKinematicsEngine const *)arg1)->getCoordinateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getSpeedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::SimmKinematicsEngine const *)arg1)->getSpeedName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::SimmKinematicsEngine const *)arg1)->getControlName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::SimmKinematicsEngine const *)arg1)->getStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::SimmKinematicsEngine const *)arg1)->getPseudoStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getBodyIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getBodyIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getCoordinateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getCoordinateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getSpeedIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getSpeedIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getControlIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->set(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setInitialStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getInitialStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getInitialState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getInitialState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getInitialState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getInitialState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyDefaultPose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  (arg1)->applyDefaultPose();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setInitialPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getInitialPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getInitialPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getInitialPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getInitialPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getInitialPseudoState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getPseudoState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setConfiguration((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setConfiguration((double const (*))arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getCoordinateValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getCoordinateValues(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getCoordinateValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getCoordinateValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getCoordinateValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getCoordinateValue((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getSpeeds(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getSpeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getSpeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getSpeed((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getAccelerations(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAcceleration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getAcceleration(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAcceleration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getAcceleration((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1extractConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->extractConfiguration((double const (*))arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg2; 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1assemble(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jint jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  int *arg4 = (int *) 0 ;
  double arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(int **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  result = (int)(arg1)->assemble(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1scale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1scale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jdouble jarg4) {
  jboolean jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getGravity(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setGravity(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getGroundBodyIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getGroundBodyIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setBodyToJointBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getBodyToJointBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setInboardToJointBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getInboardToJointBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getMass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getMass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getMass(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getInertiaBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double (*arg3)[3] ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getInertiaBodyLocal(arg2,(double (*)[3])arg3);
  jresult = (jint)result; 
  
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getInertiaBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getInertiaBodyLocal(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getSystemInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 ;
  double (*arg4)[3] ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getSystemInertia(arg2,arg3,(double (*)[3])arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getSystemInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getSystemInertia(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getPosition(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getVelocity(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAcceleration_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getAcceleration(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getDirectionCosines(arg2,(double (*)[3])arg3);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getDirectionCosines(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAngularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getAngularVelocity(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAngularVelocityBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getAngularVelocityBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAngularAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getAngularAcceleration(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getAngularAccelerationBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getAngularAccelerationBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForce(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForces(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForces(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyForceBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForceBodyLocal(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyForcesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyForcesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorque(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyTorques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorques(arg2,(int const (*))arg3,(double const (*)[3])arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyTorques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorques(arg2,(int const (*))arg3,(double const *)arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyTorqueBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorqueBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyTorquesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyTorquesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->applyGeneralizedForce(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyGeneralizedForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->applyGeneralizedForces((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyGeneralizedForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 ;
  jint *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyGeneralizedForces(arg2,(int const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getNetAppliedGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getNetAppliedGeneralizedForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1computeGeneralizedForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->computeGeneralizedForces(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1computeReactions(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double (*arg2)[3] ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->computeReactions((double (*)[3])arg2,(double (*)[3])arg3);
  
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formMassMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->formMassMatrix(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formEulerTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->formEulerTransform(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formJacobianTranslation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jlong jarg4, jint jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = (int)jarg5; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->formJacobianTranslation(arg2,(double const (*))arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formJacobianTranslation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->formJacobianTranslation(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formJacobianOrientation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->formJacobianOrientation(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formJacobianOrientation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->formJacobianOrientation(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formJacobianEuler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->formJacobianEuler(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1formJacobianEuler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->formJacobianEuler(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1computeAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->computeAccelerations(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1computeAuxiliaryDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->computeAuxiliaryDerivatives(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jint jarg4, jdoubleArray jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  int arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = (int)jarg4; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->transform(arg2,(double const (*))arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1transformPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->transformPosition(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertQuaternionsToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertQuaternionsToAngles(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertQuaternionsToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertQuaternionsToAngles(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertAnglesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertAnglesToQuaternions(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertAnglesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertAnglesToQuaternions(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertRadiansToDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertRadiansToDegrees(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertRadiansToDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertRadiansToDegrees(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertDegreesToRadians_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertDegreesToRadians(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertDegreesToRadians_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertDegreesToRadians(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertAnglesToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double (*arg5)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,(double (*)[3])arg5);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertAnglesToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,arg5);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertDirectionCosinesToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertDirectionCosinesToAngles((double (*)[3])arg2,arg3,arg4,arg5);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertDirectionCosinesToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertDirectionCosinesToAngles(arg2,arg3,arg4,arg5);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertDirectionCosinesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertDirectionCosinesToQuaternions((double (*)[3])arg2,arg3,arg4,arg5,arg6);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertDirectionCosinesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertDirectionCosinesToQuaternions(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertQuaternionsToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double (*arg6)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double (**)[3])&jarg6; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,(double (*)[3])arg6);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1convertQuaternionsToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  (arg1)->computeContact();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyContactForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->applyContactForce(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1applyContactForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  (arg1)->applyContactForces();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getContactBodyA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getContactBodyA(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getContactBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::SimmKinematicsEngine const *)arg1)->getContactBodyB(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setContactPointA(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getContactPointA(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1setContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setContactPointB(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getContactPointB(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getContactForce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getContactForce(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getContactNormalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getContactNormalForce(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getContactTangentForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getContactTangentForce(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getContactStiffness(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getContactStiffness(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getContactViscosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getContactViscosity(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getContactFrictionCorrection(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmKinematicsEngine const *)arg1)->getContactFrictionCorrection(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getContactForce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getContactForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getContactSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getContactSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmKinematicsEngine_1getContactPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmKinematicsEngine *arg1 = (OpenSim::SimmKinematicsEngine *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmKinematicsEngine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmKinematicsEngine const *)arg1)->getContactPower(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMarker_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmMarker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmMarker *)new OpenSim::SimmMarker();
  *(OpenSim::SimmMarker **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMarker_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmMarker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmMarker *)new OpenSim::SimmMarker(arg1);
  *(OpenSim::SimmMarker **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMarker_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMarker *arg1 = 0 ;
  OpenSim::SimmMarker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMarker const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmMarker *)new OpenSim::SimmMarker((OpenSim::SimmMarker const &)*arg1);
  *(OpenSim::SimmMarker **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmMarker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmMarker const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmMarker const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  OpenSim::SimmMarker *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  arg2 = *(OpenSim::SimmMarker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMarker const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmMarker const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1updateFromMarker(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  OpenSim::SimmMarker *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  arg2 = *(OpenSim::SimmMarker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMarker const & reference is null");
    return ;
  } 
  (arg1)->updateFromMarker((OpenSim::SimmMarker const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1getOffset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  ((OpenSim::SimmMarker const *)arg1)->getOffset(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1getOffset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  result = (double *)((OpenSim::SimmMarker const *)arg1)->getOffset();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1setOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setOffset(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1getFixed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  result = (bool)((OpenSim::SimmMarker const *)arg1)->getFixed();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1getWeight(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  result = (double)((OpenSim::SimmMarker const *)arg1)->getWeight();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1getBodyName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  result = (std::string *)((OpenSim::SimmMarker const *)arg1)->getBodyName();
  *(std::string **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  OpenSim::SimmKinematicsEngine *arg2 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  arg2 = *(OpenSim::SimmKinematicsEngine **)&jarg2; 
  (arg1)->setup(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->scale(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1writeSIMM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  std::ofstream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  arg2 = *(std::ofstream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ofstream & reference is null");
    return ;
  } 
  ((OpenSim::SimmMarker const *)arg1)->writeSIMM(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  ((OpenSim::SimmMarker const *)arg1)->peteTest();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1getDisplayer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  result = (OpenSim::VisibleObject *)(arg1)->getDisplayer();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1isVirtual(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  result = (bool)(arg1)->isVirtual();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarker_1setVirtual(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::SimmMarker *arg1 = (OpenSim::SimmMarker *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarker **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVirtual(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetSimmMarker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmMarker_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::SimmMarker > *)new OpenSim::Set<OpenSim::SimmMarker >();
  *(OpenSim::Set<OpenSim::SimmMarker > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmMarker_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::SimmMarker > *)new OpenSim::Set<OpenSim::SimmMarker >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::SimmMarker > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmMarker_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::SimmMarker > *)new OpenSim::Set<OpenSim::SimmMarker >(arg1);
  *(OpenSim::Set<OpenSim::SimmMarker > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmMarker_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::SimmMarker > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::SimmMarker > *)new OpenSim::Set<OpenSim::SimmMarker >((OpenSim::Set<OpenSim::SimmMarker > const &)*arg1);
  *(OpenSim::Set<OpenSim::SimmMarker > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::SimmMarker > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::SimmMarker > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmMarker > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmMarker > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmMarker > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  OpenSim::SimmMarker *arg2 = (OpenSim::SimmMarker *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = *(OpenSim::SimmMarker **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::SimmMarker > const *)arg1)->getIndex((OpenSim::SimmMarker const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  OpenSim::SimmMarker *arg2 = (OpenSim::SimmMarker *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = *(OpenSim::SimmMarker **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::SimmMarker > const *)arg1)->getIndex((OpenSim::SimmMarker const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::SimmMarker > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::SimmMarker > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  OpenSim::SimmMarker *arg2 = (OpenSim::SimmMarker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = *(OpenSim::SimmMarker **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::SimmMarker > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::SimmMarker > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::SimmMarker > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  int arg2 ;
  OpenSim::SimmMarker *arg3 = (OpenSim::SimmMarker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::SimmMarker **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  OpenSim::SimmMarker *arg2 = (OpenSim::SimmMarker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = *(OpenSim::SimmMarker **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::SimmMarker const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  int arg2 ;
  OpenSim::SimmMarker *arg3 = (OpenSim::SimmMarker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::SimmMarker **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  int arg2 ;
  OpenSim::SimmMarker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::SimmMarker *)((OpenSim::Set<OpenSim::SimmMarker > const *)arg1)->get(arg2);
  *(OpenSim::SimmMarker **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::SimmMarker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::SimmMarker *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::SimmMarker **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  OpenSim::SimmMarker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  result = (OpenSim::SimmMarker *)((OpenSim::Set<OpenSim::SimmMarker > const *)arg1)->getLast();
  *(OpenSim::SimmMarker **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  OpenSim::SimmMarker *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = *(OpenSim::SimmMarker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMarker const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::SimmMarker > const *)arg1)->searchBinary((OpenSim::SimmMarker const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  OpenSim::SimmMarker *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = *(OpenSim::SimmMarker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMarker const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::SimmMarker > const *)arg1)->searchBinary((OpenSim::SimmMarker const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  OpenSim::SimmMarker *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = *(OpenSim::SimmMarker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMarker const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::SimmMarker > const *)arg1)->searchBinary((OpenSim::SimmMarker const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMarker_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMarker > *arg1 = (OpenSim::Set<OpenSim::SimmMarker > *) 0 ;
  OpenSim::SimmMarker *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1; 
  arg2 = *(OpenSim::SimmMarker **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMarker const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::SimmMarker > const *)arg1)->searchBinary((OpenSim::SimmMarker const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMarkerSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmMarkerSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmMarkerSet *)new OpenSim::SimmMarkerSet();
  *(OpenSim::SimmMarkerSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMarkerSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::SimmMarkerSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::SimmMarkerSet *)new OpenSim::SimmMarkerSet((std::string const &)*arg1);
  *(OpenSim::SimmMarkerSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMarkerSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMarkerSet *arg1 = 0 ;
  OpenSim::SimmMarkerSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMarkerSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmMarkerSet *)new OpenSim::SimmMarkerSet((OpenSim::SimmMarkerSet const &)*arg1);
  *(OpenSim::SimmMarkerSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmMarkerSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMarkerSet *arg1 = (OpenSim::SimmMarkerSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerSet_1addNamePrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmMarkerSet *arg1 = (OpenSim::SimmMarkerSet *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->addNamePrefix((std::string const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmModel_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmModel *)new OpenSim::SimmModel();
  *(OpenSim::SimmModel **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmModel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::SimmModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  try {
    result = (OpenSim::SimmModel *)new OpenSim::SimmModel((std::string const &)*arg1);
  }
  catch(OpenSim::Exception &_e) {
    {
      jclass excep = jenv->FindClass("java/io/IOException");
      if (excep)
      jenv->ThrowNew(excep, (_e).getMessage());
      return 0;
    }
  }
  
  *(OpenSim::SimmModel **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmModel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmModel *)new OpenSim::SimmModel(arg1);
  *(OpenSim::SimmModel **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmModel_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = 0 ;
  OpenSim::SimmModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmModel const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmModel *)new OpenSim::SimmModel((OpenSim::SimmModel const &)*arg1);
  *(OpenSim::SimmModel **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmModel const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::SimmModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (OpenSim::SimmModel *)(arg1)->clone();
  *(OpenSim::SimmModel **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmModel const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::SimmModel *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(OpenSim::SimmModel **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmModel const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmModel const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getMuscle(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  SimmMuscle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (SimmMuscle *)(arg1)->getMuscle(arg2);
  *(SimmMuscle **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getNumberOfMuscleGroups(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (int)((OpenSim::SimmModel const *)arg1)->getNumberOfMuscleGroups();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1enterGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  SimmMuscleGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (SimmMuscleGroup *)(arg1)->enterGroup((std::string const &)*arg2);
  *(SimmMuscleGroup **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setKinematicsEngine(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::AbstractDynamicsEngine *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(OpenSim::AbstractDynamicsEngine **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::AbstractDynamicsEngine & reference is null");
    return ;
  } 
  (arg1)->setKinematicsEngine(*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getKinematicsEngine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::AbstractDynamicsEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  {
    OpenSim::AbstractDynamicsEngine &_result_ref = ((OpenSim::SimmModel const *)arg1)->getKinematicsEngine();
    result = (OpenSim::AbstractDynamicsEngine *) &_result_ref;
  }
  *(OpenSim::AbstractDynamicsEngine **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getSimmKinematicsEngine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::SimmKinematicsEngine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  {
    OpenSim::SimmKinematicsEngine &_result_ref = ((OpenSim::SimmModel const *)arg1)->getSimmKinematicsEngine();
    result = (OpenSim::SimmKinematicsEngine *) &_result_ref;
  }
  *(OpenSim::SimmKinematicsEngine **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1moveMarkersToCloud(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  (arg1)->moveMarkersToCloud(*arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1deleteUnusedMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->deleteUnusedMarkers((OpenSim::Array<std::string > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1replaceMarkerSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::SimmMarkerSet *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(OpenSim::SimmMarkerSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMarkerSet & reference is null");
    return 0;
  } 
  result = (int)(arg1)->replaceMarkerSet(*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1updateMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::SimmMarkerSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(OpenSim::SimmMarkerSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMarkerSet & reference is null");
    return ;
  } 
  (arg1)->updateMarkers(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1updateCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::SimmCoordinateSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinateSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmCoordinateSet & reference is null");
    return ;
  } 
  (arg1)->updateCoordinates(*arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1takeMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  SimmMeasurement *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(SimmMeasurement **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimmMeasurement const & reference is null");
    return 0;
  } 
  result = (double)(arg1)->takeMeasurement((SimmMeasurement const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getLengthUnits(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  SimmUnits *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  {
    SimmUnits const &_result_ref = ((OpenSim::SimmModel const *)arg1)->getLengthUnits();
    result = (SimmUnits *) &_result_ref;
  }
  *(SimmUnits **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getForceUnits(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  SimmUnits *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  {
    SimmUnits const &_result_ref = ((OpenSim::SimmModel const *)arg1)->getForceUnits();
    result = (SimmUnits *) &_result_ref;
  }
  *(SimmUnits **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getGravity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (double *)((OpenSim::SimmModel const *)arg1)->getGravity();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getGravityLabel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (char *)((OpenSim::SimmModel const *)arg1)->getGravityLabel();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1bodyNeededForDynamics(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::SimmBody *arg2 = (OpenSim::SimmBody *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(OpenSim::SimmBody **)&jarg2; 
  result = (bool)(arg1)->bodyNeededForDynamics(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::SimmBodySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  {
    OpenSim::SimmBodySet &_result_ref = (arg1)->getBodies();
    result = (OpenSim::SimmBodySet *) &_result_ref;
  }
  *(OpenSim::SimmBodySet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getCoordinates_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::SimmCoordinateSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  {
    OpenSim::SimmCoordinateSet &_result_ref = (arg1)->getCoordinates();
    result = (OpenSim::SimmCoordinateSet *) &_result_ref;
  }
  *(OpenSim::SimmCoordinateSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setPin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jdoubleArray jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->setPin(arg2,arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getPin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jdoubleArray jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getPin(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getJointInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jintArray jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  int *arg3 ;
  int *arg4 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 50) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getJointInfo(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutInt(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getInputFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::SimmModel const *)arg1)->getInputFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1writeSIMMJointFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((OpenSim::SimmModel const *)arg1)->writeSIMMJointFile((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1writeSIMMMuscleFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((OpenSim::SimmModel const *)arg1)->writeSIMMMuscleFile((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1writeMarkerFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((OpenSim::SimmModel const *)arg1)->writeMarkerFile((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1registerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::SimmModel::registerTypes();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  (arg1)->setup();
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1builtOK(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (bool)(arg1)->builtOK();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  ((OpenSim::SimmModel const *)arg1)->peteTest();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getNJ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (int)((OpenSim::SimmModel const *)arg1)->getNJ();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getNQ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (int)((OpenSim::SimmModel const *)arg1)->getNQ();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getNU(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (int)((OpenSim::SimmModel const *)arg1)->getNU();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (int)((OpenSim::SimmModel const *)arg1)->getNX();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getNA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (int)((OpenSim::SimmModel const *)arg1)->getNA();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getNP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (int)((OpenSim::SimmModel const *)arg1)->getNP();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (int)((OpenSim::SimmModel const *)arg1)->getNY();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getNYP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (int)((OpenSim::SimmModel const *)arg1)->getNYP();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getBodyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::SimmModel const *)arg1)->getBodyName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getCoordinateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::SimmModel const *)arg1)->getCoordinateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getSpeedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::SimmModel const *)arg1)->getSpeedName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getActuatorName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::SimmModel const *)arg1)->getActuatorName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::SimmModel const *)arg1)->getControlName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::SimmModel const *)arg1)->getStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::SimmModel const *)arg1)->getPseudoStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getBodyIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::SimmModel const *)arg1)->getBodyIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getCoordinateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::SimmModel const *)arg1)->getCoordinateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getSpeedIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::SimmModel const *)arg1)->getSpeedIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getActuatorIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::SimmModel const *)arg1)->getActuatorIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::SimmModel const *)arg1)->getControlIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::SimmModel const *)arg1)->getStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::SimmModel const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->set(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setControls((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControl(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setControl((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getControls(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getControl(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::SimmModel const *)arg1)->getControl((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setInitialStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getInitialStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getInitialState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getInitialState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getInitialState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::SimmModel const *)arg1)->getInitialState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::SimmModel const *)arg1)->getState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyDefaultPose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  (arg1)->applyDefaultPose();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setInitialPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getInitialPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getInitialPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getInitialPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getInitialPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::SimmModel const *)arg1)->getInitialPseudoState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getPseudoState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setConfiguration((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setConfiguration((double const (*))arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getCoordinates_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getCoordinates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getCoordinate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getCoordinate(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getCoordinate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::SimmModel const *)arg1)->getCoordinate((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getSpeeds(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getSpeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getSpeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::SimmModel const *)arg1)->getSpeed((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getAccelerations(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getAcceleration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getAcceleration(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getAcceleration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::SimmModel const *)arg1)->getAcceleration((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1extractConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmModel const *)arg1)->extractConfiguration((double const (*))arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg2; 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1assemble(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jint jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  int *arg4 = (int *) 0 ;
  double arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(int **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  result = (int)(arg1)->assemble(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1scale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1scale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jdouble jarg4) {
  jboolean jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getGravity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getGravity(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setGravity(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getGroundID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (int)((OpenSim::SimmModel const *)arg1)->getGroundID();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setBodyToJointBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getBodyToJointBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setInboardToJointBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getInboardToJointBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getMass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getMass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getMass(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getInertiaBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double (*arg3)[3] ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  result = (int)((OpenSim::SimmModel const *)arg1)->getInertiaBodyLocal(arg2,(double (*)[3])arg3);
  jresult = (jint)result; 
  
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getInertiaBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)((OpenSim::SimmModel const *)arg1)->getInertiaBodyLocal(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getSystemInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 ;
  double (*arg4)[3] ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  ((OpenSim::SimmModel const *)arg1)->getSystemInertia(arg2,arg3,(double (*)[3])arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getSystemInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::SimmModel const *)arg1)->getSystemInertia(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getPosition(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getVelocity(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getAcceleration_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getAcceleration(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::SimmModel const *)arg1)->getDirectionCosines(arg2,(double (*)[3])arg3);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmModel const *)arg1)->getDirectionCosines(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getAngularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getAngularVelocity(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getAngularVelocityBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getAngularVelocityBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getAngularAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getAngularAcceleration(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getAngularAccelerationBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getAngularAccelerationBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForce(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForces(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForces(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyForceBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForceBodyLocal(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyForcesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyForcesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorque(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyTorques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorques(arg2,(int const (*))arg3,(double const (*)[3])arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyTorques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorques(arg2,(int const (*))arg3,(double const *)arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyTorqueBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorqueBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyTorquesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyTorquesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->applyGeneralizedForce(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyGeneralizedForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->applyGeneralizedForces((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyGeneralizedForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 ;
  jint *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyGeneralizedForces(arg2,(int const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getNetAppliedGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getNetAppliedGeneralizedForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1computeGeneralizedForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmModel const *)arg1)->computeGeneralizedForces(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1computeReactions(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double (*arg2)[3] ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::SimmModel const *)arg1)->computeReactions((double (*)[3])arg2,(double (*)[3])arg3);
  
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1prescribeMotion(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->prescribeMotion(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1formMassMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->formMassMatrix(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1formEulerTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmModel const *)arg1)->formEulerTransform(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1formJacobianTranslation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jlong jarg4, jint jarg5) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = (int)jarg5; 
  ((OpenSim::SimmModel const *)arg1)->formJacobianTranslation(arg2,(double const (*))arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1formJacobianTranslation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::SimmModel const *)arg1)->formJacobianTranslation(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1formJacobianOrientation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  ((OpenSim::SimmModel const *)arg1)->formJacobianOrientation(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1formJacobianOrientation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmModel const *)arg1)->formJacobianOrientation(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1formJacobianEuler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  ((OpenSim::SimmModel const *)arg1)->formJacobianEuler(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1formJacobianEuler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmModel const *)arg1)->formJacobianEuler(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1computeAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->computeAccelerations(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1computeAuxiliaryDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->computeAuxiliaryDerivatives(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jint jarg4, jdoubleArray jarg5) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  int arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = (int)jarg4; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::SimmModel const *)arg1)->transform(arg2,(double const (*))arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1transformPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmModel const *)arg1)->transformPosition(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertQuaternionsToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmModel const *)arg1)->convertQuaternionsToAngles(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertQuaternionsToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::SimmModel const *)arg1)->convertQuaternionsToAngles(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertAnglesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmModel const *)arg1)->convertAnglesToQuaternions(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertAnglesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::SimmModel const *)arg1)->convertAnglesToQuaternions(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertRadiansToDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmModel const *)arg1)->convertRadiansToDegrees(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertRadiansToDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::SimmModel const *)arg1)->convertRadiansToDegrees(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertDegreesToRadians_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::SimmModel const *)arg1)->convertDegreesToRadians(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertDegreesToRadians_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::SimmModel const *)arg1)->convertDegreesToRadians(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertAnglesToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double (*arg5)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  ((OpenSim::SimmModel const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,(double (*)[3])arg5);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertAnglesToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::SimmModel const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,arg5);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertDirectionCosinesToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::SimmModel const *)arg1)->convertDirectionCosinesToAngles((double (*)[3])arg2,arg3,arg4,arg5);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertDirectionCosinesToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::SimmModel const *)arg1)->convertDirectionCosinesToAngles(arg2,arg3,arg4,arg5);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertDirectionCosinesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::SimmModel const *)arg1)->convertDirectionCosinesToQuaternions((double (*)[3])arg2,arg3,arg4,arg5,arg6);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertDirectionCosinesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::SimmModel const *)arg1)->convertDirectionCosinesToQuaternions(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertQuaternionsToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double (*arg6)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double (**)[3])&jarg6; 
  ((OpenSim::SimmModel const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,(double (*)[3])arg6);
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1convertQuaternionsToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::SimmModel const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  (arg1)->computeActuation();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->applyActuatorForce(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyActuatorForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  (arg1)->applyActuatorForces();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setActuatorForce(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getActuatorForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getActuatorStress(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getActuatorStress(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getActuatorSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getActuatorSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getActuatorPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getActuatorPower(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  (arg1)->computeContact();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyContactForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->applyContactForce(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1applyContactForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  (arg1)->applyContactForces();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getContactBodyA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::SimmModel const *)arg1)->getContactBodyA(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getContactBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::SimmModel const *)arg1)->getContactBodyB(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setContactPointA(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getContactPointA(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1setContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setContactPointB(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getContactPointB(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getContactForce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getContactForce(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getContactNormalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getContactNormalForce(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getContactTangentForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getContactTangentForce(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getContactStiffness(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getContactStiffness(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getContactViscosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getContactViscosity(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getContactFrictionCorrection(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::SimmModel const *)arg1)->getContactFrictionCorrection(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getContactForce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getContactForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getContactSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getContactSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModel_1getContactPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmModel *arg1 = (OpenSim::SimmModel *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::SimmModel const *)arg1)->getContactPower(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMuscle_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmMuscle *)new OpenSim::SimmMuscle();
  *(OpenSim::SimmMuscle **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMuscle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmMuscle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmMuscle *)new OpenSim::SimmMuscle(arg1);
  *(OpenSim::SimmMuscle **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMuscle_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscle *arg1 = 0 ;
  OpenSim::SimmMuscle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMuscle const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmMuscle *)new OpenSim::SimmMuscle((OpenSim::SimmMuscle const &)*arg1);
  *(OpenSim::SimmMuscle **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmMuscle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmMuscle const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmMuscle const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  OpenSim::SimmMuscle *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  arg2 = *(OpenSim::SimmMuscle **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMuscle const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmMuscle const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1getAttachmentSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  SimmMusclePointSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  {
    SimmMusclePointSet const &_result_ref = ((OpenSim::SimmMuscle const *)arg1)->getAttachmentSet();
    result = (SimmMusclePointSet *) &_result_ref;
  }
  *(SimmMusclePointSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  (arg1)->computeActuation();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  (arg1)->apply();
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  result = (double)((OpenSim::SimmMuscle const *)arg1)->getLength();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1getGroupNames(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  {
    OpenSim::Array<std::string > const &_result_ref = ((OpenSim::SimmMuscle const *)arg1)->getGroupNames();
    result = (OpenSim::Array<std::string > *) &_result_ref;
  }
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1getDisplayer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  result = (OpenSim::VisibleObject *)(arg1)->getDisplayer();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1registerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::SimmMuscle::registerTypes();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1preScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->preScale((OpenSim::ScaleSet const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->scale((OpenSim::ScaleSet const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1postScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return ;
  } 
  (arg1)->postScale((OpenSim::ScaleSet const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  OpenSim::SimmModel *arg2 = (OpenSim::SimmModel *) 0 ;
  OpenSim::SimmKinematicsEngine *arg3 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  arg2 = *(OpenSim::SimmModel **)&jarg2; 
  arg3 = *(OpenSim::SimmKinematicsEngine **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1writeSIMM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  std::ofstream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  arg2 = *(std::ofstream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ofstream & reference is null");
    return ;
  } 
  ((OpenSim::SimmMuscle const *)arg1)->writeSIMM(*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1newAttachmentPointIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  OpenSim::AttachmentPointIterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  result = (OpenSim::AttachmentPointIterator *)((OpenSim::SimmMuscle const *)arg1)->newAttachmentPointIterator();
  *(OpenSim::AttachmentPointIterator **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscle_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMuscle *arg1 = (OpenSim::SimmMuscle *) 0 ;
  OpenSim::SimmKinematicsEngine *arg2 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscle **)&jarg1; 
  arg2 = *(OpenSim::SimmKinematicsEngine **)&jarg2; 
  ((OpenSim::SimmMuscle const *)arg1)->peteTest(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMuscleGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscleGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmMuscleGroup *)new OpenSim::SimmMuscleGroup();
  *(OpenSim::SimmMuscleGroup **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMuscleGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscleGroup *arg1 = 0 ;
  OpenSim::SimmMuscleGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleGroup **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMuscleGroup const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmMuscleGroup *)new OpenSim::SimmMuscleGroup((OpenSim::SimmMuscleGroup const &)*arg1);
  *(OpenSim::SimmMuscleGroup **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMuscleGroup_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmMuscleGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmMuscleGroup *)new OpenSim::SimmMuscleGroup(arg1);
  *(OpenSim::SimmMuscleGroup **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmMuscleGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMuscleGroup *arg1 = (OpenSim::SimmMuscleGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleGroup **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscleGroup_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscleGroup *arg1 = (OpenSim::SimmMuscleGroup *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleGroup **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmMuscleGroup const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscleGroup_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscleGroup *arg1 = (OpenSim::SimmMuscleGroup *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleGroup **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmMuscleGroup const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscleGroup_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMuscleGroup *arg1 = (OpenSim::SimmMuscleGroup *) 0 ;
  OpenSim::SimmMuscleGroup *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleGroup **)&jarg1; 
  arg2 = *(OpenSim::SimmMuscleGroup **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMuscleGroup const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmMuscleGroup const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscleGroup_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMuscleGroup *arg1 = (OpenSim::SimmMuscleGroup *) 0 ;
  OpenSim::SimmModel *arg2 = (OpenSim::SimmModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleGroup **)&jarg1; 
  arg2 = *(OpenSim::SimmModel **)&jarg2; 
  (arg1)->setup(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscleGroup_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::SimmMuscleGroup *arg1 = (OpenSim::SimmMuscleGroup *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleGroup **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((OpenSim::SimmMuscleGroup const *)arg1)->contains((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscleGroup_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMuscleGroup *arg1 = (OpenSim::SimmMuscleGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleGroup **)&jarg1; 
  ((OpenSim::SimmMuscleGroup const *)arg1)->peteTest();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMusclePoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmMusclePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmMusclePoint *)new OpenSim::SimmMusclePoint();
  *(OpenSim::SimmMusclePoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMusclePoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmMusclePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmMusclePoint *)new OpenSim::SimmMusclePoint(arg1);
  *(OpenSim::SimmMusclePoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMusclePoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMusclePoint *arg1 = 0 ;
  OpenSim::SimmMusclePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePoint **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMusclePoint const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmMusclePoint *)new OpenSim::SimmMusclePoint((OpenSim::SimmMusclePoint const &)*arg1);
  *(OpenSim::SimmMusclePoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmMusclePoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMusclePoint *arg1 = (OpenSim::SimmMusclePoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePoint **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMusclePoint_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMusclePoint *arg1 = (OpenSim::SimmMusclePoint *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePoint **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmMusclePoint const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMusclePoint_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmMusclePoint *arg1 = (OpenSim::SimmMusclePoint *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePoint **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmMusclePoint const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMusclePoint_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMusclePoint *arg1 = (OpenSim::SimmMusclePoint *) 0 ;
  OpenSim::SimmMusclePoint *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePoint **)&jarg1; 
  arg2 = *(OpenSim::SimmMusclePoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMusclePoint const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmMusclePoint const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMusclePoint_1getAttachment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMusclePoint *arg1 = (OpenSim::SimmMusclePoint *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePoint **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = ((OpenSim::SimmMusclePoint const *)arg1)->getAttachment();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMusclePoint_1getBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMusclePoint *arg1 = (OpenSim::SimmMusclePoint *) 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePoint **)&jarg1; 
  result = (OpenSim::SimmBody *)((OpenSim::SimmMusclePoint const *)arg1)->getBody();
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMusclePoint_1getBodyName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMusclePoint *arg1 = (OpenSim::SimmMusclePoint *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePoint **)&jarg1; 
  {
    std::string &_result_ref = ((OpenSim::SimmMusclePoint const *)arg1)->getBodyName();
    result = (std::string *) &_result_ref;
  }
  *(std::string **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMusclePoint_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMusclePoint *arg1 = (OpenSim::SimmMusclePoint *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePoint **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  (arg1)->scale(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMusclePoint_1writeSIMM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMusclePoint *arg1 = (OpenSim::SimmMusclePoint *) 0 ;
  std::ofstream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePoint **)&jarg1; 
  arg2 = *(std::ofstream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ofstream & reference is null");
    return ;
  } 
  ((OpenSim::SimmMusclePoint const *)arg1)->writeSIMM(*arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMusclePoint_1isActive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmMusclePoint *arg1 = (OpenSim::SimmMusclePoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePoint **)&jarg1; 
  result = (bool)((OpenSim::SimmMusclePoint const *)arg1)->isActive();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMusclePoint_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmMusclePoint *arg1 = (OpenSim::SimmMusclePoint *) 0 ;
  OpenSim::SimmModel *arg2 = (OpenSim::SimmModel *) 0 ;
  OpenSim::SimmKinematicsEngine *arg3 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePoint **)&jarg1; 
  arg2 = *(OpenSim::SimmModel **)&jarg2; 
  arg3 = *(OpenSim::SimmKinematicsEngine **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMusclePoint_1getDisplayer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMusclePoint *arg1 = (OpenSim::SimmMusclePoint *) 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePoint **)&jarg1; 
  result = (OpenSim::VisibleObject *)(arg1)->getDisplayer();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMusclePoint_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMusclePoint *arg1 = (OpenSim::SimmMusclePoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePoint **)&jarg1; 
  ((OpenSim::SimmMusclePoint const *)arg1)->peteTest();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMuscleViaPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscleViaPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmMuscleViaPoint *)new OpenSim::SimmMuscleViaPoint();
  *(OpenSim::SimmMuscleViaPoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMuscleViaPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmMuscleViaPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmMuscleViaPoint *)new OpenSim::SimmMuscleViaPoint(arg1);
  *(OpenSim::SimmMuscleViaPoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMuscleViaPoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscleViaPoint *arg1 = 0 ;
  OpenSim::SimmMuscleViaPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleViaPoint **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMuscleViaPoint const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmMuscleViaPoint *)new OpenSim::SimmMuscleViaPoint((OpenSim::SimmMuscleViaPoint const &)*arg1);
  *(OpenSim::SimmMuscleViaPoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmMuscleViaPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMuscleViaPoint *arg1 = (OpenSim::SimmMuscleViaPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleViaPoint **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscleViaPoint_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscleViaPoint *arg1 = (OpenSim::SimmMuscleViaPoint *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleViaPoint **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmMuscleViaPoint const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscleViaPoint_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscleViaPoint *arg1 = (OpenSim::SimmMuscleViaPoint *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleViaPoint **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmMuscleViaPoint const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscleViaPoint_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMuscleViaPoint *arg1 = (OpenSim::SimmMuscleViaPoint *) 0 ;
  OpenSim::SimmMuscleViaPoint *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleViaPoint **)&jarg1; 
  arg2 = *(OpenSim::SimmMuscleViaPoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMuscleViaPoint const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmMuscleViaPoint const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscleViaPoint_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscleViaPoint *arg1 = (OpenSim::SimmMuscleViaPoint *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleViaPoint **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = ((OpenSim::SimmMuscleViaPoint const *)arg1)->getRange();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscleViaPoint_1getCoordinateName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMuscleViaPoint *arg1 = (OpenSim::SimmMuscleViaPoint *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleViaPoint **)&jarg1; 
  {
    std::string &_result_ref = ((OpenSim::SimmMuscleViaPoint const *)arg1)->getCoordinateName();
    result = (std::string *) &_result_ref;
  }
  *(std::string **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscleViaPoint_1writeSIMM(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMuscleViaPoint *arg1 = (OpenSim::SimmMuscleViaPoint *) 0 ;
  std::ofstream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleViaPoint **)&jarg1; 
  arg2 = *(std::ofstream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ofstream & reference is null");
    return ;
  } 
  ((OpenSim::SimmMuscleViaPoint const *)arg1)->writeSIMM(*arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscleViaPoint_1isActive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmMuscleViaPoint *arg1 = (OpenSim::SimmMuscleViaPoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleViaPoint **)&jarg1; 
  result = (bool)((OpenSim::SimmMuscleViaPoint const *)arg1)->isActive();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscleViaPoint_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmMuscleViaPoint *arg1 = (OpenSim::SimmMuscleViaPoint *) 0 ;
  OpenSim::SimmModel *arg2 = (OpenSim::SimmModel *) 0 ;
  OpenSim::SimmKinematicsEngine *arg3 = (OpenSim::SimmKinematicsEngine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleViaPoint **)&jarg1; 
  arg2 = *(OpenSim::SimmModel **)&jarg2; 
  arg3 = *(OpenSim::SimmKinematicsEngine **)&jarg3; 
  (arg1)->setup(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMuscleViaPoint_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMuscleViaPoint *arg1 = (OpenSim::SimmMuscleViaPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMuscleViaPoint **)&jarg1; 
  ((OpenSim::SimmMuscleViaPoint const *)arg1)->peteTest();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetSimmMusclePoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmMusclePoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::SimmMusclePoint > *)new OpenSim::Set<OpenSim::SimmMusclePoint >();
  *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmMusclePoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::SimmMusclePoint > *)new OpenSim::Set<OpenSim::SimmMusclePoint >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmMusclePoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::SimmMusclePoint > *)new OpenSim::Set<OpenSim::SimmMusclePoint >(arg1);
  *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmMusclePoint_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::SimmMusclePoint > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::SimmMusclePoint > *)new OpenSim::Set<OpenSim::SimmMusclePoint >((OpenSim::Set<OpenSim::SimmMusclePoint > const &)*arg1);
  *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::SimmMusclePoint > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::SimmMusclePoint > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmMusclePoint > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmMusclePoint > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmMusclePoint > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  OpenSim::SimmMusclePoint *arg2 = (OpenSim::SimmMusclePoint *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::SimmMusclePoint **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::SimmMusclePoint > const *)arg1)->getIndex((OpenSim::SimmMusclePoint const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  OpenSim::SimmMusclePoint *arg2 = (OpenSim::SimmMusclePoint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::SimmMusclePoint **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::SimmMusclePoint > const *)arg1)->getIndex((OpenSim::SimmMusclePoint const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::SimmMusclePoint > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::SimmMusclePoint > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  OpenSim::SimmMusclePoint *arg2 = (OpenSim::SimmMusclePoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::SimmMusclePoint **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::SimmMusclePoint > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::SimmMusclePoint > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::SimmMusclePoint > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  int arg2 ;
  OpenSim::SimmMusclePoint *arg3 = (OpenSim::SimmMusclePoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::SimmMusclePoint **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  OpenSim::SimmMusclePoint *arg2 = (OpenSim::SimmMusclePoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::SimmMusclePoint **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::SimmMusclePoint const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  int arg2 ;
  OpenSim::SimmMusclePoint *arg3 = (OpenSim::SimmMusclePoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::SimmMusclePoint **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  int arg2 ;
  OpenSim::SimmMusclePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::SimmMusclePoint *)((OpenSim::Set<OpenSim::SimmMusclePoint > const *)arg1)->get(arg2);
  *(OpenSim::SimmMusclePoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::SimmMusclePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::SimmMusclePoint *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::SimmMusclePoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  OpenSim::SimmMusclePoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  result = (OpenSim::SimmMusclePoint *)((OpenSim::Set<OpenSim::SimmMusclePoint > const *)arg1)->getLast();
  *(OpenSim::SimmMusclePoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  OpenSim::SimmMusclePoint *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::SimmMusclePoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMusclePoint const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::SimmMusclePoint > const *)arg1)->searchBinary((OpenSim::SimmMusclePoint const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  OpenSim::SimmMusclePoint *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::SimmMusclePoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMusclePoint const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::SimmMusclePoint > const *)arg1)->searchBinary((OpenSim::SimmMusclePoint const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  OpenSim::SimmMusclePoint *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::SimmMusclePoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMusclePoint const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::SimmMusclePoint > const *)arg1)->searchBinary((OpenSim::SimmMusclePoint const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMusclePoint_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMusclePoint > *arg1 = (OpenSim::Set<OpenSim::SimmMusclePoint > *) 0 ;
  OpenSim::SimmMusclePoint *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1; 
  arg2 = *(OpenSim::SimmMusclePoint **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMusclePoint const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::SimmMusclePoint > const *)arg1)->searchBinary((OpenSim::SimmMusclePoint const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMusclePointSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmMusclePointSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmMusclePointSet *)new OpenSim::SimmMusclePointSet();
  *(OpenSim::SimmMusclePointSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMusclePointSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMusclePointSet *arg1 = 0 ;
  OpenSim::SimmMusclePointSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePointSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMusclePointSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmMusclePointSet *)new OpenSim::SimmMusclePointSet((OpenSim::SimmMusclePointSet const &)*arg1);
  *(OpenSim::SimmMusclePointSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmMusclePointSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMusclePointSet *arg1 = (OpenSim::SimmMusclePointSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMusclePointSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmPath_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmPath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmPath *)new OpenSim::SimmPath();
  *(OpenSim::SimmPath **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmPath_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  OpenSim::JointPath arg1 ;
  OpenSim::SimmBody *arg2 = (OpenSim::SimmBody *) 0 ;
  OpenSim::SimmBody *arg3 = (OpenSim::SimmBody *) 0 ;
  OpenSim::SimmPath *result = 0 ;
  OpenSim::JointPath *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(OpenSim::JointPath **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenSim::JointPath");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(OpenSim::SimmBody **)&jarg2; 
  arg3 = *(OpenSim::SimmBody **)&jarg3; 
  result = (OpenSim::SimmPath *)new OpenSim::SimmPath(arg1,(OpenSim::SimmBody const *)arg2,(OpenSim::SimmBody const *)arg3);
  *(OpenSim::SimmPath **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmPath(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmPath *arg1 = (OpenSim::SimmPath *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPath **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPath_1invalidate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmPath *arg1 = (OpenSim::SimmPath *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPath **)&jarg1; 
  (arg1)->invalidate();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPath_1getFromBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmPath *arg1 = (OpenSim::SimmPath *) 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPath **)&jarg1; 
  result = (OpenSim::SimmBody *)(arg1)->getFromBody();
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPath_1getToBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmPath *arg1 = (OpenSim::SimmPath *) 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPath **)&jarg1; 
  result = (OpenSim::SimmBody *)(arg1)->getToBody();
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPath_1getPath(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmPath *arg1 = (OpenSim::SimmPath *) 0 ;
  OpenSim::JointPath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPath **)&jarg1; 
  {
    OpenSim::JointPath const &_result_ref = ((OpenSim::SimmPath const *)arg1)->getPath();
    result = (OpenSim::JointPath *) &_result_ref;
  }
  *(OpenSim::JointPath **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPath_1getForwardTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmPath *arg1 = (OpenSim::SimmPath *) 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPath **)&jarg1; 
  {
    OpenSim::Transform &_result_ref = (arg1)->getForwardTransform();
    result = (OpenSim::Transform *) &_result_ref;
  }
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPath_1getInverseTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmPath *arg1 = (OpenSim::SimmPath *) 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPath **)&jarg1; 
  {
    OpenSim::Transform &_result_ref = (arg1)->getInverseTransform();
    result = (OpenSim::Transform *) &_result_ref;
  }
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPath_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmPath *arg1 = (OpenSim::SimmPath *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPath **)&jarg1; 
  ((OpenSim::SimmPath const *)arg1)->peteTest();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmPathMatrix(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  OpenSim::SimmPathMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (OpenSim::SimmPathMatrix *)new OpenSim::SimmPathMatrix(arg1);
  *(OpenSim::SimmPathMatrix **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmPathMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmPathMatrix *arg1 = (OpenSim::SimmPathMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPathMatrix **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPathMatrix_1initTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::SimmPathMatrix *arg1 = (OpenSim::SimmPathMatrix *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPathMatrix **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->initTable(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPathMatrix_1invalidate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmPathMatrix *arg1 = (OpenSim::SimmPathMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPathMatrix **)&jarg1; 
  (arg1)->invalidate();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPathMatrix_1getSimmPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  OpenSim::SimmPathMatrix *arg1 = (OpenSim::SimmPathMatrix *) 0 ;
  OpenSim::SimmBody *arg2 = (OpenSim::SimmBody *) 0 ;
  OpenSim::SimmBody *arg3 = (OpenSim::SimmBody *) 0 ;
  OpenSim::SimmPath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPathMatrix **)&jarg1; 
  arg2 = *(OpenSim::SimmBody **)&jarg2; 
  arg3 = *(OpenSim::SimmBody **)&jarg3; 
  result = (OpenSim::SimmPath *)((OpenSim::SimmPathMatrix const *)arg1)->getSimmPath((OpenSim::SimmBody const *)arg2,(OpenSim::SimmBody const *)arg3);
  *(OpenSim::SimmPath **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPathMatrix_1getPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  OpenSim::SimmPathMatrix *arg1 = (OpenSim::SimmPathMatrix *) 0 ;
  OpenSim::SimmBody *arg2 = (OpenSim::SimmBody *) 0 ;
  OpenSim::SimmBody *arg3 = (OpenSim::SimmBody *) 0 ;
  OpenSim::JointPath *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPathMatrix **)&jarg1; 
  arg2 = *(OpenSim::SimmBody **)&jarg2; 
  arg3 = *(OpenSim::SimmBody **)&jarg3; 
  result = (OpenSim::JointPath *)((OpenSim::SimmPathMatrix const *)arg1)->getPath((OpenSim::SimmBody const *)arg2,(OpenSim::SimmBody const *)arg3);
  *(OpenSim::JointPath **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPathMatrix_1setPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::SimmPathMatrix *arg1 = (OpenSim::SimmPathMatrix *) 0 ;
  OpenSim::SimmBody *arg2 = (OpenSim::SimmBody *) 0 ;
  OpenSim::SimmBody *arg3 = (OpenSim::SimmBody *) 0 ;
  OpenSim::JointPath arg4 ;
  OpenSim::JointPath *argp4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPathMatrix **)&jarg1; 
  arg2 = *(OpenSim::SimmBody **)&jarg2; 
  arg3 = *(OpenSim::SimmBody **)&jarg3; 
  argp4 = *(OpenSim::JointPath **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenSim::JointPath");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->setPath((OpenSim::SimmBody const *)arg2,(OpenSim::SimmBody const *)arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPathMatrix_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmPathMatrix *arg1 = (OpenSim::SimmPathMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPathMatrix **)&jarg1; 
  ((OpenSim::SimmPathMatrix const *)arg1)->peteTest();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmPoint *)new OpenSim::SimmPoint();
  *(OpenSim::SimmPoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1) {
  jlong jresult = 0 ;
  double *arg1 ;
  OpenSim::SimmPoint *result = 0 ;
  jdouble *jarr1 ;
  
  (void)jenv;
  (void)jcls;
  if (jarg1 && jenv->GetArrayLength(jarg1) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr1, &arg1, jarg1)) return 0; 
  result = (OpenSim::SimmPoint *)new OpenSim::SimmPoint(arg1);
  *(OpenSim::SimmPoint **)&jresult = result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr1, arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmPoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmPoint *arg1 = 0 ;
  OpenSim::SimmPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPoint **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmPoint const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmPoint *)new OpenSim::SimmPoint((OpenSim::SimmPoint const &)*arg1);
  *(OpenSim::SimmPoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmPoint *arg1 = (OpenSim::SimmPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPoint **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPoint_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmPoint *arg1 = (OpenSim::SimmPoint *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPoint **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmPoint const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenSim::SimmPoint *arg1 = (OpenSim::SimmPoint *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPoint **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmPoint *arg1 = (OpenSim::SimmPoint *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPoint **)&jarg1; 
  result = (double *)(arg1)->get();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPoint_1isVisible(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmPoint *arg1 = (OpenSim::SimmPoint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPoint **)&jarg1; 
  result = (bool)((OpenSim::SimmPoint const *)arg1)->isVisible();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmPoint_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmPoint *arg1 = (OpenSim::SimmPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmPoint **)&jarg1; 
  ((OpenSim::SimmPoint const *)arg1)->peteTest();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmRotationDof_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmRotationDof *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmRotationDof *)new OpenSim::SimmRotationDof();
  *(OpenSim::SimmRotationDof **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmRotationDof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmRotationDof *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmRotationDof *)new OpenSim::SimmRotationDof(arg1);
  *(OpenSim::SimmRotationDof **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmRotationDof_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmRotationDof *arg1 = 0 ;
  OpenSim::SimmRotationDof *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmRotationDof const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmRotationDof *)new OpenSim::SimmRotationDof((OpenSim::SimmRotationDof const &)*arg1);
  *(OpenSim::SimmRotationDof **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmRotationDof(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmRotationDof const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmRotationDof const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  OpenSim::SimmRotationDof *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  arg2 = *(OpenSim::SimmRotationDof **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmRotationDof const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmRotationDof const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1getAxis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmRotationDof const *)arg1)->getAxis(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1getAxis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  {
    OpenSim::Array<double > const &_result_ref = ((OpenSim::SimmRotationDof const *)arg1)->getAxis();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1getAxisPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  result = (double *)((OpenSim::SimmRotationDof const *)arg1)->getAxisPtr();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  result = (double)(arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1getDofType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  OpenSim::SimmDof::DofType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  result = (OpenSim::SimmDof::DofType)((OpenSim::SimmRotationDof const *)arg1)->getDofType();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmRotationDof_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmRotationDof *arg1 = (OpenSim::SimmRotationDof *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmRotationDof **)&jarg1; 
  (arg1)->peteTest();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmStep_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmStep *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmStep *)new OpenSim::SimmStep();
  *(OpenSim::SimmStep **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmStep_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmJoint *arg1 = (OpenSim::SimmJoint *) 0 ;
  OpenSim::SimmStep::Direction arg2 ;
  OpenSim::SimmStep *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmJoint **)&jarg1; 
  arg2 = (OpenSim::SimmStep::Direction)jarg2; 
  result = (OpenSim::SimmStep *)new OpenSim::SimmStep(arg1,arg2);
  *(OpenSim::SimmStep **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmStep(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmStep *arg1 = (OpenSim::SimmStep *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmStep **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmStep_1getDirection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmStep *arg1 = (OpenSim::SimmStep *) 0 ;
  OpenSim::SimmStep::Direction result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmStep **)&jarg1; 
  result = (OpenSim::SimmStep::Direction)((OpenSim::SimmStep const *)arg1)->getDirection();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmStep_1getJoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmStep *arg1 = (OpenSim::SimmStep *) 0 ;
  OpenSim::SimmJoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmStep **)&jarg1; 
  result = (OpenSim::SimmJoint *)((OpenSim::SimmStep const *)arg1)->getJoint();
  *(OpenSim::SimmJoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmStep_1getJointTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmStep *arg1 = (OpenSim::SimmStep *) 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmStep **)&jarg1; 
  {
    OpenSim::Transform &_result_ref = (arg1)->getJointTransform();
    result = (OpenSim::Transform *) &_result_ref;
  }
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmStep_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmStep *arg1 = (OpenSim::SimmStep *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmStep **)&jarg1; 
  ((OpenSim::SimmStep const *)arg1)->peteTest();
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_TX_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *) "tx";
  
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_TY_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *) "ty";
  
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_TZ_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *) "tz";
  
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1xTranslation_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::SimmTranslationDof::AxisIndex result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmTranslationDof::AxisIndex)OpenSim::SimmTranslationDof::xTranslation;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmTranslationDof_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmTranslationDof *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmTranslationDof *)new OpenSim::SimmTranslationDof();
  *(OpenSim::SimmTranslationDof **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmTranslationDof_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmTranslationDof *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmTranslationDof *)new OpenSim::SimmTranslationDof(arg1);
  *(OpenSim::SimmTranslationDof **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmTranslationDof_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmTranslationDof *arg1 = 0 ;
  OpenSim::SimmTranslationDof *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmTranslationDof const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmTranslationDof *)new OpenSim::SimmTranslationDof((OpenSim::SimmTranslationDof const &)*arg1);
  *(OpenSim::SimmTranslationDof **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmTranslationDof(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmTranslationDof const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmTranslationDof const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1updateFromXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  (arg1)->updateFromXMLNode();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  OpenSim::SimmTranslationDof *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  arg2 = *(OpenSim::SimmTranslationDof **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmTranslationDof const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmTranslationDof const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1getAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::SimmTranslationDof const *)arg1)->getAxis(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1getAxisPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  result = (double *)((OpenSim::SimmTranslationDof const *)arg1)->getAxisPtr();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  result = (double)(arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1getDofType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  OpenSim::SimmDof::DofType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  result = (OpenSim::SimmDof::DofType)((OpenSim::SimmTranslationDof const *)arg1)->getDofType();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1getTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->getTranslation(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1getAxisIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  OpenSim::SimmTranslationDof::AxisIndex result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  result = (OpenSim::SimmTranslationDof::AxisIndex)((OpenSim::SimmTranslationDof const *)arg1)->getAxisIndex();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmTranslationDof_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmTranslationDof *arg1 = (OpenSim::SimmTranslationDof *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmTranslationDof **)&jarg1; 
  (arg1)->peteTest();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmUnits_1simmUnknownUnits_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::SimmUnits::UnitType result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmUnits::UnitType)OpenSim::SimmUnits::simmUnknownUnits;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmUnits_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmUnits *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmUnits *)new OpenSim::SimmUnits();
  *(OpenSim::SimmUnits **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmUnits_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmUnits *arg1 = 0 ;
  OpenSim::SimmUnits *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmUnits **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmUnits const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmUnits *)new OpenSim::SimmUnits((OpenSim::SimmUnits const &)*arg1);
  *(OpenSim::SimmUnits **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmUnits_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::SimmUnits *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmUnits *)new OpenSim::SimmUnits(*arg1);
  *(OpenSim::SimmUnits **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmUnits_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmUnits::UnitType arg1 ;
  OpenSim::SimmUnits *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OpenSim::SimmUnits::UnitType)jarg1; 
  result = (OpenSim::SimmUnits *)new OpenSim::SimmUnits(arg1);
  *(OpenSim::SimmUnits **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmUnits(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmUnits *arg1 = (OpenSim::SimmUnits *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmUnits **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmUnits_1convertTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  OpenSim::SimmUnits *arg1 = (OpenSim::SimmUnits *) 0 ;
  OpenSim::SimmUnits::UnitType arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmUnits **)&jarg1; 
  arg2 = (OpenSim::SimmUnits::UnitType)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)((OpenSim::SimmUnits const *)arg1)->convertTo(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmUnits_1convertTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmUnits *arg1 = (OpenSim::SimmUnits *) 0 ;
  OpenSim::SimmUnits::UnitType arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmUnits **)&jarg1; 
  arg2 = (OpenSim::SimmUnits::UnitType)jarg2; 
  result = (double)((OpenSim::SimmUnits const *)arg1)->convertTo(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmUnits_1convertTo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmUnits *arg1 = (OpenSim::SimmUnits *) 0 ;
  OpenSim::SimmUnits *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmUnits **)&jarg1; 
  arg2 = *(OpenSim::SimmUnits **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmUnits const & reference is null");
    return 0;
  } 
  result = (double)((OpenSim::SimmUnits const *)arg1)->convertTo((OpenSim::SimmUnits const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmUnits_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmUnits *arg1 = (OpenSim::SimmUnits *) 0 ;
  OpenSim::SimmUnits::UnitType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmUnits **)&jarg1; 
  result = (OpenSim::SimmUnits::UnitType)((OpenSim::SimmUnits const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmUnits_1getLabel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmUnits *arg1 = (OpenSim::SimmUnits *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmUnits **)&jarg1; 
  result = (char *)((OpenSim::SimmUnits const *)arg1)->getLabel();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmUnits_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmUnits *arg1 = (OpenSim::SimmUnits *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmUnits **)&jarg1; 
  ((OpenSim::SimmUnits const *)arg1)->peteTest();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmModelIterator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = 0 ;
  OpenSim::SimmBody *arg2 = (OpenSim::SimmBody *) 0 ;
  OpenSim::SimmModelIterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmModel & reference is null");
    return 0;
  } 
  arg2 = *(OpenSim::SimmBody **)&jarg2; 
  result = (OpenSim::SimmModelIterator *)new OpenSim::SimmModelIterator(*arg1,arg2);
  *(OpenSim::SimmModelIterator **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmModelIterator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = 0 ;
  OpenSim::SimmModelIterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmModel & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmModelIterator *)new OpenSim::SimmModelIterator(*arg1);
  *(OpenSim::SimmModelIterator **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmModelIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmModelIterator *arg1 = (OpenSim::SimmModelIterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModelIterator **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModelIterator_1getNextBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmModelIterator *arg1 = (OpenSim::SimmModelIterator *) 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModelIterator **)&jarg1; 
  result = (OpenSim::SimmBody *)(arg1)->getNextBody();
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModelIterator_1getCurrentBody(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmModelIterator *arg1 = (OpenSim::SimmModelIterator *) 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModelIterator **)&jarg1; 
  result = (OpenSim::SimmBody *)(arg1)->getCurrentBody();
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModelIterator_1getCurrentJoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmModelIterator *arg1 = (OpenSim::SimmModelIterator *) 0 ;
  OpenSim::SimmJoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModelIterator **)&jarg1; 
  result = (OpenSim::SimmJoint *)(arg1)->getCurrentJoint();
  *(OpenSim::SimmJoint **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModelIterator_1getNumAncestors(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmModelIterator *arg1 = (OpenSim::SimmModelIterator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModelIterator **)&jarg1; 
  result = (int)(arg1)->getNumAncestors();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModelIterator_1getAncestor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmModelIterator *arg1 = (OpenSim::SimmModelIterator *) 0 ;
  int arg2 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModelIterator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::SimmBody *)(arg1)->getAncestor(arg2);
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModelIterator_1getAncestor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmModelIterator *arg1 = (OpenSim::SimmModelIterator *) 0 ;
  OpenSim::SimmBody *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModelIterator **)&jarg1; 
  result = (OpenSim::SimmBody *)(arg1)->getAncestor();
  *(OpenSim::SimmBody **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmModelIterator_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmModelIterator *arg1 = (OpenSim::SimmModelIterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModelIterator **)&jarg1; 
  (arg1)->reset();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmGenericModelParams_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmGenericModelParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmGenericModelParams *)new OpenSim::SimmGenericModelParams();
  *(OpenSim::SimmGenericModelParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmGenericModelParams_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmGenericModelParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmGenericModelParams *)new OpenSim::SimmGenericModelParams(arg1);
  *(OpenSim::SimmGenericModelParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmGenericModelParams_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmGenericModelParams *arg1 = 0 ;
  OpenSim::SimmGenericModelParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmGenericModelParams **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmGenericModelParams const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmGenericModelParams *)new OpenSim::SimmGenericModelParams((OpenSim::SimmGenericModelParams const &)*arg1);
  *(OpenSim::SimmGenericModelParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmGenericModelParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmGenericModelParams *arg1 = (OpenSim::SimmGenericModelParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmGenericModelParams **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmGenericModelParams_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmGenericModelParams *arg1 = (OpenSim::SimmGenericModelParams *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmGenericModelParams **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmGenericModelParams const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmGenericModelParams_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmGenericModelParams *arg1 = (OpenSim::SimmGenericModelParams *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmGenericModelParams **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmGenericModelParams const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmGenericModelParams_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmGenericModelParams *arg1 = (OpenSim::SimmGenericModelParams *) 0 ;
  OpenSim::SimmGenericModelParams *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmGenericModelParams **)&jarg1; 
  arg2 = *(OpenSim::SimmGenericModelParams **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmGenericModelParams const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmGenericModelParams const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmGenericModelParams_1processModel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmGenericModelParams *arg1 = (OpenSim::SimmGenericModelParams *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenSim::SimmModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmGenericModelParams **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (OpenSim::SimmModel *)(arg1)->processModel((char const *)arg2);
  *(OpenSim::SimmModel **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmGenericModelParams_1processModel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmGenericModelParams *arg1 = (OpenSim::SimmGenericModelParams *) 0 ;
  OpenSim::SimmModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmGenericModelParams **)&jarg1; 
  result = (OpenSim::SimmModel *)(arg1)->processModel();
  *(OpenSim::SimmModel **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmGenericModelParams_1registerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::SimmGenericModelParams::registerTypes();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmGenericModelParams_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmGenericModelParams *arg1 = (OpenSim::SimmGenericModelParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmGenericModelParams **)&jarg1; 
  ((OpenSim::SimmGenericModelParams const *)arg1)->peteTest();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmGenericModelParams_1addMarker(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmGenericModelParams *arg1 = (OpenSim::SimmGenericModelParams *) 0 ;
  OpenSim::SimmMarker *arg2 = (OpenSim::SimmMarker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmGenericModelParams **)&jarg1; 
  arg2 = *(OpenSim::SimmMarker **)&jarg2; 
  (arg1)->addMarker(arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmGenericModelParams_1getModelFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmGenericModelParams *arg1 = (OpenSim::SimmGenericModelParams *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmGenericModelParams **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::SimmGenericModelParams const *)arg1)->getModelFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmGenericModelParams_1setModelFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmGenericModelParams *arg1 = (OpenSim::SimmGenericModelParams *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmGenericModelParams **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setModelFileName((std::string const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmGenericModelParams_1getMarkerSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmGenericModelParams *arg1 = (OpenSim::SimmGenericModelParams *) 0 ;
  OpenSim::SimmMarkerSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmGenericModelParams **)&jarg1; 
  {
    OpenSim::SimmMarkerSet &_result_ref = (arg1)->getMarkerSet();
    result = (OpenSim::SimmMarkerSet *) &_result_ref;
  }
  *(OpenSim::SimmMarkerSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmScalingParams_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmScalingParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmScalingParams *)new OpenSim::SimmScalingParams();
  *(OpenSim::SimmScalingParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmScalingParams_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmScalingParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmScalingParams *)new OpenSim::SimmScalingParams(arg1);
  *(OpenSim::SimmScalingParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmScalingParams_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmScalingParams *arg1 = 0 ;
  OpenSim::SimmScalingParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmScalingParams const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmScalingParams *)new OpenSim::SimmScalingParams((OpenSim::SimmScalingParams const &)*arg1);
  *(OpenSim::SimmScalingParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmScalingParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmScalingParams const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmScalingParams const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  OpenSim::SimmScalingParams *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  arg2 = *(OpenSim::SimmScalingParams **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmScalingParams const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmScalingParams const &)*arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1getPreserveMassDist(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  result = (bool)((OpenSim::SimmScalingParams const *)arg1)->getPreserveMassDist();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1getScaleSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  OpenSim::SimmModel *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  OpenSim::ScaleSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  arg2 = *(OpenSim::SimmModel **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmModel & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    OpenSim::ScaleSet const &_result_ref = (arg1)->getScaleSet(*arg2,(char const *)arg3);
    result = (OpenSim::ScaleSet *) &_result_ref;
  }
  *(OpenSim::ScaleSet **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1writeOutputFiles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  OpenSim::SimmModel *arg2 = (OpenSim::SimmModel *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  arg2 = *(OpenSim::SimmModel **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeOutputFiles(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1writeOutputFiles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  OpenSim::SimmModel *arg2 = (OpenSim::SimmModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  arg2 = *(OpenSim::SimmModel **)&jarg2; 
  (arg1)->writeOutputFiles(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1registerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::SimmScalingParams::registerTypes();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  ((OpenSim::SimmScalingParams const *)arg1)->peteTest();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1addMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  SimmMeasurement *arg2 = (SimmMeasurement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  arg2 = *(SimmMeasurement **)&jarg2; 
  (arg1)->addMeasurement(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1addScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  OpenSim::Scale *arg2 = (OpenSim::Scale *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  arg2 = *(OpenSim::Scale **)&jarg2; 
  (arg1)->addScale(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1getMeasurementSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  SimmMeasurementSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  {
    SimmMeasurementSet &_result_ref = (arg1)->getMeasurementSet();
    result = (SimmMeasurementSet *) &_result_ref;
  }
  *(SimmMeasurementSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1setMeasurementSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  SimmMeasurementSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  arg2 = *(SimmMeasurementSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimmMeasurementSet & reference is null");
    return ;
  } 
  (arg1)->setMeasurementSet(*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1getScaleSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  OpenSim::ScaleSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  {
    OpenSim::ScaleSet &_result_ref = (arg1)->getScaleSet();
    result = (OpenSim::ScaleSet *) &_result_ref;
  }
  *(OpenSim::ScaleSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1setScaleSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet & reference is null");
    return ;
  } 
  (arg1)->setScaleSet(*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1getTimeRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  SwigValueWrapper<OpenSim::Array<double > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  result = (arg1)->getTimeRange();
  *(OpenSim::Array<double > **)&jresult = new OpenSim::Array<double >((OpenSim::Array<double > &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1setTimeRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  SwigValueWrapper<OpenSim::Array<double > > arg2 ;
  OpenSim::Array<double > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  argp2 = *(OpenSim::Array<double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenSim::Array<double >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTimeRange(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1setPreserveMassDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPreserveMassDist(arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1getScalingOrder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  SwigValueWrapper<OpenSim::Array<std::string > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  result = (arg1)->getScalingOrder();
  *(OpenSim::Array<std::string > **)&jresult = new OpenSim::Array<std::string >((OpenSim::Array<std::string > &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1setScalingOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > & reference is null");
    return ;
  } 
  (arg1)->setScalingOrder(*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1getMarkerFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getMarkerFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1setMarkerFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMarkerFileName((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1setMaxMarkerMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxMarkerMovement(arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1getMaxMarkerMovement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  result = (double)((OpenSim::SimmScalingParams const *)arg1)->getMaxMarkerMovement();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1getOutputJointFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputJointFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1setOutputJointFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputJointFileName((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1getOutputMuscleFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputMuscleFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1setOutputMuscleFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputMuscleFileName((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1getOutputModelFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputModelFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1setOutputModelFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputModelFileName((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1getOutputScaleFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputScaleFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalingParams_1setOutputScaleFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmScalingParams *arg1 = (OpenSim::SimmScalingParams *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalingParams **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputScaleFileName((std::string const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMarkerPlacementParams_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmMarkerPlacementParams *)new OpenSim::SimmMarkerPlacementParams();
  *(OpenSim::SimmMarkerPlacementParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMarkerPlacementParams_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmMarkerPlacementParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmMarkerPlacementParams *)new OpenSim::SimmMarkerPlacementParams(arg1);
  *(OpenSim::SimmMarkerPlacementParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMarkerPlacementParams_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = 0 ;
  OpenSim::SimmMarkerPlacementParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMarkerPlacementParams const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmMarkerPlacementParams *)new OpenSim::SimmMarkerPlacementParams((OpenSim::SimmMarkerPlacementParams const &)*arg1);
  *(OpenSim::SimmMarkerPlacementParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmMarkerPlacementParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmMarkerPlacementParams const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmMarkerPlacementParams const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  OpenSim::SimmMarkerPlacementParams *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  arg2 = *(OpenSim::SimmMarkerPlacementParams **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMarkerPlacementParams const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmMarkerPlacementParams const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  ((OpenSim::SimmMarkerPlacementParams const *)arg1)->peteTest();
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1isDefault(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  result = (bool)((OpenSim::SimmMarkerPlacementParams const *)arg1)->isDefault();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1getMarkerSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  OpenSim::SimmMarkerSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  {
    OpenSim::SimmMarkerSet &_result_ref = ((OpenSim::SimmMarkerPlacementParams const *)arg1)->getMarkerSet();
    result = (OpenSim::SimmMarkerSet *) &_result_ref;
  }
  *(OpenSim::SimmMarkerSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1setMarkerSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  OpenSim::SimmMarkerSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  arg2 = *(OpenSim::SimmMarkerSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMarkerSet const & reference is null");
    return ;
  } 
  (arg1)->setMarkerSet((OpenSim::SimmMarkerSet const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1getStaticPoseFilename(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::SimmMarkerPlacementParams const *)arg1)->getStaticPoseFilename();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1setStaticPoseFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setStaticPoseFilename((std::string const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1getTimeRange(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  SwigValueWrapper<OpenSim::Array<double > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  result = (arg1)->getTimeRange();
  *(OpenSim::Array<double > **)&jresult = new OpenSim::Array<double >((OpenSim::Array<double > &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1setTimeRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  SwigValueWrapper<OpenSim::Array<double > > arg2 ;
  OpenSim::Array<double > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  argp2 = *(OpenSim::Array<double > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null OpenSim::Array<double >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setTimeRange(arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1getCoordinateFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::SimmMarkerPlacementParams const *)arg1)->getCoordinateFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1getCoordinateSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  OpenSim::SimmCoordinateSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  {
    OpenSim::SimmCoordinateSet &_result_ref = (arg1)->getCoordinateSet();
    result = (OpenSim::SimmCoordinateSet *) &_result_ref;
  }
  *(OpenSim::SimmCoordinateSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1getMaxMarkerMovement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  result = (double)((OpenSim::SimmMarkerPlacementParams const *)arg1)->getMaxMarkerMovement();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1setMaxMarkerMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxMarkerMovement(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1processModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  OpenSim::SimmModel *arg2 = (OpenSim::SimmModel *) 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  arg2 = *(OpenSim::SimmModel **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->processModel(arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1addCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  OpenSim::SimmCoordinate *arg2 = (OpenSim::SimmCoordinate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  arg2 = *(OpenSim::SimmCoordinate **)&jarg2; 
  (arg1)->addCoordinate(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1writeOutputFiles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4) {
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  OpenSim::SimmModel *arg2 = (OpenSim::SimmModel *) 0 ;
  OpenSim::Storage *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  arg2 = *(OpenSim::SimmModel **)&jarg2; 
  arg3 = *(OpenSim::Storage **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  ((OpenSim::SimmMarkerPlacementParams const *)arg1)->writeOutputFiles(arg2,*arg3,(char const *)arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1writeOutputFiles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  OpenSim::SimmModel *arg2 = (OpenSim::SimmModel *) 0 ;
  OpenSim::Storage *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  arg2 = *(OpenSim::SimmModel **)&jarg2; 
  arg3 = *(OpenSim::Storage **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  ((OpenSim::SimmMarkerPlacementParams const *)arg1)->writeOutputFiles(arg2,*arg3);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1getOutputModelFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputModelFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1setOutputModelFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputModelFileName((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1getOutputJointFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputJointFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1setOutputJointFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputJointFileName((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1getOutputMuscleFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputMuscleFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1setOutputMuscleFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputMuscleFileName((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1getOutputMarkerFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputMarkerFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1setOutputMarkerFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputMarkerFileName((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1getOutputMotionFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getOutputMotionFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerPlacementParams_1setOutputMotionFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmMarkerPlacementParams *arg1 = (OpenSim::SimmMarkerPlacementParams *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerPlacementParams **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputMotionFileName((std::string const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmIKTrialParams_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmIKTrialParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmIKTrialParams *)new OpenSim::SimmIKTrialParams();
  *(OpenSim::SimmIKTrialParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmIKTrialParams_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmIKTrialParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmIKTrialParams *)new OpenSim::SimmIKTrialParams(arg1);
  *(OpenSim::SimmIKTrialParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmIKTrialParams_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmIKTrialParams *arg1 = 0 ;
  OpenSim::SimmIKTrialParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmIKTrialParams const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmIKTrialParams *)new OpenSim::SimmIKTrialParams((OpenSim::SimmIKTrialParams const &)*arg1);
  *(OpenSim::SimmIKTrialParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmIKTrialParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmIKTrialParams const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmIKTrialParams const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  OpenSim::SimmIKTrialParams *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  arg2 = *(OpenSim::SimmIKTrialParams **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmIKTrialParams const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmIKTrialParams const &)*arg2);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1getStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  result = (double)((OpenSim::SimmIKTrialParams const *)arg1)->getStartTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1getEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  result = (double)((OpenSim::SimmIKTrialParams const *)arg1)->getEndTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1getKinematicsSmoothing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  result = (double)((OpenSim::SimmIKTrialParams const *)arg1)->getKinematicsSmoothing();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1getGroundReactionSmoothing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  result = (double)((OpenSim::SimmIKTrialParams const *)arg1)->getGroundReactionSmoothing();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1getIncludeMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  result = (bool)((OpenSim::SimmIKTrialParams const *)arg1)->getIncludeMarkers();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1setStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setStartTime(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1setEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setEndTime(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1setIncludeMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIncludeMarkers(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1findFrameRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return ;
  } 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  arg4 = *(int **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  ((OpenSim::SimmIKTrialParams const *)arg1)->findFrameRange((OpenSim::Storage const &)*arg2,*arg3,*arg4);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1getCoordinateValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  OpenSim::SimmModel *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  OpenSim::SimmMotionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  arg2 = *(OpenSim::SimmModel **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmModel & reference is null");
    return 0;
  } 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (OpenSim::SimmMotionData *)((OpenSim::SimmIKTrialParams const *)arg1)->getCoordinateValues(*arg2,(char const *)arg3);
  *(OpenSim::SimmMotionData **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1getCoordinateValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  OpenSim::SimmModel *arg2 = 0 ;
  OpenSim::SimmMotionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  arg2 = *(OpenSim::SimmModel **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmModel & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmMotionData *)((OpenSim::SimmIKTrialParams const *)arg1)->getCoordinateValues(*arg2);
  *(OpenSim::SimmMotionData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  ((OpenSim::SimmIKTrialParams const *)arg1)->peteTest();
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1getMarkerDataFilename(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  result = ((OpenSim::SimmIKTrialParams const *)arg1)->getMarkerDataFilename();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1getOutputMotionFilename(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  result = ((OpenSim::SimmIKTrialParams const *)arg1)->getOutputMotionFilename();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1setOutputMotionFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOutputMotionFilename((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1setIncludeMarkersProp(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIncludeMarkersProp(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1getIncludeMarkersProp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  result = (bool)(arg1)->getIncludeMarkersProp();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1getInputCoordinateFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::SimmIKTrialParams const *)arg1)->getInputCoordinateFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKTrialParams_1setInputCoordinateFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmIKTrialParams *arg1 = (OpenSim::SimmIKTrialParams *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParams **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setInputCoordinateFileName((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetSimmIKTrialParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmIKTrialParams_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::SimmIKTrialParams > *)new OpenSim::Set<OpenSim::SimmIKTrialParams >();
  *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmIKTrialParams_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::SimmIKTrialParams > *)new OpenSim::Set<OpenSim::SimmIKTrialParams >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmIKTrialParams_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::SimmIKTrialParams > *)new OpenSim::Set<OpenSim::SimmIKTrialParams >(arg1);
  *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmIKTrialParams_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::SimmIKTrialParams > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::SimmIKTrialParams > *)new OpenSim::Set<OpenSim::SimmIKTrialParams >((OpenSim::Set<OpenSim::SimmIKTrialParams > const &)*arg1);
  *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::SimmIKTrialParams > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::SimmIKTrialParams > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmIKTrialParams > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmIKTrialParams > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmIKTrialParams > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  OpenSim::SimmIKTrialParams *arg2 = (OpenSim::SimmIKTrialParams *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = *(OpenSim::SimmIKTrialParams **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::SimmIKTrialParams > const *)arg1)->getIndex((OpenSim::SimmIKTrialParams const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  OpenSim::SimmIKTrialParams *arg2 = (OpenSim::SimmIKTrialParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = *(OpenSim::SimmIKTrialParams **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::SimmIKTrialParams > const *)arg1)->getIndex((OpenSim::SimmIKTrialParams const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::SimmIKTrialParams > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::SimmIKTrialParams > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  OpenSim::SimmIKTrialParams *arg2 = (OpenSim::SimmIKTrialParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = *(OpenSim::SimmIKTrialParams **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::SimmIKTrialParams > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::SimmIKTrialParams > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::SimmIKTrialParams > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  int arg2 ;
  OpenSim::SimmIKTrialParams *arg3 = (OpenSim::SimmIKTrialParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::SimmIKTrialParams **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  OpenSim::SimmIKTrialParams *arg2 = (OpenSim::SimmIKTrialParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = *(OpenSim::SimmIKTrialParams **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::SimmIKTrialParams const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  int arg2 ;
  OpenSim::SimmIKTrialParams *arg3 = (OpenSim::SimmIKTrialParams *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::SimmIKTrialParams **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  int arg2 ;
  OpenSim::SimmIKTrialParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::SimmIKTrialParams *)((OpenSim::Set<OpenSim::SimmIKTrialParams > const *)arg1)->get(arg2);
  *(OpenSim::SimmIKTrialParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::SimmIKTrialParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::SimmIKTrialParams *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::SimmIKTrialParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  OpenSim::SimmIKTrialParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  result = (OpenSim::SimmIKTrialParams *)((OpenSim::Set<OpenSim::SimmIKTrialParams > const *)arg1)->getLast();
  *(OpenSim::SimmIKTrialParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  OpenSim::SimmIKTrialParams *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = *(OpenSim::SimmIKTrialParams **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmIKTrialParams const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::SimmIKTrialParams > const *)arg1)->searchBinary((OpenSim::SimmIKTrialParams const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  OpenSim::SimmIKTrialParams *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = *(OpenSim::SimmIKTrialParams **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmIKTrialParams const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::SimmIKTrialParams > const *)arg1)->searchBinary((OpenSim::SimmIKTrialParams const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  OpenSim::SimmIKTrialParams *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = *(OpenSim::SimmIKTrialParams **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmIKTrialParams const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::SimmIKTrialParams > const *)arg1)->searchBinary((OpenSim::SimmIKTrialParams const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmIKTrialParams_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmIKTrialParams > *arg1 = (OpenSim::Set<OpenSim::SimmIKTrialParams > *) 0 ;
  OpenSim::SimmIKTrialParams *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1; 
  arg2 = *(OpenSim::SimmIKTrialParams **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmIKTrialParams const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::SimmIKTrialParams > const *)arg1)->searchBinary((OpenSim::SimmIKTrialParams const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmIKTrialParamsSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmIKTrialParamsSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmIKTrialParamsSet *)new OpenSim::SimmIKTrialParamsSet();
  *(OpenSim::SimmIKTrialParamsSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmIKTrialParamsSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmIKTrialParamsSet *arg1 = 0 ;
  OpenSim::SimmIKTrialParamsSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParamsSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmIKTrialParamsSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmIKTrialParamsSet *)new OpenSim::SimmIKTrialParamsSet((OpenSim::SimmIKTrialParamsSet const &)*arg1);
  *(OpenSim::SimmIKTrialParamsSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmIKTrialParamsSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmIKTrialParamsSet *arg1 = (OpenSim::SimmIKTrialParamsSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKTrialParamsSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmIKParams_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmIKParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmIKParams *)new OpenSim::SimmIKParams();
  *(OpenSim::SimmIKParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmIKParams_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmIKParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmIKParams *)new OpenSim::SimmIKParams(arg1);
  *(OpenSim::SimmIKParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmIKParams_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmIKParams *arg1 = 0 ;
  OpenSim::SimmIKParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKParams **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmIKParams const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmIKParams *)new OpenSim::SimmIKParams((OpenSim::SimmIKParams const &)*arg1);
  *(OpenSim::SimmIKParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmIKParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmIKParams *arg1 = (OpenSim::SimmIKParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKParams **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKParams_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmIKParams *arg1 = (OpenSim::SimmIKParams *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKParams **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmIKParams const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKParams_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmIKParams *arg1 = (OpenSim::SimmIKParams *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKParams **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmIKParams const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKParams_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmIKParams *arg1 = (OpenSim::SimmIKParams *) 0 ;
  OpenSim::SimmIKParams *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKParams **)&jarg1; 
  arg2 = *(OpenSim::SimmIKParams **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmIKParams const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmIKParams const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKParams_1getMarkerSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmIKParams *arg1 = (OpenSim::SimmIKParams *) 0 ;
  OpenSim::SimmMarkerSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKParams **)&jarg1; 
  {
    OpenSim::SimmMarkerSet &_result_ref = (arg1)->getMarkerSet();
    result = (OpenSim::SimmMarkerSet *) &_result_ref;
  }
  *(OpenSim::SimmMarkerSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKParams_1getNumIKTrials(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmIKParams *arg1 = (OpenSim::SimmIKParams *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKParams **)&jarg1; 
  result = (int)(arg1)->getNumIKTrials();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKParams_1getTrialParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmIKParams *arg1 = (OpenSim::SimmIKParams *) 0 ;
  int arg2 ;
  OpenSim::SimmIKTrialParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKParams **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    OpenSim::SimmIKTrialParams &_result_ref = (arg1)->getTrialParams(arg2);
    result = (OpenSim::SimmIKTrialParams *) &_result_ref;
  }
  *(OpenSim::SimmIKTrialParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKParams_1getCoordinateSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmIKParams *arg1 = (OpenSim::SimmIKParams *) 0 ;
  OpenSim::SimmCoordinateSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKParams **)&jarg1; 
  {
    OpenSim::SimmCoordinateSet &_result_ref = ((OpenSim::SimmIKParams const *)arg1)->getCoordinateSet();
    result = (OpenSim::SimmCoordinateSet *) &_result_ref;
  }
  *(OpenSim::SimmCoordinateSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKParams_1getModelFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmIKParams *arg1 = (OpenSim::SimmIKParams *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKParams **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::SimmIKParams const *)arg1)->getModelFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKParams_1registerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::SimmIKParams::registerTypes();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKParams_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmIKParams *arg1 = (OpenSim::SimmIKParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKParams **)&jarg1; 
  ((OpenSim::SimmIKParams const *)arg1)->peteTest();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmSubject_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmSubject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmSubject *)new OpenSim::SimmSubject();
  *(OpenSim::SimmSubject **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmSubject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::SimmSubject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::SimmSubject *)new OpenSim::SimmSubject((std::string const &)*arg1);
  *(OpenSim::SimmSubject **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmSubject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmSubject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmSubject *)new OpenSim::SimmSubject(arg1);
  *(OpenSim::SimmSubject **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmSubject_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmSubject *arg1 = 0 ;
  OpenSim::SimmSubject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmSubject const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmSubject *)new OpenSim::SimmSubject((OpenSim::SimmSubject const &)*arg1);
  *(OpenSim::SimmSubject **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmSubject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmSubject const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmSubject const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  OpenSim::SimmSubject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  arg2 = *(OpenSim::SimmSubject **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmSubject const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmSubject const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1createModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  OpenSim::SimmModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  result = (OpenSim::SimmModel *)(arg1)->createModel();
  *(OpenSim::SimmModel **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1getGenericModelParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  OpenSim::SimmGenericModelParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  {
    OpenSim::SimmGenericModelParams &_result_ref = (arg1)->getGenericModelParams();
    result = (OpenSim::SimmGenericModelParams *) &_result_ref;
  }
  *(OpenSim::SimmGenericModelParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1getScalingParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  OpenSim::SimmScalingParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  {
    OpenSim::SimmScalingParams &_result_ref = (arg1)->getScalingParams();
    result = (OpenSim::SimmScalingParams *) &_result_ref;
  }
  *(OpenSim::SimmScalingParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1getMarkerPlacementParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  OpenSim::SimmMarkerPlacementParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  {
    OpenSim::SimmMarkerPlacementParams &_result_ref = (arg1)->getMarkerPlacementParams();
    result = (OpenSim::SimmMarkerPlacementParams *) &_result_ref;
  }
  *(OpenSim::SimmMarkerPlacementParams **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  result = (double)((OpenSim::SimmSubject const *)arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1isDefaultGenericModelParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  result = (bool)(arg1)->isDefaultGenericModelParams();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1isDefaultScalingParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  result = (bool)(arg1)->isDefaultScalingParams();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1isDefaultMarkerPlacementParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  result = (bool)((OpenSim::SimmSubject const *)arg1)->isDefaultMarkerPlacementParams();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1registerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::SimmSubject::registerTypes();
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1getSubjectMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  {
    double const &_result_ref = (arg1)->getSubjectMass();
    result = (double *) &_result_ref;
  }
  jresult = (jdouble)*result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1getSubjectAge(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  {
    double const &_result_ref = (arg1)->getSubjectAge();
    result = (double *) &_result_ref;
  }
  jresult = (jdouble)*result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1getSubjectHeight(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  {
    double const &_result_ref = (arg1)->getSubjectHeight();
    result = (double *) &_result_ref;
  }
  jresult = (jdouble)*result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1getPathToSubject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->getPathToSubject();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1setPathToSubject(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setPathToSubject((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmSubject *arg1 = (OpenSim::SimmSubject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmSubject **)&jarg1; 
  ((OpenSim::SimmSubject const *)arg1)->peteTest();
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmSubject_1DefaultMass_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)OpenSim::SimmSubject::DefaultMass;
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMotionData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmMotionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmMotionData *)new OpenSim::SimmMotionData();
  *(OpenSim::SimmMotionData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMotionData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::SimmMotionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::SimmMotionData *)new OpenSim::SimmMotionData((std::string const &)*arg1);
  *(OpenSim::SimmMotionData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMotionData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = 0 ;
  OpenSim::SimmMotionData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmMotionData *)new OpenSim::SimmMotionData(*arg1);
  *(OpenSim::SimmMotionData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmMotionData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMotionData *arg1 = (OpenSim::SimmMotionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMotionData **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMotionData_1getNumColumns(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmMotionData *arg1 = (OpenSim::SimmMotionData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMotionData **)&jarg1; 
  result = (int)((OpenSim::SimmMotionData const *)arg1)->getNumColumns();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMotionData_1getColumnIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmMotionData *arg1 = (OpenSim::SimmMotionData *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMotionData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::SimmMotionData const *)arg1)->getColumnIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMotionData_1setColumnLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  OpenSim::SimmMotionData *arg1 = (OpenSim::SimmMotionData *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMotionData **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->setColumnLabel(arg2,(std::string const &)*arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMotionData_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OpenSim::SimmMotionData *arg1 = (OpenSim::SimmMotionData *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMotionData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->getValue((std::string const &)*arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMotionData_1getRangeMin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmMotionData *arg1 = (OpenSim::SimmMotionData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMotionData **)&jarg1; 
  result = (double)((OpenSim::SimmMotionData const *)arg1)->getRangeMin();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMotionData_1getRangeMax(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::SimmMotionData *arg1 = (OpenSim::SimmMotionData *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMotionData **)&jarg1; 
  result = (double)((OpenSim::SimmMotionData const *)arg1)->getRangeMax();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMotionData_1addToRdStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3, jdouble jarg4) {
  OpenSim::SimmMotionData *arg1 = (OpenSim::SimmMotionData *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMotionData **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->addToRdStorage(*arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMotionData_1writeSIMMMotionFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  OpenSim::SimmMotionData *arg1 = (OpenSim::SimmMotionData *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMotionData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  ((OpenSim::SimmMotionData const *)arg1)->writeSIMMMotionFile((std::string const &)*arg2,(std::string const &)*arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMotionData_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMotionData *arg1 = (OpenSim::SimmMotionData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMotionData **)&jarg1; 
  ((OpenSim::SimmMotionData const *)arg1)->peteTest();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMarkerData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmMarkerData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmMarkerData *)new OpenSim::SimmMarkerData();
  *(OpenSim::SimmMarkerData **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMarkerData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::SimmMarkerData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::SimmMarkerData *)new OpenSim::SimmMarkerData((std::string const &)*arg1);
  *(OpenSim::SimmMarkerData **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmMarkerData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMarkerData *arg1 = (OpenSim::SimmMarkerData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerData **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerData_1findFrameRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::SimmMarkerData *arg1 = (OpenSim::SimmMarkerData *) 0 ;
  double arg2 ;
  double arg3 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerData **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(int **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  arg5 = *(int **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  ((OpenSim::SimmMarkerData const *)arg1)->findFrameRange(arg2,arg3,*arg4,*arg5);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerData_1averageFrames_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenSim::SimmMarkerData *arg1 = (OpenSim::SimmMarkerData *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerData **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->averageFrames(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerData_1averageFrames_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  OpenSim::SimmMarkerData *arg1 = (OpenSim::SimmMarkerData *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerData **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->averageFrames(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerData_1averageFrames_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::SimmMarkerData *arg1 = (OpenSim::SimmMarkerData *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerData **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->averageFrames(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerData_1averageFrames_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMarkerData *arg1 = (OpenSim::SimmMarkerData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerData **)&jarg1; 
  (arg1)->averageFrames();
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerData_1takeMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  OpenSim::SimmMarkerData *arg1 = (OpenSim::SimmMarkerData *) 0 ;
  SimmMeasurement *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerData **)&jarg1; 
  arg2 = *(SimmMeasurement **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SimmMeasurement const & reference is null");
    return 0;
  } 
  result = (double)((OpenSim::SimmMarkerData const *)arg1)->takeMeasurement((SimmMeasurement const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerData_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::SimmMarkerData *arg1 = (OpenSim::SimmMarkerData *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerData **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::SimmMarkerData const *)arg1)->getFileName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerData_1makeRdStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMarkerData *arg1 = (OpenSim::SimmMarkerData *) 0 ;
  OpenSim::Storage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerData **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  (arg1)->makeRdStorage(*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerData_1getFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmMarkerData *arg1 = (OpenSim::SimmMarkerData *) 0 ;
  int arg2 ;
  SimmMarkerFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerData **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (SimmMarkerFrame *)((OpenSim::SimmMarkerData const *)arg1)->getFrame(arg2);
  *(SimmMarkerFrame **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerData_1getMarkerIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::SimmMarkerData *arg1 = (OpenSim::SimmMarkerData *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerData **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::SimmMarkerData const *)arg1)->getMarkerIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerData_1getUnits(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMarkerData *arg1 = (OpenSim::SimmMarkerData *) 0 ;
  OpenSim::SimmUnits *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerData **)&jarg1; 
  {
    OpenSim::SimmUnits const &_result_ref = ((OpenSim::SimmMarkerData const *)arg1)->getUnits();
    result = (OpenSim::SimmUnits *) &_result_ref;
  }
  *(OpenSim::SimmUnits **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerData_1convertToUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMarkerData *arg1 = (OpenSim::SimmMarkerData *) 0 ;
  OpenSim::SimmUnits *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerData **)&jarg1; 
  arg2 = *(OpenSim::SimmUnits **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmUnits const & reference is null");
    return ;
  } 
  (arg1)->convertToUnits((OpenSim::SimmUnits const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerData_1getMarkerNames(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMarkerData *arg1 = (OpenSim::SimmMarkerData *) 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerData **)&jarg1; 
  {
    OpenSim::Array<std::string > const &_result_ref = ((OpenSim::SimmMarkerData const *)arg1)->getMarkerNames();
    result = (OpenSim::Array<std::string > *) &_result_ref;
  }
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMarkerData_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMarkerData *arg1 = (OpenSim::SimmMarkerData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMarkerData **)&jarg1; 
  ((OpenSim::SimmMarkerData const *)arg1)->peteTest();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1ScalerInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = 0 ;
  OpenSim::ScalerInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Model & reference is null");
    return 0;
  } 
  result = (OpenSim::ScalerInterface *)new OpenSim::ScalerInterface(*arg1);
  *(OpenSim::ScalerInterface **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_ScalerInterface_1scaleModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jdouble jarg4) {
  jboolean jresult = 0 ;
  OpenSim::ScalerInterface *arg1 = (OpenSim::ScalerInterface *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ScalerInterface **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->scaleModel((OpenSim::ScaleSet const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1ScalerInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ScalerInterface *arg1 = (OpenSim::ScalerInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ScalerInterface **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1IKSolverInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmInverseKinematicsTarget *arg1 = 0 ;
  OpenSim::IKSolverInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmInverseKinematicsTarget & reference is null");
    return 0;
  } 
  result = (OpenSim::IKSolverInterface *)new OpenSim::IKSolverInterface(*arg1);
  *(OpenSim::IKSolverInterface **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_IKSolverInterface_1solveFrames(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::IKSolverInterface *arg1 = (OpenSim::IKSolverInterface *) 0 ;
  OpenSim::SimmIKTrialParams *arg2 = 0 ;
  OpenSim::Storage *arg3 = 0 ;
  OpenSim::Storage *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IKSolverInterface **)&jarg1; 
  arg2 = *(OpenSim::SimmIKTrialParams **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmIKTrialParams const & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Storage **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  arg4 = *(OpenSim::Storage **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  (arg1)->solveFrames((OpenSim::SimmIKTrialParams const &)*arg2,*arg3,*arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1IKSolverInterface(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::IKSolverInterface *arg1 = (OpenSim::IKSolverInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::IKSolverInterface **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMeasurement_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmMeasurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmMeasurement *)new OpenSim::SimmMeasurement();
  *(OpenSim::SimmMeasurement **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMeasurement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::SimmMeasurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::SimmMeasurement *)new OpenSim::SimmMeasurement(arg1);
  *(OpenSim::SimmMeasurement **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMeasurement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMeasurement *arg1 = 0 ;
  OpenSim::SimmMeasurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMeasurement **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMeasurement const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmMeasurement *)new OpenSim::SimmMeasurement((OpenSim::SimmMeasurement const &)*arg1);
  *(OpenSim::SimmMeasurement **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMeasurement *arg1 = (OpenSim::SimmMeasurement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMeasurement **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMeasurement_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMeasurement *arg1 = (OpenSim::SimmMeasurement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMeasurement **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::SimmMeasurement const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMeasurement_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmMeasurement *arg1 = (OpenSim::SimmMeasurement *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMeasurement **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::SimmMeasurement const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMeasurement_1copyData(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMeasurement *arg1 = (OpenSim::SimmMeasurement *) 0 ;
  OpenSim::SimmMeasurement *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMeasurement **)&jarg1; 
  arg2 = *(OpenSim::SimmMeasurement **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMeasurement const & reference is null");
    return ;
  } 
  (arg1)->copyData((OpenSim::SimmMeasurement const &)*arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMeasurement_1getNumMarkerPairs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::SimmMeasurement *arg1 = (OpenSim::SimmMeasurement *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMeasurement **)&jarg1; 
  result = (int)((OpenSim::SimmMeasurement const *)arg1)->getNumMarkerPairs();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMeasurement_1getMarkerPair(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmMeasurement *arg1 = (OpenSim::SimmMeasurement *) 0 ;
  int arg2 ;
  SimmMarkerPair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMeasurement **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    SimmMarkerPair const &_result_ref = ((OpenSim::SimmMeasurement const *)arg1)->getMarkerPair(arg2);
    result = (SimmMarkerPair *) &_result_ref;
  }
  *(SimmMarkerPair **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMeasurement_1getApply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::SimmMeasurement *arg1 = (OpenSim::SimmMeasurement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMeasurement **)&jarg1; 
  result = (bool)((OpenSim::SimmMeasurement const *)arg1)->getApply();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMeasurement_1setApply(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::SimmMeasurement *arg1 = (OpenSim::SimmMeasurement *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMeasurement **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setApply(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMeasurement_1applyScaleFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  OpenSim::SimmMeasurement *arg1 = (OpenSim::SimmMeasurement *) 0 ;
  double arg2 ;
  OpenSim::ScaleSet *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMeasurement **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(OpenSim::ScaleSet **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet & reference is null");
    return ;
  } 
  (arg1)->applyScaleFactor(arg2,*arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMeasurement_1registerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::SimmMeasurement::registerTypes();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMeasurement_1addMarkerPair(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMeasurement *arg1 = (OpenSim::SimmMeasurement *) 0 ;
  SimmMarkerPair *arg2 = (SimmMarkerPair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMeasurement **)&jarg1; 
  arg2 = *(SimmMarkerPair **)&jarg2; 
  (arg1)->addMarkerPair(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMeasurement_1addBodyScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmMeasurement *arg1 = (OpenSim::SimmMeasurement *) 0 ;
  BodyScale *arg2 = (BodyScale *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMeasurement **)&jarg1; 
  arg2 = *(BodyScale **)&jarg2; 
  (arg1)->addBodyScale(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmMeasurement_1peteTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMeasurement *arg1 = (OpenSim::SimmMeasurement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMeasurement **)&jarg1; 
  ((OpenSim::SimmMeasurement const *)arg1)->peteTest();
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SetSimmMeasurements(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmMeasurements_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::SimmMeasurement > *)new OpenSim::Set<OpenSim::SimmMeasurement >();
  *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmMeasurements_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::SimmMeasurement > *)new OpenSim::Set<OpenSim::SimmMeasurement >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmMeasurements_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::SimmMeasurement > *)new OpenSim::Set<OpenSim::SimmMeasurement >(arg1);
  *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SetSimmMeasurements_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::SimmMeasurement > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::SimmMeasurement > *)new OpenSim::Set<OpenSim::SimmMeasurement >((OpenSim::Set<OpenSim::SimmMeasurement > const &)*arg1);
  *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::SimmMeasurement > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::SimmMeasurement > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmMeasurement > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmMeasurement > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::SimmMeasurement > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  OpenSim::SimmMeasurement *arg2 = (OpenSim::SimmMeasurement *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = *(OpenSim::SimmMeasurement **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::SimmMeasurement > const *)arg1)->getIndex((OpenSim::SimmMeasurement const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  OpenSim::SimmMeasurement *arg2 = (OpenSim::SimmMeasurement *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = *(OpenSim::SimmMeasurement **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::SimmMeasurement > const *)arg1)->getIndex((OpenSim::SimmMeasurement const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::SimmMeasurement > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::SimmMeasurement > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  OpenSim::SimmMeasurement *arg2 = (OpenSim::SimmMeasurement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = *(OpenSim::SimmMeasurement **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::SimmMeasurement > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::SimmMeasurement > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::SimmMeasurement > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  int arg2 ;
  OpenSim::SimmMeasurement *arg3 = (OpenSim::SimmMeasurement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::SimmMeasurement **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  OpenSim::SimmMeasurement *arg2 = (OpenSim::SimmMeasurement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = *(OpenSim::SimmMeasurement **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::SimmMeasurement const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  int arg2 ;
  OpenSim::SimmMeasurement *arg3 = (OpenSim::SimmMeasurement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::SimmMeasurement **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  int arg2 ;
  OpenSim::SimmMeasurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::SimmMeasurement *)((OpenSim::Set<OpenSim::SimmMeasurement > const *)arg1)->get(arg2);
  *(OpenSim::SimmMeasurement **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::SimmMeasurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::SimmMeasurement *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::SimmMeasurement **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  OpenSim::SimmMeasurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  result = (OpenSim::SimmMeasurement *)((OpenSim::Set<OpenSim::SimmMeasurement > const *)arg1)->getLast();
  *(OpenSim::SimmMeasurement **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  OpenSim::SimmMeasurement *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = *(OpenSim::SimmMeasurement **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMeasurement const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::SimmMeasurement > const *)arg1)->searchBinary((OpenSim::SimmMeasurement const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  OpenSim::SimmMeasurement *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = *(OpenSim::SimmMeasurement **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMeasurement const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::SimmMeasurement > const *)arg1)->searchBinary((OpenSim::SimmMeasurement const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  OpenSim::SimmMeasurement *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = *(OpenSim::SimmMeasurement **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMeasurement const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::SimmMeasurement > const *)arg1)->searchBinary((OpenSim::SimmMeasurement const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SetSimmMeasurements_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::SimmMeasurement > *arg1 = (OpenSim::Set<OpenSim::SimmMeasurement > *) 0 ;
  OpenSim::SimmMeasurement *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1; 
  arg2 = *(OpenSim::SimmMeasurement **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMeasurement const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::SimmMeasurement > const *)arg1)->searchBinary((OpenSim::SimmMeasurement const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMeasurementSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::SimmMeasurementSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::SimmMeasurementSet *)new OpenSim::SimmMeasurementSet();
  *(OpenSim::SimmMeasurementSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmMeasurementSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmMeasurementSet *arg1 = 0 ;
  OpenSim::SimmMeasurementSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMeasurementSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmMeasurementSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmMeasurementSet *)new OpenSim::SimmMeasurementSet((OpenSim::SimmMeasurementSet const &)*arg1);
  *(OpenSim::SimmMeasurementSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmMeasurementSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmMeasurementSet *arg1 = (OpenSim::SimmMeasurementSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmMeasurementSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmScalerImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = 0 ;
  OpenSim::SimmScalerImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Model & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmScalerImpl *)new OpenSim::SimmScalerImpl(*arg1);
  *(OpenSim::SimmScalerImpl **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmScalerImpl_1scaleModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jdouble jarg4) {
  jboolean jresult = 0 ;
  OpenSim::SimmScalerImpl *arg1 = (OpenSim::SimmScalerImpl *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalerImpl **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (double)jarg4; 
  result = (bool)(arg1)->scaleModel((OpenSim::ScaleSet const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmScalerImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmScalerImpl *arg1 = (OpenSim::SimmScalerImpl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmScalerImpl **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmIKSolverImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmInverseKinematicsTarget *arg1 = 0 ;
  OpenSim::SimmIKSolverImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmInverseKinematicsTarget & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmIKSolverImpl *)new OpenSim::SimmIKSolverImpl(*arg1);
  *(OpenSim::SimmIKSolverImpl **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmIKSolverImpl_1solveFrames(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::SimmIKSolverImpl *arg1 = (OpenSim::SimmIKSolverImpl *) 0 ;
  OpenSim::SimmIKTrialParams *arg2 = 0 ;
  OpenSim::Storage *arg3 = 0 ;
  OpenSim::Storage *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKSolverImpl **)&jarg1; 
  arg2 = *(OpenSim::SimmIKTrialParams **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmIKTrialParams const & reference is null");
    return ;
  } 
  arg3 = *(OpenSim::Storage **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  arg4 = *(OpenSim::Storage **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return ;
  } 
  (arg1)->solveFrames((OpenSim::SimmIKTrialParams const &)*arg2,*arg3,*arg4);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmIKSolverImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmIKSolverImpl *arg1 = (OpenSim::SimmIKSolverImpl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmIKSolverImpl **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1SMALLDX_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)OpenSim::rdOptimizationTarget::SMALLDX;
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1rdOptimizationTarget(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1compute(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)(arg1)->compute(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1computeGradients(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)(arg1)->computeGradients(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1computePerformance(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->computePerformance(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1computePerformanceGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->computePerformanceGradient(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1computeConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)(arg1)->computeConstraint(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1computeConstraintGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)(arg1)->computeConstraintGradient(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1setNX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNX(arg2);
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  result = (int)(arg1)->getNX();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1setDX_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDX(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1setDX_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setDX(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1getDX(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->getDX(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1getDXArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  result = (double *)(arg1)->getDXArray();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1setNEvaluations_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNEvaluations(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1setNEvaluations_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  (arg1)->setNEvaluations();
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1getNEvaluations(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  result = (int)(arg1)->getNEvaluations();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1getNP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  result = (int)(arg1)->getNP();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1getNC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  result = (int)(arg1)->getNC();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1getNCInequality(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  result = (int)(arg1)->getNCInequality();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1getNCInequalityNonlinear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  result = (int)(arg1)->getNCInequalityNonlinear();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1getNCInequalityLinear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  result = (int)(arg1)->getNCInequalityLinear();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1getNCEquality(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  result = (int)(arg1)->getNCEquality();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1getNCEqualityNonlinear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  result = (int)(arg1)->getNCEqualityNonlinear();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1getNCEqualityLinear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  result = (int)(arg1)->getNCEqualityLinear();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1isControlIndexValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->isControlIndexValid(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_rdOptimizationTarget_1validatePerturbationSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::rdOptimizationTarget *arg1 = (OpenSim::rdOptimizationTarget *) 0 ;
  double *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdOptimizationTarget **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  (arg1)->validatePerturbationSize(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1InvestigationIK(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::InvestigationIK *arg1 = (OpenSim::InvestigationIK *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationIK **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1InvestigationIK_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::InvestigationIK *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::InvestigationIK *)new OpenSim::InvestigationIK();
  *(OpenSim::InvestigationIK **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1InvestigationIK_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::InvestigationIK *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::InvestigationIK *)new OpenSim::InvestigationIK((std::string const &)*arg1);
  *(OpenSim::InvestigationIK **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1InvestigationIK_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::InvestigationIK *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::InvestigationIK *)new OpenSim::InvestigationIK(arg1);
  *(OpenSim::InvestigationIK **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1InvestigationIK_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::InvestigationIK *arg1 = 0 ;
  OpenSim::InvestigationIK *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationIK **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::InvestigationIK const & reference is null");
    return 0;
  } 
  result = (OpenSim::InvestigationIK *)new OpenSim::InvestigationIK((OpenSim::InvestigationIK const &)*arg1);
  *(OpenSim::InvestigationIK **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationIK_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::InvestigationIK *arg1 = (OpenSim::InvestigationIK *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationIK **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::InvestigationIK const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationIK_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::InvestigationIK *arg1 = (OpenSim::InvestigationIK *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationIK **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::InvestigationIK const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationIK_1registerTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::InvestigationIK::registerTypes();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationIK_1getMarkerSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::InvestigationIK *arg1 = (OpenSim::InvestigationIK *) 0 ;
  OpenSim::SimmMarkerSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationIK **)&jarg1; 
  {
    OpenSim::SimmMarkerSet &_result_ref = (arg1)->getMarkerSet();
    result = (OpenSim::SimmMarkerSet *) &_result_ref;
  }
  *(OpenSim::SimmMarkerSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationIK_1getCoordinateSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::InvestigationIK *arg1 = (OpenSim::InvestigationIK *) 0 ;
  OpenSim::SimmCoordinateSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationIK **)&jarg1; 
  {
    OpenSim::SimmCoordinateSet &_result_ref = ((OpenSim::InvestigationIK const *)arg1)->getCoordinateSet();
    result = (OpenSim::SimmCoordinateSet *) &_result_ref;
  }
  *(OpenSim::SimmCoordinateSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationIK_1getIKTrialParamsSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::InvestigationIK *arg1 = (OpenSim::InvestigationIK *) 0 ;
  OpenSim::SimmIKTrialParamsSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationIK **)&jarg1; 
  {
    OpenSim::SimmIKTrialParamsSet &_result_ref = (arg1)->getIKTrialParamsSet();
    result = (OpenSim::SimmIKTrialParamsSet *) &_result_ref;
  }
  *(OpenSim::SimmIKTrialParamsSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_InvestigationIK_1run(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::InvestigationIK *arg1 = (OpenSim::InvestigationIK *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::InvestigationIK **)&jarg1; 
  (arg1)->run();
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_new_1SimmInverseKinematicsTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::SimmModel *arg1 = 0 ;
  OpenSim::Storage *arg2 = 0 ;
  OpenSim::SimmInverseKinematicsTarget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmModel **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::SimmModel & reference is null");
    return 0;
  } 
  arg2 = *(OpenSim::Storage **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage & reference is null");
    return 0;
  } 
  result = (OpenSim::SimmInverseKinematicsTarget *)new OpenSim::SimmInverseKinematicsTarget(*arg1,*arg2);
  *(OpenSim::SimmInverseKinematicsTarget **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_delete_1SimmInverseKinematicsTarget(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmInverseKinematicsTarget_1setIndexToSolve(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  (arg1)->setIndexToSolve(arg2,arg3);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmInverseKinematicsTarget_1setPrescribedCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPrescribedCoordinates(arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmInverseKinematicsTarget_1getComputedMarkerLocations(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::SimmInverseKinematicsTarget const *)arg1)->getComputedMarkerLocations(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmInverseKinematicsTarget_1getExperimentalMarkerLocations(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::SimmInverseKinematicsTarget const *)arg1)->getExperimentalMarkerLocations(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmInverseKinematicsTarget_1getPrescribedQValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::SimmInverseKinematicsTarget const *)arg1)->getPrescribedQValues(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmInverseKinematicsTarget_1getUnconstrainedCoordinateNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  OpenSim::Array<std::string const * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string const * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string const * > & reference is null");
    return ;
  } 
  (arg1)->getUnconstrainedCoordinateNames(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmInverseKinematicsTarget_1getPrescribedCoordinateNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  OpenSim::Array<std::string const * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string const * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string const * > & reference is null");
    return ;
  } 
  (arg1)->getPrescribedCoordinateNames(*arg2);
}


JNIEXPORT void JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmInverseKinematicsTarget_1getOutputMarkerNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  OpenSim::Array<std::string const * > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string const * > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string const * > & reference is null");
    return ;
  } 
  (arg1)->getOutputMarkerNames(*arg2);
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmInverseKinematicsTarget_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  OpenSim::SimmModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  {
    OpenSim::SimmModel &_result_ref = (arg1)->getModel();
    result = (OpenSim::SimmModel *) &_result_ref;
  }
  *(OpenSim::SimmModel **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmInverseKinematicsTarget_1compute(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)(arg1)->compute(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmInverseKinematicsTarget_1computeGradients(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)(arg1)->computeGradients(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmInverseKinematicsTarget_1computePerformance(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->computePerformance(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmInverseKinematicsTarget_1computePerformanceGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->computePerformanceGradient(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmInverseKinematicsTarget_1computeConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)(arg1)->computeConstraint(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_org_opensim_modeling_opensimModelJNI_SimmInverseKinematicsTarget_1computeConstraintGradient(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::SimmInverseKinematicsTarget *arg1 = (OpenSim::SimmInverseKinematicsTarget *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)(arg1)->computeConstraintGradient(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGVisibleObjectUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::VisibleObject **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMaterialUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Material **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGVisiblePropertiesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::VisibleProperties **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAnalyticGeometryUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Geometry **)&baseptr = *(OpenSim::AnalyticGeometry **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGPolyhedralGeometryUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Geometry **)&baseptr = *(OpenSim::PolyhedralGeometry **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGBodyUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::VisibleObject **)&baseptr = *(OpenSim::Body **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetBodiesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Body > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetMaterialsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Material > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMaterialSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::Material > **)&baseptr = *(OpenSim::MaterialSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGActuatorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Actuator **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetActuatorsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGActuatorSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::Actuator > **)&baseptr = *(OpenSim::ActuatorSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGContactForceSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::ActuatorSet **)&baseptr = *(OpenSim::ContactForceSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGStorageUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Storage **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGModelUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Model **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGControlUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Control **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetControlsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Control > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGControlSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::Control > **)&baseptr = *(OpenSim::ControlSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGControlConstantUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Control **)&baseptr = *(OpenSim::ControlConstant **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGControlLinearUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Control **)&baseptr = *(OpenSim::ControlLinear **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGIntegrandUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Integrand **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGModelIntegrandUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Integrand **)&baseptr = *(OpenSim::ModelIntegrand **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGIntegRKFUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::RKF **)&baseptr = *(OpenSim::IntegRKF **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGCallbackUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Callback **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetCallbackUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Callback > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGCallbackSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::Callback > **)&baseptr = *(OpenSim::CallbackSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGIntegCallbackUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Callback **)&baseptr = *(OpenSim::IntegCallback **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAnalysisUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::IntegCallback **)&baseptr = *(OpenSim::Analysis **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetAnalysisUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Analysis > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAnalysisSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::Analysis > **)&baseptr = *(OpenSim::AnalysisSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGInvestigationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Investigation **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGInvestigationForwardUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Investigation **)&baseptr = *(OpenSim::InvestigationForward **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGInvestigationPerturbationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Investigation **)&baseptr = *(OpenSim::InvestigationPerturbation **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimtkAnimationCallbackUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::IntegCallback **)&baseptr = *(OpenSim::SimtkAnimationCallback **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGKinematicsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Analysis **)&baseptr = *(OpenSim::Kinematics **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGActuationUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Analysis **)&baseptr = *(OpenSim::Actuation **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGIndAccUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Analysis **)&baseptr = *(OpenSim::IndAcc **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGGeneralizedForcesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Analysis **)&baseptr = *(OpenSim::GeneralizedForces **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMarkerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::VisibleObject **)&baseptr = *(OpenSim::Marker **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetMarkersUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Marker > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGMarkerSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::Marker > **)&baseptr = *(OpenSim::MarkerSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGRangeUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Range **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGScaleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Scale **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetScalesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Scale > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGScaleSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::Scale > **)&baseptr = *(OpenSim::ScaleSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGAbstractDynamicsEngineUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::AbstractDynamicsEngine **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmBodyUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmBody **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetSimmBodiesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::SimmBody > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmBodySetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::SimmBody > **)&baseptr = *(OpenSim::SimmBodySet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmBoneUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmBone **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGFunctionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Function **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGConstantUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Function **)&baseptr = *(OpenSim::Constant **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGCoordinateUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Coordinate **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmCoordinateUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Coordinate **)&baseptr = *(OpenSim::SimmCoordinate **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetSimmCoordinateUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::SimmCoordinate > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmCoordinateSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::SimmCoordinate > **)&baseptr = *(OpenSim::SimmCoordinateSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmDofUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmDof **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmJointUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmJoint **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmKinematicsEngineUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::AbstractDynamicsEngine **)&baseptr = *(OpenSim::SimmKinematicsEngine **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmMarkerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmMarker **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetSimmMarkerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::SimmMarker > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmMarkerSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::SimmMarker > **)&baseptr = *(OpenSim::SimmMarkerSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmModelUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Model **)&baseptr = *(OpenSim::SimmModel **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmMuscleUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Actuator **)&baseptr = *(OpenSim::SimmMuscle **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmMuscleGroupUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmMuscleGroup **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmMusclePointUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmMusclePoint **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmMuscleViaPointUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::SimmMusclePoint **)&baseptr = *(OpenSim::SimmMuscleViaPoint **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetSimmMusclePointUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmMusclePointSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::SimmMusclePoint > **)&baseptr = *(OpenSim::SimmMusclePointSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmPointUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmPoint **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmRotationDofUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::SimmDof **)&baseptr = *(OpenSim::SimmRotationDof **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmTranslationDofUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::SimmDof **)&baseptr = *(OpenSim::SimmTranslationDof **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmGenericModelParamsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmGenericModelParams **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmScalingParamsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmScalingParams **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmMarkerPlacementParamsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmMarkerPlacementParams **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmIKTrialParamsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmIKTrialParams **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetSimmIKTrialParamsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmIKTrialParamsSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::SimmIKTrialParams > **)&baseptr = *(OpenSim::SimmIKTrialParamsSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmIKParamsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmIKParams **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmSubjectUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmSubject **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmMeasurementUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::SimmMeasurement **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSetSimmMeasurementsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::SimmMeasurement > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmMeasurementSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::SimmMeasurement > **)&baseptr = *(OpenSim::SimmMeasurementSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmScalerImplUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::ScalerInterface **)&baseptr = *(OpenSim::SimmScalerImpl **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmIKSolverImplUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::IKSolverInterface **)&baseptr = *(OpenSim::SimmIKSolverImpl **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGInvestigationIKUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Investigation **)&baseptr = *(OpenSim::InvestigationIK **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_opensim_modeling_opensimModelJNI_SWIGSimmInverseKinematicsTargetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::rdOptimizationTarget **)&baseptr = *(OpenSim::SimmInverseKinematicsTarget **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

