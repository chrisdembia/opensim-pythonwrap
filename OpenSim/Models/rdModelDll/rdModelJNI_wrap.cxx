/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#if defined(__GNUC__)
    typedef long long __int64; /*For gcc on Windows */
#endif
#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;

#if defined(SWIG_NOINCLUDE)
void SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg);
#else


void SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


#endif


#include <OpenSim/Tools/rdToolsDLL.h>
#include <OpenSim/Simulation/rdSimulationDLL.h>
#include <OpenSim/Tools/Exception.h>
#include <OpenSim/Tools/Array.h>
#include <OpenSim/Tools/ArrayPtrs.h>
#include <OpenSim/Tools/Property.h>
#include <OpenSim/Tools/PropertySet.h>
#include <OpenSim/Tools/Object.h>
#include <OpenSim/Tools/Material.h>
#include <OpenSim/Tools/VisibleProperties.h>
#include <OpenSim/Tools/Transform.h>
#include <OpenSim/Tools/VisibleObject.h>

#include <OpenSim/Tools/Set.h>
#include <OpenSim/Simulation/Model/Body.h>
#include <OpenSim/Simulation/Model/BodySet.h>

#include <OpenSim/Tools/MaterialSet.h>

#include <OpenSim/Simulation/Model/Actuator.h>
#include <OpenSim/Simulation/Model/ActuatorSet.h>

#include <OpenSim/Simulation/Model/ContactForceSet.h>

#include <OpenSim/Tools/StateVector.h>
#include <OpenSim/Tools/Storage.h>

#include <OpenSim/Simulation/Model/Model.h>
#include <OpenSim/Simulation/Control/Control.h>
#include <OpenSim/Simulation/Control/ControlSet.h>
#include <OpenSim/Simulation/Control/ControlConstant.h>
#include <OpenSim/Simulation/Control/ControlLinear.h>
#include <OpenSim/Simulation/Integrator/Integrand.h>
#include <OpenSim/Simulation/Integrator/RKF.h>
#include <OpenSim/Simulation/Integrator/IntegRKF.h>
#include <OpenSim/Simulation/Model/ModelIntegrand.h>
#include <OpenSim/Simulation/Manager/Manager.h>
#include <OpenSim/Simulation/Model/Callback.h>
#include <OpenSim/Simulation/Model/CallbackSet.h>
#include <OpenSim/Simulation/Model/IntegCallback.h>
#include <OpenSim/Simulation/Simtk/SimtkAnimationCallback.h>
#include <OpenSim/Simulation/Model/Analysis.h>
#include <OpenSim/Simulation/Model/AnalysisSet.h>
#include <OpenSim/Simulation/Model/AnalysisFactory.h>

#include <OpenSim/Analyses/AnalysisFactory.h>
#include <OpenSim/Analyses/Actuation.h>
#include <OpenSim/Analyses/IndAcc.h>
#include <OpenSim/Analyses/Kinematics.h>
#include <OpenSim/Analyses/GeneralizedForces.h>

#include <OpenSim/Simulation/Model/Marker.h>
#include <OpenSim/Simulation/Model/MarkerSet.h>
#include <OpenSim/Tools/Range.h>
#include <OpenSim/Tools/Scale.h>
#include <OpenSim/Tools/ScaleSet.h>

using namespace OpenSim;

/* Note: double[n] is equivalent to a pointer to a double */
double *new_doubleArray(int n) {
   return (double *) malloc(n*sizeof(double));
}
void free_doubleArray(double *x) {
   free(x);
}
void doubleArray_set(double* x, int i, double v) {
   x[i] = v;
}
double doubleArray_get(double *x, int i) {
   return x[i];
}


/* parallel code for float arrays */

float *new_floatArray(int n) {
   return (float *) malloc(n*sizeof(float));
}
void free_floatArray(float *x) {
   free(x);
}
void floatArray_set(float* x, int i, float v) {
   x[i] = v;
}
float floatArray_get(float *x, int i) {
   return x[i];
}


/* repeat for integer arrays */

int *new_intArray(int n) {
   return (int *) malloc(n*sizeof(int));
}
void free_intArray(int *x) {
   free(x);
}
void intArray_set(int* x, int i, int v) {
   x[i] = v;
}
int intArray_get(int *x, int i) {
   return x[i];
}


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}
#define SWIG_exception(code, msg) { SWIG_JavaException(jenv, code, msg); }


#include <string>

bool Arraylbool_g_getitem___(Array<bool > *self,int index){
      return self->get(index);
    }
void Arraylbool_g_setitem___(Array<bool > *self,int index,bool val){
      self->set(index,val);
    }
double Arrayldouble_g_getitem___(Array<double > *self,int index){
      return self->get(index);
    }
void Arrayldouble_g_setitem___(Array<double > *self,int index,double val){
      self->set(index,val);
    }
int Arraylint_g_getitem___(Array<int > *self,int index){
      return self->get(index);
    }
void Arraylint_g_setitem___(Array<int > *self,int index,int val){
      self->set(index,val);
    }
std::string Arraylstd_string_g_getitem___(Array<std::string > *self,int index){
      return self->get(index);
    }
void Arraylstd_string_g_setitem___(Array<std::string > *self,int index,std::string val){
      self->set(index,val);
    }
#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1doubleArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
    jlong jresult = 0 ;
    int arg1 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    result = (double *)new_doubleArray(arg1);
    
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_free_1doubleArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    double *arg1 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(double **)&jarg1; 
    free_doubleArray(arg1);
    
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_doubleArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    double *arg1 = (double *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(double **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    doubleArray_set(arg1,arg2,arg3);
    
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_doubleArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    double *arg1 = (double *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(double **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (double)doubleArray_get(arg1,arg2);
    
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1floatArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
    jlong jresult = 0 ;
    int arg1 ;
    float *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    result = (float *)new_floatArray(arg1);
    
    *(float **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_free_1floatArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    float *arg1 = (float *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(float **)&jarg1; 
    free_floatArray(arg1);
    
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_floatArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3) {
    float *arg1 = (float *) 0 ;
    int arg2 ;
    float arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(float **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (float)jarg3; 
    floatArray_set(arg1,arg2,arg3);
    
}


JNIEXPORT jfloat JNICALL Java_simtkModel_ModelJNI_floatArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jfloat jresult = 0 ;
    float *arg1 = (float *) 0 ;
    int arg2 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(float **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (float)floatArray_get(arg1,arg2);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1intArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
    jlong jresult = 0 ;
    int arg1 ;
    int *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    result = (int *)new_intArray(arg1);
    
    *(int **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_free_1intArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    int *arg1 = (int *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(int **)&jarg1; 
    free_intArray(arg1);
    
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_intArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    int *arg1 = (int *) 0 ;
    int arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(int **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    intArray_set(arg1,arg2,arg3);
    
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_intArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    int *arg1 = (int *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(int **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (int)intArray_get(arg1,arg2);
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Exception(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
    jlong jresult = 0 ;
    std::string const &arg1_defvalue = NULL ;
    std::string *arg1 = (std::string *) &arg1_defvalue ;
    std::string const &arg2_defvalue = "" ;
    std::string *arg2 = (std::string *) &arg2_defvalue ;
    int arg3 = (int) -1 ;
    Exception *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    {
        try {
            result = (Exception *)new Exception((std::string const &)*arg1,(std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Exception **)&jresult = result; 
    delete arg1; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Exception_1setMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    Exception *arg1 = (Exception *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Exception **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            (arg1)->setMessage((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Exception_1getMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Exception *arg1 = (Exception *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Exception **)&jarg1; 
    {
        try {
            result = (char *)(arg1)->getMessage();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Exception_1print(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Exception *arg1 = (Exception *) 0 ;
    std::ostream *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Exception **)&jarg1; 
    arg2 = *(std::ostream **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
        return ;
    }
    {
        try {
            (arg1)->print(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Exception(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Exception *arg1 = (Exception *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Exception **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Array_1CAPMIN(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)(int)Array_CAPMIN;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Property_1None(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Property::None;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Property_1Bool(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Property::Bool;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Property_1Int(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Property::Int;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Property_1Flt(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Property::Flt;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Property_1Dbl(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Property::Dbl;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Property_1Str(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Property::Str;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Property_1Obj(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Property::Obj;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Property_1BoolArray(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Property::BoolArray;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Property_1IntArray(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Property::IntArray;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Property_1FltArray(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Property::FltArray;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Property_1DblArray(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Property::DblArray;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Property_1StrArray(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Property::StrArray;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Property_1ObjArray(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Property::ObjArray;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Property_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    Property *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            result = (Property *)((Property const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Property **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Property(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Property *arg1 = (Property *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setNull(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Property *arg1 = (Property *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            (arg1)->setNull();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Property *arg1 = (Property *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setType((Property::PropertyType )arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Property_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            result = (int)((Property const *)arg1)->getType();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Property_1getTypeAsString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            result = (char *)((Property const *)arg1)->getTypeAsString();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    Property *arg1 = (Property *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            (arg1)->setName((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Property_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            {
                std::string const &_result_ref = ((Property const *)arg1)->getName();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Property_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            {
                std::string const &_result_ref = (arg1)->toString();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    Property *arg1 = (Property *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setValue(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Property_1getValueBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    bool *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            {
                bool &_result_ref = (arg1)->getValueBool();
                result = (bool *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(bool **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Property *arg1 = (Property *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setValue(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Property_1getValueInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    int *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            {
                int &_result_ref = (arg1)->getValueInt();
                result = (int *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(int **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Property *arg1 = (Property *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setValue(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Property_1getValueDbl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            {
                double &_result_ref = (arg1)->getValueDbl();
                result = (double *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    Property *arg1 = (Property *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            (arg1)->setValue((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Property_1getValueStr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            {
                std::string &_result_ref = (arg1)->getValueStr();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(std::string **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setValue_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Property *arg1 = (Property *) 0 ;
    Object *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = *(Object **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Object const & reference is null");
        return ;
    }
    {
        try {
            (arg1)->setValue((Object const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Property_1getValueObj(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            {
                Object &_result_ref = (arg1)->getValueObj();
                result = (Object *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setValue_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Property *arg1 = (Property *) 0 ;
    int arg2 ;
    bool *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(bool **)&jarg3; 
    {
        try {
            (arg1)->setValue(arg2,(bool const (*))arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setValue_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Property *arg1 = (Property *) 0 ;
    Array<bool > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = *(Array<bool > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<bool > const & reference is null");
        return ;
    }
    {
        try {
            (arg1)->setValue((Array<bool > const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Property_1getValueBoolArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    Array<bool > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            {
                Array<bool > &_result_ref = (arg1)->getValueBoolArray();
                result = (Array<bool > *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<bool > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setValue_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Property *arg1 = (Property *) 0 ;
    int arg2 ;
    int *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    {
        try {
            (arg1)->setValue(arg2,(int const (*))arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setValue_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Property *arg1 = (Property *) 0 ;
    Array<int > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = *(Array<int > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<int > const & reference is null");
        return ;
    }
    {
        try {
            (arg1)->setValue((Array<int > const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Property_1getValueIntArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    Array<int > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            {
                Array<int > &_result_ref = (arg1)->getValueIntArray();
                result = (Array<int > *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<int > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setValue_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Property *arg1 = (Property *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->setValue(arg2,(double const (*))arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setValue_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Property *arg1 = (Property *) 0 ;
    Array<double > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = *(Array<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > const & reference is null");
        return ;
    }
    {
        try {
            (arg1)->setValue((Array<double > const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Property_1getValueDblArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    Array<double > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            {
                Array<double > &_result_ref = (arg1)->getValueDblArray();
                result = (Array<double > *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setValue_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Property *arg1 = (Property *) 0 ;
    int arg2 ;
    std::string *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(std::string **)&jarg3; 
    {
        try {
            (arg1)->setValue(arg2,(std::string const (*))arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setValue_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Property *arg1 = (Property *) 0 ;
    Array<std::string > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = *(Array<std::string > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<std::string > const & reference is null");
        return ;
    }
    {
        try {
            (arg1)->setValue((Array<std::string > const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Property_1getValueStrArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    Array<std::string > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            {
                Array<std::string > &_result_ref = (arg1)->getValueStrArray();
                result = (Array<std::string > *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<std::string > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setValue_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Property *arg1 = (Property *) 0 ;
    int arg2 ;
    Object **arg3 = (Object **) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Object ***)&jarg3; 
    {
        try {
            (arg1)->setValue(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setValue_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Property *arg1 = (Property *) 0 ;
    ArrayPtrs<Object > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = *(ArrayPtrs<Object > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArrayPtrs<Object > const & reference is null");
        return ;
    }
    {
        try {
            (arg1)->setValue((ArrayPtrs<Object > const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Property_1getValueObjArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    ArrayPtrs<Object > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            {
                ArrayPtrs<Object > &_result_ref = (arg1)->getValueObjArray();
                result = (ArrayPtrs<Object > *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ArrayPtrs<Object > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Property_1setUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    Property *arg1 = (Property *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setUseDefault(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Property_1getUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Property *arg1 = (Property *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Property **)&jarg1; 
    {
        try {
            result = (bool)((Property const *)arg1)->getUseDefault();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_set_1PropertySet_1_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    PropertySet *arg1 = (PropertySet *) 0 ;
    ArrayPtrs<Property > *arg2 = (ArrayPtrs<Property > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(PropertySet **)&jarg1; 
    arg2 = *(ArrayPtrs<Property > **)&jarg2; 
    {
        try {
            if (arg1) (arg1)->_array = *arg2;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_get_1PropertySet_1_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    PropertySet *arg1 = (PropertySet *) 0 ;
    ArrayPtrs<Property > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(PropertySet **)&jarg1; 
    result = (ArrayPtrs<Property > *)& ((arg1)->_array);
    
    *(ArrayPtrs<Property > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1PropertySet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    PropertySet *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (PropertySet *)new PropertySet();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(PropertySet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1PropertySet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    PropertySet *arg1 = 0 ;
    PropertySet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(PropertySet **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PropertySet const & reference is null");
        return 0;
    }
    {
        try {
            result = (PropertySet *)new PropertySet((PropertySet const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(PropertySet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1PropertySet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    PropertySet *arg1 = (PropertySet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(PropertySet **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_PropertySet_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    PropertySet *arg1 = (PropertySet *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(PropertySet **)&jarg1; 
    {
        try {
            result = (bool)((PropertySet const *)arg1)->isEmpty();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_PropertySet_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    PropertySet *arg1 = (PropertySet *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(PropertySet **)&jarg1; 
    {
        try {
            result = (int)((PropertySet const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_PropertySet_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    PropertySet *arg1 = (PropertySet *) 0 ;
    int arg2 ;
    Property *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(PropertySet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (Property *)(arg1)->get(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Property **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_PropertySet_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    PropertySet *arg1 = (PropertySet *) 0 ;
    std::string *arg2 = 0 ;
    Property *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(PropertySet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Property *)(arg1)->get((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Property **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_PropertySet_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    PropertySet *arg1 = (PropertySet *) 0 ;
    Property *arg2 = (Property *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(PropertySet **)&jarg1; 
    arg2 = *(Property **)&jarg2; 
    {
        try {
            (arg1)->append(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_PropertySet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    PropertySet *arg1 = (PropertySet *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(PropertySet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            (arg1)->remove((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_PropertySet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    PropertySet *arg1 = (PropertySet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(PropertySet **)&jarg1; 
    {
        try {
            (arg1)->clear();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_get_1ObjectDEFAULT_1NAME(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (char *)(char *)ObjectDEFAULT_NAME;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Object(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Object *arg1 = (Object *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Object_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Object *)new Object();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Object_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Object *)new Object((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Object_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    XMLDocument *arg1 = (XMLDocument *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(XMLDocument **)&jarg1; 
    {
        try {
            result = (Object *)new Object((XMLDocument const *)arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Object_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    {
        try {
            result = (Object *)new Object(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Object_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Object *arg1 = 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Object const & reference is null");
        return 0;
    }
    {
        try {
            result = (Object *)new Object((Object const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Object_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Object *arg1 = (Object *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            result = (Object *)((Object const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Object_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    Object *arg1 = (Object *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((Object const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Object_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Object *arg1 = (Object *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            {
                std::string const &_result_ref = ((Object const *)arg1)->getType();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    Object *arg1 = (Object *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            (arg1)->setName((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Object_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Object *arg1 = (Object *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            {
                std::string const &_result_ref = ((Object const *)arg1)->getName();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    Object *arg1 = (Object *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            (arg1)->setDescription((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Object_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Object *arg1 = (Object *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            {
                std::string const &_result_ref = ((Object const *)arg1)->getDescription();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Object_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Object *arg1 = (Object *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            {
                std::string const &_result_ref = ((Object const *)arg1)->toString();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Object_1getPropertySet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Object *arg1 = (Object *) 0 ;
    PropertySet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            {
                PropertySet &_result_ref = (arg1)->getPropertySet();
                result = (PropertySet *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(PropertySet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1RegisterType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Object *arg1 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Object const & reference is null");
        return ;
    }
    {
        try {
            Object::RegisterType((Object const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Object_1isValidDefaultType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Object *arg1 = (Object *) 0 ;
    Object *arg2 = (Object *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    arg2 = *(Object **)&jarg2; 
    {
        try {
            result = (bool)((Object const *)arg1)->isValidDefaultType((Object const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1updateFromXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Object *arg1 = (Object *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            (arg1)->updateFromXMLNode();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1updateDefaultObjectsFromXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Object *arg1 = (Object *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            (arg1)->updateDefaultObjectsFromXMLNode();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1updateXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Object *arg1 = (Object *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            (arg1)->updateXMLNode(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1generateXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Object *arg1 = (Object *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            (arg1)->generateXMLNode(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1setInlined(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jstring jarg3) {
    Object *arg1 = (Object *) 0 ;
    bool arg2 ;
    char *arg3 = (char *) NULL ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return ;
        }
    }
    {
        try {
            (arg1)->setInlined(arg2,(char const *)arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Object_1getInlined(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Object *arg1 = (Object *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            result = (bool)((Object const *)arg1)->getInlined();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Object_1getOffLineFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Object *arg1 = (Object *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            result = (char *)((Object const *)arg1)->getOffLineFileName();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1clearXMLNodes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Object *arg1 = (Object *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            (arg1)->clearXMLNodes();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Object_1getDocument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Object *arg1 = (Object *) 0 ;
    XMLDocument *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            result = (XMLDocument *)((Object const *)arg1)->getDocument();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(XMLDocument **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Object_1getXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Object *arg1 = (Object *) 0 ;
    DOMElement *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            result = (DOMElement *)((Object const *)arg1)->getXMLNode();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(DOMElement **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1print(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    Object *arg1 = (Object *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            (arg1)->print((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1addObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Object *arg1 = (Object *) 0 ;
    Object *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    arg2 = *(Object **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Object & reference is null");
        return ;
    }
    {
        try {
            (arg1)->addObserver(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1deleteObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Object *arg1 = (Object *) 0 ;
    Object *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    arg2 = *(Object **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Object & reference is null");
        return ;
    }
    {
        try {
            (arg1)->deleteObserver(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1addObserverEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    Object *arg1 = (Object *) 0 ;
    Object *arg2 = 0 ;
    Event *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    arg2 = *(Object **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Object & reference is null");
        return ;
    }
    arg3 = *(Event **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Event & reference is null");
        return ;
    }
    {
        try {
            (arg1)->addObserverEvent(*arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1notifyObservers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Object *arg1 = (Object *) 0 ;
    Event *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    arg2 = *(Event **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Event & reference is null");
        return ;
    }
    {
        try {
            (arg1)->notifyObservers(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1deleteObservers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Object *arg1 = (Object *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            (arg1)->deleteObservers();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Object_1countObservers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Object *arg1 = (Object *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    {
        try {
            result = (int)((Object const *)arg1)->countObservers();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Object_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    Object *arg1 = (Object *) 0 ;
    Object *arg2 = 0 ;
    Event *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Object **)&jarg1; 
    arg2 = *(Object **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Object const & reference is null");
        return ;
    }
    arg3 = *(Event **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Event & reference is null");
        return ;
    }
    {
        try {
            (arg1)->update((Object const &)*arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_set_1Material_1_1propTranslucency(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Material *arg1 = (Material *) 0 ;
    PropertyDbl arg2 ;
    PropertyDbl *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    argp2 = *(PropertyDbl **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDbl");
        return ;
    }
    arg2 = *argp2; 
    {
        try {
            if (arg1) (arg1)->_propTranslucency = arg2;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_get_1Material_1_1propTranslucency(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Material *arg1 = (Material *) 0 ;
    PropertyDbl result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    result =  ((arg1)->_propTranslucency);
    
    *(PropertyDbl **)&jresult = new PropertyDbl((PropertyDbl &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_set_1Material_1_1propAmbientColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Material *arg1 = (Material *) 0 ;
    PropertyDblArray arg2 ;
    PropertyDblArray *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    argp2 = *(PropertyDblArray **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDblArray");
        return ;
    }
    arg2 = *argp2; 
    {
        try {
            if (arg1) (arg1)->_propAmbientColor = arg2;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_get_1Material_1_1propAmbientColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Material *arg1 = (Material *) 0 ;
    PropertyDblArray result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    result =  ((arg1)->_propAmbientColor);
    
    *(PropertyDblArray **)&jresult = new PropertyDblArray((PropertyDblArray &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_set_1Material_1_1propDiffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Material *arg1 = (Material *) 0 ;
    PropertyDblArray arg2 ;
    PropertyDblArray *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    argp2 = *(PropertyDblArray **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDblArray");
        return ;
    }
    arg2 = *argp2; 
    {
        try {
            if (arg1) (arg1)->_propDiffuseColor = arg2;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_get_1Material_1_1propDiffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Material *arg1 = (Material *) 0 ;
    PropertyDblArray result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    result =  ((arg1)->_propDiffuseColor);
    
    *(PropertyDblArray **)&jresult = new PropertyDblArray((PropertyDblArray &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_set_1Material_1_1propSpecularColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Material *arg1 = (Material *) 0 ;
    PropertyDblArray arg2 ;
    PropertyDblArray *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    argp2 = *(PropertyDblArray **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDblArray");
        return ;
    }
    arg2 = *argp2; 
    {
        try {
            if (arg1) (arg1)->_propSpecularColor = arg2;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_get_1Material_1_1propSpecularColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Material *arg1 = (Material *) 0 ;
    PropertyDblArray result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    result =  ((arg1)->_propSpecularColor);
    
    *(PropertyDblArray **)&jresult = new PropertyDblArray((PropertyDblArray &)result); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_set_1Material_1_1translucency(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Material *arg1 = (Material *) 0 ;
    double *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    arg2 = *(double **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return ;
    }
    {
        try {
            if (arg1) (arg1)->_translucency = *arg2;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_get_1Material_1_1translucency(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Material *arg1 = (Material *) 0 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    {
        double &_result_ref = (double &) ((arg1)->_translucency);
        result = (double *) &_result_ref;
    }
    
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_set_1Material_1_1ambientColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Material *arg1 = (Material *) 0 ;
    Array<double > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    arg2 = *(Array<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > & reference is null");
        return ;
    }
    {
        try {
            if (arg1) (arg1)->_ambientColor = *arg2;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_get_1Material_1_1ambientColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Material *arg1 = (Material *) 0 ;
    Array<double > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    {
        Array<double > &_result_ref = (Array<double > &) ((arg1)->_ambientColor);
        result = (Array<double > *) &_result_ref;
    }
    
    *(Array<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_set_1Material_1_1diffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Material *arg1 = (Material *) 0 ;
    Array<double > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    arg2 = *(Array<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > & reference is null");
        return ;
    }
    {
        try {
            if (arg1) (arg1)->_diffuseColor = *arg2;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_get_1Material_1_1diffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Material *arg1 = (Material *) 0 ;
    Array<double > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    {
        Array<double > &_result_ref = (Array<double > &) ((arg1)->_diffuseColor);
        result = (Array<double > *) &_result_ref;
    }
    
    *(Array<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_set_1Material_1_1specularColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Material *arg1 = (Material *) 0 ;
    Array<double > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    arg2 = *(Array<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > & reference is null");
        return ;
    }
    {
        try {
            if (arg1) (arg1)->_specularColor = *arg2;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_get_1Material_1_1specularColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Material *arg1 = (Material *) 0 ;
    Array<double > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    {
        Array<double > &_result_ref = (Array<double > &) ((arg1)->_specularColor);
        result = (Array<double > *) &_result_ref;
    }
    
    *(Array<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_set_1Material_1_1defaultMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Material *arg1 = (Material *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    {
        try {
            Material::_defaultMaterial = arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_get_1Material_1_1defaultMaterial(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Material *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Material *)Material::_defaultMaterial;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Material **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Material_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Material *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Material *)new Material();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Material **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Material_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    Material *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Material *)new Material((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Material **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Material_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    Material *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    {
        try {
            result = (Material *)new Material(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Material **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Material_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Material *arg1 = 0 ;
    Material *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Material const & reference is null");
        return 0;
    }
    {
        try {
            result = (Material *)new Material((Material const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Material **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Material(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Material *arg1 = (Material *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Material_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Material *arg1 = (Material *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    {
        try {
            result = (Object *)((Material const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Material_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    Material *arg1 = (Material *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((Material const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Material_1setTranslucency(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Material *arg1 = (Material *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setTranslucency(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Material_1getTranslucency(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Material *arg1 = (Material *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    {
        try {
            result = (double)((Material const *)arg1)->getTranslucency();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Material_1setAmbientColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Material *arg1 = (Material *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setAmbientColor((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Material_1getAmbientColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Material *arg1 = (Material *) 0 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    {
        try {
            result = (double *)((Material const *)arg1)->getAmbientColor();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Material_1setDiffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Material *arg1 = (Material *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setDiffuseColor((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Material_1getDiffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Material *arg1 = (Material *) 0 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    {
        try {
            result = (double *)((Material const *)arg1)->getDiffuseColor();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Material_1setSpecularColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Material *arg1 = (Material *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setSpecularColor((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Material_1getSpecularColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Material *arg1 = (Material *) 0 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    {
        try {
            result = (double *)((Material const *)arg1)->getSpecularColor();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Material_1GetDefaultMaterialName(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            {
                std::string const &_result_ref = Material::GetDefaultMaterialName();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Material_1GetDefaultMaterial(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Material *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            {
                Material const &_result_ref = Material::GetDefaultMaterial();
                result = (Material *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Material **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Material_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Material *arg1 = (Material *) 0 ;
    DOMElement *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Material **)&jarg1; 
    {
        try {
            result = (DOMElement *)((Material const *)arg1)->getNode();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(DOMElement **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1VisibleProperties_1None(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)VisibleProperties::None;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1VisibleProperties_1WireFrame(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)VisibleProperties::WireFrame;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1VisibleProperties_1SolidFill(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)VisibleProperties::SolidFill;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1VisibleProperties_1FlatShaded(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)VisibleProperties::FlatShaded;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1VisibleProperties_1GouraudShaded(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)VisibleProperties::GouraudShaded;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1VisibleProperties_1PhongShaded(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)VisibleProperties::PhongShaded;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1VisibleProperties_1BoundingBox(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)VisibleProperties::BoundingBox;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1VisibleProperties_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    VisibleProperties *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (VisibleProperties *)new VisibleProperties();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(VisibleProperties **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1VisibleProperties_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    VisibleProperties *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (VisibleProperties *)new VisibleProperties((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(VisibleProperties **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1VisibleProperties_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    XMLDocument *arg1 = (XMLDocument *) 0 ;
    VisibleProperties *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(XMLDocument **)&jarg1; 
    {
        try {
            result = (VisibleProperties *)new VisibleProperties((XMLDocument const *)arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(VisibleProperties **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1VisibleProperties_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    VisibleProperties *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    {
        try {
            result = (VisibleProperties *)new VisibleProperties(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(VisibleProperties **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1VisibleProperties_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    VisibleProperties *arg1 = 0 ;
    VisibleProperties *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleProperties **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VisibleProperties const & reference is null");
        return 0;
    }
    {
        try {
            result = (VisibleProperties *)new VisibleProperties((VisibleProperties const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(VisibleProperties **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1VisibleProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    VisibleProperties *arg1 = (VisibleProperties *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleProperties **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_VisibleProperties_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    VisibleProperties *arg1 = (VisibleProperties *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleProperties **)&jarg1; 
    {
        try {
            result = (Object *)((VisibleProperties const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_VisibleProperties_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    VisibleProperties *arg1 = (VisibleProperties *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleProperties **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((VisibleProperties const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleProperties_1setDisplayPreference(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    VisibleProperties *arg1 = (VisibleProperties *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleProperties **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setDisplayPreference((VisibleProperties::DisplayPreference )arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_VisibleProperties_1getDisplayPreference(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    VisibleProperties *arg1 = (VisibleProperties *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleProperties **)&jarg1; 
    {
        try {
            result = (int)((VisibleProperties const *)arg1)->getDisplayPreference();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleProperties_1setShowNormals(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    VisibleProperties *arg1 = (VisibleProperties *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleProperties **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setShowNormals(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_VisibleProperties_1getShowNormals(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    VisibleProperties *arg1 = (VisibleProperties *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleProperties **)&jarg1; 
    {
        try {
            result = (bool)((VisibleProperties const *)arg1)->getShowNormals();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleProperties_1setShowAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    VisibleProperties *arg1 = (VisibleProperties *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleProperties **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setShowAxes(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_VisibleProperties_1getShowAxes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    VisibleProperties *arg1 = (VisibleProperties *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleProperties **)&jarg1; 
    {
        try {
            result = (bool)((VisibleProperties const *)arg1)->getShowAxes();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleProperties_1setMaterialName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    VisibleProperties *arg1 = (VisibleProperties *) 0 ;
    char *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleProperties **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    {
        try {
            (arg1)->setMaterialName((char const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_VisibleProperties_1getMaterialName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    VisibleProperties *arg1 = (VisibleProperties *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleProperties **)&jarg1; 
    {
        try {
            result = (char *)((VisibleProperties const *)arg1)->getMaterialName();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Transform_1X(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Transform::X;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Transform_1Y(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Transform::Y;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Transform_1Z(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Transform::Z;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Transform_1NoAxis(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Transform::NoAxis;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Transform_1XYZ(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Transform::XYZ;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Transform_1XZY(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Transform::XZY;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Transform_1YXZ(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Transform::YXZ;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Transform_1YZX(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Transform::YZX;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Transform_1ZXY(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Transform::ZXY;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Transform_1ZYX(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Transform::ZYX;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Transform_1Radians(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Transform::Radians;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Transform_1Degrees(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)Transform::Degrees;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Transform_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Transform *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Transform *)new Transform();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Transform **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Transform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Transform *arg1 = 0 ;
    Transform *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Transform const & reference is null");
        return 0;
    }
    {
        try {
            result = (Transform *)new Transform((Transform const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Transform **)&jresult = result; 
    return jresult;
}

/*
JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Transform_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    double arg1 ;
    double *arg2 ;
    Transform *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (double)jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            result = (Transform *)new Transform(arg1,arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Transform **)&jresult = result; 
    return jresult;
}
*/

JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Transform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Transform *arg1 = (Transform *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Transform_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Transform *arg1 = (Transform *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    {
        try {
            result = (Object *)((Transform const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1printMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Transform *arg1 = (Transform *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    {
        try {
            (arg1)->printMatrix();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Transform *arg1 = (Transform *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Transform const *)arg1)->getPosition(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Transform *arg1 = (Transform *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setPosition((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1getOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Transform *arg1 = (Transform *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Transform const *)arg1)->getOrientation(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1setOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Transform *arg1 = (Transform *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setOrientation((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1setIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Transform *arg1 = (Transform *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    {
        try {
            (arg1)->setIdentity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1rotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jint jarg4) {
    Transform *arg1 = (Transform *) 0 ;
    double *arg2 ;
    int arg3 ;
    int arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (int)jarg4; 
    {
        try {
            (arg1)->rotate((double const (*))arg2,(Transform::AnglePreference )arg3,(Transform::RotationOrder )arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1rotateX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
    Transform *arg1 = (Transform *) 0 ;
    double arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            (arg1)->rotateX(arg2,(Transform::AnglePreference )arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1rotateY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
    Transform *arg1 = (Transform *) 0 ;
    double arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            (arg1)->rotateY(arg2,(Transform::AnglePreference )arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1rotateZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
    Transform *arg1 = (Transform *) 0 ;
    double arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            (arg1)->rotateZ(arg2,(Transform::AnglePreference )arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1rotateAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
    Transform *arg1 = (Transform *) 0 ;
    double arg2 ;
    int arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            (arg1)->rotateAxis(arg2,(Transform::AnglePreference )arg3,(double const (*))arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1translateX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Transform *arg1 = (Transform *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->translateX(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1translateY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Transform *arg1 = (Transform *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->translateY(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1translateZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Transform *arg1 = (Transform *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->translateZ(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Transform *arg1 = (Transform *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->translate((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Transform_1setupSerializedMembers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Transform *arg1 = (Transform *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Transform **)&jarg1; 
    {
        try {
            (arg1)->setupSerializedMembers();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1VisibleObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    VisibleObject *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (VisibleObject *)new VisibleObject();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(VisibleObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1VisibleObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    VisibleObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (VisibleObject *)new VisibleObject((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(VisibleObject **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1VisibleObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    VisibleObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    {
        try {
            result = (VisibleObject *)new VisibleObject(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(VisibleObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1VisibleObject_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    VisibleObject *arg1 = 0 ;
    VisibleObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VisibleObject const & reference is null");
        return 0;
    }
    {
        try {
            result = (VisibleObject *)new VisibleObject((VisibleObject const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(VisibleObject **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1VisibleObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_VisibleObject_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    {
        try {
            result = (Object *)((VisibleObject const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_VisibleObject_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((VisibleObject const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1setNumGeometryFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setNumGeometryFiles(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1setGeometryFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return ;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            (arg1)->setGeometryFileName(arg2,(std::string const &)*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg3; 
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_VisibleObject_1getNumGeometryFiles(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    {
        try {
            result = (int)((VisibleObject const *)arg1)->getNumGeometryFiles();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_VisibleObject_1getGeometryFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    int arg2 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (char *)((VisibleObject const *)arg1)->getGeometryFileName(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1setVisibleProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    VisibleProperties *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = *(VisibleProperties **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VisibleProperties const & reference is null");
        return ;
    }
    {
        try {
            (arg1)->setVisibleProperties((VisibleProperties const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_VisibleObject_1getVisibleProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    VisibleProperties *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    {
        try {
            {
                VisibleProperties &_result_ref = (arg1)->getVisibleProperties();
                result = (VisibleProperties *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(VisibleProperties **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1setTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    Transform *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = *(Transform **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Transform const & reference is null");
        return ;
    }
    {
        try {
            (arg1)->setTransform((Transform const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_VisibleObject_1getTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    Transform *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    {
        try {
            {
                Transform &_result_ref = (arg1)->getTransform();
                result = (Transform *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Transform **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1setScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setScaleFactors((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1getScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((VisibleObject const *)arg1)->getScaleFactors(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1rotateRadians_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->rotateRadians((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1rotateRadians_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    double *arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            (arg1)->rotateRadians((double const (*))arg2,(Transform::RotationOrder )arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1rotateRadiansX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->rotateRadiansX(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1rotateRadiansY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->rotateRadiansY(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1rotateRadiansZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->rotateRadiansZ(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1rotateRadiansAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    double arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->rotateRadiansAxis(arg2,(double const (*))arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1rotateDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->rotateDegrees((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1rotateDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    double *arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            (arg1)->rotateDegrees((double const (*))arg2,(Transform::RotationOrder )arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1rotateDegreesX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->rotateDegreesX(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1rotateDegreesY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->rotateDegreesY(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1rotateDegreesZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->rotateDegreesZ(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1rotateDegreesAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    double arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->rotateDegreesAxis(arg2,(double const (*))arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->translate((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_VisibleObject_1setupProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    VisibleObject *arg1 = (VisibleObject *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(VisibleObject **)&jarg1; 
    {
        try {
            (arg1)->setupProperties();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Body_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    double arg1 = (double) 1.0 ;
    double *arg2 = (double *) NULL ;
    Body *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (double)jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            result = (Body *)new Body(arg1,arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Body **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Body_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Body *arg1 = 0 ;
    Body *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Body const & reference is null");
        return 0;
    }
    {
        try {
            result = (Body *)new Body((Body const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Body **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Body_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    Body *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Body *)new Body((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Body **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Body_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    Body *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    {
        try {
            result = (Body *)new Body(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Body **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Body(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Body *arg1 = (Body *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Body_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Body *arg1 = (Body *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1; 
    {
        try {
            result = (Object *)((Body const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Body_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    Body *arg1 = (Body *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((Body const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Body_1setMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Body *arg1 = (Body *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setMass(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Body_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Body *arg1 = (Body *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1; 
    {
        try {
            result = (double)(arg1)->getMass();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Body_1setInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Body *arg1 = (Body *) 0 ;
    double *arg2 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setInertia(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Body_1setInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
    Body *arg1 = (Body *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    {
        try {
            (arg1)->setInertia(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Body_1setInertia_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
    Body *arg1 = (Body *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    double arg7 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = (double)jarg6; 
    arg7 = (double)jarg7; 
    {
        try {
            (arg1)->setInertia(arg2,arg3,arg4,arg5,arg6,arg7);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Body_1getInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Body *arg1 = (Body *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->getInertia(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Body_1getInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Body *arg1 = (Body *) 0 ;
    double (*arg2)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1; 
    arg2 = *(double (**)[3])&jarg2; 
    {
        try {
            (arg1)->getInertia((double (*)[3])arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Body_1setCenterOfMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Body *arg1 = (Body *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setCenterOfMass((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Body_1getCenterOfMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Body *arg1 = (Body *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Body const *)arg1)->getCenterOfMass(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Body_1scaleBy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Body *arg1 = (Body *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->scaleBy((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Body_1setNull(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Body *arg1 = (Body *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1; 
    {
        try {
            (arg1)->setNull();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Body_1setupProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Body *arg1 = (Body *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Body **)&jarg1; 
    {
        try {
            (arg1)->setupProperties();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1SetBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetBodies_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Set<Body > *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Set<Body > *)new Set<Body >();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Body > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetBodies_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    Set<Body > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Set<Body > *)new Set<Body >((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Body > **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetBodies_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Body > *arg1 = 0 ;
    Set<Body > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Set<Body > const & reference is null");
        return 0;
    }
    {
        try {
            result = (Set<Body > *)new Set<Body >((Set<Body > const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Body > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetBodies_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    {
        try {
            result = (Object *)((Set<Body > const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetBodies_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setMemoryOwner(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetBodies_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    {
        try {
            result = (bool)((Set<Body > const *)arg1)->getMemoryOwner();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetBodies_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetBodies_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->ensureCapacity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetBodies_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    {
        try {
            (arg1)->trim();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetBodies_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    {
        try {
            result = (int)((Set<Body > const *)arg1)->getCapacity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetBodies_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetBodies_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    {
        try {
            result = (int)((Set<Body > const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetBodies_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->setSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetBodies_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    {
        try {
            result = (int)((Set<Body > const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetBodies_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    Body *arg2 = (Body *) 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = *(Body **)&jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Body > const *)arg1)->getIndex((Body const *)arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetBodies_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Body > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetBodies_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    Body *arg2 = (Body *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = *(Body **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->append(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetBodies_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    ArrayPtrs<Body > *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = *(ArrayPtrs<Body > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArrayPtrs<Body > & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->append(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetBodies_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    int arg2 ;
    Body *arg3 = (Body *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Body **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->insert(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetBodies_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetBodies_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    Body *arg2 = (Body *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = *(Body **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->remove((Body const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetBodies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    int arg2 ;
    Body *arg3 = (Body *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Body **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->set(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetBodies_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    int arg2 ;
    Body *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (Body *)((Set<Body > const *)arg1)->get(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Body **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetBodies_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    std::string *arg2 = 0 ;
    Body *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Body *)(arg1)->get((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Body **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetBodies_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    Body *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    {
        try {
            result = (Body *)((Set<Body > const *)arg1)->getLast();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Body **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetBodies_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    Set<Body > *arg1 = (Set<Body > *) 0 ;
    Body *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Body > **)&jarg1; 
    arg2 = *(Body **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Body const & reference is null");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            result = (int)((Set<Body > const *)arg1)->searchBinary((Body const &)*arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1SetMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetMaterials_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Set<Material > *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Set<Material > *)new Set<Material >();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Material > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetMaterials_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    Set<Material > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Set<Material > *)new Set<Material >((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Material > **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetMaterials_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Material > *arg1 = 0 ;
    Set<Material > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Set<Material > const & reference is null");
        return 0;
    }
    {
        try {
            result = (Set<Material > *)new Set<Material >((Set<Material > const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Material > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetMaterials_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    {
        try {
            result = (Object *)((Set<Material > const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetMaterials_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setMemoryOwner(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetMaterials_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    {
        try {
            result = (bool)((Set<Material > const *)arg1)->getMemoryOwner();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetMaterials_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetMaterials_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->ensureCapacity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetMaterials_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    {
        try {
            (arg1)->trim();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetMaterials_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    {
        try {
            result = (int)((Set<Material > const *)arg1)->getCapacity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetMaterials_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetMaterials_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    {
        try {
            result = (int)((Set<Material > const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetMaterials_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->setSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetMaterials_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    {
        try {
            result = (int)((Set<Material > const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetMaterials_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    Material *arg2 = (Material *) 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = *(Material **)&jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Material > const *)arg1)->getIndex((Material const *)arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetMaterials_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Material > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetMaterials_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    Material *arg2 = (Material *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = *(Material **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->append(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetMaterials_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    ArrayPtrs<Material > *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = *(ArrayPtrs<Material > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArrayPtrs<Material > & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->append(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetMaterials_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    int arg2 ;
    Material *arg3 = (Material *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Material **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->insert(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetMaterials_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetMaterials_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    Material *arg2 = (Material *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = *(Material **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->remove((Material const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetMaterials_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    int arg2 ;
    Material *arg3 = (Material *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Material **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->set(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetMaterials_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    int arg2 ;
    Material *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (Material *)((Set<Material > const *)arg1)->get(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Material **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetMaterials_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    std::string *arg2 = 0 ;
    Material *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Material *)(arg1)->get((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Material **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetMaterials_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    Material *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    {
        try {
            result = (Material *)((Set<Material > const *)arg1)->getLast();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Material **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetMaterials_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    Set<Material > *arg1 = (Set<Material > *) 0 ;
    Material *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Material > **)&jarg1; 
    arg2 = *(Material **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Material const & reference is null");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            result = (int)((Set<Material > const *)arg1)->searchBinary((Material const &)*arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1MaterialSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    MaterialSet *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (MaterialSet *)new MaterialSet();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(MaterialSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1MaterialSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    MaterialSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (MaterialSet *)new MaterialSet((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(MaterialSet **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1MaterialSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MaterialSet *arg1 = 0 ;
    MaterialSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MaterialSet **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MaterialSet const & reference is null");
        return 0;
    }
    {
        try {
            result = (MaterialSet *)new MaterialSet((MaterialSet const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(MaterialSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1MaterialSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MaterialSet *arg1 = (MaterialSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MaterialSet **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_MaterialSet_1addMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    MaterialSet *arg1 = (MaterialSet *) 0 ;
    Material *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MaterialSet **)&jarg1; 
    arg2 = *(Material **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Material & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->addMaterial(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_MaterialSet_1updateMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    MaterialSet *arg1 = (MaterialSet *) 0 ;
    Material *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MaterialSet **)&jarg1; 
    arg2 = *(Material **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Material & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->updateMaterial(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_MaterialSet_1removeMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    MaterialSet *arg1 = (MaterialSet *) 0 ;
    Material *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MaterialSet **)&jarg1; 
    arg2 = *(Material **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Material & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->removeMaterial(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_MaterialSet_1materialExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    MaterialSet *arg1 = (MaterialSet *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MaterialSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (bool)((MaterialSet const *)arg1)->materialExists((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_MaterialSet_1getNumberOfMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    MaterialSet *arg1 = (MaterialSet *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MaterialSet **)&jarg1; 
    {
        try {
            result = (int)((MaterialSet const *)arg1)->getNumberOfMaterials();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_MaterialSet_1getMaterialByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    MaterialSet *arg1 = (MaterialSet *) 0 ;
    int arg2 ;
    Material *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MaterialSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            {
                Material const &_result_ref = ((MaterialSet const *)arg1)->getMaterialByIndex(arg2);
                result = (Material *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Material **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_MaterialSet_1getMaterialByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    MaterialSet *arg1 = (MaterialSet *) 0 ;
    char *arg2 ;
    Material *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MaterialSet **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    {
        try {
            {
                Material const &_result_ref = ((MaterialSet const *)arg1)->getMaterialByName((char const *)arg2);
                result = (Material *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Material **)&jresult = result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_get_1Actuator_1LARGE(JNIEnv *jenv, jclass jcls) {
    jdouble jresult = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (double)(double)Actuator::LARGE;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Actuator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Actuator *arg1 = (Actuator *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Actuator_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            result = (Object *)((Actuator const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Actuator_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((Actuator const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Actuator *arg1 = (Actuator *) 0 ;
    Model *arg2 = (Model *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = *(Model **)&jarg2; 
    {
        try {
            (arg1)->setModel(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Actuator_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    Model *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            result = (Model *)((Actuator const *)arg1)->getModel();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Model **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Actuator_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            result = (int)((Actuator const *)arg1)->getNX();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Actuator_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = ((Actuator const *)arg1)->getControlName(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Actuator_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)((Actuator const *)arg1)->getControlIndex((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    Actuator *arg1 = (Actuator *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setControl(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    Actuator *arg1 = (Actuator *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setControl((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Actuator *arg1 = (Actuator *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setControls((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Actuator_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Actuator const *)arg1)->getControl(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Actuator_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)((Actuator const *)arg1)->getControl((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Actuator *arg1 = (Actuator *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Actuator const *)arg1)->getControls(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Actuator_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            result = (int)((Actuator const *)arg1)->getNY();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Actuator_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    int arg2 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            {
                std::string const &_result_ref = ((Actuator const *)arg1)->getStateName(arg2);
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Actuator_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)((Actuator const *)arg1)->getStateIndex((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1setState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    Actuator *arg1 = (Actuator *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setState(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1setState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    Actuator *arg1 = (Actuator *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setState((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Actuator *arg1 = (Actuator *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setStates((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Actuator_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Actuator const *)arg1)->getState(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Actuator_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)((Actuator const *)arg1)->getState((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Actuator *arg1 = (Actuator *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Actuator const *)arg1)->getStates(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Actuator_1getNYP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            result = (int)((Actuator const *)arg1)->getNYP();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Actuator_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    int arg2 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            {
                std::string const &_result_ref = ((Actuator const *)arg1)->getPseudoStateName(arg2);
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Actuator_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)((Actuator const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1setPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    Actuator *arg1 = (Actuator *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setPseudoState(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1setPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    Actuator *arg1 = (Actuator *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setPseudoState((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Actuator *arg1 = (Actuator *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setPseudoStates((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Actuator_1getPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Actuator const *)arg1)->getPseudoState(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Actuator_1getPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)((Actuator const *)arg1)->getPseudoState((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Actuator *arg1 = (Actuator *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Actuator const *)arg1)->getPseudoStates(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1setArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Actuator *arg1 = (Actuator *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setArea(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Actuator_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            result = (double)((Actuator const *)arg1)->getArea();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Actuator_1getAppliesForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            result = (bool)((Actuator const *)arg1)->getAppliesForce();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1setForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Actuator *arg1 = (Actuator *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setForce(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Actuator_1getForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            result = (double)((Actuator const *)arg1)->getForce();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Actuator_1getStress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            result = (double)((Actuator const *)arg1)->getStress();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Actuator_1getSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            result = (double)((Actuator const *)arg1)->getSpeed();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Actuator_1getPower(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            result = (double)((Actuator const *)arg1)->getPower();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1setMaxForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Actuator *arg1 = (Actuator *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setMaxForce(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Actuator_1getMaxForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            result = (double)((Actuator const *)arg1)->getMaxForce();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1setMinForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Actuator *arg1 = (Actuator *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setMinForce(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Actuator_1getMinForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            result = (double)((Actuator const *)arg1)->getMinForce();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1setOptimalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Actuator *arg1 = (Actuator *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setOptimalForce(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Actuator_1getOptimalForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            result = (double)((Actuator const *)arg1)->getOptimalForce();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
    Actuator *arg1 = (Actuator *) 0 ;
    double *arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Actuator *arg1 = (Actuator *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            (arg1)->computeActuation();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1computeStateDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Actuator *arg1 = (Actuator *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->computeStateDerivatives(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1updatePseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Actuator *arg1 = (Actuator *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            (arg1)->updatePseudoStates();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuator_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Actuator *arg1 = (Actuator *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            (arg1)->apply();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Actuator_1check(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Actuator *arg1 = (Actuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuator **)&jarg1; 
    {
        try {
            result = (bool)((Actuator const *)arg1)->check();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1SetActuators(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetActuators_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Set<Actuator > *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Set<Actuator > *)new Set<Actuator >();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Actuator > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetActuators_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    Set<Actuator > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Set<Actuator > *)new Set<Actuator >((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Actuator > **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetActuators_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Actuator > *arg1 = 0 ;
    Set<Actuator > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Set<Actuator > const & reference is null");
        return 0;
    }
    {
        try {
            result = (Set<Actuator > *)new Set<Actuator >((Set<Actuator > const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Actuator > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetActuators_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    {
        try {
            result = (Object *)((Set<Actuator > const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetActuators_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setMemoryOwner(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetActuators_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    {
        try {
            result = (bool)((Set<Actuator > const *)arg1)->getMemoryOwner();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetActuators_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetActuators_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->ensureCapacity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetActuators_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    {
        try {
            (arg1)->trim();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetActuators_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    {
        try {
            result = (int)((Set<Actuator > const *)arg1)->getCapacity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetActuators_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetActuators_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    {
        try {
            result = (int)((Set<Actuator > const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetActuators_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->setSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetActuators_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    {
        try {
            result = (int)((Set<Actuator > const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetActuators_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    Actuator *arg2 = (Actuator *) 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = *(Actuator **)&jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Actuator > const *)arg1)->getIndex((Actuator const *)arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetActuators_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Actuator > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetActuators_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    Actuator *arg2 = (Actuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = *(Actuator **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->append(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetActuators_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    ArrayPtrs<Actuator > *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = *(ArrayPtrs<Actuator > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArrayPtrs<Actuator > & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->append(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetActuators_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    int arg2 ;
    Actuator *arg3 = (Actuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Actuator **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->insert(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetActuators_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetActuators_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    Actuator *arg2 = (Actuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = *(Actuator **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->remove((Actuator const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetActuators_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    int arg2 ;
    Actuator *arg3 = (Actuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Actuator **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->set(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetActuators_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    int arg2 ;
    Actuator *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (Actuator *)((Set<Actuator > const *)arg1)->get(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Actuator **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetActuators_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    std::string *arg2 = 0 ;
    Actuator *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Actuator *)(arg1)->get((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Actuator **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetActuators_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    Actuator *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    {
        try {
            result = (Actuator *)((Set<Actuator > const *)arg1)->getLast();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Actuator **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetActuators_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    Set<Actuator > *arg1 = (Set<Actuator > *) 0 ;
    Actuator *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Actuator > **)&jarg1; 
    arg2 = *(Actuator **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Actuator const & reference is null");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            result = (int)((Set<Actuator > const *)arg1)->searchBinary((Actuator const &)*arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ActuatorSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    ActuatorSet *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (ActuatorSet *)new ActuatorSet();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ActuatorSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ActuatorSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    char *arg1 ;
    ActuatorSet *result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    {
        try {
            result = (ActuatorSet *)new ActuatorSet((char const *)arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ActuatorSet **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1ActuatorSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    Model *arg2 = (Model *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = *(Model **)&jarg2; 
    {
        try {
            (arg1)->setModel(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    Model *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    {
        try {
            result = (Model *)((ActuatorSet const *)arg1)->getModel();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Model **)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    Actuator *arg2 = (Actuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = *(Actuator **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->append(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    Actuator *arg3 = (Actuator *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Actuator **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->set(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    {
        try {
            result = (int)((ActuatorSet const *)arg1)->getNX();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1mapActuatorToControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)((ActuatorSet const *)arg1)->mapActuatorToControl(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1mapControlToActuator(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)((ActuatorSet const *)arg1)->mapControlToActuator(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)((ActuatorSet const *)arg1)->getControlIndex((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = ((ActuatorSet const *)arg1)->getControlName(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setControl(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setControl((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setControls((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((ActuatorSet const *)arg1)->getControl(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)((ActuatorSet const *)arg1)->getControl((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((ActuatorSet const *)arg1)->getControls(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    {
        try {
            result = (int)((ActuatorSet const *)arg1)->getNY();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1mapActuatorToState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)((ActuatorSet const *)arg1)->mapActuatorToState(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1mapStateToActuator(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)((ActuatorSet const *)arg1)->mapStateToActuator(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)((ActuatorSet const *)arg1)->getStateIndex((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = ((ActuatorSet const *)arg1)->getStateName(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1setState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setState(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1setState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setState((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setStates((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((ActuatorSet const *)arg1)->getState(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)((ActuatorSet const *)arg1)->getState((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((ActuatorSet const *)arg1)->getStates(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getNYP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    {
        try {
            result = (int)((ActuatorSet const *)arg1)->getNYP();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1mapActuatorToPseudoState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)((ActuatorSet const *)arg1)->mapActuatorToPseudoState(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1mapPseudoStateToActuator(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)((ActuatorSet const *)arg1)->mapPseudoStateToActuator(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)((ActuatorSet const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = ((ActuatorSet const *)arg1)->getPseudoStateName(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1setPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setPseudoState(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1setPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setPseudoState((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setPseudoStates((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((ActuatorSet const *)arg1)->getPseudoState(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)((ActuatorSet const *)arg1)->getPseudoState((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((ActuatorSet const *)arg1)->getPseudoStates(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    double *arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    {
        try {
            (arg1)->computeActuation();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1computeStateDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->computeStateDerivatives(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1updatePseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    {
        try {
            (arg1)->updatePseudoStates();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    {
        try {
            (arg1)->apply();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ActuatorSet_1check(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    ActuatorSet *arg1 = (ActuatorSet *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ActuatorSet **)&jarg1; 
    {
        try {
            result = (bool)((ActuatorSet const *)arg1)->check();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ContactForceSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    ContactForceSet *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (ContactForceSet *)new ContactForceSet();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ContactForceSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ContactForceSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    char *arg1 ;
    ContactForceSet *result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    {
        try {
            result = (ContactForceSet *)new ContactForceSet((char const *)arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ContactForceSet **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1ContactForceSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ContactForceSet *arg1 = (ContactForceSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ContactForceSet **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ContactForceSet_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    ContactForceSet *arg1 = (ContactForceSet *) 0 ;
    ContactForce *arg2 = (ContactForce *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ContactForceSet **)&jarg1; 
    arg2 = *(ContactForce **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->append(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ContactForceSet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    ContactForceSet *arg1 = (ContactForceSet *) 0 ;
    int arg2 ;
    ContactForce *arg3 = (ContactForce *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ContactForceSet **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(ContactForce **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->set(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ContactForceSet_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ContactForceSet *arg1 = (ContactForceSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ContactForceSet **)&jarg1; 
    {
        try {
            (arg1)->computeContact();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ContactForceSet_1updatePseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ContactForceSet *arg1 = (ContactForceSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ContactForceSet **)&jarg1; 
    {
        try {
            (arg1)->updatePseudoStates();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ContactForceSet_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ContactForceSet *arg1 = (ContactForceSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ContactForceSet **)&jarg1; 
    {
        try {
            (arg1)->apply();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ContactForceSet_1check(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    ContactForceSet *arg1 = (ContactForceSet *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ContactForceSet **)&jarg1; 
    {
        try {
            result = (bool)((ContactForceSet const *)arg1)->check();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1StateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    double arg1 = (double) 0.0 ;
    int arg2 = (int) 0 ;
    double *arg3 = (double *) NULL ;
    StateVector *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (double)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            result = (StateVector *)new StateVector(arg1,arg2,(double const *)arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(StateVector **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1StateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    StateVector *arg1 = 0 ;
    StateVector *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StateVector const & reference is null");
        return 0;
    }
    {
        try {
            result = (StateVector *)new StateVector((StateVector const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(StateVector **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1StateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    StateVector *arg1 = (StateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
    StateVector *arg1 = (StateVector *) 0 ;
    double arg2 ;
    int arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            (arg1)->setStates(arg2,arg3,(double const (*))arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_StateVector_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    StateVector *arg1 = (StateVector *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    {
        try {
            result = (int)((StateVector const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    StateVector *arg1 = (StateVector *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setTime(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_StateVector_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    StateVector *arg1 = (StateVector *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    {
        try {
            result = (double)((StateVector const *)arg1)->getTime();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_StateVector_1getDataValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    StateVector *arg1 = (StateVector *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return 0;
    }
    {
        try {
            result = (int)(arg1)->getDataValue(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1setDataValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    StateVector *arg1 = (StateVector *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return ;
    }
    {
        try {
            (arg1)->setDataValue(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_StateVector_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    StateVector *arg1 = (StateVector *) 0 ;
    Array<double > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    {
        try {
            {
                Array<double > &_result_ref = (arg1)->getData();
                result = (Array<double > *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1shiftTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    StateVector *arg1 = (StateVector *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->shiftTime(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1scaleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    StateVector *arg1 = (StateVector *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->scaleTime(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    StateVector *arg1 = (StateVector *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->add(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    StateVector *arg1 = (StateVector *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->add(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    StateVector *arg1 = (StateVector *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->add(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    StateVector *arg1 = (StateVector *) 0 ;
    StateVector *arg2 = (StateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = *(StateVector **)&jarg2; 
    {
        try {
            (arg1)->add(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1subtract_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    StateVector *arg1 = (StateVector *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->subtract(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1subtract_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    StateVector *arg1 = (StateVector *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->subtract(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1subtract_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    StateVector *arg1 = (StateVector *) 0 ;
    StateVector *arg2 = (StateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = *(StateVector **)&jarg2; 
    {
        try {
            (arg1)->subtract(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1multiply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    StateVector *arg1 = (StateVector *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->multiply(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1multiply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    StateVector *arg1 = (StateVector *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->multiply(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1multiply_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    StateVector *arg1 = (StateVector *) 0 ;
    StateVector *arg2 = (StateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = *(StateVector **)&jarg2; 
    {
        try {
            (arg1)->multiply(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1divide_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    StateVector *arg1 = (StateVector *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->divide(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1divide_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    StateVector *arg1 = (StateVector *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->divide(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1divide_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    StateVector *arg1 = (StateVector *) 0 ;
    StateVector *arg2 = (StateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = *(StateVector **)&jarg2; 
    {
        try {
            (arg1)->divide(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_StateVector_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    StateVector *arg1 = (StateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    {
        try {
            (arg1)->print();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_StateVector_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    StateVector *arg1 = (StateVector *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(StateVector **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    {
        try {
            result = (int)(arg1)->print(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1Storage_1DEFAULT_1CAPACITY(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)(int)Storage_DEFAULT_CAPACITY;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_get_1Storage_1LARGE_1NEGATIVE(JNIEnv *jenv, jclass jcls) {
    jdouble jresult = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (double)(double)Storage::LARGE_NEGATIVE;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_get_1Storage_1LARGE_1POSITIVE(JNIEnv *jenv, jclass jcls) {
    jdouble jresult = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (double)(double)Storage::LARGE_POSITIVE;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_set_1Storage_1DEFAULT_1HEADER_1TOKEN(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    char *arg1 ;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return ;
        }
    }
    {
        try {
            {
                if (arg1) {
                    Storage::DEFAULT_HEADER_TOKEN = (char const *) (new char[strlen(arg1)+1]);
                    strcpy((char *) Storage::DEFAULT_HEADER_TOKEN,arg1);
                }else {
                    Storage::DEFAULT_HEADER_TOKEN = 0;
                }
            }
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_get_1Storage_1DEFAULT_1HEADER_1TOKEN(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (char *)Storage::DEFAULT_HEADER_TOKEN;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_set_1Storage_1DEFAULT_1HEADER_1SEPARATOR(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    char *arg1 ;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return ;
        }
    }
    {
        try {
            {
                if (arg1) {
                    Storage::DEFAULT_HEADER_SEPARATOR = (char const *) (new char[strlen(arg1)+1]);
                    strcpy((char *) Storage::DEFAULT_HEADER_SEPARATOR,arg1);
                }else {
                    Storage::DEFAULT_HEADER_SEPARATOR = 0;
                }
            }
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_get_1Storage_1DEFAULT_1HEADER_1SEPARATOR(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (char *)Storage::DEFAULT_HEADER_SEPARATOR;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Storage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    int arg1 = (int) Storage_DEFAULT_CAPACITY ;
    char *arg2 = (char *) "UNKNOWN" ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    {
        try {
            result = (Storage *)new Storage(arg1,(char const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Storage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    char *arg1 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    {
        try {
            result = (Storage *)new Storage((char const *)arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Storage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    jlong jresult = 0 ;
    Storage *arg1 = 0 ;
    bool arg2 = (bool) true ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Storage const & reference is null");
        return 0;
    }
    arg2 = jarg2 ? true : false; 
    {
        try {
            result = (Storage *)new Storage((Storage const &)*arg1,arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Storage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jstring jarg4) {
    jlong jresult = 0 ;
    Storage *arg1 = 0 ;
    int arg2 ;
    int arg3 ;
    char *arg4 = (char *) "\t" ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Storage const & reference is null");
        return 0;
    }
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    {
        arg4 = 0;
        if (jarg4) {
            arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
            if (!arg4) return 0;
        }
    }
    {
        try {
            result = (Storage *)new Storage((Storage const &)*arg1,arg2,arg3,(char const *)arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    {
        if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Storage_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        try {
            result = (Object *)((Storage const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Storage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Storage *arg1 = (Storage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        try {
            result = (int)(arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1getSmallestNumberOfStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        try {
            result = (int)(arg1)->getSmallestNumberOfStates();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Storage_1getStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    StateVector *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (StateVector *)((Storage const *)arg1)->getStateVector(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(StateVector **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Storage_1getLastStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    StateVector *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        try {
            result = (StateVector *)((Storage const *)arg1)->getLastStateVector();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(StateVector **)&jresult = result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Storage_1getFirstTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        try {
            result = (double)(arg1)->getFirstTime();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Storage_1getLastTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        try {
            result = (double)(arg1)->getLastTime();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    int arg4 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return 0;
    }
    arg4 = (int)jarg4; 
    {
        try {
            result = (int)((Storage const *)arg1)->getTime(arg2,*arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1getTimeColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    double **arg2 = 0 ;
    int arg3 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = *(double ***)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
        return 0;
    }
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)(arg1)->getTimeColumn(*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1getData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    int arg3 ;
    double *arg4 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double **)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return 0;
    }
    {
        try {
            result = (int)((Storage const *)arg1)->getData(arg2,arg3,*arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1getData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            result = (int)((Storage const *)arg1)->getData(arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1getData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    int arg3 ;
    double **arg4 = (double **) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double ***)&jarg4; 
    {
        try {
            result = (int)((Storage const *)arg1)->getData(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1getData_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    int arg3 ;
    double *arg4 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            result = (int)((Storage const *)arg1)->getData(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1getDataAtTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    double arg2 ;
    int arg3 ;
    double **arg4 = (double **) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double ***)&jarg4; 
    {
        try {
            result = (int)(arg1)->getDataAtTime(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1getDataAtTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    double arg2 ;
    int arg3 ;
    double *arg4 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            result = (int)(arg1)->getDataAtTime(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1getDataColumn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    double **arg3 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double ***)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
        return 0;
    }
    {
        try {
            result = (int)((Storage const *)arg1)->getDataColumn(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1setDataColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    Array<double > *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Array<double > **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > const & reference is null");
        return ;
    }
    {
        try {
            (arg1)->setDataColumn(arg2,(Array<double > const &)*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1getDataColumn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    std::string *arg2 = 0 ;
    double **arg3 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = *(std::string **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return 0;
    }
    arg3 = *(double ***)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double *& reference is null");
        return 0;
    }
    {
        try {
            result = (int)((Storage const *)arg1)->getDataColumn(*arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1setStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setStepInterval(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1getStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        try {
            result = (int)((Storage const *)arg1)->getStepInterval();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        try {
            result = (int)((Storage const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1setWriteSIMMHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setWriteSIMMHeader(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Storage_1getWriteSIMMHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        try {
            result = (bool)((Storage const *)arg1)->getWriteSIMMHeader();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1setHeaderToken(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    char *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    {
        try {
            (arg1)->setHeaderToken((char const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Storage_1getHeaderToken(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        try {
            result = (char *)((Storage const *)arg1)->getHeaderToken();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1getColumnIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)((Storage const *)arg1)->getColumnIndex((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1setColumnLabels(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    char *arg2 = (char *) NULL ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    {
        try {
            (arg1)->setColumnLabels((char const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Storage_1getColumnLabels(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        try {
            result = (char *)((Storage const *)arg1)->getColumnLabels();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Storage_1getColumnLabelsArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    Array<std::string > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        try {
            {
                Array<std::string > const &_result_ref = ((Storage const *)arg1)->getColumnLabelsArray();
                result = (Array<std::string > *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<std::string > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1reset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int arg2 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)(arg1)->reset(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1reset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    double arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            result = (int)(arg1)->reset(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    StateVector *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = *(StateVector **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StateVector const & reference is null");
        return 0;
    }
    {
        try {
            result = (int)(arg1)->append((StateVector const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    Array<StateVector > *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = *(Array<StateVector > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<StateVector > const & reference is null");
        return 0;
    }
    {
        try {
            result = (int)(arg1)->append((Array<StateVector > const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    double arg2 ;
    int arg3 ;
    double *arg4 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            result = (int)(arg1)->append(arg2,arg3,(double const *)arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    double arg3 ;
    int arg4 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            result = (int)(arg1)->store(arg2,arg3,arg4,(double const *)arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1shiftTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->shiftTime(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1scaleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->scaleTime(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->add(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->add(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->add(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    StateVector *arg2 = (StateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = *(StateVector **)&jarg2; 
    {
        try {
            (arg1)->add(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1add_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    Storage *arg2 = (Storage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = *(Storage **)&jarg2; 
    {
        try {
            (arg1)->add(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1subtract_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->subtract(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1subtract_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->subtract(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1subtract_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    StateVector *arg2 = (StateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = *(StateVector **)&jarg2; 
    {
        try {
            (arg1)->subtract(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1subtract_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    Storage *arg2 = (Storage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = *(Storage **)&jarg2; 
    {
        try {
            (arg1)->subtract(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1multiply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->multiply(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1multiplyColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->multiplyColumn(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1multiply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->multiply(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1multiply_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    StateVector *arg2 = (StateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = *(StateVector **)&jarg2; 
    {
        try {
            (arg1)->multiply(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1multiply_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    Storage *arg2 = (Storage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = *(Storage **)&jarg2; 
    {
        try {
            (arg1)->multiply(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1divide_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->divide(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1divide_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->divide(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1divide_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    StateVector *arg2 = (StateVector *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = *(StateVector **)&jarg2; 
    {
        try {
            (arg1)->divide(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1divide_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    Storage *arg2 = (Storage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = *(Storage **)&jarg2; 
    {
        try {
            (arg1)->divide(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Storage_1integrate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jlong jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int arg2 = (int) -2 ;
    int arg3 = (int) -1 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (Storage *)(arg1)->integrate(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Storage_1integrate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
    jlong jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    double arg2 ;
    double arg3 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            result = (Storage *)(arg1)->integrate(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1computeArea_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            result = (int)(arg1)->computeArea(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1computeArea_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    double arg2 ;
    double arg3 ;
    int arg4 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            result = (int)(arg1)->computeArea(arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1computeAverage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            result = (int)(arg1)->computeAverage(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1computeAverage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jint jarg4, jlong jarg5) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    double arg2 ;
    double arg3 ;
    int arg4 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            result = (int)(arg1)->computeAverage(arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1pad(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->pad(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1lowpassFIR(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->lowpassFIR(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1findIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    double arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            result = (int)(arg1)->findIndex(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1findIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    int arg2 ;
    double arg3 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            result = (int)(arg1)->findIndex(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1resample(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
    Storage *arg1 = (Storage *) 0 ;
    double arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            (arg1)->resample(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Storage_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Storage *arg1 = (Storage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        try {
            (arg1)->print();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    char *arg2 ;
    char *arg3 = (char *) "w" ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return 0;
        }
    }
    {
        try {
            result = (int)(arg1)->print((char const *)arg2,(char const *)arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Storage_1print_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3, jstring jarg4) {
    jint jresult = 0 ;
    Storage *arg1 = (Storage *) 0 ;
    char *arg2 ;
    double arg3 ;
    char *arg4 = (char *) "w" ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Storage **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    arg3 = (double)jarg3; 
    {
        arg4 = 0;
        if (jarg4) {
            arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
            if (!arg4) return 0;
        }
    }
    {
        try {
            result = (int)(arg1)->print((char const *)arg2,arg3,(char const *)arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Model(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Model *arg1 = (Model *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Model_1getModelDescriptionFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (char *)((Model const *)arg1)->getModelDescriptionFileName();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setModelDescriptionFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            (arg1)->setModelDescriptionFileName((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getNB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (int)((Model const *)arg1)->getNB();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getNJ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (int)((Model const *)arg1)->getNJ();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getNQ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (int)((Model const *)arg1)->getNQ();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getNU(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (int)((Model const *)arg1)->getNU();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (int)((Model const *)arg1)->getNX();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getNA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (int)((Model const *)arg1)->getNA();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getNP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (int)((Model const *)arg1)->getNP();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (int)((Model const *)arg1)->getNY();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getNYP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (int)((Model const *)arg1)->getNYP();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            (arg1)->setName((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Model_1getBodyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = ((Model const *)arg1)->getBodyName(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Model_1getCoordinateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = ((Model const *)arg1)->getCoordinateName(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Model_1getSpeedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = ((Model const *)arg1)->getSpeedName(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Model_1getActuatorName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = ((Model const *)arg1)->getActuatorName(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Model_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = ((Model const *)arg1)->getControlName(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Model_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = ((Model const *)arg1)->getStateName(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Model_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = ((Model const *)arg1)->getPseudoStateName(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getBodyIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)((Model const *)arg1)->getBodyIndex((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getCoordinateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)((Model const *)arg1)->getCoordinateIndex((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getSpeedIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)((Model const *)arg1)->getSpeedIndex((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getActuatorIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)((Model const *)arg1)->getActuatorIndex((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)((Model const *)arg1)->getControlIndex((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)((Model const *)arg1)->getStateIndex((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)((Model const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Model_1getBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    Body *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (Body *)((Model const *)arg1)->getBody(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Body **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1constructBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Model *arg1 = (Model *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            (arg1)->constructBodies();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Model_1getBodySet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    BodySet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (BodySet *)(arg1)->getBodySet();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(BodySet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Model_1getMaterialSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    MaterialSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (MaterialSet *)(arg1)->getMaterialSet();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(MaterialSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Model_1getVisibleObjectByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    VisibleObject *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (VisibleObject *)((Model const *)arg1)->getVisibleObjectByName((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(VisibleObject **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    double arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            (arg1)->set(arg2,(double const (*))arg3,(double const (*))arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Model *arg1 = (Model *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setTime(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (double)((Model const *)arg1)->getTime();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setTimeNormConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Model *arg1 = (Model *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setTimeNormConstant(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getTimeNormConstant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (double)((Model const *)arg1)->getTimeNormConstant();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setControls((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setControl(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setControl((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Model const *)arg1)->getControls(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getControl(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)((Model const *)arg1)->getControl((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setInitialStates((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Model const *)arg1)->getInitialStates(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getInitialState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getInitialState(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getInitialState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)((Model const *)arg1)->getInitialState((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setStates((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Model const *)arg1)->getStates(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getState(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)((Model const *)arg1)->getState((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setInitialPseudoStates((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Model const *)arg1)->getInitialPseudoStates(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getInitialPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getInitialPseudoState(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getInitialPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)((Model const *)arg1)->getInitialPseudoState((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setPseudoStates((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Model const *)arg1)->getPseudoStates(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getPseudoState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getPseudoState(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setConfiguration((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->setConfiguration((double const (*))arg2,(double const (*))arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Model const *)arg1)->getCoordinates(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getCoordinate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getCoordinate(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getCoordinate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)((Model const *)arg1)->getCoordinate((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Model const *)arg1)->getSpeeds(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getSpeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getSpeed(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getSpeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)((Model const *)arg1)->getSpeed((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Model const *)arg1)->getAccelerations(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getAcceleration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getAcceleration(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getAcceleration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    std::string *arg2 = 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (double)((Model const *)arg1)->getAcceleration((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1extractConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            ((Model const *)arg1)->extractConfiguration((double const (*))arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1assemble(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jint jarg6, jlong jarg7, jlong jarg8) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    double arg2 ;
    double *arg3 = (double *) 0 ;
    int *arg4 = (int *) 0 ;
    double arg5 ;
    int arg6 ;
    int *arg7 = (int *) 0 ;
    int *arg8 = (int *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(int **)&jarg4; 
    arg5 = (double)jarg5; 
    arg6 = (int)jarg6; 
    arg7 = *(int **)&jarg7; 
    arg8 = *(int **)&jarg8; 
    {
        try {
            result = (int)(arg1)->assemble(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Model_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    ScaleSet *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(ScaleSet **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ScaleSet const & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->scale((ScaleSet const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Model const *)arg1)->getGravity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->setGravity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getGroundID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (int)((Model const *)arg1)->getGroundID();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->setBodyToJointBodyLocal(arg2,(double const (*))arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->getBodyToJointBodyLocal(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->setInboardToJointBodyLocal(arg2,(double const (*))arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->getInboardToJointBodyLocal(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getMass(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getInertiaBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double (*arg3)[3] ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double (**)[3])&jarg3; 
    {
        try {
            result = (int)((Model const *)arg1)->getInertiaBodyLocal(arg2,(double (*)[3])arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getInertiaBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            result = (int)((Model const *)arg1)->getInertiaBodyLocal(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getSystemInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 ;
    double (*arg4)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double (**)[3])&jarg4; 
    {
        try {
            ((Model const *)arg1)->getSystemInertia(arg2,arg3,(double (*)[3])arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getSystemInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            ((Model const *)arg1)->getSystemInertia(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            ((Model const *)arg1)->getPosition(arg2,(double const (*))arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            ((Model const *)arg1)->getVelocity(arg2,(double const (*))arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getAcceleration_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            ((Model const *)arg1)->getAcceleration(arg2,(double const (*))arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double (*arg3)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double (**)[3])&jarg3; 
    {
        try {
            ((Model const *)arg1)->getDirectionCosines(arg2,(double (*)[3])arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->getDirectionCosines(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getAngularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->getAngularVelocity(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getAngularVelocityBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->getAngularVelocityBodyLocal(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getAngularAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->getAngularAcceleration(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getAngularAccelerationBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->getAngularAccelerationBodyLocal(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            (arg1)->applyForce(arg2,(double const (*))arg3,(double const (*))arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    int *arg3 ;
    double (*arg4)[3] ;
    double (*arg5)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double (**)[3])&jarg4; 
    arg5 = *(double (**)[3])&jarg5; 
    {
        try {
            (arg1)->applyForces(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    int *arg3 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            (arg1)->applyForces(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyForceBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            (arg1)->applyForceBodyLocal(arg2,(double const (*))arg3,(double const (*))arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyForcesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    int *arg3 ;
    double (*arg4)[3] ;
    double (*arg5)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double (**)[3])&jarg4; 
    arg5 = *(double (**)[3])&jarg5; 
    {
        try {
            (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyForcesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    int *arg3 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->applyTorque(arg2,(double const (*))arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyTorques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    int *arg3 ;
    double (*arg4)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double (**)[3])&jarg4; 
    {
        try {
            (arg1)->applyTorques(arg2,(int const (*))arg3,(double const (*)[3])arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyTorques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    int *arg3 ;
    double *arg4 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            (arg1)->applyTorques(arg2,(int const (*))arg3,(double const *)arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyTorqueBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->applyTorqueBodyLocal(arg2,(double const (*))arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyTorquesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    int *arg3 ;
    double (*arg4)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double (**)[3])&jarg4; 
    {
        try {
            (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyTorquesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    int *arg3 ;
    double *arg4 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->applyGeneralizedForce(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyGeneralizedForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->applyGeneralizedForces((double const (*))arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyGeneralizedForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    int *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            (arg1)->applyGeneralizedForces(arg2,(int const (*))arg3,(double const (*))arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getNetAppliedGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getNetAppliedGeneralizedForce(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1computeGeneralizedForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->computeGeneralizedForces(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1computeReactions(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    double (*arg2)[3] ;
    double (*arg3)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double (**)[3])&jarg2; 
    arg3 = *(double (**)[3])&jarg3; 
    {
        try {
            ((Model const *)arg1)->computeReactions((double (*)[3])arg2,(double (*)[3])arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1formMassMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->formMassMatrix(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1formEulerTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->formEulerTransform(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1formJacobianTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jint jarg5) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 = (double *) 0 ;
    int arg5 = (int) -1 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            ((Model const *)arg1)->formJacobianTranslation(arg2,(double const (*))arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1formJacobianOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    int arg4 = (int) -1 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = (int)jarg4; 
    {
        try {
            ((Model const *)arg1)->formJacobianOrientation(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1formJacobianEuler(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    int arg4 = (int) -1 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = (int)jarg4; 
    {
        try {
            ((Model const *)arg1)->formJacobianEuler(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1ComputeEffectiveMassMatrix(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    jint jresult = 0 ;
    int arg1 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            result = (int)Model::ComputeEffectiveMassMatrix(arg1,arg2,(double const *)arg3,(double const *)arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1ComputeJacobianInverse(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    jint jresult = 0 ;
    int arg1 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            result = (int)Model::ComputeJacobianInverse(arg1,arg2,(double const *)arg3,(double const *)arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1computeAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            result = (int)(arg1)->computeAccelerations(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1computeAuxiliaryDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            (arg1)->computeAuxiliaryDerivatives(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1computePerformance(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    double arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    void *arg6 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(void **)&jarg6; 
    {
        try {
            result = (int)(arg1)->computePerformance(arg2,arg3,arg4,arg5,arg6);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1computeConstraint(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6, jlong jarg7) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    double arg2 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    int arg5 ;
    double *arg6 = (double *) 0 ;
    void *arg7 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = (int)jarg5; 
    arg6 = *(double **)&jarg6; 
    arg7 = *(void **)&jarg7; 
    {
        try {
            result = (int)(arg1)->computeConstraint(arg2,arg3,arg4,arg5,arg6,arg7);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4, jlong jarg5) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    int arg4 ;
    double *arg5 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = (int)jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            ((Model const *)arg1)->transform(arg2,(double const (*))arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1transformPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            ((Model const *)arg1)->transformPosition(arg2,(double const (*))arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertQuaternionsToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->convertQuaternionsToAngles(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertQuaternionsToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    Storage *arg2 = (Storage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(Storage **)&jarg2; 
    {
        try {
            ((Model const *)arg1)->convertQuaternionsToAngles(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertAnglesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->convertAnglesToQuaternions(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertAnglesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    Storage *arg2 = (Storage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(Storage **)&jarg2; 
    {
        try {
            ((Model const *)arg1)->convertAnglesToQuaternions(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertRadiansToDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->convertRadiansToDegrees(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertRadiansToDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    Storage *arg2 = (Storage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(Storage **)&jarg2; 
    {
        try {
            ((Model const *)arg1)->convertRadiansToDegrees(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertDegreesToRadians_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->convertDegreesToRadians(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertDegreesToRadians_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    Storage *arg2 = (Storage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(Storage **)&jarg2; 
    {
        try {
            ((Model const *)arg1)->convertDegreesToRadians(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertAnglesToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
    Model *arg1 = (Model *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double (*arg5)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = *(double (**)[3])&jarg5; 
    {
        try {
            ((Model const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,(double (*)[3])arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertAnglesToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
    Model *arg1 = (Model *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double *arg5 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            ((Model const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertDirectionCosinesToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    Model *arg1 = (Model *) 0 ;
    double (*arg2)[3] ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double (**)[3])&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            ((Model const *)arg1)->convertDirectionCosinesToAngles((double (*)[3])arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertDirectionCosinesToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            ((Model const *)arg1)->convertDirectionCosinesToAngles(arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertDirectionCosinesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
    Model *arg1 = (Model *) 0 ;
    double (*arg2)[3] ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double (**)[3])&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    {
        try {
            ((Model const *)arg1)->convertDirectionCosinesToQuaternions((double (*)[3])arg2,arg3,arg4,arg5,arg6);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertDirectionCosinesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
    Model *arg1 = (Model *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    double *arg4 = (double *) 0 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    {
        try {
            ((Model const *)arg1)->convertDirectionCosinesToQuaternions(arg2,arg3,arg4,arg5,arg6);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertQuaternionsToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
    Model *arg1 = (Model *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double (*arg6)[3] ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = *(double (**)[3])&jarg6; 
    {
        try {
            ((Model const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,(double (*)[3])arg6);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1convertQuaternionsToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
    Model *arg1 = (Model *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double *arg6 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = *(double **)&jarg6; 
    {
        try {
            ((Model const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,arg6);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Model *arg1 = (Model *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            (arg1)->computeActuation();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->applyActuatorForce(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyActuatorForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Model *arg1 = (Model *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            (arg1)->applyActuatorForces();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setActuatorForce(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getActuatorForce(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getActuatorStress(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getActuatorStress(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getActuatorSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getActuatorSpeed(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getActuatorPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getActuatorPower(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Model *arg1 = (Model *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            (arg1)->computeContact();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyContactForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->applyContactForce(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1applyContactForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Model *arg1 = (Model *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            (arg1)->applyContactForces();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getContactBodyA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)((Model const *)arg1)->getContactBodyA(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getContactBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)((Model const *)arg1)->getContactBodyB(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->setContactPointA(arg2,(double const (*))arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->getContactPointA(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1setContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->setContactPointB(arg2,(double const (*))arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->getContactPointB(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getContactForce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->getContactForce(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getContactNormalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    double *arg5 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            ((Model const *)arg1)->getContactNormalForce(arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getContactTangentForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    double *arg5 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            ((Model const *)arg1)->getContactTangentForce(arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getContactStiffness(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            ((Model const *)arg1)->getContactStiffness(arg2,(double const (*))arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getContactViscosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            ((Model const *)arg1)->getContactViscosity(arg2,(double const (*))arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1getContactFrictionCorrection(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((Model const *)arg1)->getContactFrictionCorrection(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getContactForce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getContactForce(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getContactSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getContactSpeed(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Model_1getContactPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Model const *)arg1)->getContactPower(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Model_1getAnalysisSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    AnalysisSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (AnalysisSet *)(arg1)->getAnalysisSet();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(AnalysisSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1addAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    Analysis *arg2 = (Analysis *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(Analysis **)&jarg2; 
    {
        try {
            (arg1)->addAnalysis(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Model_1getNumAnalyses(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (int)((Model const *)arg1)->getNumAnalyses();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Model_1getAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    int arg2 ;
    Analysis *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            {
                Analysis &_result_ref = ((Model const *)arg1)->getAnalysis(arg2);
                result = (Analysis *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Analysis **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Model_1getIntegCallbackSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    IntegCallbackSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (IntegCallbackSet *)(arg1)->getIntegCallbackSet();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(IntegCallbackSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1addIntegCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    IntegCallback *arg2 = (IntegCallback *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(IntegCallback **)&jarg2; 
    {
        try {
            (arg1)->addIntegCallback(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Model_1getDerivCallbackSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    DerivCallbackSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (DerivCallbackSet *)(arg1)->getDerivCallbackSet();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(DerivCallbackSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Model_1addDerivCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Model *arg1 = (Model *) 0 ;
    DerivCallback *arg2 = (DerivCallback *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(DerivCallback **)&jarg2; 
    {
        try {
            (arg1)->addDerivCallback(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Control(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Control *arg1 = (Control *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Control_1setIsModelControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    Control *arg1 = (Control *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setIsModelControl(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Control_1getIsModelControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    {
        try {
            result = (bool)((Control const *)arg1)->getIsModelControl();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Control_1setExtrapolate(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    Control *arg1 = (Control *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setExtrapolate(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Control_1getExtrapolate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    {
        try {
            result = (bool)((Control const *)arg1)->getExtrapolate();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Control_1getNumParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    {
        try {
            result = (int)((Control const *)arg1)->getNumParameters();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Control_1setDefaultParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Control *arg1 = (Control *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setDefaultParameterMin(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Control_1getDefaultParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    {
        try {
            result = (double)((Control const *)arg1)->getDefaultParameterMin();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Control_1setDefaultParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Control *arg1 = (Control *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setDefaultParameterMax(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Control_1getDefaultParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    {
        try {
            result = (double)((Control const *)arg1)->getDefaultParameterMax();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Control_1setParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    Control *arg1 = (Control *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setParameterMin(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Control_1getParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Control const *)arg1)->getParameterMin(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Control_1setParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    Control *arg1 = (Control *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setParameterMax(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Control_1getParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Control const *)arg1)->getParameterMax(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Control_1getParameterTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Control const *)arg1)->getParameterTime(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Control_1getParameterNeighborhood(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    Control *arg1 = (Control *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return ;
    }
    arg4 = *(double **)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return ;
    }
    {
        try {
            ((Control const *)arg1)->getParameterNeighborhood(arg2,*arg3,*arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Control_1getParameterList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
    jint jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    double arg2 ;
    Array<int > *arg3 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(Array<int > **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<int > & reference is null");
        return 0;
    }
    {
        try {
            result = (int)(arg1)->getParameterList(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Control_1getParameterList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4) {
    jint jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    double arg2 ;
    double arg3 ;
    Array<int > *arg4 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = *(Array<int > **)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<int > & reference is null");
        return 0;
    }
    {
        try {
            result = (int)(arg1)->getParameterList(arg2,arg3,*arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Control_1getParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((Control const *)arg1)->getParameterValue(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Control_1setParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    Control *arg1 = (Control *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setParameterValue(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Control_1getControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jdouble jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    double arg2 = (double) 0.0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            result = (double)(arg1)->getControlValue(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Control_1setControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
    Control *arg1 = (Control *) 0 ;
    double arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setControlValue(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Control_1getControlValueMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jdouble jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    double arg2 = (double) 0.0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            result = (double)(arg1)->getControlValueMin(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Control_1setControlValueMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
    Control *arg1 = (Control *) 0 ;
    double arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setControlValueMin(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Control_1getControlValueMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jdouble jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    double arg2 = (double) 0.0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            result = (double)(arg1)->getControlValueMax(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Control_1setControlValueMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
    Control *arg1 = (Control *) 0 ;
    double arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setControlValueMax(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Control_1getFirstTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    {
        try {
            result = (double)((Control const *)arg1)->getFirstTime();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Control_1getLastTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Control *arg1 = (Control *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    {
        try {
            result = (double)((Control const *)arg1)->getLastTime();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Control_1simplify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Control *arg1 = (Control *) 0 ;
    PropertySet *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Control **)&jarg1; 
    arg2 = *(PropertySet **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PropertySet const & reference is null");
        return ;
    }
    {
        try {
            (arg1)->simplify((PropertySet const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1SetControls(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetControls_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Set<Control > *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Set<Control > *)new Set<Control >();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Control > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetControls_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    Set<Control > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Set<Control > *)new Set<Control >((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Control > **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetControls_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Control > *arg1 = 0 ;
    Set<Control > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Set<Control > const & reference is null");
        return 0;
    }
    {
        try {
            result = (Set<Control > *)new Set<Control >((Set<Control > const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Control > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetControls_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    {
        try {
            result = (Object *)((Set<Control > const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetControls_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setMemoryOwner(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetControls_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    {
        try {
            result = (bool)((Set<Control > const *)arg1)->getMemoryOwner();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetControls_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetControls_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->ensureCapacity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetControls_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    {
        try {
            (arg1)->trim();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetControls_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    {
        try {
            result = (int)((Set<Control > const *)arg1)->getCapacity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetControls_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetControls_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    {
        try {
            result = (int)((Set<Control > const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetControls_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->setSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetControls_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    {
        try {
            result = (int)((Set<Control > const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetControls_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    Control *arg2 = (Control *) 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = *(Control **)&jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Control > const *)arg1)->getIndex((Control const *)arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetControls_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Control > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetControls_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    Control *arg2 = (Control *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = *(Control **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->append(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetControls_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    ArrayPtrs<Control > *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = *(ArrayPtrs<Control > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArrayPtrs<Control > & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->append(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetControls_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    int arg2 ;
    Control *arg3 = (Control *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Control **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->insert(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetControls_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetControls_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    Control *arg2 = (Control *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = *(Control **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->remove((Control const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetControls_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    int arg2 ;
    Control *arg3 = (Control *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Control **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->set(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetControls_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    int arg2 ;
    Control *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (Control *)((Set<Control > const *)arg1)->get(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Control **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetControls_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    std::string *arg2 = 0 ;
    Control *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Control *)(arg1)->get((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Control **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetControls_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    Control *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    {
        try {
            result = (Control *)((Set<Control > const *)arg1)->getLast();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Control **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetControls_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    Set<Control > *arg1 = (Set<Control > *) 0 ;
    Control *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Control > **)&jarg1; 
    arg2 = *(Control **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Control const & reference is null");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            result = (int)((Set<Control > const *)arg1)->searchBinary((Control const &)*arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ControlSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    ControlSet *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (ControlSet *)new ControlSet();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ControlSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ControlSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    ControlSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (ControlSet *)new ControlSet((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ControlSet **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ControlSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ControlSet *arg1 = 0 ;
    ControlSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ControlSet const & reference is null");
        return 0;
    }
    {
        try {
            result = (ControlSet *)new ControlSet((ControlSet const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ControlSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1ControlSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ControlSet_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    jint jresult = 0 ;
    ControlSet *arg1 = (ControlSet *) 0 ;
    bool arg2 = (bool) true ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            result = (int)((ControlSet const *)arg1)->getSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1getControlList(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jboolean jarg4) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    char *arg2 ;
    Array<int > *arg3 = 0 ;
    bool arg4 = (bool) true ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    arg3 = *(Array<int > **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<int > & reference is null");
        return ;
    }
    arg4 = jarg4 ? true : false; 
    {
        try {
            ((ControlSet const *)arg1)->getControlList((char const *)arg2,*arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1getControlValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jboolean jarg4) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    double arg2 ;
    double *arg3 ;
    bool arg4 = (bool) true ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = jarg4 ? true : false; 
    {
        try {
            ((ControlSet const *)arg1)->getControlValues(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1getControlValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jboolean jarg4) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    double arg2 ;
    Array<double > *arg3 = 0 ;
    bool arg4 = (bool) true ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(Array<double > **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > & reference is null");
        return ;
    }
    arg4 = jarg4 ? true : false; 
    {
        try {
            ((ControlSet const *)arg1)->getControlValues(arg2,*arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1setControlValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jboolean jarg4) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    double arg2 ;
    double *arg3 ;
    bool arg4 = (bool) true ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = jarg4 ? true : false; 
    {
        try {
            (arg1)->setControlValues(arg2,(double const (*))arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1setControlValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jboolean jarg4) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    double arg2 ;
    Array<double > *arg3 = 0 ;
    bool arg4 = (bool) true ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(Array<double > **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > const & reference is null");
        return ;
    }
    arg4 = jarg4 ? true : false; 
    {
        try {
            (arg1)->setControlValues(arg2,(Array<double > const &)*arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ControlSet_1getNumParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    jint jresult = 0 ;
    ControlSet *arg1 = (ControlSet *) 0 ;
    bool arg2 = (bool) true ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            result = (int)((ControlSet const *)arg1)->getNumParameters(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1getParameterList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    Array<int > *arg2 = 0 ;
    bool arg3 = (bool) true ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = *(Array<int > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<int > & reference is null");
        return ;
    }
    arg3 = jarg3 ? true : false; 
    {
        try {
            ((ControlSet const *)arg1)->getParameterList(*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1getParameterList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jboolean jarg4) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    double arg2 ;
    Array<int > *arg3 = 0 ;
    bool arg4 = (bool) true ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(Array<int > **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<int > & reference is null");
        return ;
    }
    arg4 = jarg4 ? true : false; 
    {
        try {
            ((ControlSet const *)arg1)->getParameterList(arg2,*arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1getParameterList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4, jboolean jarg5) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    double arg2 ;
    double arg3 ;
    Array<int > *arg4 = 0 ;
    bool arg5 = (bool) true ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = *(Array<int > **)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<int > & reference is null");
        return ;
    }
    arg5 = jarg5 ? true : false; 
    {
        try {
            ((ControlSet const *)arg1)->getParameterList(arg2,arg3,*arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1getParameterMins(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    Array<double > *arg2 = 0 ;
    Array<int > *arg3 = (Array<int > *) NULL ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = *(Array<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > & reference is null");
        return ;
    }
    arg3 = *(Array<int > **)&jarg3; 
    {
        try {
            ((ControlSet const *)arg1)->getParameterMins(*arg2,(Array<int > const *)arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1getParameterMaxs(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    Array<double > *arg2 = 0 ;
    Array<int > *arg3 = (Array<int > *) NULL ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = *(Array<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > & reference is null");
        return ;
    }
    arg3 = *(Array<int > **)&jarg3; 
    {
        try {
            ((ControlSet const *)arg1)->getParameterMaxs(*arg2,(Array<int > const *)arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1getParameterValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    double *arg2 ;
    Array<int > *arg3 = (Array<int > *) NULL ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(Array<int > **)&jarg3; 
    {
        try {
            ((ControlSet const *)arg1)->getParameterValues(arg2,(Array<int > const *)arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1getParameterValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    Array<double > *arg2 = 0 ;
    Array<int > *arg3 = (Array<int > *) NULL ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = *(Array<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > & reference is null");
        return ;
    }
    arg3 = *(Array<int > **)&jarg3; 
    {
        try {
            ((ControlSet const *)arg1)->getParameterValues(*arg2,(Array<int > const *)arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1setParameterValues_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    double *arg2 ;
    Array<int > *arg3 = (Array<int > *) NULL ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(Array<int > **)&jarg3; 
    {
        try {
            (arg1)->setParameterValues((double const (*))arg2,(Array<int > const *)arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1setParameterValues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    Array<double > *arg2 = 0 ;
    Array<int > *arg3 = (Array<int > *) NULL ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = *(Array<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > const & reference is null");
        return ;
    }
    arg3 = *(Array<int > **)&jarg3; 
    {
        try {
            (arg1)->setParameterValues((Array<double > const &)*arg2,(Array<int > const *)arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1simplify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    PropertySet *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = *(PropertySet **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PropertySet const & reference is null");
        return ;
    }
    {
        try {
            (arg1)->simplify((PropertySet const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ControlSet_1constructStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jboolean jarg5) {
    jlong jresult = 0 ;
    ControlSet *arg1 = (ControlSet *) 0 ;
    int arg2 ;
    double arg3 ;
    double arg4 ;
    bool arg5 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = jarg5 ? true : false; 
    {
        try {
            result = (Storage *)(arg1)->constructStorage(arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ControlSet_1mapParameterToControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    ControlSet *arg1 = (ControlSet *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)((ControlSet const *)arg1)->mapParameterToControl(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ControlSet_1mapParameterToParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    ControlSet *arg1 = (ControlSet *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)((ControlSet const *)arg1)->mapParameterToParameter(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlSet_1generateParameterMaps(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ControlSet *arg1 = (ControlSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlSet **)&jarg1; 
    {
        try {
            (arg1)->generateParameterMaps();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ControlConstant_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    double arg1 = (double) 0.0 ;
    char *arg2 = (char *) "UNKOWN" ;
    ControlConstant *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (double)jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    {
        try {
            result = (ControlConstant *)new ControlConstant(arg1,(char const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ControlConstant **)&jresult = result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ControlConstant_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    ControlConstant *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    {
        try {
            result = (ControlConstant *)new ControlConstant(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ControlConstant **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ControlConstant_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ControlConstant *arg1 = 0 ;
    ControlConstant *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ControlConstant const & reference is null");
        return 0;
    }
    {
        try {
            result = (ControlConstant *)new ControlConstant((ControlConstant const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ControlConstant **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1ControlConstant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ControlConstant_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    {
        try {
            result = (Object *)((ControlConstant const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ControlConstant_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((ControlConstant const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ControlConstant_1getNumParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    {
        try {
            result = (int)((ControlConstant const *)arg1)->getNumParameters();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlConstant_1setParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setParameterMin(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlConstant_1getParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((ControlConstant const *)arg1)->getParameterMin(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlConstant_1setParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setParameterMax(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlConstant_1getParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((ControlConstant const *)arg1)->getParameterMax(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlConstant_1getParameterTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((ControlConstant const *)arg1)->getParameterTime(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlConstant_1getParameterNeighborhood(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return ;
    }
    arg4 = *(double **)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return ;
    }
    {
        try {
            ((ControlConstant const *)arg1)->getParameterNeighborhood(arg2,*arg3,*arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ControlConstant_1getParameterList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
    jint jresult = 0 ;
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    double arg2 ;
    Array<int > *arg3 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(Array<int > **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<int > & reference is null");
        return 0;
    }
    {
        try {
            result = (int)(arg1)->getParameterList(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ControlConstant_1getParameterList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4) {
    jint jresult = 0 ;
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    double arg2 ;
    double arg3 ;
    Array<int > *arg4 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = *(Array<int > **)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<int > & reference is null");
        return 0;
    }
    {
        try {
            result = (int)(arg1)->getParameterList(arg2,arg3,*arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlConstant_1setParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setParameterValue(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlConstant_1getParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((ControlConstant const *)arg1)->getParameterValue(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlConstant_1setControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    double arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setControlValue(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlConstant_1getControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jdouble jresult = 0 ;
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    double arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            result = (double)(arg1)->getControlValue(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlConstant_1getControlValueMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jdouble jresult = 0 ;
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    double arg2 = (double) 0.0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            result = (double)(arg1)->getControlValueMin(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlConstant_1setControlValueMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    double arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setControlValueMin(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlConstant_1getControlValueMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jdouble jresult = 0 ;
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    double arg2 = (double) 0.0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            result = (double)(arg1)->getControlValueMax(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlConstant_1setControlValueMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
    ControlConstant *arg1 = (ControlConstant *) 0 ;
    double arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlConstant **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setControlValueMax(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_get_1ControlLinear_1DEFAULT_1NODE(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    ControlLinearNode result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (ControlLinearNode)ControlLinear::DEFAULT_NODE;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ControlLinearNode **)&jresult = new ControlLinearNode((ControlLinearNode &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ControlLinear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    ArrayPtrs<ControlLinearNode > *arg1 = (ArrayPtrs<ControlLinearNode > *) NULL ;
    std::string const &arg2_defvalue = "UNKOWN" ;
    std::string *arg2 = (std::string *) &arg2_defvalue ;
    ControlLinear *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<ControlLinearNode > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (ControlLinear *)new ControlLinear(arg1,(std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ControlLinear **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ControlLinear_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    ControlLinear *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    {
        try {
            result = (ControlLinear *)new ControlLinear(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ControlLinear **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ControlLinear_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ControlLinear *arg1 = 0 ;
    ControlLinear *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ControlLinear const & reference is null");
        return 0;
    }
    {
        try {
            result = (ControlLinear *)new ControlLinear((ControlLinear const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ControlLinear **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1ControlLinear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ControlLinear_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    {
        try {
            result = (Object *)((ControlLinear const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ControlLinear_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((ControlLinear const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlLinear_1setUseSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setUseSteps(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ControlLinear_1getUseSteps(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    {
        try {
            result = (bool)((ControlLinear const *)arg1)->getUseSteps();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ControlLinear_1getNumParameters(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    {
        try {
            result = (int)((ControlLinear const *)arg1)->getNumParameters();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlLinear_1setParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setParameterMin(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlLinear_1getParameterMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((ControlLinear const *)arg1)->getParameterMin(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlLinear_1setParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setParameterMax(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlLinear_1getParameterMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((ControlLinear const *)arg1)->getParameterMax(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlLinear_1getParameterTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((ControlLinear const *)arg1)->getParameterTime(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlLinear_1getParameterNeighborhood(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4) {
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return ;
    }
    arg4 = *(double **)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return ;
    }
    {
        try {
            ((ControlLinear const *)arg1)->getParameterNeighborhood(arg2,*arg3,*arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ControlLinear_1getParameterList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
    jint jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    double arg2 ;
    Array<int > *arg3 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(Array<int > **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<int > & reference is null");
        return 0;
    }
    {
        try {
            result = (int)(arg1)->getParameterList(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ControlLinear_1getParameterList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4) {
    jint jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    double arg2 ;
    double arg3 ;
    Array<int > *arg4 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = *(Array<int > **)&jarg4;
    if(!arg4) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<int > & reference is null");
        return 0;
    }
    {
        try {
            result = (int)(arg1)->getParameterList(arg2,arg3,*arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlLinear_1setParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setParameterValue(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlLinear_1getParameterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)((ControlLinear const *)arg1)->getParameterValue(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlLinear_1setControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    double arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setControlValue(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlLinear_1getControlValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jdouble jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    double arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            result = (double)(arg1)->getControlValue(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlLinear_1getControlValueMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jdouble jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    double arg2 = (double) 0.0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            result = (double)(arg1)->getControlValueMin(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlLinear_1setControlValueMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    double arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setControlValueMin(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlLinear_1getControlValueMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jdouble jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    double arg2 = (double) 0.0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            result = (double)(arg1)->getControlValueMax(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlLinear_1setControlValueMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    double arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setControlValueMax(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ControlLinear_1getNodeArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    ArrayPtrs<ControlLinearNode > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    {
        try {
            {
                ArrayPtrs<ControlLinearNode > &_result_ref = (arg1)->getNodeArray();
                result = (ArrayPtrs<ControlLinearNode > *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ArrayPtrs<ControlLinearNode > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlLinear_1getFirstTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    {
        try {
            result = (double)((ControlLinear const *)arg1)->getFirstTime();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ControlLinear_1getLastTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    {
        try {
            result = (double)((ControlLinear const *)arg1)->getLastTime();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ControlLinear_1simplify(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ControlLinear *arg1 = (ControlLinear *) 0 ;
    PropertySet *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ControlLinear **)&jarg1; 
    arg2 = *(PropertySet **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PropertySet const & reference is null");
        return ;
    }
    {
        try {
            (arg1)->simplify((PropertySet const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Integrand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Integrand *arg1 = (Integrand *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Integrand **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Integrand_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Integrand *arg1 = (Integrand *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Integrand **)&jarg1; 
    {
        try {
            result = (int)((Integrand const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Integrand_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
    Integrand *arg1 = (Integrand *) 0 ;
    double arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Integrand **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->setInitialStates(arg2,(double const (*))arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Integrand_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Integrand *arg1 = (Integrand *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Integrand **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((Integrand const *)arg1)->getInitialStates(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Integrand_1compute(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4) {
    Integrand *arg1 = (Integrand *) 0 ;
    double arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Integrand **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            (arg1)->compute(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Integrand_1computeJacobian(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4) {
    Integrand *arg1 = (Integrand *) 0 ;
    double arg2 ;
    double *arg3 ;
    double *arg4 = (double *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Integrand **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            (arg1)->computeJacobian(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Integrand_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
    Integrand *arg1 = (Integrand *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    double arg4 ;
    double arg5 ;
    double *arg6 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Integrand **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return ;
    }
    arg4 = (double)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = *(double **)&jarg6; 
    {
        try {
            (arg1)->initialize(arg2,*arg3,arg4,arg5,arg6);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Integrand_1processAfterStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jdouble jarg4, jlong jarg5) {
    Integrand *arg1 = (Integrand *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    double arg4 ;
    double *arg5 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Integrand **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return ;
    }
    arg4 = (double)jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            (arg1)->processAfterStep(arg2,*arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Integrand_1finalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jlong jarg4) {
    Integrand *arg1 = (Integrand *) 0 ;
    int arg2 ;
    double arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Integrand **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            (arg1)->finalize(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ModelIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    ModelIntegrand *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (ModelIntegrand *)new ModelIntegrand(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ModelIntegrand **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1ModelIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    {
        try {
            result = (int)((ModelIntegrand const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    Model *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    {
        try {
            result = (Model *)(arg1)->getModel();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Model **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1setControlSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    ControlSet *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    arg2 = *(ControlSet **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ControlSet const & reference is null");
        return ;
    }
    {
        try {
            (arg1)->setControlSet((ControlSet const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1getControlSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    ControlSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    {
        try {
            result = (ControlSet *)(arg1)->getControlSet();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ControlSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1setControlStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    Storage *arg2 = (Storage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    arg2 = *(Storage **)&jarg2; 
    {
        try {
            (arg1)->setControlStorage(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1getControlStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    {
        try {
            result = (Storage *)(arg1)->getControlStorage();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1setStateStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    Storage *arg2 = (Storage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    arg2 = *(Storage **)&jarg2; 
    {
        try {
            (arg1)->setStateStorage(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1getStateStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    {
        try {
            result = (Storage *)(arg1)->getStateStorage();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1setPseudoStateStorage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    Storage *arg2 = (Storage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    arg2 = *(Storage **)&jarg2; 
    {
        try {
            (arg1)->setPseudoStateStorage(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1getPseudoStateStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    {
        try {
            result = (Storage *)(arg1)->getPseudoStateStorage();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1setController(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    Controller *arg2 = (Controller *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    arg2 = *(Controller **)&jarg2; 
    {
        try {
            (arg1)->setController(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1getController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    Controller *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    {
        try {
            result = (Controller *)(arg1)->getController();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Controller **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1constructControlSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    ControlSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    {
        try {
            result = (ControlSet *)((ModelIntegrand const *)arg1)->constructControlSet();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ControlSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1convertStatesIntegrandToModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4) {
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    double arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            (arg1)->convertStatesIntegrandToModel(arg2,(double const (*))arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1convertStatesModelToIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    double *arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            ((ModelIntegrand const *)arg1)->convertStatesModelToIntegrand((double const (*))arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    double arg2 ;
    double *arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            (arg1)->setInitialStates(arg2,(double const (*))arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    double *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    {
        try {
            ((ModelIntegrand const *)arg1)->getInitialStates(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1compute(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4) {
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    double arg2 ;
    double *arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            (arg1)->compute(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    double arg4 ;
    double arg5 ;
    double *arg6 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return ;
    }
    arg4 = (double)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = *(double **)&jarg6; 
    {
        try {
            (arg1)->initialize(arg2,*arg3,arg4,arg5,arg6);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1processAfterStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jdouble jarg4, jlong jarg5) {
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    double arg4 ;
    double *arg5 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
        return ;
    }
    arg4 = (double)jarg4; 
    arg5 = *(double **)&jarg5; 
    {
        try {
            (arg1)->processAfterStep(arg2,*arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ModelIntegrand_1finalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jlong jarg4) {
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    int arg2 ;
    double arg3 ;
    double *arg4 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            (arg1)->finalize(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1RKF_1RKF_1NORMAL(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)RKF::RKF_NORMAL;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1RKF_1RKF_1FINE(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)RKF::RKF_FINE;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1RKF_1RKF_1POOR(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)RKF::RKF_POOR;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1RKF_1RKF_1NAN(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)RKF::RKF_NAN;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1RKF_1RKF_1ERROR(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)RKF::RKF_ERROR;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_get_1RKF_1RKF_1TOO_1MANY_1STEPS(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (int)RKF::RKF_TOO_MANY_STEPS;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1RKF(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
    jlong jresult = 0 ;
    Integrand *arg1 = (Integrand *) 0 ;
    double arg2 = (double) 1.0e-4 ;
    double arg3 = (double) -1.0 ;
    RKF *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Integrand **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            result = (RKF *)new RKF(arg1,arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(RKF **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1RKF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    RKF *arg1 = (RKF *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(RKF **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_RKF_1getIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    RKF *arg1 = (RKF *) 0 ;
    Integrand *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(RKF **)&jarg1; 
    {
        try {
            result = (Integrand *)(arg1)->getIntegrand();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Integrand **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_RKF_1setTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
    RKF *arg1 = (RKF *) 0 ;
    double arg2 ;
    double arg3 = (double) -1.0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(RKF **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            (arg1)->setTolerance(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_RKF_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    RKF *arg1 = (RKF *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(RKF **)&jarg1; 
    {
        try {
            result = (double)(arg1)->getTolerance();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_RKF_1setFineTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    RKF *arg1 = (RKF *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(RKF **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setFineTolerance(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_RKF_1getFineTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    RKF *arg1 = (RKF *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(RKF **)&jarg1; 
    {
        try {
            result = (double)(arg1)->getFineTolerance();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_RKF_1step(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4) {
    jint jresult = 0 ;
    RKF *arg1 = (RKF *) 0 ;
    double arg2 ;
    double arg3 ;
    double *arg4 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(RKF **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            result = (int)(arg1)->step(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_RKF_1stepFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4) {
    jint jresult = 0 ;
    RKF *arg1 = (RKF *) 0 ;
    double arg2 ;
    double arg3 ;
    double *arg4 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(RKF **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = *(double **)&jarg4; 
    {
        try {
            result = (int)(arg1)->stepFixed(arg2,arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1IntegRKF(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
    jlong jresult = 0 ;
    Integrand *arg1 = (Integrand *) 0 ;
    double arg2 = (double) 1.0e-4 ;
    double arg3 = (double) -1.0 ;
    IntegRKF *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Integrand **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            result = (IntegRKF *)new IntegRKF(arg1,arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(IntegRKF **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1IntegRKF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IntegRKF_1setMinDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setMinDT(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_IntegRKF_1getMinDT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        try {
            result = (double)(arg1)->getMinDT();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IntegRKF_1setMaxDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setMaxDT(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_IntegRKF_1getMaxDT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        try {
            result = (double)(arg1)->getMaxDT();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IntegRKF_1setMaximumNumberOfSteps(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setMaximumNumberOfSteps(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IntegRKF_1getMaximumNumberOfSteps(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        try {
            result = (int)(arg1)->getMaximumNumberOfSteps();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IntegRKF_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        try {
            result = (int)(arg1)->getStatus();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IntegRKF_1setUseSpecifiedDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setUseSpecifiedDT(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_IntegRKF_1getUseSpecifiedDT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        try {
            result = (bool)((IntegRKF const *)arg1)->getUseSpecifiedDT();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IntegRKF_1setUseConstantDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setUseConstantDT(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_IntegRKF_1getUseConstantDT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        try {
            result = (bool)((IntegRKF const *)arg1)->getUseConstantDT();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IntegRKF_1setDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setDT(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_IntegRKF_1getDT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        try {
            result = (double)((IntegRKF const *)arg1)->getDT();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_IntegRKF_1getDTArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    Array<double > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        try {
            {
                Array<double > const &_result_ref = (arg1)->getDTArray();
                result = (Array<double > *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IntegRKF_1setDTArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jdouble jarg4) {
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    int arg2 ;
    double *arg3 ;
    double arg4 = (double) 0.0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = (double)jarg4; 
    {
        try {
            (arg1)->setDTArray(arg2,(double const (*))arg3,arg4);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_IntegRKF_1getDTArrayDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)(arg1)->getDTArrayDT(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IntegRKF_1printDTArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    char *arg2 = (char *) NULL ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    {
        try {
            (arg1)->printDTArray((char const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_IntegRKF_1getTimeArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    Array<double > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        try {
            {
                Array<double > const &_result_ref = (arg1)->getTimeArray();
                result = (Array<double > *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_IntegRKF_1getTimeArrayTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)(arg1)->getTimeArrayTime(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IntegRKF_1getTimeArrayStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jint jresult = 0 ;
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    double arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            result = (int)(arg1)->getTimeArrayStep(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IntegRKF_1printTimeArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    char *arg2 = (char *) NULL ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    {
        try {
            (arg1)->printTimeArray((char const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IntegRKF_1resetTimeAndDTArrays(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->resetTimeAndDTArrays(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_IntegRKF_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        try {
            {
                std::string const &_result_ref = ((IntegRKF const *)arg1)->toString();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_IntegRKF_1integrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4, jdouble jarg5) {
    jboolean jresult = 0 ;
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    double arg2 ;
    double arg3 ;
    double *arg4 = (double *) 0 ;
    double arg5 = (double) 1.0e-3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    arg2 = (double)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = *(double **)&jarg4; 
    arg5 = (double)jarg5; 
    {
        try {
            result = (bool)(arg1)->integrate(arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IntegRKF_1halt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        try {
            (arg1)->halt();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IntegRKF_1clearHalt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        try {
            (arg1)->clearHalt();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_IntegRKF_1checkHalt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    IntegRKF *arg1 = (IntegRKF *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegRKF **)&jarg1; 
    {
        try {
            result = (bool)(arg1)->checkHalt();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Manager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Manager *arg1 = (Manager *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Manager_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ModelIntegrand *arg1 = (ModelIntegrand *) 0 ;
    Manager *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ModelIntegrand **)&jarg1; 
    {
        try {
            result = (Manager *)new Manager(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Manager **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Manager_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Manager *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Manager *)new Manager();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Manager **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Manager_1setSessionName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    Manager *arg1 = (Manager *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return ;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            (arg1)->setSessionName((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg2; 
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Manager_1getSessionName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Manager *arg1 = (Manager *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    {
        try {
            {
                std::string const &_result_ref = ((Manager const *)arg1)->getSessionName();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Manager_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Manager *arg1 = (Manager *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    {
        try {
            {
                std::string const &_result_ref = ((Manager const *)arg1)->toString();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Manager_1setIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Manager *arg1 = (Manager *) 0 ;
    ModelIntegrand *arg2 = (ModelIntegrand *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    arg2 = *(ModelIntegrand **)&jarg2; 
    {
        try {
            (arg1)->setIntegrand(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Manager_1getIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Manager *arg1 = (Manager *) 0 ;
    ModelIntegrand *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    {
        try {
            result = (ModelIntegrand *)((Manager const *)arg1)->getIntegrand();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ModelIntegrand **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Manager_1getIntegrator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Manager *arg1 = (Manager *) 0 ;
    IntegRKF *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    {
        try {
            result = (IntegRKF *)((Manager const *)arg1)->getIntegrator();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(IntegRKF **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Manager_1setInitialTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Manager *arg1 = (Manager *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setInitialTime(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Manager_1getInitialTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Manager *arg1 = (Manager *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    {
        try {
            result = (double)((Manager const *)arg1)->getInitialTime();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Manager_1setFinalTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Manager *arg1 = (Manager *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setFinalTime(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Manager_1getFinalTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Manager *arg1 = (Manager *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    {
        try {
            result = (double)((Manager const *)arg1)->getFinalTime();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Manager_1setFirstDT(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Manager *arg1 = (Manager *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setFirstDT(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Manager_1getFirstDT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Manager *arg1 = (Manager *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    {
        try {
            result = (double)((Manager const *)arg1)->getFirstDT();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Manager_1initializeStates_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Manager *arg1 = (Manager *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    {
        try {
            result = (bool)(arg1)->initializeStates();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Manager_1initializeStates_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Manager *arg1 = (Manager *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) NULL ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->initializeStates(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Manager_1integrate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Manager *arg1 = (Manager *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    {
        try {
            result = (bool)(arg1)->integrate();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Manager_1integrate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Manager *arg1 = (Manager *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->integrate(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Manager_1integrate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jboolean jresult = 0 ;
    Manager *arg1 = (Manager *) 0 ;
    double arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Manager **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            result = (bool)(arg1)->integrate(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Callback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) NULL ;
    Callback *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (Callback *)new Callback(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Callback **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Callback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Callback *arg1 = 0 ;
    Callback *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Callback **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Callback const & reference is null");
        return 0;
    }
    {
        try {
            result = (Callback *)new Callback((Callback const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Callback **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Callback_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    Callback *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Callback *)new Callback((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Callback **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Callback_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    Callback *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    {
        try {
            result = (Callback *)new Callback(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Callback **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Callback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Callback *arg1 = (Callback *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Callback **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Callback_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Callback *arg1 = (Callback *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Callback **)&jarg1; 
    {
        try {
            result = (Object *)((Callback const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Callback_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    Callback *arg1 = (Callback *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Callback **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((Callback const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Callback_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Callback *arg1 = (Callback *) 0 ;
    Model *arg2 = (Model *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Callback **)&jarg1; 
    arg2 = *(Model **)&jarg2; 
    {
        try {
            (arg1)->setModel(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Callback_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Callback *arg1 = (Callback *) 0 ;
    Model *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Callback **)&jarg1; 
    {
        try {
            result = (Model *)((Callback const *)arg1)->getModel();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Model **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Callback_1setOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    Callback *arg1 = (Callback *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Callback **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setOn(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Callback_1getOn(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Callback *arg1 = (Callback *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Callback **)&jarg1; 
    {
        try {
            result = (bool)((Callback const *)arg1)->getOn();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Callback_1setStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Callback *arg1 = (Callback *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Callback **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setStartTime(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Callback_1getStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Callback *arg1 = (Callback *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Callback **)&jarg1; 
    {
        try {
            result = (double)((Callback const *)arg1)->getStartTime();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Callback_1setEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Callback *arg1 = (Callback *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Callback **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setEndTime(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Callback_1getEndTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Callback *arg1 = (Callback *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Callback **)&jarg1; 
    {
        try {
            result = (double)((Callback const *)arg1)->getEndTime();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1SetCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Set<Callback > *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Set<Callback > *)new Set<Callback >();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Callback > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    Set<Callback > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Set<Callback > *)new Set<Callback >((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Callback > **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetCallback_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Callback > *arg1 = 0 ;
    Set<Callback > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Set<Callback > const & reference is null");
        return 0;
    }
    {
        try {
            result = (Set<Callback > *)new Set<Callback >((Set<Callback > const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Callback > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetCallback_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    {
        try {
            result = (Object *)((Set<Callback > const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetCallback_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setMemoryOwner(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetCallback_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    {
        try {
            result = (bool)((Set<Callback > const *)arg1)->getMemoryOwner();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetCallback_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetCallback_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->ensureCapacity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetCallback_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    {
        try {
            (arg1)->trim();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetCallback_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    {
        try {
            result = (int)((Set<Callback > const *)arg1)->getCapacity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetCallback_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetCallback_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    {
        try {
            result = (int)((Set<Callback > const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetCallback_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->setSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetCallback_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    {
        try {
            result = (int)((Set<Callback > const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetCallback_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    Callback *arg2 = (Callback *) 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = *(Callback **)&jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Callback > const *)arg1)->getIndex((Callback const *)arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetCallback_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Callback > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetCallback_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    Callback *arg2 = (Callback *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = *(Callback **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->append(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetCallback_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    ArrayPtrs<Callback > *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = *(ArrayPtrs<Callback > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArrayPtrs<Callback > & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->append(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetCallback_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    int arg2 ;
    Callback *arg3 = (Callback *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Callback **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->insert(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetCallback_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetCallback_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    Callback *arg2 = (Callback *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = *(Callback **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->remove((Callback const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetCallback_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    int arg2 ;
    Callback *arg3 = (Callback *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Callback **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->set(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetCallback_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    int arg2 ;
    Callback *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (Callback *)((Set<Callback > const *)arg1)->get(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Callback **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetCallback_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    std::string *arg2 = 0 ;
    Callback *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Callback *)(arg1)->get((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Callback **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetCallback_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    Callback *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    {
        try {
            result = (Callback *)((Set<Callback > const *)arg1)->getLast();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Callback **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetCallback_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    Set<Callback > *arg1 = (Set<Callback > *) 0 ;
    Callback *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Callback > **)&jarg1; 
    arg2 = *(Callback **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Callback const & reference is null");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            result = (int)((Set<Callback > const *)arg1)->searchBinary((Callback const &)*arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1CallbackSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    CallbackSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (CallbackSet *)new CallbackSet(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(CallbackSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1CallbackSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    CallbackSet *arg1 = (CallbackSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CallbackSet **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_CallbackSet_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    CallbackSet *arg1 = (CallbackSet *) 0 ;
    Model *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CallbackSet **)&jarg1; 
    {
        try {
            result = (Model *)(arg1)->getModel();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Model **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_CallbackSet_1setOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    CallbackSet *arg1 = (CallbackSet *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(CallbackSet **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setOn(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1IntegCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    IntegCallback *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (IntegCallback *)new IntegCallback(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(IntegCallback **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1IntegCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    IntegCallback *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (IntegCallback *)new IntegCallback((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(IntegCallback **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1IntegCallback_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    IntegCallback *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    {
        try {
            result = (IntegCallback *)new IntegCallback(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(IntegCallback **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1IntegCallback_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    IntegCallback *arg1 = 0 ;
    IntegCallback *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegCallback **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "IntegCallback const & reference is null");
        return 0;
    }
    {
        try {
            result = (IntegCallback *)new IntegCallback((IntegCallback const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(IntegCallback **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1IntegCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    IntegCallback *arg1 = (IntegCallback *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegCallback **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_IntegCallback_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    IntegCallback *arg1 = (IntegCallback *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegCallback **)&jarg1; 
    {
        try {
            result = (Object *)((IntegCallback const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_IntegCallback_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    IntegCallback *arg1 = (IntegCallback *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegCallback **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((IntegCallback const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IntegCallback_1setStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    IntegCallback *arg1 = (IntegCallback *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegCallback **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setStepInterval(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IntegCallback_1getStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    IntegCallback *arg1 = (IntegCallback *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegCallback **)&jarg1; 
    {
        try {
            result = (int)((IntegCallback const *)arg1)->getStepInterval();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IntegCallback_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
    jint jresult = 0 ;
    IntegCallback *arg1 = (IntegCallback *) 0 ;
    int arg2 ;
    double arg3 ;
    double arg4 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    void *arg7 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegCallback **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    arg7 = *(void **)&jarg7; 
    {
        try {
            result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IntegCallback_1step(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
    jint jresult = 0 ;
    IntegCallback *arg1 = (IntegCallback *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    int arg4 ;
    double arg5 ;
    double arg6 ;
    double *arg7 = (double *) 0 ;
    double *arg8 = (double *) 0 ;
    void *arg9 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegCallback **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = (int)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = (double)jarg6; 
    arg7 = *(double **)&jarg7; 
    arg8 = *(double **)&jarg8; 
    arg9 = *(void **)&jarg9; 
    {
        try {
            result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IntegCallback_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
    jint jresult = 0 ;
    IntegCallback *arg1 = (IntegCallback *) 0 ;
    int arg2 ;
    double arg3 ;
    double arg4 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    void *arg7 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IntegCallback **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    arg7 = *(void **)&jarg7; 
    {
        try {
            result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SimtkAnimationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    SimtkAnimationCallback *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (SimtkAnimationCallback *)new SimtkAnimationCallback(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(SimtkAnimationCallback **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1SimtkAnimationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    SimtkAnimationCallback *arg1 = (SimtkAnimationCallback *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(SimtkAnimationCallback **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_SimtkAnimationCallback_1getCurrentTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    SimtkAnimationCallback *arg1 = (SimtkAnimationCallback *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(SimtkAnimationCallback **)&jarg1; 
    {
        try {
            result = (double)((SimtkAnimationCallback const *)arg1)->getCurrentTime();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SimtkAnimationCallback_1step(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
    jint jresult = 0 ;
    SimtkAnimationCallback *arg1 = (SimtkAnimationCallback *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    int arg4 ;
    double arg5 ;
    double arg6 ;
    double *arg7 = (double *) 0 ;
    double *arg8 = (double *) 0 ;
    void *arg9 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(SimtkAnimationCallback **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = (int)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = (double)jarg6; 
    arg7 = *(double **)&jarg7; 
    arg8 = *(double **)&jarg8; 
    arg9 = *(void **)&jarg9; 
    {
        try {
            result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SimtkAnimationCallback_1getMutex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    SimtkAnimationCallback *arg1 = (SimtkAnimationCallback *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(SimtkAnimationCallback **)&jarg1; 
    {
        try {
            (arg1)->getMutex();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SimtkAnimationCallback_1releaseMutex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    SimtkAnimationCallback *arg1 = (SimtkAnimationCallback *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(SimtkAnimationCallback **)&jarg1; 
    {
        try {
            (arg1)->releaseMutex();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1ArrayStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ArrayStorage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
    jlong jresult = 0 ;
    int arg1 = (int) 1 ;
    ArrayPtrs<Storage > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    {
        try {
            result = (ArrayPtrs<Storage > *)new ArrayPtrs<Storage >(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ArrayPtrs<Storage > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ArrayStorage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = 0 ;
    ArrayPtrs<Storage > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArrayPtrs<Storage > const & reference is null");
        return 0;
    }
    {
        try {
            result = (ArrayPtrs<Storage > *)new ArrayPtrs<Storage >((ArrayPtrs<Storage > const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ArrayPtrs<Storage > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    {
        try {
            (arg1)->clearAndDestroy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setMemoryOwner(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    {
        try {
            result = (bool)((ArrayPtrs<Storage > const *)arg1)->getMemoryOwner();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->ensureCapacity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    {
        try {
            (arg1)->trim();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    {
        try {
            result = (int)((ArrayPtrs<Storage > const *)arg1)->getCapacity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    {
        try {
            result = (int)((ArrayPtrs<Storage > const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->setSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    {
        try {
            result = (int)((ArrayPtrs<Storage > const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    Storage *arg2 = (Storage *) 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = *(Storage **)&jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((ArrayPtrs<Storage > const *)arg1)->getIndex((Storage const *)arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jint jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((ArrayPtrs<Storage > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    Storage *arg2 = (Storage *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = *(Storage **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->append(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    ArrayPtrs<Storage > *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = *(ArrayPtrs<Storage > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArrayPtrs<Storage > & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->append(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    int arg2 ;
    Storage *arg3 = (Storage *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Storage **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->insert(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    Storage *arg2 = (Storage *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = *(Storage **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->remove((Storage const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    int arg2 ;
    Storage *arg3 = (Storage *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Storage **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->set(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    int arg2 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (Storage *)(arg1)->get(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    std::string *arg2 = 0 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Storage *)(arg1)->get((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    {
        try {
            result = (Storage *)((ArrayPtrs<Storage > const *)arg1)->getLast();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayStorage_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    ArrayPtrs<Storage > *arg1 = (ArrayPtrs<Storage > *) 0 ;
    Storage *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Storage > **)&jarg1; 
    arg2 = *(Storage **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Storage const & reference is null");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            result = (int)((ArrayPtrs<Storage > const *)arg1)->searchBinary((Storage const &)*arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Analysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    Analysis *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (Analysis *)new Analysis(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Analysis **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Analysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    Analysis *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Analysis *)new Analysis((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Analysis **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Analysis_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    Analysis *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    {
        try {
            result = (Analysis *)new Analysis(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Analysis **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Analysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Analysis *arg1 = (Analysis *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Analysis **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Analysis_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Analysis *arg1 = 0 ;
    Analysis *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Analysis **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Analysis const & reference is null");
        return 0;
    }
    {
        try {
            result = (Analysis *)new Analysis((Analysis const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Analysis **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Analysis_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Analysis *arg1 = (Analysis *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Analysis **)&jarg1; 
    {
        try {
            result = (Object *)((Analysis const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Analysis_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    Analysis *arg1 = (Analysis *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Analysis **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((Analysis const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Analysis_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Analysis *arg1 = (Analysis *) 0 ;
    Model *arg2 = (Model *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Analysis **)&jarg1; 
    arg2 = *(Model **)&jarg2; 
    {
        try {
            (arg1)->setModel(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Analysis_1setInDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    Analysis *arg1 = (Analysis *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Analysis **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setInDegrees(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Analysis_1getInDegrees(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Analysis *arg1 = (Analysis *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Analysis **)&jarg1; 
    {
        try {
            result = (bool)((Analysis const *)arg1)->getInDegrees();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Analysis_1setColumnLabels(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    Analysis *arg1 = (Analysis *) 0 ;
    char *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Analysis **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    {
        try {
            (arg1)->setColumnLabels((char const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Analysis_1getColumnLabels(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Analysis *arg1 = (Analysis *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Analysis **)&jarg1; 
    {
        try {
            result = (char *)((Analysis const *)arg1)->getColumnLabels();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Analysis_1getStorageList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Analysis *arg1 = (Analysis *) 0 ;
    ArrayPtrs<Storage > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Analysis **)&jarg1; 
    {
        try {
            {
                ArrayPtrs<Storage > &_result_ref = (arg1)->getStorageList();
                result = (ArrayPtrs<Storage > *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ArrayPtrs<Storage > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_Analysis_1proceed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Analysis *arg1 = (Analysis *) 0 ;
    int arg2 = (int) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Analysis **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->proceed(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Analysis_1printResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
    jint jresult = 0 ;
    Analysis *arg1 = (Analysis *) 0 ;
    char *arg2 ;
    char *arg3 = (char *) NULL ;
    double arg4 = (double) -1.0 ;
    char *arg5 = (char *) ".sto" ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Analysis **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return 0;
        }
    }
    arg4 = (double)jarg4; 
    {
        arg5 = 0;
        if (jarg5) {
            arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
            if (!arg5) return 0;
        }
    }
    {
        try {
            result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
    {
        if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1ArrayAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ArrayAnalysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
    jlong jresult = 0 ;
    int arg1 = (int) 1 ;
    ArrayPtrs<Analysis > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    {
        try {
            result = (ArrayPtrs<Analysis > *)new ArrayPtrs<Analysis >(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ArrayPtrs<Analysis > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ArrayAnalysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = 0 ;
    ArrayPtrs<Analysis > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArrayPtrs<Analysis > const & reference is null");
        return 0;
    }
    {
        try {
            result = (ArrayPtrs<Analysis > *)new ArrayPtrs<Analysis >((ArrayPtrs<Analysis > const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ArrayPtrs<Analysis > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    {
        try {
            (arg1)->clearAndDestroy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setMemoryOwner(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    {
        try {
            result = (bool)((ArrayPtrs<Analysis > const *)arg1)->getMemoryOwner();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->ensureCapacity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    {
        try {
            (arg1)->trim();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    {
        try {
            result = (int)((ArrayPtrs<Analysis > const *)arg1)->getCapacity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    {
        try {
            result = (int)((ArrayPtrs<Analysis > const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->setSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    {
        try {
            result = (int)((ArrayPtrs<Analysis > const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    Analysis *arg2 = (Analysis *) 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = *(Analysis **)&jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((ArrayPtrs<Analysis > const *)arg1)->getIndex((Analysis const *)arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jint jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((ArrayPtrs<Analysis > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    Analysis *arg2 = (Analysis *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = *(Analysis **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->append(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    ArrayPtrs<Analysis > *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = *(ArrayPtrs<Analysis > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArrayPtrs<Analysis > & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->append(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    int arg2 ;
    Analysis *arg3 = (Analysis *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Analysis **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->insert(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    Analysis *arg2 = (Analysis *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = *(Analysis **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->remove((Analysis const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    int arg2 ;
    Analysis *arg3 = (Analysis *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Analysis **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->set(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    int arg2 ;
    Analysis *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (Analysis *)(arg1)->get(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Analysis **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    std::string *arg2 = 0 ;
    Analysis *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Analysis *)(arg1)->get((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Analysis **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    Analysis *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    {
        try {
            result = (Analysis *)((ArrayPtrs<Analysis > const *)arg1)->getLast();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Analysis **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayAnalysis_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    ArrayPtrs<Analysis > *arg1 = (ArrayPtrs<Analysis > *) 0 ;
    Analysis *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Analysis > **)&jarg1; 
    arg2 = *(Analysis **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Analysis const & reference is null");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            result = (int)((ArrayPtrs<Analysis > const *)arg1)->searchBinary((Analysis const &)*arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1SetAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetAnalysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Set<Analysis > *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Set<Analysis > *)new Set<Analysis >();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Analysis > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetAnalysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    Set<Analysis > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Set<Analysis > *)new Set<Analysis >((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Analysis > **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1SetAnalysis_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Analysis > *arg1 = 0 ;
    Set<Analysis > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Set<Analysis > const & reference is null");
        return 0;
    }
    {
        try {
            result = (Set<Analysis > *)new Set<Analysis >((Set<Analysis > const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Analysis > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    {
        try {
            result = (Object *)((Set<Analysis > const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setMemoryOwner(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    {
        try {
            result = (bool)((Set<Analysis > const *)arg1)->getMemoryOwner();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->ensureCapacity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    {
        try {
            (arg1)->trim();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    {
        try {
            result = (int)((Set<Analysis > const *)arg1)->getCapacity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    {
        try {
            result = (int)((Set<Analysis > const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->setSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    {
        try {
            result = (int)((Set<Analysis > const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    Analysis *arg2 = (Analysis *) 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = *(Analysis **)&jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Analysis > const *)arg1)->getIndex((Analysis const *)arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Analysis > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    Analysis *arg2 = (Analysis *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = *(Analysis **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->append(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    ArrayPtrs<Analysis > *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = *(ArrayPtrs<Analysis > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArrayPtrs<Analysis > & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->append(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    int arg2 ;
    Analysis *arg3 = (Analysis *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Analysis **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->insert(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    Analysis *arg2 = (Analysis *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = *(Analysis **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->remove((Analysis const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    int arg2 ;
    Analysis *arg3 = (Analysis *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Analysis **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->set(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    int arg2 ;
    Analysis *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (Analysis *)((Set<Analysis > const *)arg1)->get(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Analysis **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    std::string *arg2 = 0 ;
    Analysis *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Analysis *)(arg1)->get((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Analysis **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    Analysis *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    {
        try {
            result = (Analysis *)((Set<Analysis > const *)arg1)->getLast();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Analysis **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_SetAnalysis_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    Set<Analysis > *arg1 = (Set<Analysis > *) 0 ;
    Analysis *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Analysis > **)&jarg1; 
    arg2 = *(Analysis **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Analysis const & reference is null");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            result = (int)((Set<Analysis > const *)arg1)->searchBinary((Analysis const &)*arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1AnalysisFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    AnalysisFactory *arg1 = (AnalysisFactory *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(AnalysisFactory **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_AnalysisFactory_1getInstance(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    AnalysisFactory *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (AnalysisFactory *)AnalysisFactory::getInstance();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(AnalysisFactory **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_AnalysisFactory_1createAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    AnalysisFactory *arg1 = (AnalysisFactory *) 0 ;
    std::string *arg2 = 0 ;
    Analysis *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(AnalysisFactory **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Analysis *)((AnalysisFactory const *)arg1)->createAnalysis((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Analysis **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_AnalysisFactory_1registerAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    AnalysisFactory *arg1 = (AnalysisFactory *) 0 ;
    Analysis *arg2 = (Analysis *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(AnalysisFactory **)&jarg1; 
    arg2 = *(Analysis **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->registerAnalysis(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_AnalysisFactory_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    AnalysisFactory *arg1 = (AnalysisFactory *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(AnalysisFactory **)&jarg1; 
    {
        try {
            {
                std::string const &_result_ref = ((AnalysisFactory const *)arg1)->toString();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_AnalysisFactory_1getRegisteredAnalyses(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    AnalysisFactory *arg1 = (AnalysisFactory *) 0 ;
    ArrayPtrs<Analysis > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(AnalysisFactory **)&jarg1; 
    {
        try {
            {
                ArrayPtrs<Analysis > const &_result_ref = ((AnalysisFactory const *)arg1)->getRegisteredAnalyses();
                result = (ArrayPtrs<Analysis > *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ArrayPtrs<Analysis > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1AnalysisFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    AnalysisFactory *arg1 = (AnalysisFactory *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(AnalysisFactory **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_AnalysisFactory_1getInstance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    AnalysisFactory *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (AnalysisFactory *)AnalysisFactory::getInstance(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(AnalysisFactory **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_AnalysisFactory_1createAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    AnalysisFactory *arg1 = (AnalysisFactory *) 0 ;
    std::string *arg2 = 0 ;
    Analysis *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(AnalysisFactory **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Analysis *)((AnalysisFactory const *)arg1)->createAnalysis((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Analysis **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_AnalysisFactory_1registerAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    AnalysisFactory *arg1 = (AnalysisFactory *) 0 ;
    Analysis *arg2 = (Analysis *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(AnalysisFactory **)&jarg1; 
    arg2 = *(Analysis **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->registerAnalysis(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_AnalysisFactory_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    AnalysisFactory *arg1 = (AnalysisFactory *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(AnalysisFactory **)&jarg1; 
    {
        try {
            {
                std::string const &_result_ref = ((AnalysisFactory const *)arg1)->toString();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_AnalysisFactory_1getRegisteredAnalyses(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    AnalysisFactory *arg1 = (AnalysisFactory *) 0 ;
    ArrayPtrs<Analysis > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(AnalysisFactory **)&jarg1; 
    {
        try {
            {
                ArrayPtrs<Analysis > const &_result_ref = ((AnalysisFactory const *)arg1)->getRegisteredAnalyses();
                result = (ArrayPtrs<Analysis > *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ArrayPtrs<Analysis > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Kinematics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    Kinematics *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (Kinematics *)new Kinematics(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Kinematics **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Kinematics_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    Kinematics *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Kinematics *)new Kinematics((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Kinematics **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Kinematics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    Kinematics *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    {
        try {
            result = (Kinematics *)new Kinematics(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Kinematics **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Kinematics_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Kinematics *arg1 = 0 ;
    Kinematics *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Kinematics **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Kinematics const & reference is null");
        return 0;
    }
    {
        try {
            result = (Kinematics *)new Kinematics((Kinematics const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Kinematics **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Kinematics_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Kinematics *arg1 = (Kinematics *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Kinematics **)&jarg1; 
    {
        try {
            result = (Object *)((Kinematics const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Kinematics_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    Kinematics *arg1 = (Kinematics *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Kinematics **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((Kinematics const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Kinematics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Kinematics *arg1 = (Kinematics *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Kinematics **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Kinematics_1setStorageCapacityIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Kinematics *arg1 = (Kinematics *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Kinematics **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setStorageCapacityIncrements(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Kinematics_1getAccelerationStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Kinematics *arg1 = (Kinematics *) 0 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Kinematics **)&jarg1; 
    {
        try {
            result = (Storage *)(arg1)->getAccelerationStorage();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Kinematics_1getVelocityStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Kinematics *arg1 = (Kinematics *) 0 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Kinematics **)&jarg1; 
    {
        try {
            result = (Storage *)(arg1)->getVelocityStorage();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Kinematics_1getPositionStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Kinematics *arg1 = (Kinematics *) 0 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Kinematics **)&jarg1; 
    {
        try {
            result = (Storage *)(arg1)->getPositionStorage();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Kinematics_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Kinematics *arg1 = (Kinematics *) 0 ;
    Model *arg2 = (Model *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Kinematics **)&jarg1; 
    arg2 = *(Model **)&jarg2; 
    {
        try {
            (arg1)->setModel(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Kinematics_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
    jint jresult = 0 ;
    Kinematics *arg1 = (Kinematics *) 0 ;
    int arg2 ;
    double arg3 ;
    double arg4 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    void *arg7 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Kinematics **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    arg7 = *(void **)&jarg7; 
    {
        try {
            result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Kinematics_1step(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
    jint jresult = 0 ;
    Kinematics *arg1 = (Kinematics *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    int arg4 ;
    double arg5 ;
    double arg6 ;
    double *arg7 = (double *) 0 ;
    double *arg8 = (double *) 0 ;
    void *arg9 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Kinematics **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = (int)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = (double)jarg6; 
    arg7 = *(double **)&jarg7; 
    arg8 = *(double **)&jarg8; 
    arg9 = *(void **)&jarg9; 
    {
        try {
            result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Kinematics_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
    jint jresult = 0 ;
    Kinematics *arg1 = (Kinematics *) 0 ;
    int arg2 ;
    double arg3 ;
    double arg4 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    void *arg7 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Kinematics **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    arg7 = *(void **)&jarg7; 
    {
        try {
            result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Kinematics_1printResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
    jint jresult = 0 ;
    Kinematics *arg1 = (Kinematics *) 0 ;
    char *arg2 ;
    char *arg3 = (char *) NULL ;
    double arg4 = (double) -1.0 ;
    char *arg5 = (char *) ".sto" ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Kinematics **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return 0;
        }
    }
    arg4 = (double)jarg4; 
    {
        arg5 = 0;
        if (jarg5) {
            arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
            if (!arg5) return 0;
        }
    }
    {
        try {
            result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
    {
        if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Kinematics_1getStorageList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Kinematics *arg1 = (Kinematics *) 0 ;
    ArrayPtrs<Storage > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Kinematics **)&jarg1; 
    {
        try {
            {
                ArrayPtrs<Storage > &_result_ref = (arg1)->getStorageList();
                result = (ArrayPtrs<Storage > *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ArrayPtrs<Storage > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Actuation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    Actuation *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (Actuation *)new Actuation(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Actuation **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Actuation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    Actuation *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Actuation *)new Actuation((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Actuation **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Actuation_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    Actuation *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    {
        try {
            result = (Actuation *)new Actuation(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Actuation **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Actuation_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Actuation *arg1 = 0 ;
    Actuation *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuation **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Actuation const & reference is null");
        return 0;
    }
    {
        try {
            result = (Actuation *)new Actuation((Actuation const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Actuation **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Actuation_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Actuation *arg1 = (Actuation *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuation **)&jarg1; 
    {
        try {
            result = (Object *)((Actuation const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Actuation_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    Actuation *arg1 = (Actuation *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuation **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((Actuation const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Actuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Actuation *arg1 = (Actuation *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuation **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuation_1setStorageCapacityIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Actuation *arg1 = (Actuation *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuation **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setStorageCapacityIncrements(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Actuation_1getForceStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Actuation *arg1 = (Actuation *) 0 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuation **)&jarg1; 
    {
        try {
            result = (Storage *)((Actuation const *)arg1)->getForceStorage();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Actuation_1getSpeedStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Actuation *arg1 = (Actuation *) 0 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuation **)&jarg1; 
    {
        try {
            result = (Storage *)((Actuation const *)arg1)->getSpeedStorage();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Actuation_1getPowerStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Actuation *arg1 = (Actuation *) 0 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuation **)&jarg1; 
    {
        try {
            result = (Storage *)((Actuation const *)arg1)->getPowerStorage();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Actuation_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Actuation *arg1 = (Actuation *) 0 ;
    Model *arg2 = (Model *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuation **)&jarg1; 
    arg2 = *(Model **)&jarg2; 
    {
        try {
            (arg1)->setModel(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Actuation_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
    jint jresult = 0 ;
    Actuation *arg1 = (Actuation *) 0 ;
    int arg2 ;
    double arg3 ;
    double arg4 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    void *arg7 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuation **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    arg7 = *(void **)&jarg7; 
    {
        try {
            result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Actuation_1step(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
    jint jresult = 0 ;
    Actuation *arg1 = (Actuation *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    int arg4 ;
    double arg5 ;
    double arg6 ;
    double *arg7 = (double *) 0 ;
    double *arg8 = (double *) 0 ;
    void *arg9 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuation **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = (int)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = (double)jarg6; 
    arg7 = *(double **)&jarg7; 
    arg8 = *(double **)&jarg8; 
    arg9 = *(void **)&jarg9; 
    {
        try {
            result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Actuation_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
    jint jresult = 0 ;
    Actuation *arg1 = (Actuation *) 0 ;
    int arg2 ;
    double arg3 ;
    double arg4 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    void *arg7 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuation **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    arg7 = *(void **)&jarg7; 
    {
        try {
            result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Actuation_1printResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
    jint jresult = 0 ;
    Actuation *arg1 = (Actuation *) 0 ;
    char *arg2 ;
    char *arg3 = (char *) NULL ;
    double arg4 = (double) -1.0 ;
    char *arg5 = (char *) ".sto" ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Actuation **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return 0;
        }
    }
    arg4 = (double)jarg4; 
    {
        arg5 = 0;
        if (jarg5) {
            arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
            if (!arg5) return 0;
        }
    }
    {
        try {
            result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
    {
        if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1IndAcc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    IndAcc *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (IndAcc *)new IndAcc(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(IndAcc **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1IndAcc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jstring jarg5, jstring jarg6) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    Storage *arg2 = (Storage *) 0 ;
    Storage *arg3 = (Storage *) 0 ;
    char *arg4 ;
    char *arg5 = (char *) NULL ;
    char *arg6 = (char *) NULL ;
    IndAcc *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    arg2 = *(Storage **)&jarg2; 
    arg3 = *(Storage **)&jarg3; 
    {
        arg4 = 0;
        if (jarg4) {
            arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
            if (!arg4) return 0;
        }
    }
    {
        arg5 = 0;
        if (jarg5) {
            arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
            if (!arg5) return 0;
        }
    }
    {
        arg6 = 0;
        if (jarg6) {
            arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
            if (!arg6) return 0;
        }
    }
    {
        try {
            result = (IndAcc *)new IndAcc(arg1,arg2,arg3,arg4,arg5,arg6);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(IndAcc **)&jresult = result; 
    {
        if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4); 
    }
    {
        if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5); 
    }
    {
        if (arg6) jenv->ReleaseStringUTFChars(jarg6, arg6); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1IndAcc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    IndAcc *arg1 = (IndAcc *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IndAcc_1getNumComponents(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            result = (int)(arg1)->getNumComponents();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IndAcc_1getNumIndependentComponents(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            result = (int)(arg1)->getNumIndependentComponents();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IndAcc_1getNumElements(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            result = (int)(arg1)->getNumElements();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IndAcc_1getLastActuatorIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            result = (int)(arg1)->getLastActuatorIndex();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IndAcc_1getGravityIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            result = (int)(arg1)->getGravityIndex();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IndAcc_1getVelocityIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            result = (int)(arg1)->getVelocityIndex();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IndAcc_1getInertialIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            result = (int)(arg1)->getInertialIndex();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IndAcc_1getAllActuatorsIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            result = (int)(arg1)->getAllActuatorsIndex();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IndAcc_1getAllIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            result = (int)(arg1)->getAllIndex();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IndAcc_1setContactThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    IndAcc *arg1 = (IndAcc *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setContactThreshold(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_IndAcc_1getContactThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            result = (double)(arg1)->getContactThreshold();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_IndAcc_1getComponentName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    int arg2 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (char *)(arg1)->getComponentName(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IndAcc_1setStorageCapacityIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    IndAcc *arg1 = (IndAcc *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setStorageCapacityIncrements(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_IndAcc_1getForceStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    Storage **result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            result = (Storage **)(arg1)->getForceStorage();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage ***)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_IndAcc_1getUseNullDecomposition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            result = (bool)(arg1)->getUseNullDecomposition();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IndAcc_1setComputeNormalizedAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    IndAcc *arg1 = (IndAcc *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setComputeNormalizedAccelerations(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_IndAcc_1getComputeNormalizedAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            result = (bool)(arg1)->getComputeNormalizedAccelerations();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IndAcc_1computeAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            result = (int)(arg1)->computeAccelerations();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IndAcc_1sumForceResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    IndAcc *arg1 = (IndAcc *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            (arg1)->sumForceResults();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IndAcc_1sumAccelerationResults(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    IndAcc *arg1 = (IndAcc *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            (arg1)->sumAccelerationResults();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IndAcc_1sumDecomposition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    IndAcc *arg1 = (IndAcc *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            (arg1)->sumDecomposition();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_IndAcc_1store(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    IndAcc *arg1 = (IndAcc *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        try {
            (arg1)->store();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_IndAcc_1printResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
    jint jresult = 0 ;
    IndAcc *arg1 = (IndAcc *) 0 ;
    char *arg2 ;
    char *arg3 = (char *) NULL ;
    double arg4 = (double) -1.0 ;
    char *arg5 = (char *) ".sto" ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(IndAcc **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return 0;
        }
    }
    arg4 = (double)jarg4; 
    {
        arg5 = 0;
        if (jarg5) {
            arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
            if (!arg5) return 0;
        }
    }
    {
        try {
            result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
    {
        if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1GeneralizedForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Model *arg1 = (Model *) 0 ;
    GeneralizedForces *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Model **)&jarg1; 
    {
        try {
            result = (GeneralizedForces *)new GeneralizedForces(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(GeneralizedForces **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1GeneralizedForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    GeneralizedForces *arg1 = (GeneralizedForces *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GeneralizedForces **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_GeneralizedForces_1setStorageCapacityIncrements(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    GeneralizedForces *arg1 = (GeneralizedForces *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GeneralizedForces **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setStorageCapacityIncrements(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_GeneralizedForces_1getGravGenForcesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    GeneralizedForces *arg1 = (GeneralizedForces *) 0 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GeneralizedForces **)&jarg1; 
    {
        try {
            result = (Storage *)(arg1)->getGravGenForcesStorage();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_GeneralizedForces_1getVelGenForcesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    GeneralizedForces *arg1 = (GeneralizedForces *) 0 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GeneralizedForces **)&jarg1; 
    {
        try {
            result = (Storage *)(arg1)->getVelGenForcesStorage();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_GeneralizedForces_1getActuatorGenForcesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    GeneralizedForces *arg1 = (GeneralizedForces *) 0 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GeneralizedForces **)&jarg1; 
    {
        try {
            result = (Storage *)(arg1)->getActuatorGenForcesStorage();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_GeneralizedForces_1getContactGenForcesStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    GeneralizedForces *arg1 = (GeneralizedForces *) 0 ;
    Storage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GeneralizedForces **)&jarg1; 
    {
        try {
            result = (Storage *)(arg1)->getContactGenForcesStorage();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Storage **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_GeneralizedForces_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
    jint jresult = 0 ;
    GeneralizedForces *arg1 = (GeneralizedForces *) 0 ;
    int arg2 ;
    double arg3 ;
    double arg4 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    void *arg7 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GeneralizedForces **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    arg7 = *(void **)&jarg7; 
    {
        try {
            result = (int)(arg1)->begin(arg2,arg3,arg4,arg5,arg6,arg7);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_GeneralizedForces_1step(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
    jint jresult = 0 ;
    GeneralizedForces *arg1 = (GeneralizedForces *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    int arg4 ;
    double arg5 ;
    double arg6 ;
    double *arg7 = (double *) 0 ;
    double *arg8 = (double *) 0 ;
    void *arg9 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GeneralizedForces **)&jarg1; 
    arg2 = *(double **)&jarg2; 
    arg3 = *(double **)&jarg3; 
    arg4 = (int)jarg4; 
    arg5 = (double)jarg5; 
    arg6 = (double)jarg6; 
    arg7 = *(double **)&jarg7; 
    arg8 = *(double **)&jarg8; 
    arg9 = *(void **)&jarg9; 
    {
        try {
            result = (int)(arg1)->step(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_GeneralizedForces_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
    jint jresult = 0 ;
    GeneralizedForces *arg1 = (GeneralizedForces *) 0 ;
    int arg2 ;
    double arg3 ;
    double arg4 ;
    double *arg5 = (double *) 0 ;
    double *arg6 = (double *) 0 ;
    void *arg7 = (void *) NULL ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GeneralizedForces **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    arg4 = (double)jarg4; 
    arg5 = *(double **)&jarg5; 
    arg6 = *(double **)&jarg6; 
    arg7 = *(void **)&jarg7; 
    {
        try {
            result = (int)(arg1)->end(arg2,arg3,arg4,arg5,arg6,arg7);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_GeneralizedForces_1printResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
    jint jresult = 0 ;
    GeneralizedForces *arg1 = (GeneralizedForces *) 0 ;
    char *arg2 ;
    char *arg3 = (char *) NULL ;
    double arg4 = (double) -1.0 ;
    char *arg5 = (char *) ".sto" ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(GeneralizedForces **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return 0;
        }
    }
    arg4 = (double)jarg4; 
    {
        arg5 = 0;
        if (jarg5) {
            arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
            if (!arg5) return 0;
        }
    }
    {
        try {
            result = (int)(arg1)->printResults((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
    {
        if (arg5) jenv->ReleaseStringUTFChars(jarg5, arg5); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1ArrayBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ArrayBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2, jint jarg3) {
    jlong jresult = 0 ;
    bool *arg1 = 0 ;
    int arg2 = (int) 0 ;
    int arg3 = (int) Array_CAPMIN ;
    Array<bool > *result;
    bool temp1 ;
    
    (void)jenv;
    (void)jcls;
    temp1 = jarg1 ? true : false; 
    arg1 = &temp1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (Array<bool > *)new Array<bool >((bool const &)*arg1,arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<bool > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ArrayBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Array<bool > *arg1 = 0 ;
    Array<bool > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<bool > const & reference is null");
        return 0;
    }
    {
        try {
            result = (Array<bool > *)new Array<bool >((Array<bool > const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<bool > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayBool_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayBool_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->ensureCapacity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayBool_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    {
        try {
            (arg1)->trim();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayBool_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    {
        try {
            result = (int)((Array<bool > const *)arg1)->getCapacity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayBool_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayBool_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    {
        try {
            result = (int)((Array<bool > const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayBool_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->setSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayBool_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    {
        try {
            result = (int)((Array<bool > const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayBool_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    jint jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    bool *arg2 = 0 ;
    int result;
    bool temp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    temp2 = jarg2 ? true : false; 
    arg2 = &temp2; 
    {
        try {
            result = (int)(arg1)->append((bool const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayBool_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    Array<bool > *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    arg2 = *(Array<bool > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<bool > const & reference is null");
        return 0;
    }
    {
        try {
            result = (int)(arg1)->append((Array<bool > const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayBool_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    int arg2 ;
    bool *arg3 = (bool *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(bool **)&jarg3; 
    {
        try {
            result = (int)(arg1)->append(arg2,(bool const *)arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayBool_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
    jint jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    int arg2 ;
    bool *arg3 = 0 ;
    int result;
    bool temp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    temp3 = jarg3 ? true : false; 
    arg3 = &temp3; 
    {
        try {
            result = (int)(arg1)->insert(arg2,(bool const &)*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayBool_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayBool_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    int arg2 ;
    bool *arg3 = 0 ;
    bool temp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    temp3 = jarg3 ? true : false; 
    arg3 = &temp3; 
    {
        try {
            (arg1)->set(arg2,(bool const &)*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayBool_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    bool *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    {
        try {
            result = (bool *)(arg1)->get();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(bool **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayBool_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    int arg2 ;
    bool *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            {
                bool &_result_ref = ((Array<bool > const *)arg1)->get(arg2);
                result = (bool *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(bool **)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayBool_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)Arraylbool_g_getitem___(arg1,arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayBool_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    int arg2 ;
    bool arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = jarg3 ? true : false; 
    {
        try {
            Arraylbool_g_setitem___(arg1,arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayBool_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    bool *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    {
        try {
            {
                bool &_result_ref = ((Array<bool > const *)arg1)->getLast();
                result = (bool *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(bool **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayBool_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    Array<bool > *arg1 = (Array<bool > *) 0 ;
    bool *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    bool temp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<bool > **)&jarg1; 
    temp2 = jarg2 ? true : false; 
    arg2 = &temp2; 
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            result = (int)((Array<bool > const *)arg1)->searchBinary((bool const &)*arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1ArrayDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Array<double > *arg1 = (Array<double > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ArrayDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2, jint jarg3) {
    jlong jresult = 0 ;
    double *arg1 = 0 ;
    int arg2 = (int) 0 ;
    int arg3 = (int) Array_CAPMIN ;
    Array<double > *result;
    double temp1 ;
    
    (void)jenv;
    (void)jcls;
    temp1 = (double)jarg1; 
    arg1 = &temp1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (Array<double > *)new Array<double >((double const &)*arg1,arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ArrayDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Array<double > *arg1 = 0 ;
    Array<double > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > const & reference is null");
        return 0;
    }
    {
        try {
            result = (Array<double > *)new Array<double >((Array<double > const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<double > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->ensureCapacity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Array<double > *arg1 = (Array<double > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    {
        try {
            (arg1)->trim();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    {
        try {
            result = (int)((Array<double > const *)arg1)->getCapacity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Array<double > *arg1 = (Array<double > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    {
        try {
            result = (int)((Array<double > const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->setSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    {
        try {
            result = (int)((Array<double > const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    jint jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    double *arg2 = 0 ;
    int result;
    double temp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    temp2 = (double)jarg2; 
    arg2 = &temp2; 
    {
        try {
            result = (int)(arg1)->append((double const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    Array<double > *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    arg2 = *(Array<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > const & reference is null");
        return 0;
    }
    {
        try {
            result = (int)(arg1)->append((Array<double > const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    int arg2 ;
    double *arg3 = (double *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(double **)&jarg3; 
    {
        try {
            result = (int)(arg1)->append(arg2,(double const *)arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    jint jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    int result;
    double temp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    temp3 = (double)jarg3; 
    arg3 = &temp3; 
    {
        try {
            result = (int)(arg1)->insert(arg2,(double const &)*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    Array<double > *arg1 = (Array<double > *) 0 ;
    int arg2 ;
    double *arg3 = 0 ;
    double temp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    temp3 = (double)jarg3; 
    arg3 = &temp3; 
    {
        try {
            (arg1)->set(arg2,(double const &)*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    {
        try {
            result = (double *)(arg1)->get();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    int arg2 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            {
                double &_result_ref = ((Array<double > const *)arg1)->get(arg2);
                result = (double *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jdouble jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    int arg2 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (double)Arrayldouble_g_getitem___(arg1,arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
    Array<double > *arg1 = (Array<double > *) 0 ;
    int arg2 ;
    double arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (double)jarg3; 
    {
        try {
            Arrayldouble_g_setitem___(arg1,arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    double *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    {
        try {
            {
                double &_result_ref = ((Array<double > const *)arg1)->getLast();
                result = (double *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(double **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayDouble_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    Array<double > *arg1 = (Array<double > *) 0 ;
    double *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    double temp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<double > **)&jarg1; 
    temp2 = (double)jarg2; 
    arg2 = &temp2; 
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            result = (int)((Array<double > const *)arg1)->searchBinary((double const &)*arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1ArrayInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Array<int > *arg1 = (Array<int > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ArrayInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
    jlong jresult = 0 ;
    int *arg1 = 0 ;
    int arg2 = (int) 0 ;
    int arg3 = (int) Array_CAPMIN ;
    Array<int > *result;
    int temp1 ;
    
    (void)jenv;
    (void)jcls;
    temp1 = (int)jarg1; 
    arg1 = &temp1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (Array<int > *)new Array<int >((int const &)*arg1,arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<int > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ArrayInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Array<int > *arg1 = 0 ;
    Array<int > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<int > const & reference is null");
        return 0;
    }
    {
        try {
            result = (Array<int > *)new Array<int >((Array<int > const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<int > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayInt_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayInt_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->ensureCapacity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayInt_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Array<int > *arg1 = (Array<int > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    {
        try {
            (arg1)->trim();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayInt_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    {
        try {
            result = (int)((Array<int > const *)arg1)->getCapacity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayInt_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Array<int > *arg1 = (Array<int > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayInt_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    {
        try {
            result = (int)((Array<int > const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayInt_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->setSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayInt_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    {
        try {
            result = (int)((Array<int > const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayInt_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    int *arg2 = 0 ;
    int result;
    int temp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    temp2 = (int)jarg2; 
    arg2 = &temp2; 
    {
        try {
            result = (int)(arg1)->append((int const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayInt_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    Array<int > *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    arg2 = *(Array<int > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<int > const & reference is null");
        return 0;
    }
    {
        try {
            result = (int)(arg1)->append((Array<int > const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayInt_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    int arg2 ;
    int *arg3 = (int *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3; 
    {
        try {
            result = (int)(arg1)->append(arg2,(int const *)arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayInt_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    jint jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    int result;
    int temp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    temp3 = (int)jarg3; 
    arg3 = &temp3; 
    {
        try {
            result = (int)(arg1)->insert(arg2,(int const &)*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayInt_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    Array<int > *arg1 = (Array<int > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    int temp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    temp3 = (int)jarg3; 
    arg3 = &temp3; 
    {
        try {
            (arg1)->set(arg2,(int const &)*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayInt_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    int *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    {
        try {
            result = (int *)(arg1)->get();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(int **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayInt_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    int arg2 ;
    int *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            {
                int &_result_ref = ((Array<int > const *)arg1)->get(arg2);
                result = (int *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(int **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayInt_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)Arraylint_g_getitem___(arg1,arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayInt_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
    Array<int > *arg1 = (Array<int > *) 0 ;
    int arg2 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            Arraylint_g_setitem___(arg1,arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayInt_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    int *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    {
        try {
            {
                int &_result_ref = ((Array<int > const *)arg1)->getLast();
                result = (int *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(int **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayInt_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    Array<int > *arg1 = (Array<int > *) 0 ;
    int *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    int temp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<int > **)&jarg1; 
    temp2 = (int)jarg2; 
    arg2 = &temp2; 
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            result = (int)((Array<int > const *)arg1)->searchBinary((int const &)*arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1ArrayStr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ArrayStr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    int arg2 = (int) 0 ;
    int arg3 = (int) Array_CAPMIN ;
    Array<std::string > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg2 = (int)jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (Array<std::string > *)new Array<std::string >((std::string const &)*arg1,arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<std::string > **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ArrayStr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Array<std::string > *arg1 = 0 ;
    Array<std::string > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<std::string > const & reference is null");
        return 0;
    }
    {
        try {
            result = (Array<std::string > *)new Array<std::string >((Array<std::string > const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Array<std::string > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayStr_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayStr_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->ensureCapacity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayStr_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    {
        try {
            (arg1)->trim();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayStr_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    {
        try {
            result = (int)((Array<std::string > const *)arg1)->getCapacity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayStr_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayStr_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    {
        try {
            result = (int)((Array<std::string > const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayStr_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->setSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayStr_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    {
        try {
            result = (int)((Array<std::string > const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayStr_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jint jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)(arg1)->append((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayStr_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jint jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    Array<std::string > *arg2 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    arg2 = *(Array<std::string > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<std::string > const & reference is null");
        return 0;
    }
    {
        try {
            result = (int)(arg1)->append((Array<std::string > const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayStr_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jint jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    int arg2 ;
    std::string *arg3 = (std::string *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(std::string **)&jarg3; 
    {
        try {
            result = (int)(arg1)->append(arg2,(std::string const *)arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayStr_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
    jint jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return 0;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (int)(arg1)->insert(arg2,(std::string const &)*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg3; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayStr_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jint jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    int arg2 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (int)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayStr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = NULL;
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return ;
        arg3 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            (arg1)->set(arg2,(std::string const &)*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
    delete arg3; 
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayStr_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    {
        try {
            result = (std::string *)(arg1)->get();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(std::string **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayStr_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    int arg2 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            {
                std::string &_result_ref = ((Array<std::string > const *)arg1)->get(arg2);
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(std::string **)&jresult = result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_ArrayStr_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jstring jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    int arg2 ;
    std::string result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = Arraylstd_string_g_getitem___(arg1,arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF((&result)->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayStr_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    int arg2 ;
    std::string arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    arg2 = (int)jarg2; 
    if(jarg3) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
        if (!pstr) return ;
        arg3 =  std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg3, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return ;
    }
    {
        try {
            Arraylstd_string_g_setitem___(arg1,arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayStr_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    {
        try {
            {
                std::string &_result_ref = ((Array<std::string > const *)arg1)->getLast();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(std::string **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayStr_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    Array<std::string > *arg1 = (Array<std::string > *) 0 ;
    std::string *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Array<std::string > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            result = (int)((Array<std::string > const *)arg1)->searchBinary((std::string const &)*arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1ArrayPtrsObj(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ArrayPtrsObj_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
    jlong jresult = 0 ;
    int arg1 = (int) 1 ;
    ArrayPtrs<Object > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    {
        try {
            result = (ArrayPtrs<Object > *)new ArrayPtrs<Object >(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ArrayPtrs<Object > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ArrayPtrsObj_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ArrayPtrs<Object > *arg1 = 0 ;
    ArrayPtrs<Object > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArrayPtrs<Object > const & reference is null");
        return 0;
    }
    {
        try {
            result = (ArrayPtrs<Object > *)new ArrayPtrs<Object >((ArrayPtrs<Object > const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ArrayPtrs<Object > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    {
        try {
            (arg1)->clearAndDestroy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setMemoryOwner(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    {
        try {
            result = (bool)((ArrayPtrs<Object > const *)arg1)->getMemoryOwner();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->ensureCapacity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    {
        try {
            (arg1)->trim();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    {
        try {
            result = (int)((ArrayPtrs<Object > const *)arg1)->getCapacity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    {
        try {
            result = (int)((ArrayPtrs<Object > const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->setSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    {
        try {
            result = (int)((ArrayPtrs<Object > const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    Object *arg2 = (Object *) 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = *(Object **)&jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((ArrayPtrs<Object > const *)arg1)->getIndex((Object const *)arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jint jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((ArrayPtrs<Object > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    Object *arg2 = (Object *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = *(Object **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->append(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    ArrayPtrs<Object > *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = *(ArrayPtrs<Object > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArrayPtrs<Object > & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->append(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    int arg2 ;
    Object *arg3 = (Object *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Object **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->insert(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    Object *arg2 = (Object *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = *(Object **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->remove((Object const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    int arg2 ;
    Object *arg3 = (Object *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Object **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->set(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    int arg2 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (Object *)(arg1)->get(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    std::string *arg2 = 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Object *)(arg1)->get((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    {
        try {
            result = (Object *)((ArrayPtrs<Object > const *)arg1)->getLast();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_ArrayPtrsObj_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    ArrayPtrs<Object > *arg1 = (ArrayPtrs<Object > *) 0 ;
    Object *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ArrayPtrs<Object > **)&jarg1; 
    arg2 = *(Object **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Object const & reference is null");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            result = (int)((ArrayPtrs<Object > const *)arg1)->searchBinary((Object const &)*arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Marker_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Marker *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Marker *)new Marker();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Marker **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Marker_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Marker *arg1 = 0 ;
    Marker *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Marker **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Marker const & reference is null");
        return 0;
    }
    {
        try {
            result = (Marker *)new Marker((Marker const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Marker **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Marker_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    Marker *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    {
        try {
            result = (Marker *)new Marker(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Marker **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Marker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Marker *arg1 = (Marker *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Marker **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Marker_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    Marker *arg1 = (Marker *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Marker **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((Marker const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Marker_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Marker *arg1 = (Marker *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Marker **)&jarg1; 
    {
        try {
            result = (Object *)((Marker const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Marker_1getWeight(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Marker *arg1 = (Marker *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Marker **)&jarg1; 
    {
        try {
            result = (double)((Marker const *)arg1)->getWeight();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Marker_1setWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Marker *arg1 = (Marker *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Marker **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setWeight(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Marker_1getReferenceSegmentName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Marker *arg1 = (Marker *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Marker **)&jarg1; 
    {
        try {
            {
                std::string const &_result_ref = ((Marker const *)arg1)->getReferenceSegmentName();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_Marker_1getRefSegment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Marker *arg1 = (Marker *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Marker **)&jarg1; 
    {
        try {
            result = (int)((Marker const *)arg1)->getRefSegment();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Marker_1setRefSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Marker *arg1 = (Marker *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Marker **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setRefSegment(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Marker_1getLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Marker *arg1 = (Marker *) 0 ;
    Array<double > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Marker **)&jarg1; 
    arg2 = *(Array<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > & reference is null");
        return ;
    }
    {
        try {
            ((Marker const *)arg1)->getLocation(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Marker_1setLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Marker *arg1 = (Marker *) 0 ;
    Array<double > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Marker **)&jarg1; 
    arg2 = *(Array<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > & reference is null");
        return ;
    }
    {
        try {
            (arg1)->setLocation(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Marker_1scaleBy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Marker *arg1 = (Marker *) 0 ;
    Array<double > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Marker **)&jarg1; 
    arg2 = *(Array<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > & reference is null");
        return ;
    }
    {
        try {
            (arg1)->scaleBy(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Marker_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    Marker *arg1 = (Marker *) 0 ;
    Object *arg2 = 0 ;
    Event *arg3 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Marker **)&jarg1; 
    arg2 = *(Object **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Object const & reference is null");
        return ;
    }
    arg3 = *(Event **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Event & reference is null");
        return ;
    }
    {
        try {
            (arg1)->update((Object const &)*arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1suSetMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1suSetMarkers_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Set<Marker > *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Set<Marker > *)new Set<Marker >();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Marker > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1suSetMarkers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    Set<Marker > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Set<Marker > *)new Set<Marker >((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Marker > **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1suSetMarkers_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Marker > *arg1 = 0 ;
    Set<Marker > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Set<Marker > const & reference is null");
        return 0;
    }
    {
        try {
            result = (Set<Marker > *)new Set<Marker >((Set<Marker > const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Marker > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    {
        try {
            result = (Object *)((Set<Marker > const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setMemoryOwner(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    {
        try {
            result = (bool)((Set<Marker > const *)arg1)->getMemoryOwner();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->ensureCapacity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    {
        try {
            (arg1)->trim();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    {
        try {
            result = (int)((Set<Marker > const *)arg1)->getCapacity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    {
        try {
            result = (int)((Set<Marker > const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->setSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    {
        try {
            result = (int)((Set<Marker > const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    Marker *arg2 = (Marker *) 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = *(Marker **)&jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Marker > const *)arg1)->getIndex((Marker const *)arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Marker > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    Marker *arg2 = (Marker *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = *(Marker **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->append(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    ArrayPtrs<Marker > *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = *(ArrayPtrs<Marker > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArrayPtrs<Marker > & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->append(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    int arg2 ;
    Marker *arg3 = (Marker *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Marker **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->insert(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    Marker *arg2 = (Marker *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = *(Marker **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->remove((Marker const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    int arg2 ;
    Marker *arg3 = (Marker *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Marker **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->set(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    int arg2 ;
    Marker *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (Marker *)((Set<Marker > const *)arg1)->get(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Marker **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    std::string *arg2 = 0 ;
    Marker *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Marker *)(arg1)->get((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Marker **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    Marker *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    {
        try {
            result = (Marker *)((Set<Marker > const *)arg1)->getLast();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Marker **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_suSetMarkers_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    Set<Marker > *arg1 = (Set<Marker > *) 0 ;
    Marker *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Marker > **)&jarg1; 
    arg2 = *(Marker **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Marker const & reference is null");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            result = (int)((Set<Marker > const *)arg1)->searchBinary((Marker const &)*arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1MarkerSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    MarkerSet *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (MarkerSet *)new MarkerSet();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(MarkerSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1MarkerSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    MarkerSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (MarkerSet *)new MarkerSet((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(MarkerSet **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1MarkerSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MarkerSet *arg1 = 0 ;
    MarkerSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MarkerSet **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MarkerSet const & reference is null");
        return 0;
    }
    {
        try {
            result = (MarkerSet *)new MarkerSet((MarkerSet const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(MarkerSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1MarkerSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    MarkerSet *arg1 = (MarkerSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MarkerSet **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_MarkerSet_1usesWeights(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    MarkerSet *arg1 = (MarkerSet *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MarkerSet **)&jarg1; 
    {
        try {
            result = (bool)((MarkerSet const *)arg1)->usesWeights();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_MarkerSet_1bindMarkersToModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    MarkerSet *arg1 = (MarkerSet *) 0 ;
    Model *arg2 = (Model *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MarkerSet **)&jarg1; 
    arg2 = *(Model **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->bindMarkersToModel(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_MarkerSet_1getMarkerNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    MarkerSet *arg1 = (MarkerSet *) 0 ;
    Array<std::string > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MarkerSet **)&jarg1; 
    arg2 = *(Array<std::string > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<std::string > & reference is null");
        return ;
    }
    {
        try {
            (arg1)->getMarkerNames(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_MarkerSet_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    MarkerSet *arg1 = (MarkerSet *) 0 ;
    ScaleSet *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MarkerSet **)&jarg1; 
    arg2 = *(ScaleSet **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ScaleSet & reference is null");
        return ;
    }
    {
        try {
            (arg1)->scale(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_MarkerSet_1makeRelativeToCom(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    MarkerSet *arg1 = (MarkerSet *) 0 ;
    Model *arg2 = (Model *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MarkerSet **)&jarg1; 
    arg2 = *(Model **)&jarg2; 
    {
        try {
            (arg1)->makeRelativeToCom(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_MarkerSet_1getMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    MarkerSet *arg1 = (MarkerSet *) 0 ;
    Set<Marker > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(MarkerSet **)&jarg1; 
    {
        try {
            {
                Set<Marker > const &_result_ref = ((MarkerSet const *)arg1)->getMarkers();
                result = (Set<Marker > *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Marker > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Range_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Range *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Range *)new Range();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Range **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Range_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Range *arg1 = 0 ;
    Range *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Range **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Range const & reference is null");
        return 0;
    }
    {
        try {
            result = (Range *)new Range((Range const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Range **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Range_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    Range *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    {
        try {
            result = (Range *)new Range(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Range **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Range(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Range *arg1 = (Range *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Range **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Range_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    Range *arg1 = (Range *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Range **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((Range const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Range_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Range *arg1 = (Range *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Range **)&jarg1; 
    {
        try {
            result = (Object *)((Range const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Range_1getMin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Range *arg1 = (Range *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Range **)&jarg1; 
    {
        try {
            result = (double)((Range const *)arg1)->getMin();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Range_1setMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Range *arg1 = (Range *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Range **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setMin(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jdouble JNICALL Java_simtkModel_ModelJNI_Range_1getMax(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jdouble jresult = 0 ;
    Range *arg1 = (Range *) 0 ;
    double result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Range **)&jarg1; 
    {
        try {
            result = (double)((Range const *)arg1)->getMax();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jdouble)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Range_1setMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
    Range *arg1 = (Range *) 0 ;
    double arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Range **)&jarg1; 
    arg2 = (double)jarg2; 
    {
        try {
            (arg1)->setMax(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Scale_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Scale *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Scale *)new Scale();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Scale **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Scale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Scale *arg1 = 0 ;
    Scale *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Scale **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Scale const & reference is null");
        return 0;
    }
    {
        try {
            result = (Scale *)new Scale((Scale const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Scale **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1Scale_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    DOMElement *arg1 = (DOMElement *) 0 ;
    Scale *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(DOMElement **)&jarg1; 
    {
        try {
            result = (Scale *)new Scale(arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Scale **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1Scale(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Scale *arg1 = (Scale *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Scale **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Scale_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    Scale *arg1 = (Scale *) 0 ;
    DOMElement *arg2 = (DOMElement *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Scale **)&jarg1; 
    arg2 = *(DOMElement **)&jarg2; 
    {
        try {
            result = (Object *)((Scale const *)arg1)->copy(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_Scale_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Scale *arg1 = (Scale *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Scale **)&jarg1; 
    {
        try {
            result = (Object *)((Scale const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Scale_1getScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Scale *arg1 = (Scale *) 0 ;
    Array<double > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Scale **)&jarg1; 
    arg2 = *(Array<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > & reference is null");
        return ;
    }
    {
        try {
            ((Scale const *)arg1)->getScaleFactors(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jstring JNICALL Java_simtkModel_ModelJNI_Scale_1getSegmentName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    Scale *arg1 = (Scale *) 0 ;
    std::string *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Scale **)&jarg1; 
    {
        try {
            {
                std::string const &_result_ref = ((Scale const *)arg1)->getSegmentName();
                result = (std::string *) &_result_ref;
            }
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = jenv->NewStringUTF(result->c_str()); 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Scale_1setSegmentName(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Scale *arg1 = (Scale *) 0 ;
    std::string *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Scale **)&jarg1; 
    arg2 = *(std::string **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
        return ;
    }
    {
        try {
            (arg1)->setSegmentName(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_Scale_1setScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    Scale *arg1 = (Scale *) 0 ;
    Array<double > *arg2 = 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Scale **)&jarg1; 
    arg2 = *(Array<double > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Array<double > & reference is null");
        return ;
    }
    {
        try {
            (arg1)->setScaleFactors(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1suSetScales(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1suSetScales_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    Set<Scale > *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (Set<Scale > *)new Set<Scale >();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Scale > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1suSetScales_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    Set<Scale > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Set<Scale > *)new Set<Scale >((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Scale > **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1suSetScales_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Scale > *arg1 = 0 ;
    Set<Scale > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1;
    if(!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Set<Scale > const & reference is null");
        return 0;
    }
    {
        try {
            result = (Set<Scale > *)new Set<Scale >((Set<Scale > const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Set<Scale > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_suSetScales_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    Object *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    {
        try {
            result = (Object *)((Set<Scale > const *)arg1)->copy();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Object **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_suSetScales_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    {
        try {
            (arg1)->setMemoryOwner(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetScales_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jboolean jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    {
        try {
            result = (bool)((Set<Scale > const *)arg1)->getMemoryOwner();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetScales_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    int arg2 ;
    int *arg3 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(int **)&jarg3;
    if(!arg3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetScales_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->ensureCapacity(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_suSetScales_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    {
        try {
            (arg1)->trim();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_suSetScales_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    {
        try {
            result = (int)((Set<Scale > const *)arg1)->getCapacity();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_suSetScales_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            (arg1)->setCapacityIncrement(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_suSetScales_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    {
        try {
            result = (int)((Set<Scale > const *)arg1)->getCapacityIncrement();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetScales_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->setSize(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_suSetScales_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    {
        try {
            result = (int)((Set<Scale > const *)arg1)->getSize();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_suSetScales_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    Scale *arg2 = (Scale *) 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = *(Scale **)&jarg2; 
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Scale > const *)arg1)->getIndex((Scale const *)arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_suSetScales_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
    jint jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    arg3 = (int)jarg3; 
    {
        try {
            result = (int)((Set<Scale > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetScales_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    Scale *arg2 = (Scale *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = *(Scale **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->append(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetScales_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    ArrayPtrs<Scale > *arg2 = 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = *(ArrayPtrs<Scale > **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArrayPtrs<Scale > & reference is null");
        return 0;
    }
    {
        try {
            result = (bool)(arg1)->append(*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetScales_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    int arg2 ;
    Scale *arg3 = (Scale *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Scale **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->insert(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetScales_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jboolean jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    int arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (bool)(arg1)->remove(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetScales_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    Scale *arg2 = (Scale *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = *(Scale **)&jarg2; 
    {
        try {
            result = (bool)(arg1)->remove((Scale const *)arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtkModel_ModelJNI_suSetScales_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    int arg2 ;
    Scale *arg3 = (Scale *) 0 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = (int)jarg2; 
    arg3 = *(Scale **)&jarg3; 
    {
        try {
            result = (bool)(arg1)->set(arg2,arg3);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_suSetScales_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    int arg2 ;
    Scale *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = (int)jarg2; 
    {
        try {
            result = (Scale *)((Set<Scale > const *)arg1)->get(arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Scale **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_suSetScales_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    std::string *arg2 = 0 ;
    Scale *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = NULL;
    if(jarg2) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
        if (!pstr) return 0;
        arg2 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg2, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (Scale *)(arg1)->get((std::string const &)*arg2);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Scale **)&jresult = result; 
    delete arg2; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_suSetScales_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    Scale *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    {
        try {
            result = (Scale *)((Set<Scale > const *)arg1)->getLast();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(Scale **)&jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_simtkModel_ModelJNI_suSetScales_1searchBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
    jint jresult = 0 ;
    Set<Scale > *arg1 = (Set<Scale > *) 0 ;
    Scale *arg2 = 0 ;
    bool arg3 = (bool) false ;
    int arg4 = (int) -1 ;
    int arg5 = (int) -1 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(Set<Scale > **)&jarg1; 
    arg2 = *(Scale **)&jarg2;
    if(!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Scale const & reference is null");
        return 0;
    }
    arg3 = jarg3 ? true : false; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    {
        try {
            result = (int)((Set<Scale > const *)arg1)->searchBinary((Scale const &)*arg2,arg3,arg4,arg5);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ScaleSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    ScaleSet *result;
    
    (void)jenv;
    (void)jcls;
    {
        try {
            result = (ScaleSet *)new ScaleSet();
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ScaleSet **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_new_1ScaleSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    std::string *arg1 = 0 ;
    ScaleSet *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = NULL;
    if(jarg1) {
        const char *pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
        if (!pstr) return 0;
        arg1 =  new std::string(pstr);
        jenv->ReleaseStringUTFChars(jarg1, pstr);
    }
    else {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
        return 0;
    }
    {
        try {
            result = (ScaleSet *)new ScaleSet((std::string const &)*arg1);
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return NULL;
        }
    }
    *(ScaleSet **)&jresult = result; 
    delete arg1; 
    return jresult;
}


JNIEXPORT void JNICALL Java_simtkModel_ModelJNI_delete_1ScaleSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ScaleSet *arg1 = (ScaleSet *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ScaleSet **)&jarg1; 
    {
        try {
            delete arg1;
            
        }
        catch (Exception) {
            jclass clazz = jenv->FindClass("simtkModel/Exception");
            jenv->ThrowNew(clazz, "Native Exception");
            return;
        }
    }
}


JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGMaterialToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Material **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGVisiblePropertiesToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(VisibleProperties **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGTransformToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Transform **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGVisibleObjectToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(VisibleObject **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGBodyToVisibleObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(VisibleObject **)&baseptr = *(Body **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGSetBodiesToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Set<Body > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGSetMaterialsToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Set<Material > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGMaterialSetToSetMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Set<Material > **)&baseptr = *(MaterialSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGActuatorToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Actuator **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGSetActuatorsToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Set<Actuator > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGActuatorSetToSetActuators(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Set<Actuator > **)&baseptr = *(ActuatorSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGContactForceSetToActuatorSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ActuatorSet **)&baseptr = *(ContactForceSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGStorageToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Storage **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGModelToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Model **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGControlToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Control **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGSetControlsToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Set<Control > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGControlSetToSetControls(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Set<Control > **)&baseptr = *(ControlSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGControlConstantToControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Control **)&baseptr = *(ControlConstant **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGControlLinearToControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Control **)&baseptr = *(ControlLinear **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGIntegrandToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Integrand **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGModelIntegrandToIntegrand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Integrand **)&baseptr = *(ModelIntegrand **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGIntegRKFToRKF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(RKF **)&baseptr = *(IntegRKF **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGCallbackToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Callback **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGSetCallbackToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Set<Callback > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGCallbackSetToSetCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Set<Callback > **)&baseptr = *(CallbackSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGIntegCallbackToCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Callback **)&baseptr = *(IntegCallback **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGSimtkAnimationCallbackToIntegCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(IntegCallback **)&baseptr = *(SimtkAnimationCallback **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGAnalysisToIntegCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(IntegCallback **)&baseptr = *(Analysis **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGSetAnalysisToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Set<Analysis > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGKinematicsToAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Analysis **)&baseptr = *(Kinematics **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGActuationToAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Analysis **)&baseptr = *(Actuation **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGIndAccToAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Analysis **)&baseptr = *(IndAcc **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGGeneralizedForcesToAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Analysis **)&baseptr = *(GeneralizedForces **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGMarkerToVisibleObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(VisibleObject **)&baseptr = *(Marker **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGsuSetMarkersToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Set<Marker > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGMarkerSetTosuSetMarkers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Set<Marker > **)&baseptr = *(MarkerSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGRangeToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Range **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGScaleToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Scale **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGsuSetScalesToObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Object **)&baseptr = *(Set<Scale > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtkModel_ModelJNI_SWIGScaleSetTosuSetScales(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Set<Scale > **)&baseptr = *(ScaleSet **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

