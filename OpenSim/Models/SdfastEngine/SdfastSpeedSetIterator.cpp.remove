// SdfastSpeedSetIterator.cpp
// Author: Peter Loan
/*
 * Copyright (c) 2006, Stanford University. All rights reserved. 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including 
 * without limitation the rights to use, copy, modify, merge, publish, 
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject
 * to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

//=============================================================================
// INCLUDES
//=============================================================================
#include "SdfastSpeedSetIterator.h"
#include <OpenSim/Simulation/Simm/AbstractSpeed.h>
#include <OpenSim/Simulation/Simm/SpeedSet.h>

//=============================================================================
// STATICS
//=============================================================================
using namespace std;
using namespace OpenSim;

//=============================================================================
// CONSTRUCTOR(S) AND DESTRUCTOR
//=============================================================================
SdfastSpeedSetIterator::SdfastSpeedSetIterator(SdfastSpeedSet& aSpeedSet) :
	SpeedIterator(),
	_speedSet(aSpeedSet)
{
}

//_____________________________________________________________________________
/**
 * Destructor.
 */
SdfastSpeedSetIterator::~SdfastSpeedSetIterator()
{
}

//=============================================================================
// ITERATION
//=============================================================================
//_____________________________________________________________________________
/**
 * Determines if iterator is at the end.
 *
 * @return Whether or not iterator is finished.
 */
bool SdfastSpeedSetIterator::finished() const
{
	if (_counter >= _speedSet.getSize())
		return true;

	return false;
}

//_____________________________________________________________________________
/**
 * Get current speed, without advancing the iterator.
 *
 * @return Speed that iterator currently points to.
 */
AbstractSpeed* SdfastSpeedSetIterator::getCurrent() const
{
	if (_counter >= 0 && _counter < _speedSet.getSize())
		return _speedSet.get(_counter);

	return NULL;
}

//_____________________________________________________________________________
/**
 * Get current speed and advance iterator to next one.
 *
 * @return Speed that iterator points to before being advanced.
 */
AbstractSpeed* SdfastSpeedSetIterator::next()
{
	if (_counter >= 0 && _counter < _speedSet.getSize())
		return _speedSet.get(_counter++);

	return NULL;
}

//_____________________________________________________________________________
/**
 * Reset iterator to first speed.
 */
void SdfastSpeedSetIterator::reset()
{
	_counter = 0;
}

//_____________________________________________________________________________
/**
 * Set iterator to the end (beyond the last speed).
 */
void SdfastSpeedSetIterator::end()
{
	_counter = _speedSet.getSize();
}
