// rdBlock.cpp
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/*
* Copyright (c) 2005, Stanford University. All rights reserved. 
* Redistribution and use in source and binary forms, with or without 
* modification, are permitted provided that the following conditions
* are met: 
*  - Redistributions of source code must retain the above copyright 
*    notice, this list of conditions and the following disclaimer. 
*  - Redistributions in binary form must reproduce the above copyright 
*    notice, this list of conditions and the following disclaimer in the 
*    documentation and/or other materials provided with the distribution. 
*  - Neither the name of the Stanford University nor the names of its 
*    contributors may be used to endorse or promote products derived 
*    from this software without specific prior written permission. 
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
* COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
* POSSIBILITY OF SUCH DAMAGE. 
*/

/* Note: This code was originally developed by Realistic Dynamics Inc. 
 * Author: Frank C. Anderson 
 */


//=============================================================================
// INCLUDES
//=============================================================================
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <float.h>
#include <OpenSim/Tools/rdMath.h>
#include <OpenSim/Simulation/Simm/AbstractModel.h>
#include <OpenSim/Simulation/Model/Springs.h>
#include <OpenSim/Simulation/SDFast/sdfast.h>
#include <OpenSim/Simulation/Model/Body.h>
#include "rdBlock.h"
#include <OpenSim/Simulation/Control/ControlConstant.h>
#include <OpenSim/Simulation/Control/ControlLinear.h>
#include <OpenSim/Simulation/Control/ControlLinearNode.h>
#include <OpenSim/Simulation/Control/ControlSet.h>
#include <OpenSim/Simulation/Model/Force.h>
#include <OpenSim/Simulation/Model/GeneralizedForce.h>
#include <OpenSim/Models/SdfastEngine/SdfastEngineDLL.h>
#include <OpenSim/Models/SdfastEngine/SdfastEngine.h>



using namespace OpenSim;
using namespace std;


//=============================================================================
// CONSTANTS
//=============================================================================

// NAMES
static char* bNames[] = { "block" };
static char* qNames[] = { "X","Y","Z","E1","E2","E3","E4" };
static char* uNames[] = { "VX","VY","VZ","VOx","VOy","VOz" };


//=============================================================================
// CONSTRUCTOR(S) AND DESTRUCTOR
//=============================================================================
//_____________________________________________________________________________
/**
 * Destructor.
 */
#if 0
rdBlock::~rdBlock()
{
	// Bodies allocated in constructBodies will be released in ~Model
}
//_____________________________________________________________________________
/**
 * Default constructor.
 *
 */
rdBlock::rdBlock(ActuatorSet *aActuators,ContactForceSet *aContacts) :
	ActuatedModel_SDFast(aActuators, aContacts)
{
	setNull();

	// CONSTRUCT INITIAL STATES
	constructInitialStates();

	setName("Block");
	setType("rdBlock");

	// Code added here so that when the model is displayed
	// body xforms are well defined.
	double *iStates= new double[getNumStates()];
	getInitialStates(iStates);
	setStates(iStates);
	delete[] iStates;
}

//_____________________________________________________________________________
/**
 * Constructor from an XML Document
 */
rdBlock::rdBlock(const string &aFileName,
							ActuatorSet *aActuators,
							ContactForceSet *aContacts) :
ActuatedModel_SDFast(aFileName, aActuators, aContacts)
{
	setNull();

	updateFromXMLNode();

	// INITIAL STATES
	constructInitialStates();

	constructGeometry();

}
//=============================================================================
// CONSTRUCTION METHODS
//=============================================================================
//_____________________________________________________________________________
/**
 * Set member variables to their appropriate null values.
 */
void rdBlock::
setNull()
{
}
//_____________________________________________________________________________
/**
 * Construct the valid initial states.
 */
void rdBlock::
constructInitialStates()
{
	Array<double> yi(0.0,getNumStates());
	getInitialStates(&yi[0]);
	yi[1] = 0.1;
	yi[6] = 1.0;
	yi[7] = 1.0;
	setInitialStates(&yi[0]);
}

//_____________________________________________________________________________
/**
 * Read system description and fill in data to describe visible properties of model.
 *
 * @todo put geometry back when GUI is rebuilt
 */
void rdBlock::
constructGeometry()
{
	/*
	// Body Geometry abd preferences
	for(int i=0;i<getNumBodies();i++) {
		// Actual body has been constructed by constructBodies()
		if (i!=getGroundID()){
			getBody(i)->setNumGeometryFiles(1);
			// This's specific to my env. we'll have to make it more flexible
			// for example by providing a default directory or having path
			// relative to some env. var $RDI_INSTALL
			getBody(i)->setGeometryFileName(0, "C://Work//Geometry//Cube.vtp");
		}
	}*/
}
//=============================================================================
// Register Types: registers the types of objects that will be used by the 
// rdBlock Model so that it can be read and written to xml files (serialized)
//=============================================================================

void rdBlock::
RegisterTypes()
{
	/* This list should be broken so that
	 * 1. a Model doesn't have to be loaded before we load Actuators, Contacts, ...
	 * 2. rdBlock registers only classes it defines (rdBlock()) everything else
	 *	  would be registered in a base class and is done by calling inherited::RegisterTypes()
	 * 3. Plugins will define new types so they should use the mechanism in 2. for encapsulation.
	 */
	ActuatedModel_SDFast::RegisterTypes();
	Object::RegisterType(rdBlock());
	Object::RegisterType(ControlConstant());
	Object::RegisterType(ControlLinearNode());
	Object::RegisterType(ControlLinear());
	Object::RegisterType(ControlSet());
	Object::RegisterType(Force());
	Object::RegisterType(GeneralizedForce());

}

#endif

extern "C" {

//=============================================================================
// STATIC METHOD FOR CREATING THIS MODEL
//=============================================================================
//_____________________________________________________________________________
/**
 * Deserialization from file.
 */
SDFAST_ENGINE_API AbstractModel*
CreateModel_File(const string &aModelFile)
{
	Object::RegisterType(SdfastEngine());
	SdfastEngine::registerTypes();
	return(new AbstractModel(aModelFile));
}

}



