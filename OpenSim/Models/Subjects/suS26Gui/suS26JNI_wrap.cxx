/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <OpenSim/Tools/rdToolsDLL.h>
#include <OpenSim/Simulation/rdSimulationDLL.h>
#include <OpenSim/Tools/Exception.h>
#include <OpenSim/Tools/Array.h>
#include <OpenSim/Tools/ArrayPtrs.h>
#include <OpenSim/Tools/Property.h>
#include <OpenSim/Tools/PropertySet.h>
#include <OpenSim/Tools/Object.h>
#include <OpenSim/Tools/Material.h>
#include <OpenSim/Tools/VisibleProperties.h>
#include <OpenSim/Tools/Transform.h>
#include <OpenSim/Tools/VisibleObject.h>

#include <OpenSim/Tools/Set.h>
#include <OpenSim/Simulation/Model/Body.h>
#include <OpenSim/Simulation/Model/BodySet.h>

#include <OpenSim/Tools/MaterialSet.h>

#include <OpenSim/Simulation/Model/Actuator.h>
#include <OpenSim/Simulation/Model/ActuatorSet.h>

#include <OpenSim/Simulation/Model/ContactForceSet.h>

#include <OpenSim/Tools/StateVector.h>
#include <OpenSim/Tools/Storage.h>

#include <OpenSim/Simulation/Model/Model.h>
#include <OpenSim/Simulation/Control/Control.h>
#include <OpenSim/Simulation/Control/ControlSet.h>
#include <OpenSim/Simulation/Control/ControlConstant.h>
#include <OpenSim/Simulation/Control/ControlLinear.h>
#include <OpenSim/Simulation/Integrator/Integrand.h>
#include <OpenSim/Simulation/Integrator/RKF.h>
#include <OpenSim/Simulation/Integrator/IntegRKF.h>
#include <OpenSim/Simulation/Model/ModelIntegrand.h>
#include <OpenSim/Simulation/Manager/Manager.h>
#include <OpenSim/Simulation/Model/Callback.h>
#include <OpenSim/Simulation/Model/CallbackSet.h>
#include <OpenSim/Simulation/Model/IntegCallback.h>
#include <OpenSim/Simulation/Simtk/SimtkAnimationCallback.h>
#include <OpenSim/Simulation/Model/Analysis.h>
#include <OpenSim/Simulation/Model/AnalysisSet.h>
#include <OpenSim/Simulation/Model/AnalysisFactory.h>

#include <OpenSim/Analyses/AnalysisFactory.h>
#include <OpenSim/Analyses/Actuation.h>
#include <OpenSim/Analyses/IndAcc.h>
#include <OpenSim/Analyses/Kinematics.h>
#include <OpenSim/Analyses/GeneralizedForces.h>

#include <OpenSim/Simulation/Model/Marker.h>
#include <OpenSim/Simulation/Model/MarkerSet.h>
#include <OpenSim/Tools/Range.h>
#include <OpenSim/Tools/Scale.h>
#include <OpenSim/Tools/ScaleSet.h>

	/* This group of headers added by KMS 3/22/06 */
#include <OpenSim/Simulation/Model/AbstractDynamicsEngine.h>
#include <OpenSim/Simulation/SIMM/SimmBody.h>
#include <OpenSim/Simulation/SIMM/SimmBone.h>
#include <OpenSim/Tools/Function.h>
#include <OpenSim/Simulation/SIMM/Constant.h>
#include <OpenSim/Simulation/SIMM/Coordinate.h>
#include <OpenSim/Simulation/SIMM/SimmCoordinate.h>
#include <OpenSim/Simulation/SIMM/SimmDof.h>
#include <OpenSim/Simulation/SIMM/SimmJoint.h>
#include <OpenSim/Simulation/SIMM/SimmKinematicsEngine.h>
#include <OpenSim/Simulation/SIMM/SimmMarker.h>
#include <OpenSim/Simulation/SIMM/SimmModel.h>
#include <OpenSim/Simulation/SIMM/SimmMuscle.h>
#include <OpenSim/Simulation/SIMM/SimmMuscleGroup.h>
#include <OpenSim/Simulation/SIMM/SimmMusclePoint.h>
#include <OpenSim/Simulation/SIMM/SimmMuscleViaPoint.h>
#include <OpenSim/Simulation/SIMM/SimmPath.h>
#include <OpenSim/Simulation/SIMM/SimmPathMatrix.h>
#include <OpenSim/Simulation/SIMM/SimmPoint.h>
#include <OpenSim/Simulation/SIMM/SimmRotationDof.h>
#include <OpenSim/Simulation/SIMM/SimmStep.h>
#include <OpenSim/Simulation/SIMM/SimmTranslationDof.h>
#include <OpenSim/Simulation/SIMM/SimmUnits.h>

#include <OpenSim/Simulation/SDFast/rdSDFastDLL.h>
#include <OpenSim/Simulation/SDFast/rdSDFast.h>
#include <OpenSim/Simulation/SDFast/ActuatedModel_SDFast.h>
#include <OpenSim/Models/SIMMPipeline/4.0/suPipeline40/suPipeline40.h>
#include <OpenSim/Models/SIMMPipeline/4.0/Pipeline40Workflow/suPipeline40Workflow.h>
#include "suS26.h"

using namespace OpenSim;


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include <string>

SWIGINTERN bool OpenSim_Array_Sl_bool_Sg__getitem(OpenSim::Array<bool > *self,int index){
      return self->get(index);
    }
SWIGINTERN void OpenSim_Array_Sl_bool_Sg__setitem(OpenSim::Array<bool > *self,int index,bool val){
      self->set(index,val);
    }
SWIGINTERN double OpenSim_Array_Sl_double_Sg__getitem(OpenSim::Array<double > *self,int index){
      return self->get(index);
    }
SWIGINTERN void OpenSim_Array_Sl_double_Sg__setitem(OpenSim::Array<double > *self,int index,double val){
      self->set(index,val);
    }
SWIGINTERN int OpenSim_Array_Sl_int_Sg__getitem(OpenSim::Array<int > *self,int index){
      return self->get(index);
    }
SWIGINTERN void OpenSim_Array_Sl_int_Sg__setitem(OpenSim::Array<int > *self,int index,int val){
      self->set(index,val);
    }
SWIGINTERN std::string OpenSim_Array_Sl_std_string_Sg__getitem(OpenSim::Array<std::string > *self,int index){
      return self->get(index);
    }
SWIGINTERN void OpenSim_Array_Sl_std_string_Sg__setitem(OpenSim::Array<std::string > *self,int index,std::string val){
      self->set(index,val);
    }

#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Array_1CAPMIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)Array_CAPMIN;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Property::PropertyType result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Property::PropertyType)OpenSim::Property::None;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  result = (OpenSim::Property *)((OpenSim::Property const *)arg1)->copy();
  *(OpenSim::Property **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1Property(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setNull(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  (arg1)->setNull();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Property::PropertyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (OpenSim::Property::PropertyType)jarg2; 
  (arg1)->setType(arg2);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Property::PropertyType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  result = (OpenSim::Property::PropertyType)((OpenSim::Property const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1getTypeAsString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  result = (char *)((OpenSim::Property const *)arg1)->getTypeAsString();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setName((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Property const *)arg1)->getName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setComment((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1getComment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Property const *)arg1)->getComment();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    std::string const &_result_ref = (arg1)->toString();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setValue(arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1getValueBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    bool &_result_ref = (arg1)->getValueBool();
    result = (bool *) &_result_ref;
  }
  *(bool **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setValue(arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1getValueInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    int &_result_ref = (arg1)->getValueInt();
    result = (int *) &_result_ref;
  }
  *(int **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setValue(arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1getValueDbl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    double &_result_ref = (arg1)->getValueDbl();
    result = (double *) &_result_ref;
  }
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setValue((std::string const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1getValueStr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    std::string &_result_ref = (arg1)->getValueStr();
    result = (std::string *) &_result_ref;
  }
  *(std::string **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setValue_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::Object const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1getValueObj(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::Object &_result_ref = (arg1)->getValueObj();
    result = (OpenSim::Object *) &_result_ref;
  }
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setValue_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jbooleanArray jarg3) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  bool *arg3 ;
  jboolean *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInBool(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setValue(arg2,(bool const (*))arg3);
  SWIG_JavaArrayArgoutBool(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setValue_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<bool > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Array<bool > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<bool > const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::Array<bool > const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1getValueBoolArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::Array<bool > &_result_ref = (arg1)->getValueBoolArray();
    result = (OpenSim::Array<bool > *) &_result_ref;
  }
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setValue_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  int *arg3 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setValue(arg2,(int const (*))arg3);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setValue_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Array<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::Array<int > const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1getValueIntArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::Array<int > &_result_ref = (arg1)->getValueIntArray();
    result = (OpenSim::Array<int > *) &_result_ref;
  }
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setValue_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setValue(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setValue_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::Array<double > const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1getValueDblArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = (arg1)->getValueDblArray();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setValue_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  std::string *arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::string **)&jarg3; 
  (arg1)->setValue(arg2,(std::string const (*))arg3);
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setValue_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::Array<std::string > const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1getValueStrArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::Array<std::string > &_result_ref = (arg1)->getValueStrArray();
    result = (OpenSim::Array<std::string > *) &_result_ref;
  }
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setValue_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  int arg2 ;
  OpenSim::Object **arg3 = (OpenSim::Object **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Object ***)&jarg3; 
  (arg1)->setValue(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setValue_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Object > const & reference is null");
    return ;
  } 
  (arg1)->setValue((OpenSim::ArrayPtrs<OpenSim::Object > const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1getValueObjArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  {
    OpenSim::ArrayPtrs<OpenSim::Object > &_result_ref = (arg1)->getValueObjArray();
    result = (OpenSim::ArrayPtrs<OpenSim::Object > *) &_result_ref;
  }
  *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1setUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseDefault(arg2);
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Property_1getUseDefault(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Property *arg1 = (OpenSim::Property *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Property **)&jarg1; 
  result = (bool)((OpenSim::Property const *)arg1)->getUseDefault();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_PropertySet_1_1array_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *arg2 = (OpenSim::ArrayPtrs<OpenSim::Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jarg2; 
  if (arg1) (arg1)->_array = *arg2;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_PropertySet_1_1array_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Property > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  result = (OpenSim::ArrayPtrs<OpenSim::Property > *)& ((arg1)->_array);
  *(OpenSim::ArrayPtrs<OpenSim::Property > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1PropertySet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::PropertySet *)new OpenSim::PropertySet();
  *(OpenSim::PropertySet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1PropertySet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *arg1 = 0 ;
  OpenSim::PropertySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::PropertySet const & reference is null");
    return 0;
  } 
  result = (OpenSim::PropertySet *)new OpenSim::PropertySet((OpenSim::PropertySet const &)*arg1);
  *(OpenSim::PropertySet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1PropertySet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_PropertySet_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  result = (bool)((OpenSim::PropertySet const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_PropertySet_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  result = (int)((OpenSim::PropertySet const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_PropertySet_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  int arg2 ;
  OpenSim::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Property *)(arg1)->get(arg2);
  *(OpenSim::Property **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_PropertySet_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Property *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Property **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_PropertySet_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  OpenSim::Property *arg2 = (OpenSim::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  arg2 = *(OpenSim::Property **)&jarg2; 
  (arg1)->append(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_PropertySet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->remove((std::string const &)*arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_PropertySet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::PropertySet *arg1 = (OpenSim::PropertySet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::PropertySet **)&jarg1; 
  (arg1)->clear();
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ObjectDEFAULT_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)ObjectDEFAULT_NAME;
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1OpenSimObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1OpenSimObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Object *)new OpenSim::Object();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1OpenSimObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Object *)new OpenSim::Object((std::string const &)*arg1);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1OpenSimObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  XMLDocument *arg1 = (XMLDocument *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XMLDocument **)&jarg1; 
  result = (OpenSim::Object *)new OpenSim::Object((XMLDocument const *)arg1);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1OpenSimObject_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Object *)new OpenSim::Object(arg1);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1OpenSimObject_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return 0;
  } 
  result = (OpenSim::Object *)new OpenSim::Object((OpenSim::Object const &)*arg1);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Object const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Object const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Object const *)arg1)->getType();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setName((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Object const *)arg1)->getName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setDescription((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Object const *)arg1)->getDescription();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  {
    std::string const &_result_ref = ((OpenSim::Object const *)arg1)->toString();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1getPropertySet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::PropertySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  {
    OpenSim::PropertySet &_result_ref = (arg1)->getPropertySet();
    result = (OpenSim::PropertySet *) &_result_ref;
  }
  *(OpenSim::PropertySet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1RegisterType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Object *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  OpenSim::Object::RegisterType((OpenSim::Object const &)*arg1);
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1isValidDefaultType(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  result = (bool)((OpenSim::Object const *)arg1)->isValidDefaultType((OpenSim::Object const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1updateFromXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  (arg1)->updateFromXMLNode();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1updateDefaultObjectsFromXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  (arg1)->updateDefaultObjectsFromXMLNode();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1updateXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  (arg1)->updateXMLNode(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1generateXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  (arg1)->generateXMLNode(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1setInlined_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jstring jarg3) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setInlined(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1setInlined_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInlined(arg2);
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1getInlined(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (bool)((OpenSim::Object const *)arg1)->getInlined();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1getOffLineFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (char *)((OpenSim::Object const *)arg1)->getOffLineFileName();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1clearXMLNodes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  (arg1)->clearXMLNodes();
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1getDocument(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  XMLDocument *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (XMLDocument *)((OpenSim::Object const *)arg1)->getDocument();
  *(XMLDocument **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1getXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  DOMElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (DOMElement *)((OpenSim::Object const *)arg1)->getXMLNode();
  *(DOMElement **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1print(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->print((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1addObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object & reference is null");
    return ;
  } 
  (arg1)->addObserver(*arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1deleteObserver(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object & reference is null");
    return ;
  } 
  (arg1)->deleteObserver(*arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1addObserverEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  Event *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object & reference is null");
    return ;
  } 
  arg3 = *(Event **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Event & reference is null");
    return ;
  } 
  (arg1)->addObserverEvent(*arg2,*arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1notifyObservers(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  Event *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(Event **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Event & reference is null");
    return ;
  } 
  (arg1)->notifyObservers(*arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1deleteObservers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  (arg1)->deleteObservers();
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1countObservers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  result = (int)((OpenSim::Object const *)arg1)->countObservers();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::Object *arg1 = (OpenSim::Object *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  Event *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Object **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return ;
  } 
  arg3 = *(Event **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Event & reference is null");
    return ;
  } 
  (arg1)->update((OpenSim::Object const &)*arg2,*arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1setSerializeAllDefaults(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  OpenSim::Object::setSerializeAllDefaults(arg1);
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_OpenSimObject_1getSerializeAllDefaults(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)OpenSim::Object::getSerializeAllDefaults();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1propTranslucency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDbl arg2 ;
  PropertyDbl *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  argp2 = *(PropertyDbl **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDbl");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_propTranslucency = arg2;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1propTranslucency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDbl result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result =  ((arg1)->_propTranslucency);
  *(PropertyDbl **)&jresult = new PropertyDbl((PropertyDbl &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1propAmbientColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray arg2 ;
  PropertyDblArray *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  argp2 = *(PropertyDblArray **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDblArray");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_propAmbientColor = arg2;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1propAmbientColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result =  ((arg1)->_propAmbientColor);
  *(PropertyDblArray **)&jresult = new PropertyDblArray((PropertyDblArray &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1propDiffuseColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray arg2 ;
  PropertyDblArray *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  argp2 = *(PropertyDblArray **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDblArray");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_propDiffuseColor = arg2;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1propDiffuseColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result =  ((arg1)->_propDiffuseColor);
  *(PropertyDblArray **)&jresult = new PropertyDblArray((PropertyDblArray &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1propSpecularColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray arg2 ;
  PropertyDblArray *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  argp2 = *(PropertyDblArray **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null PropertyDblArray");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_propSpecularColor = arg2;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1propSpecularColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  PropertyDblArray result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result =  ((arg1)->_propSpecularColor);
  *(PropertyDblArray **)&jresult = new PropertyDblArray((PropertyDblArray &)result); 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1translucency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_translucency = *arg2;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1translucency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  {
    double &_result_ref = (double &) ((arg1)->_translucency);
    result = (double *) &_result_ref;
  }
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1ambientColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_ambientColor = *arg2;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1ambientColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = (OpenSim::Array<double > &) ((arg1)->_ambientColor);
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1diffuseColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_diffuseColor = *arg2;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1diffuseColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = (OpenSim::Array<double > &) ((arg1)->_diffuseColor);
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1specularColor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  if (arg1) (arg1)->_specularColor = *arg2;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1specularColor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = (OpenSim::Array<double > &) ((arg1)->_specularColor);
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1defaultMaterial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  OpenSim::Material::_defaultMaterial = arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1_1defaultMaterial_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Material *)OpenSim::Material::_defaultMaterial;
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Material_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Material *)new OpenSim::Material();
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Material_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Material *)new OpenSim::Material((std::string const &)*arg1);
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Material_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Material *)new OpenSim::Material(arg1);
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Material_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material const & reference is null");
    return 0;
  } 
  result = (OpenSim::Material *)new OpenSim::Material((OpenSim::Material const &)*arg1);
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1Material(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Material const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Material const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1setTranslucency(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTranslucency(arg2);
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1getTranslucency(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (double)((OpenSim::Material const *)arg1)->getTranslucency();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1setAmbientColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setAmbientColor((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1getAmbientColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (double *)((OpenSim::Material const *)arg1)->getAmbientColor();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1setDiffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setDiffuseColor((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1getDiffuseColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (double *)((OpenSim::Material const *)arg1)->getDiffuseColor();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1setSpecularColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setSpecularColor((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1getSpecularColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (double *)((OpenSim::Material const *)arg1)->getSpecularColor();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1GetDefaultMaterialName(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    std::string const &_result_ref = OpenSim::Material::GetDefaultMaterialName();
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1GetDefaultMaterial(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    OpenSim::Material const &_result_ref = OpenSim::Material::GetDefaultMaterial();
    result = (OpenSim::Material *) &_result_ref;
  }
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Material_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Material *arg1 = (OpenSim::Material *) 0 ;
  DOMElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Material **)&jarg1; 
  result = (DOMElement *)((OpenSim::Material const *)arg1)->getNode();
  *(DOMElement **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::None;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1WireFrame_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::WireFrame;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1SolidFill_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::SolidFill;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1FlatShaded_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::FlatShaded;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1GouraudShaded_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::GouraudShaded;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1PhongShaded_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::PhongShaded;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1BoundingBox_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties::DisplayPreference)OpenSim::VisibleProperties::BoundingBox;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1VisibleProperties_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleProperties *)new OpenSim::VisibleProperties();
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1VisibleProperties_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::VisibleProperties *)new OpenSim::VisibleProperties((std::string const &)*arg1);
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1VisibleProperties_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::XMLDocument *arg1 = (OpenSim::XMLDocument *) 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::XMLDocument **)&jarg1; 
  result = (OpenSim::VisibleProperties *)new OpenSim::VisibleProperties((OpenSim::XMLDocument const *)arg1);
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1VisibleProperties_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::VisibleProperties *)new OpenSim::VisibleProperties(arg1);
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1VisibleProperties_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::VisibleProperties const & reference is null");
    return 0;
  } 
  result = (OpenSim::VisibleProperties *)new OpenSim::VisibleProperties((OpenSim::VisibleProperties const &)*arg1);
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1VisibleProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::VisibleProperties const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::VisibleProperties const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1setDisplayPreference(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  OpenSim::VisibleProperties::DisplayPreference arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  arg2 = (OpenSim::VisibleProperties::DisplayPreference)jarg2; 
  (arg1)->setDisplayPreference(arg2);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1getDisplayPreference(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  OpenSim::VisibleProperties::DisplayPreference result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  result = (OpenSim::VisibleProperties::DisplayPreference)((OpenSim::VisibleProperties const *)arg1)->getDisplayPreference();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1setShowNormals(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setShowNormals(arg2);
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1getShowNormals(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  result = (bool)((OpenSim::VisibleProperties const *)arg1)->getShowNormals();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1setShowAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setShowAxes(arg2);
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1getShowAxes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  result = (bool)((OpenSim::VisibleProperties const *)arg1)->getShowAxes();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1setMaterialName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setMaterialName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleProperties_1getMaterialName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::VisibleProperties *arg1 = (OpenSim::VisibleProperties *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleProperties **)&jarg1; 
  result = (char *)((OpenSim::VisibleProperties const *)arg1)->getMaterialName();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1X_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::AxisName result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::AxisName)OpenSim::Transform::X;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1Y_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::AxisName result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::AxisName)OpenSim::Transform::Y;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1Z_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::AxisName result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::AxisName)OpenSim::Transform::Z;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1W_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::AxisName result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::AxisName)OpenSim::Transform::W;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1NoAxis_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::AxisName result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::AxisName)OpenSim::Transform::NoAxis;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1XYZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::XYZ;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1XZY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::XZY;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1YXZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::YXZ;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1YZX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::YZX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1ZXY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::ZXY;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1ZYX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenSim::Transform::RotationOrder result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform::RotationOrder)OpenSim::Transform::ZYX;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Transform_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Transform *)new OpenSim::Transform();
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Transform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Transform *arg1 = 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Transform const & reference is null");
    return 0;
  } 
  result = (OpenSim::Transform *)new OpenSim::Transform((OpenSim::Transform const &)*arg1);
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Transform_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2, jdoubleArray jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  OpenSim::Transform::AnglePreference arg2 ;
  double *arg3 ;
  OpenSim::Transform *result = 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (OpenSim::Transform::AnglePreference)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return 0;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return 0; 
  result = (OpenSim::Transform *)new OpenSim::Transform(arg1,arg2,(double const (*))arg3);
  *(OpenSim::Transform **)&jresult = result; 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1Transform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Transform const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1printMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  (arg1)->printMatrix();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Transform const *)arg1)->getPosition(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPosition((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1getOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Transform const *)arg1)->getOrientation(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1setOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setOrientation((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1setIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  (arg1)->setIdentity();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1rotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jint jarg3, jint jarg4) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  OpenSim::Transform::RotationOrder arg4 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  arg4 = (OpenSim::Transform::RotationOrder)jarg4; 
  (arg1)->rotate((double const (*))arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1rotateX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  (arg1)->rotateX(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1rotateY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  (arg1)->rotateY(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1rotateZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  (arg1)->rotateZ(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1rotateAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jdoubleArray jarg4) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  OpenSim::Transform::AnglePreference arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (OpenSim::Transform::AnglePreference)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->rotateAxis(arg2,arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1translateX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->translateX(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1translateY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->translateY(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1translateZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->translateZ(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->translate((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1transformPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Transform const *)arg1)->transformPoint(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1transformPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > & reference is null");
    return ;
  } 
  ((OpenSim::Transform const *)arg1)->transformPoint(*arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1transformVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Transform const *)arg1)->transformVector(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1getMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  result = (double *)(arg1)->getMatrix();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Transform_1setupSerializedMembers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Transform *arg1 = (OpenSim::Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Transform **)&jarg1; 
  (arg1)->setupSerializedMembers();
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1VisibleObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::VisibleObject *)new OpenSim::VisibleObject();
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1VisibleObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::VisibleObject *)new OpenSim::VisibleObject((std::string const &)*arg1);
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1VisibleObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::VisibleObject *)new OpenSim::VisibleObject(arg1);
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1VisibleObject_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::VisibleObject const & reference is null");
    return 0;
  } 
  result = (OpenSim::VisibleObject *)new OpenSim::VisibleObject((OpenSim::VisibleObject const &)*arg1);
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1VisibleObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::VisibleObject const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::VisibleObject const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1setNumGeometryFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNumGeometryFiles(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1setGeometryFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->setGeometryFileName(arg2,(std::string const &)*arg3);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1getNumGeometryFiles(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  result = (int)((OpenSim::VisibleObject const *)arg1)->getNumGeometryFiles();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1getGeometryFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((OpenSim::VisibleObject const *)arg1)->getGeometryFileName(arg2);
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1setVisibleProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::VisibleProperties *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(OpenSim::VisibleProperties **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::VisibleProperties const & reference is null");
    return ;
  } 
  (arg1)->setVisibleProperties((OpenSim::VisibleProperties const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1getVisibleProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::VisibleProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  {
    OpenSim::VisibleProperties &_result_ref = (arg1)->getVisibleProperties();
    result = (OpenSim::VisibleProperties *) &_result_ref;
  }
  *(OpenSim::VisibleProperties **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1setTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Transform *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = *(OpenSim::Transform **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Transform const & reference is null");
    return ;
  } 
  (arg1)->setTransform((OpenSim::Transform const &)*arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1getTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  OpenSim::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  {
    OpenSim::Transform &_result_ref = (arg1)->getTransform();
    result = (OpenSim::Transform *) &_result_ref;
  }
  *(OpenSim::Transform **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1setScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setScaleFactors((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1getScaleFactors(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::VisibleObject const *)arg1)->getScaleFactors(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1rotateRadians_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->rotateRadians((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1rotateRadians_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jint jarg3) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  OpenSim::Transform::RotationOrder arg3 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (OpenSim::Transform::RotationOrder)jarg3; 
  (arg1)->rotateRadians((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1rotateRadiansX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateRadiansX(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1rotateRadiansY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateRadiansY(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1rotateRadiansZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateRadiansZ(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1rotateRadiansAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->rotateRadiansAxis(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1rotateDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->rotateDegrees((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1rotateDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jint jarg3) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  OpenSim::Transform::RotationOrder arg3 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (OpenSim::Transform::RotationOrder)jarg3; 
  (arg1)->rotateDegrees((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1rotateDegreesX(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateDegreesX(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1rotateDegreesY(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateDegreesY(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1rotateDegreesZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateDegreesZ(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1rotateDegreesAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  arg2 = (double)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->rotateDegreesAxis(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->translate((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_VisibleObject_1setupProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::VisibleObject *arg1 = (OpenSim::VisibleObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::VisibleObject **)&jarg1; 
  (arg1)->setupProperties();
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Body_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  double *arg2 = (double *) 0 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = *(double **)&jarg2; 
  result = (OpenSim::Body *)new OpenSim::Body(arg1,arg2);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Body_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (OpenSim::Body *)new OpenSim::Body(arg1);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Body_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Body *)new OpenSim::Body();
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Body_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Body *arg1 = 0 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Body const & reference is null");
    return 0;
  } 
  result = (OpenSim::Body *)new OpenSim::Body((OpenSim::Body const &)*arg1);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Body_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Body *)new OpenSim::Body((std::string const &)*arg1);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Body_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Body *)new OpenSim::Body(arg1);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1Body(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Body_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Body const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Body_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Body const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Body_1setMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMass(arg2);
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Body_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  result = (double)(arg1)->getMass();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Body_1setInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->setInertia(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Body_1setInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setInertia(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Body_1setInertia_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->setInertia(arg2,arg3,arg4,arg5,arg6,arg7);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Body_1getInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->getInertia(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Body_1getInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double (*arg2)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  (arg1)->getInertia((double (*)[3])arg2);
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Body_1setCenterOfMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setCenterOfMass((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Body_1getCenterOfMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Body const *)arg1)->getCenterOfMass(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Body_1scaleBy(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->scaleBy((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Body_1setNull(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  (arg1)->setNull();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Body_1setupProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Body *arg1 = (OpenSim::Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Body **)&jarg1; 
  (arg1)->setupProperties();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1SetBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1SetBodies_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Body > *)new OpenSim::Set<OpenSim::Body >();
  *(OpenSim::Set<OpenSim::Body > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1SetBodies_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Body > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Body > *)new OpenSim::Set<OpenSim::Body >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Body > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1SetBodies_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::Body > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::Body > *)new OpenSim::Set<OpenSim::Body >(arg1);
  *(OpenSim::Set<OpenSim::Body > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1SetBodies_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Body > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Body > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Body > *)new OpenSim::Set<OpenSim::Body >((OpenSim::Set<OpenSim::Body > const &)*arg1);
  *(OpenSim::Set<OpenSim::Body > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Body > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Body > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = (OpenSim::Body *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->getIndex((OpenSim::Body const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = (OpenSim::Body *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->getIndex((OpenSim::Body const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = (OpenSim::Body *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Body > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Body > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Body > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  OpenSim::Body *arg3 = (OpenSim::Body *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Body **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = (OpenSim::Body *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Body const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  OpenSim::Body *arg3 = (OpenSim::Body *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Body **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  int arg2 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Body *)((OpenSim::Set<OpenSim::Body > const *)arg1)->get(arg2);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Body *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  result = (OpenSim::Body *)((OpenSim::Set<OpenSim::Body > const *)arg1)->getLast();
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Body const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->searchBinary((OpenSim::Body const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Body const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->searchBinary((OpenSim::Body const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Body const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->searchBinary((OpenSim::Body const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetBodies_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Body > *arg1 = (OpenSim::Set<OpenSim::Body > *) 0 ;
  OpenSim::Body *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Body > **)&jarg1; 
  arg2 = *(OpenSim::Body **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Body const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Body > const *)arg1)->searchBinary((OpenSim::Body const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1SetMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1SetMaterials_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Material > *)new OpenSim::Set<OpenSim::Material >();
  *(OpenSim::Set<OpenSim::Material > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1SetMaterials_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Material > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Material > *)new OpenSim::Set<OpenSim::Material >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Material > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1SetMaterials_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::Material > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::Material > *)new OpenSim::Set<OpenSim::Material >(arg1);
  *(OpenSim::Set<OpenSim::Material > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1SetMaterials_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Material > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Material > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Material > *)new OpenSim::Set<OpenSim::Material >((OpenSim::Set<OpenSim::Material > const &)*arg1);
  *(OpenSim::Set<OpenSim::Material > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Material > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Material > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = (OpenSim::Material *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getIndex((OpenSim::Material const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = (OpenSim::Material *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getIndex((OpenSim::Material const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = (OpenSim::Material *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Material > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Material > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Material > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  OpenSim::Material *arg3 = (OpenSim::Material *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Material **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = (OpenSim::Material *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Material const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  OpenSim::Material *arg3 = (OpenSim::Material *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Material **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  int arg2 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Material *)((OpenSim::Set<OpenSim::Material > const *)arg1)->get(arg2);
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Material *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  result = (OpenSim::Material *)((OpenSim::Set<OpenSim::Material > const *)arg1)->getLast();
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->searchBinary((OpenSim::Material const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->searchBinary((OpenSim::Material const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->searchBinary((OpenSim::Material const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetMaterials_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Material > *arg1 = (OpenSim::Set<OpenSim::Material > *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Material > **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Material > const *)arg1)->searchBinary((OpenSim::Material const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1MaterialSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::MaterialSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::MaterialSet *)new OpenSim::MaterialSet();
  *(OpenSim::MaterialSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1MaterialSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::MaterialSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::MaterialSet *)new OpenSim::MaterialSet((std::string const &)*arg1);
  *(OpenSim::MaterialSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1MaterialSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::MaterialSet *arg1 = 0 ;
  OpenSim::MaterialSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::MaterialSet const & reference is null");
    return 0;
  } 
  result = (OpenSim::MaterialSet *)new OpenSim::MaterialSet((OpenSim::MaterialSet const &)*arg1);
  *(OpenSim::MaterialSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1MaterialSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_MaterialSet_1addMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addMaterial(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_MaterialSet_1updateMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->updateMaterial(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_MaterialSet_1removeMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  OpenSim::Material *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  arg2 = *(OpenSim::Material **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Material & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->removeMaterial(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_MaterialSet_1materialExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((OpenSim::MaterialSet const *)arg1)->materialExists((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_MaterialSet_1getNumberOfMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  result = (int)((OpenSim::MaterialSet const *)arg1)->getNumberOfMaterials();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_MaterialSet_1getMaterialByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  int arg2 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    OpenSim::Material const &_result_ref = ((OpenSim::MaterialSet const *)arg1)->getMaterialByIndex(arg2);
    result = (OpenSim::Material *) &_result_ref;
  }
  *(OpenSim::Material **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_MaterialSet_1getMaterialByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::MaterialSet *arg1 = (OpenSim::MaterialSet *) 0 ;
  char *arg2 = (char *) 0 ;
  OpenSim::Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::MaterialSet **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    OpenSim::Material const &_result_ref = ((OpenSim::MaterialSet const *)arg1)->getMaterialByName((char const *)arg2);
    result = (OpenSim::Material *) &_result_ref;
  }
  *(OpenSim::Material **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1LARGE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)OpenSim::Actuator::LARGE;
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1Actuator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Actuator const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  DOMElement *arg2 = (DOMElement *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = *(DOMElement **)&jarg2; 
  result = (OpenSim::Object *)((OpenSim::Actuator const *)arg1)->copy(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  Model *arg2 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = *(Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (Model *)((OpenSim::Actuator const *)arg1)->getModel();
  *(Model **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (int)((OpenSim::Actuator const *)arg1)->getNX();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Actuator const *)arg1)->getControlName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Actuator const *)arg1)->getControlIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControl(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setControl((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setControls((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Actuator const *)arg1)->getControl(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Actuator const *)arg1)->getControl((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Actuator const *)arg1)->getControls(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (int)((OpenSim::Actuator const *)arg1)->getNY();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    std::string const &_result_ref = ((OpenSim::Actuator const *)arg1)->getStateName(arg2);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Actuator const *)arg1)->getStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1setState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setState(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1setState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setState((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Actuator const *)arg1)->getState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Actuator const *)arg1)->getState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Actuator const *)arg1)->getStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getNYP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (int)((OpenSim::Actuator const *)arg1)->getNYP();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    std::string const &_result_ref = ((OpenSim::Actuator const *)arg1)->getPseudoStateName(arg2);
    result = (std::string *) &_result_ref;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Actuator const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1setPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setPseudoState(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1setPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setPseudoState((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Actuator const *)arg1)->getPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Actuator const *)arg1)->getPseudoState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Actuator const *)arg1)->getPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1setArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setArea(arg2);
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getArea();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getAppliesForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (bool)((OpenSim::Actuator const *)arg1)->getAppliesForce();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1setForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setForce(arg2);
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getForce();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getStress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getStress();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getPower(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getPower();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1setMaxForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMaxForce(arg2);
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getMaxForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getMaxForce();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1setMinForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setMinForce(arg2);
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getMinForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getMinForce();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1setOptimalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setOptimalForce(arg2);
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1getOptimalForce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (double)((OpenSim::Actuator const *)arg1)->getOptimalForce();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdouble jarg3) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  double arg3 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (double)jarg3; 
  (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  (arg1)->computeActuation();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1computeStateDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->computeStateDerivatives(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1updatePseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  (arg1)->updatePseudoStates();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  (arg1)->apply();
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Actuator_1check(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Actuator *arg1 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Actuator **)&jarg1; 
  result = (bool)((OpenSim::Actuator const *)arg1)->check();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1SetActuators(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1SetActuators_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Set<OpenSim::Actuator > *)new OpenSim::Set<OpenSim::Actuator >();
  *(OpenSim::Set<OpenSim::Actuator > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1SetActuators_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Set<OpenSim::Actuator > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Set<OpenSim::Actuator > *)new OpenSim::Set<OpenSim::Actuator >((std::string const &)*arg1);
  *(OpenSim::Set<OpenSim::Actuator > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1SetActuators_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  DOMElement *arg1 = (DOMElement *) 0 ;
  OpenSim::Set<OpenSim::Actuator > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DOMElement **)&jarg1; 
  result = (OpenSim::Set<OpenSim::Actuator > *)new OpenSim::Set<OpenSim::Actuator >(arg1);
  *(OpenSim::Set<OpenSim::Actuator > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1SetActuators_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = 0 ;
  OpenSim::Set<OpenSim::Actuator > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Set<OpenSim::Actuator > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Set<OpenSim::Actuator > *)new OpenSim::Set<OpenSim::Actuator >((OpenSim::Set<OpenSim::Actuator > const &)*arg1);
  *(OpenSim::Set<OpenSim::Actuator > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  result = (bool)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = (OpenSim::Actuator *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getIndex((OpenSim::Actuator const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = (OpenSim::Actuator *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getIndex((OpenSim::Actuator const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Actuator > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Actuator > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Actuator > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  OpenSim::Actuator *arg3 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Actuator **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Actuator const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  OpenSim::Actuator *arg3 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Actuator **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  int arg2 ;
  OpenSim::Actuator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Actuator *)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->get(arg2);
  *(OpenSim::Actuator **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Actuator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Actuator *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Actuator **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  result = (OpenSim::Actuator *)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->getLast();
  *(OpenSim::Actuator **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Actuator const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->searchBinary((OpenSim::Actuator const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Actuator const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->searchBinary((OpenSim::Actuator const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Actuator const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->searchBinary((OpenSim::Actuator const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SetActuators_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Set<OpenSim::Actuator > *arg1 = (OpenSim::Set<OpenSim::Actuator > *) 0 ;
  OpenSim::Actuator *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Actuator const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Set<OpenSim::Actuator > const *)arg1)->searchBinary((OpenSim::Actuator const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ActuatorSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ActuatorSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ActuatorSet *)new OpenSim::ActuatorSet();
  *(OpenSim::ActuatorSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ActuatorSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenSim::ActuatorSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (OpenSim::ActuatorSet *)new OpenSim::ActuatorSet((char const *)arg1);
  *(OpenSim::ActuatorSet **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1ActuatorSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1setModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  Model *arg2 = (Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = *(Model **)&jarg2; 
  (arg1)->setModel(arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  Model *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (Model *)((OpenSim::ActuatorSet const *)arg1)->getModel();
  *(Model **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::Actuator *arg2 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = *(OpenSim::Actuator **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  OpenSim::Actuator *arg3 = (OpenSim::Actuator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Actuator **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getNX();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1mapActuatorToControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapActuatorToControl(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1mapControlToActuator(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapControlToActuator(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getControlIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::ActuatorSet const *)arg1)->getControlName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControl(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setControl((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setControls((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getControl(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getControl((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ActuatorSet const *)arg1)->getControls(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getNY();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1mapActuatorToState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapActuatorToState(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1mapStateToActuator(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapStateToActuator(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::ActuatorSet const *)arg1)->getStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1setState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setState(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1setState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setState((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ActuatorSet const *)arg1)->getStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getNYP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getNYP();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1mapActuatorToPseudoState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapActuatorToPseudoState(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1mapPseudoStateToActuator(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->mapPseudoStateToActuator(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ActuatorSet const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::ActuatorSet const *)arg1)->getPseudoStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1setPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setPseudoState(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1setPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setPseudoState((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::ActuatorSet const *)arg1)->getPseudoState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ActuatorSet const *)arg1)->getPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdouble jarg3) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  double arg3 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (double)jarg3; 
  (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  (arg1)->computeActuation();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1computeStateDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->computeStateDerivatives(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1updatePseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  (arg1)->updatePseudoStates();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  (arg1)->apply();
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatorSet_1check(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  result = (bool)((OpenSim::ActuatorSet const *)arg1)->check();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ContactForceSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ContactForceSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ContactForceSet *)new OpenSim::ContactForceSet();
  *(OpenSim::ContactForceSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ContactForceSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenSim::ContactForceSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (OpenSim::ContactForceSet *)new OpenSim::ContactForceSet((char const *)arg1);
  *(OpenSim::ContactForceSet **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1ContactForceSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ContactForceSet_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  ContactForce *arg2 = (ContactForce *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = *(ContactForce **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ContactForceSet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  int arg2 ;
  ContactForce *arg3 = (ContactForce *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(ContactForce **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ContactForceSet_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  (arg1)->computeContact();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ContactForceSet_1updatePseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  (arg1)->updatePseudoStates();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ContactForceSet_1apply(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  (arg1)->apply();
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ContactForceSet_1check(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::ContactForceSet *arg1 = (OpenSim::ContactForceSet *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ContactForceSet **)&jarg1; 
  result = (bool)((OpenSim::ContactForceSet const *)arg1)->check();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1StateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (OpenSim::StateVector *)new OpenSim::StateVector(arg1,arg2,(double const *)arg3);
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1StateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  int arg2 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::StateVector *)new OpenSim::StateVector(arg1,arg2);
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1StateVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (OpenSim::StateVector *)new OpenSim::StateVector(arg1);
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1StateVector_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::StateVector *)new OpenSim::StateVector();
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1StateVector_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::StateVector *arg1 = 0 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::StateVector const & reference is null");
    return 0;
  } 
  result = (OpenSim::StateVector *)new OpenSim::StateVector((OpenSim::StateVector const &)*arg1);
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1StateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jdoubleArray jarg4) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  int arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->setStates(arg2,arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  result = (int)((OpenSim::StateVector const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTime(arg2);
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  result = (double)((OpenSim::StateVector const *)arg1)->getTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1getDataValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getDataValue(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1setDataValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  (arg1)->setDataValue(arg2,*arg3);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  {
    OpenSim::Array<double > &_result_ref = (arg1)->getData();
    result = (OpenSim::Array<double > *) &_result_ref;
  }
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1shiftTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->shiftTime(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1scaleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->scaleTime(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->add(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->add(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->add(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->add(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1subtract_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->subtract(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1subtract_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->subtract(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1subtract_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->subtract(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1multiply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->multiply(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1multiply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->multiply(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1multiply_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->multiply(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1divide_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->divide(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1divide_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->divide(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1divide_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->divide(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  (arg1)->print();
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_StateVector_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::StateVector *arg1 = (OpenSim::StateVector *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::StateVector **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  result = (int)(arg1)->print(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1DEFAULT_1CAPACITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)Storage_DEFAULT_CAPACITY;
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1LARGE_1NEGATIVE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)OpenSim::Storage::LARGE_NEGATIVE;
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1LARGE_1POSITIVE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)OpenSim::Storage::LARGE_POSITIVE;
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1DEFAULT_1HEADER_1TOKEN_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      OpenSim::Storage::DEFAULT_HEADER_TOKEN = (char const *) (new char[strlen(arg1)+1]);
      strcpy((char *) OpenSim::Storage::DEFAULT_HEADER_TOKEN,arg1);
    } else {
      OpenSim::Storage::DEFAULT_HEADER_TOKEN = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1DEFAULT_1HEADER_1TOKEN_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)OpenSim::Storage::DEFAULT_HEADER_TOKEN;
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1DEFAULT_1HEADER_1SEPARATOR_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      OpenSim::Storage::DEFAULT_HEADER_SEPARATOR = (char const *) (new char[strlen(arg1)+1]);
      strcpy((char *) OpenSim::Storage::DEFAULT_HEADER_SEPARATOR,arg1);
    } else {
      OpenSim::Storage::DEFAULT_HEADER_SEPARATOR = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1DEFAULT_1HEADER_1SEPARATOR_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)OpenSim::Storage::DEFAULT_HEADER_SEPARATOR;
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Storage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (OpenSim::Storage *)new OpenSim::Storage(arg1,(char const *)arg2);
  *(OpenSim::Storage **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Storage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (OpenSim::Storage *)new OpenSim::Storage(arg1);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Storage_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::Storage *)new OpenSim::Storage();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Storage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (OpenSim::Storage *)new OpenSim::Storage((char const *)arg1);
  *(OpenSim::Storage **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Storage_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = 0 ;
  bool arg2 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (OpenSim::Storage *)new OpenSim::Storage((OpenSim::Storage const &)*arg1,arg2);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Storage_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  result = (OpenSim::Storage *)new OpenSim::Storage((OpenSim::Storage const &)*arg1);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Storage_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (OpenSim::Storage *)new OpenSim::Storage((OpenSim::Storage const &)*arg1,arg2,arg3,(char const *)arg4);
  *(OpenSim::Storage **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1Storage_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Storage const & reference is null");
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Storage *)new OpenSim::Storage((OpenSim::Storage const &)*arg1,arg2,arg3);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::Storage const *)arg1)->copy();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1Storage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (int)((OpenSim::Storage const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getSmallestNumberOfStates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (int)(arg1)->getSmallestNumberOfStates();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::StateVector *)((OpenSim::Storage const *)arg1)->getStateVector(arg2);
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getLastStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (OpenSim::StateVector *)((OpenSim::Storage const *)arg1)->getLastStateVector();
  *(OpenSim::StateVector **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getFirstTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (double)(arg1)->getFirstTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getLastTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (double)(arg1)->getLastTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Storage const *)arg1)->getTime(arg2,*arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Storage const *)arg1)->getTime(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getTimeColumn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double **arg2 = 0 ;
  int arg3 ;
  int result;
  double *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  temp2 = *(double **)&jarg2;
  arg2 = &temp2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getTimeColumn(*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getTimeColumn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double **arg2 = 0 ;
  int result;
  double *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  temp2 = *(double **)&jarg2;
  arg2 = &temp2; 
  result = (int)(arg1)->getTimeColumn(*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::Storage const *)arg1)->getData(arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)((OpenSim::Storage const *)arg1)->getData(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double ***)&jarg4; 
  result = (int)((OpenSim::Storage const *)arg1)->getData(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getDataAtTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double ***)&jarg4; 
  result = (int)(arg1)->getDataAtTime(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getDataAtTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)(arg1)->getDataAtTime(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getDataColumn_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double **arg3 = 0 ;
  int result;
  double *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(double **)&jarg3;
  arg3 = &temp3; 
  result = (int)((OpenSim::Storage const *)arg1)->getDataColumn(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1setDataColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  OpenSim::Array<double > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Array<double > **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return ;
  } 
  (arg1)->setDataColumn(arg2,(OpenSim::Array<double > const &)*arg3);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getDataColumn_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  double **arg3 = 0 ;
  int result;
  double *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  temp3 = *(double **)&jarg3;
  arg3 = &temp3; 
  result = (int)((OpenSim::Storage const *)arg1)->getDataColumn(*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1setStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setStepInterval(arg2);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getStepInterval(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (int)((OpenSim::Storage const *)arg1)->getStepInterval();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (int)((OpenSim::Storage const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1setWriteSIMMHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setWriteSIMMHeader(arg2);
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getWriteSIMMHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (bool)((OpenSim::Storage const *)arg1)->getWriteSIMMHeader();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1setHeaderToken(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setHeaderToken((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getHeaderToken(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (char *)((OpenSim::Storage const *)arg1)->getHeaderToken();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getColumnIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Storage const *)arg1)->getColumnIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1setColumnLabels_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setColumnLabels((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1setColumnLabels_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  (arg1)->setColumnLabels();
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getColumnLabels(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (char *)((OpenSim::Storage const *)arg1)->getColumnLabels();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1getColumnLabelsArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  {
    OpenSim::Array<std::string > const &_result_ref = ((OpenSim::Storage const *)arg1)->getColumnLabelsArray();
    result = (OpenSim::Array<std::string > *) &_result_ref;
  }
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1reset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->reset(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1reset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (int)(arg1)->reset();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1reset_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->reset(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::StateVector const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::StateVector const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Array<OpenSim::StateVector > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Array<OpenSim::StateVector > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<OpenSim::StateVector > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<OpenSim::StateVector > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(double **)&jarg4; 
  result = (int)(arg1)->append(arg2,arg3,(double const *)arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1store(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)(arg1)->store(arg2,arg3,arg4,(double const *)arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1shiftTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->shiftTime(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1scaleTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->scaleTime(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->add(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->add(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->add(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->add(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1add_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->add(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1subtract_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->subtract(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1subtract_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->subtract(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1subtract_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->subtract(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1subtract_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->subtract(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1multiply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->multiply(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1multiplyColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->multiplyColumn(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1multiply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->multiply(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1multiply_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->multiply(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1multiply_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->multiply(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1divide_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->divide(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1divide_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->divide(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1divide_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::StateVector *arg2 = (OpenSim::StateVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::StateVector **)&jarg2; 
  (arg1)->divide(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1divide_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  (arg1)->divide(arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1integrate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Storage *)(arg1)->integrate(arg2,arg3);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1integrate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Storage *)(arg1)->integrate(arg2);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1integrate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  result = (OpenSim::Storage *)(arg1)->integrate();
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1integrate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  double arg3 ;
  OpenSim::Storage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (OpenSim::Storage *)(arg1)->integrate(arg2,arg3);
  *(OpenSim::Storage **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1computeArea_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->computeArea(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1computeArea_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)(arg1)->computeArea(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1computeAverage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->computeAverage(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1computeAverage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jint jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)(arg1)->computeAverage(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1pad(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->pad(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1lowpassFIR(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->lowpassFIR(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1findIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->findIndex(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1findIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  int arg2 ;
  double arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (int)(arg1)->findIndex(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1resample(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jint jarg3) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  double arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->resample(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1print_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  (arg1)->print();
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1print_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->print((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3);
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1print_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->print((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1print_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3, jstring jarg4) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (int)(arg1)->print((char const *)arg2,arg3,(char const *)arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4);
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Storage_1print_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  OpenSim::Storage *arg1 = (OpenSim::Storage *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Storage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  result = (int)(arg1)->print((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2);
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1Model(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getModelDescriptionFileName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (char *)((OpenSim::Model const *)arg1)->getModelDescriptionFileName();
  if(result) jresult = jenv->NewStringUTF(result);
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setModelDescriptionFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setModelDescriptionFileName((std::string const &)*arg2);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getNB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNB();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getNJ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNJ();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getNQ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNQ();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getNU(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNU();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNX();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getNA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNA();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getNP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNP();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNY();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getNYP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNYP();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setName((std::string const &)*arg2);
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getBodyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Model const *)arg1)->getBodyName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getCoordinateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Model const *)arg1)->getCoordinateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getSpeedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Model const *)arg1)->getSpeedName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getActuatorName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Model const *)arg1)->getActuatorName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Model const *)arg1)->getControlName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Model const *)arg1)->getStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::Model const *)arg1)->getPseudoStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getBodyIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Model const *)arg1)->getBodyIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getCoordinateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Model const *)arg1)->getCoordinateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getSpeedIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Model const *)arg1)->getSpeedIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getActuatorIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Model const *)arg1)->getActuatorIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Model const *)arg1)->getControlIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Model const *)arg1)->getStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Model const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  OpenSim::Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Body *)((OpenSim::Model const *)arg1)->getBody(arg2);
  *(OpenSim::Body **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1constructBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  (arg1)->constructBodies();
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getBodySet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::BodySet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::BodySet *)(arg1)->getBodySet();
  *(OpenSim::BodySet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getMaterialSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::MaterialSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::MaterialSet *)(arg1)->getMaterialSet();
  *(OpenSim::MaterialSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getVisibleObjectByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::VisibleObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::VisibleObject *)((OpenSim::Model const *)arg1)->getVisibleObjectByName((std::string const &)*arg2);
  *(OpenSim::VisibleObject **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->set(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTime(arg2);
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (double)((OpenSim::Model const *)arg1)->getTime();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setTimeNormConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTimeNormConstant(arg2);
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getTimeNormConstant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (double)((OpenSim::Model const *)arg1)->getTimeNormConstant();
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setControls((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControl(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setControl((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getControls(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getControl(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Model const *)arg1)->getControl((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setInitialStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getInitialStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getInitialState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getInitialState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getInitialState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Model const *)arg1)->getInitialState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Model const *)arg1)->getState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setInitialPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getInitialPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getInitialPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getInitialPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getInitialPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Model const *)arg1)->getInitialPseudoState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getPseudoState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setConfiguration((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setConfiguration((double const (*))arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getCoordinates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getCoordinate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getCoordinate(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getCoordinate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Model const *)arg1)->getCoordinate((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getSpeeds(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getSpeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getSpeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Model const *)arg1)->getSpeed((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getAccelerations(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getAcceleration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getAcceleration(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getAcceleration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::Model const *)arg1)->getAcceleration((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1extractConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->extractConfiguration((double const (*))arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg2; 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1assemble(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jint jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  int *arg4 = (int *) 0 ;
  double arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(int **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  result = (int)(arg1)->assemble(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::Model const *)arg1)->getGravity(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setGravity(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getGroundID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getGroundID();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setBodyToJointBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getBodyToJointBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setInboardToJointBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getInboardToJointBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setPin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->setPin(arg2,arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getPin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->getPin(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getJointInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jintArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  int *arg4 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 50) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->getJointInfo(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutInt(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getMass(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getInertiaBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double (*arg3)[3] ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  result = (int)((OpenSim::Model const *)arg1)->getInertiaBodyLocal(arg2,(double (*)[3])arg3);
  jresult = (jint)result; 
  
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getInertiaBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)((OpenSim::Model const *)arg1)->getInertiaBodyLocal(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getSystemInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 ;
  double (*arg4)[3] ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  ((OpenSim::Model const *)arg1)->getSystemInertia(arg2,arg3,(double (*)[3])arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getSystemInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::Model const *)arg1)->getSystemInertia(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->getPosition(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->getVelocity(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getAcceleration_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->getAcceleration(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::Model const *)arg1)->getDirectionCosines(arg2,(double (*)[3])arg3);
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->getDirectionCosines(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getAngularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getAngularVelocity(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getAngularVelocityBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getAngularVelocityBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getAngularAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getAngularAcceleration(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getAngularAccelerationBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getAngularAccelerationBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForce(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForces(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForces(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyForceBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForceBodyLocal(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyForcesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyForcesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorque(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyTorques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorques(arg2,(int const (*))arg3,(double const (*)[3])arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyTorques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorques(arg2,(int const (*))arg3,(double const *)arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyTorqueBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorqueBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyTorquesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyTorquesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->applyGeneralizedForce(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyGeneralizedForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->applyGeneralizedForces((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyGeneralizedForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 ;
  jint *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyGeneralizedForces(arg2,(int const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getNetAppliedGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getNetAppliedGeneralizedForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1computeGeneralizedForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->computeGeneralizedForces(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1computeReactions(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double (*arg2)[3] ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::Model const *)arg1)->computeReactions((double (*)[3])arg2,(double (*)[3])arg3);
  
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1prescribeMotion(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->prescribeMotion(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1formMassMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->formMassMatrix(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1formEulerTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->formEulerTransform(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1formJacobianTranslation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jlong jarg4, jint jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = (int)jarg5; 
  ((OpenSim::Model const *)arg1)->formJacobianTranslation(arg2,(double const (*))arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1formJacobianTranslation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::Model const *)arg1)->formJacobianTranslation(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1formJacobianOrientation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  ((OpenSim::Model const *)arg1)->formJacobianOrientation(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1formJacobianOrientation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->formJacobianOrientation(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1formJacobianEuler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  ((OpenSim::Model const *)arg1)->formJacobianEuler(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1formJacobianEuler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->formJacobianEuler(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1ComputeEffectiveMassMatrix(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)OpenSim::Model::ComputeEffectiveMassMatrix(arg1,arg2,(double const *)arg3,(double const *)arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1ComputeJacobianInverse(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)OpenSim::Model::ComputeJacobianInverse(arg1,arg2,(double const *)arg3,(double const *)arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1computeAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->computeAccelerations(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1computeAuxiliaryDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->computeAuxiliaryDerivatives(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdouble jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 ;
  double arg3 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (double)jarg3; 
  (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1computePerformance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  void *arg6 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(void **)&jarg6; 
  result = (int)(arg1)->computePerformance(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1computePerformance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (int)(arg1)->computePerformance(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1computeConstraint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(void **)&jarg7; 
  result = (int)(arg1)->computeConstraint(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1computeConstraint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (int)(arg1)->computeConstraint(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jint jarg4, jdoubleArray jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  int arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = (int)jarg4; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::Model const *)arg1)->transform(arg2,(double const (*))arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1transformPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->transformPosition(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertQuaternionsToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->convertQuaternionsToAngles(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertQuaternionsToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::Model const *)arg1)->convertQuaternionsToAngles(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertAnglesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->convertAnglesToQuaternions(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertAnglesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::Model const *)arg1)->convertAnglesToQuaternions(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertRadiansToDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->convertRadiansToDegrees(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertRadiansToDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::Model const *)arg1)->convertRadiansToDegrees(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertDegreesToRadians_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::Model const *)arg1)->convertDegreesToRadians(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertDegreesToRadians_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::Model const *)arg1)->convertDegreesToRadians(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertAnglesToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double (*arg5)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  ((OpenSim::Model const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,(double (*)[3])arg5);
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertAnglesToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::Model const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,arg5);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertDirectionCosinesToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::Model const *)arg1)->convertDirectionCosinesToAngles((double (*)[3])arg2,arg3,arg4,arg5);
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertDirectionCosinesToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::Model const *)arg1)->convertDirectionCosinesToAngles(arg2,arg3,arg4,arg5);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertDirectionCosinesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::Model const *)arg1)->convertDirectionCosinesToQuaternions((double (*)[3])arg2,arg3,arg4,arg5,arg6);
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertDirectionCosinesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::Model const *)arg1)->convertDirectionCosinesToQuaternions(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertQuaternionsToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double (*arg6)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double (**)[3])&jarg6; 
  ((OpenSim::Model const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,(double (*)[3])arg6);
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1convertQuaternionsToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::Model const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  (arg1)->computeActuation();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->applyActuatorForce(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyActuatorForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  (arg1)->applyActuatorForces();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setActuatorForce(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getActuatorForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getActuatorStress(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getActuatorStress(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getActuatorSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getActuatorSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getActuatorPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getActuatorPower(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  (arg1)->computeContact();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyContactForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->applyContactForce(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1applyContactForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  (arg1)->applyContactForces();
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getContactBodyA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::Model const *)arg1)->getContactBodyA(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getContactBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::Model const *)arg1)->getContactBodyB(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setContactPointA(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getContactPointA(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setContactPointB(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getContactPointB(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getContactForce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getContactForce(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getContactNormalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::Model const *)arg1)->getContactNormalForce(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getContactTangentForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::Model const *)arg1)->getContactTangentForce(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getContactStiffness(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->getContactStiffness(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getContactViscosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::Model const *)arg1)->getContactViscosity(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getContactFrictionCorrection(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::Model const *)arg1)->getContactFrictionCorrection(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getContactForce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getContactForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getContactSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getContactSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getContactPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::Model const *)arg1)->getContactPower(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getAnalysisSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::AnalysisSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::AnalysisSet *)(arg1)->getAnalysisSet();
  *(OpenSim::AnalysisSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1addAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::Analysis *arg2 = (OpenSim::Analysis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::Analysis **)&jarg2; 
  (arg1)->addAnalysis(arg2);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getNumAnalyses(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (int)((OpenSim::Model const *)arg1)->getNumAnalyses();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  OpenSim::Analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    OpenSim::Analysis &_result_ref = ((OpenSim::Model const *)arg1)->getAnalysis(arg2);
    result = (OpenSim::Analysis *) &_result_ref;
  }
  *(OpenSim::Analysis **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getIntegCallbackSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::IntegCallbackSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::IntegCallbackSet *)(arg1)->getIntegCallbackSet();
  *(OpenSim::IntegCallbackSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1addIntegCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::IntegCallback *arg2 = (OpenSim::IntegCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::IntegCallback **)&jarg2; 
  (arg1)->addIntegCallback(arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getIntegCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  int arg2 ;
  OpenSim::IntegCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    OpenSim::IntegCallback &_result_ref = ((OpenSim::Model const *)arg1)->getIntegCallback(arg2);
    result = (OpenSim::IntegCallback *) &_result_ref;
  }
  *(OpenSim::IntegCallback **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1getDerivCallbackSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::DerivCallbackSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  result = (OpenSim::DerivCallbackSet *)(arg1)->getDerivCallbackSet();
  *(OpenSim::DerivCallbackSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1addDerivCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  OpenSim::DerivCallback *arg2 = (OpenSim::DerivCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(OpenSim::DerivCallback **)&jarg2; 
  (arg1)->addDerivCallback(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1setIncludePipelineActuators(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIncludePipelineActuators(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1computeConstrainedCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->computeConstrainedCoordinates(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1printBasicInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  ((OpenSim::Model const *)arg1)->printBasicInfo(*arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_Model_1printDetailedInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::Model *arg1 = (OpenSim::Model *) 0 ;
  std::ostream *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Model **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  ((OpenSim::Model const *)arg1)->printDetailedInfo(*arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1ArrayBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  bool *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Array<bool > *result = 0 ;
  bool temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Array<bool > *)new OpenSim::Array<bool >((bool const &)*arg1,arg2,arg3);
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2) {
  jlong jresult = 0 ;
  bool *arg1 = 0 ;
  int arg2 ;
  OpenSim::Array<bool > *result = 0 ;
  bool temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Array<bool > *)new OpenSim::Array<bool >((bool const &)*arg1,arg2);
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayBool_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool *arg1 = 0 ;
  OpenSim::Array<bool > *result = 0 ;
  bool temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  result = (OpenSim::Array<bool > *)new OpenSim::Array<bool >((bool const &)*arg1);
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayBool_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<bool > *arg1 = 0 ;
  OpenSim::Array<bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<bool > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Array<bool > *)new OpenSim::Array<bool >((OpenSim::Array<bool > const &)*arg1);
  *(OpenSim::Array<bool > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)(arg1)->append((bool const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  OpenSim::Array<bool > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = *(OpenSim::Array<bool > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<bool > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<bool > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool *arg3 = (bool *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(bool **)&jarg3; 
  result = (int)(arg1)->append(arg2,(bool const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  int result;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  result = (int)(arg1)->insert(arg2,(bool const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  (arg1)->set(arg2,(bool const &)*arg3);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  result = (bool *)(arg1)->get();
  *(bool **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    bool &_result_ref = ((OpenSim::Array<bool > const *)arg1)->get(arg2);
    result = (bool *) &_result_ref;
  }
  *(bool **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)OpenSim_Array_Sl_bool_Sg__getitem(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  OpenSim_Array_Sl_bool_Sg__setitem(arg1,arg2,arg3);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  {
    bool &_result_ref = ((OpenSim::Array<bool > const *)arg1)->getLast();
    result = (bool *) &_result_ref;
  }
  *(bool **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->searchBinary((bool const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->searchBinary((bool const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  bool arg3 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->searchBinary((bool const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayBool_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<bool > *arg1 = (OpenSim::Array<bool > *) 0 ;
  bool *arg2 = 0 ;
  int result;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<bool > const *)arg1)->searchBinary((bool const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1ArrayDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  double *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Array<double > *result = 0 ;
  double temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Array<double > *)new OpenSim::Array<double >((double const &)*arg1,arg2,arg3);
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jlong jresult = 0 ;
  double *arg1 = 0 ;
  int arg2 ;
  OpenSim::Array<double > *result = 0 ;
  double temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Array<double > *)new OpenSim::Array<double >((double const &)*arg1,arg2);
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayDouble_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double *arg1 = 0 ;
  OpenSim::Array<double > *result = 0 ;
  double temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  result = (OpenSim::Array<double > *)new OpenSim::Array<double >((double const &)*arg1);
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayDouble_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<double > *arg1 = 0 ;
  OpenSim::Array<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Array<double > *)new OpenSim::Array<double >((OpenSim::Array<double > const &)*arg1);
  *(OpenSim::Array<double > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  result = (int)((OpenSim::Array<double > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  result = (int)((OpenSim::Array<double > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  result = (int)((OpenSim::Array<double > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)(arg1)->append((double const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  OpenSim::Array<double > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = *(OpenSim::Array<double > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<double > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<double > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->append(arg2,(double const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  int result;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  result = (int)(arg1)->insert(arg2,(double const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  (arg1)->set(arg2,(double const &)*arg3);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  result = (double *)(arg1)->get();
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    double &_result_ref = ((OpenSim::Array<double > const *)arg1)->get(arg2);
    result = (double *) &_result_ref;
  }
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)OpenSim_Array_Sl_double_Sg__getitem(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  OpenSim_Array_Sl_double_Sg__setitem(arg1,arg2,arg3);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  {
    double &_result_ref = ((OpenSim::Array<double > const *)arg1)->getLast();
    result = (double *) &_result_ref;
  }
  *(double **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Array<double > const *)arg1)->searchBinary((double const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Array<double > const *)arg1)->searchBinary((double const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  bool arg3 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Array<double > const *)arg1)->searchBinary((double const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayDouble_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<double > *arg1 = (OpenSim::Array<double > *) 0 ;
  double *arg2 = 0 ;
  int result;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<double > **)&jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<double > const *)arg1)->searchBinary((double const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1ArrayInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Array<int > *result = 0 ;
  int temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Array<int > *)new OpenSim::Array<int >((int const &)*arg1,arg2,arg3);
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int *arg1 = 0 ;
  int arg2 ;
  OpenSim::Array<int > *result = 0 ;
  int temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Array<int > *)new OpenSim::Array<int >((int const &)*arg1,arg2);
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayInt_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int *arg1 = 0 ;
  OpenSim::Array<int > *result = 0 ;
  int temp1 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  result = (OpenSim::Array<int > *)new OpenSim::Array<int >((int const &)*arg1);
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayInt_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<int > *arg1 = 0 ;
  OpenSim::Array<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Array<int > *)new OpenSim::Array<int >((OpenSim::Array<int > const &)*arg1);
  *(OpenSim::Array<int > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  result = (int)((OpenSim::Array<int > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  result = (int)((OpenSim::Array<int > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  result = (int)((OpenSim::Array<int > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)(arg1)->append((int const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  OpenSim::Array<int > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = *(OpenSim::Array<int > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<int > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<int > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  result = (int)(arg1)->append(arg2,(int const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int result;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  result = (int)(arg1)->insert(arg2,(int const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  (arg1)->set(arg2,(int const &)*arg3);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  result = (int *)(arg1)->get();
  *(int **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    int &_result_ref = ((OpenSim::Array<int > const *)arg1)->get(arg2);
    result = (int *) &_result_ref;
  }
  *(int **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)OpenSim_Array_Sl_int_Sg__getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  OpenSim_Array_Sl_int_Sg__setitem(arg1,arg2,arg3);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  {
    int &_result_ref = ((OpenSim::Array<int > const *)arg1)->getLast();
    result = (int *) &_result_ref;
  }
  *(int **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Array<int > const *)arg1)->searchBinary((int const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Array<int > const *)arg1)->searchBinary((int const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  bool arg3 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Array<int > const *)arg1)->searchBinary((int const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayInt_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<int > *arg1 = (OpenSim::Array<int > *) 0 ;
  int *arg2 = 0 ;
  int result;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)((OpenSim::Array<int > const *)arg1)->searchBinary((int const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1ArrayStr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayStr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (OpenSim::Array<std::string > *)new OpenSim::Array<std::string >((std::string const &)*arg1,arg2,arg3);
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayStr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (int)jarg2; 
  result = (OpenSim::Array<std::string > *)new OpenSim::Array<std::string >((std::string const &)*arg1,arg2);
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayStr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::Array<std::string > *)new OpenSim::Array<std::string >((std::string const &)*arg1);
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayStr_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = 0 ;
  OpenSim::Array<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > const & reference is null");
    return 0;
  } 
  result = (OpenSim::Array<std::string > *)new OpenSim::Array<std::string >((OpenSim::Array<std::string > const &)*arg1);
  *(OpenSim::Array<std::string > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->append((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  OpenSim::Array<std::string > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = *(OpenSim::Array<std::string > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Array<std::string > const & reference is null");
    return 0;
  } 
  result = (int)(arg1)->append((OpenSim::Array<std::string > const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = (std::string *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::string **)&jarg3; 
  result = (int)(arg1)->append(arg2,(std::string const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)(arg1)->insert(arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->remove(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->set(arg2,(std::string const &)*arg3);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  result = (std::string *)(arg1)->get();
  *(std::string **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    std::string &_result_ref = ((OpenSim::Array<std::string > const *)arg1)->get(arg2);
    result = (std::string *) &_result_ref;
  }
  *(std::string **)&jresult = result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = OpenSim_Array_Sl_std_string_Sg__getitem(arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  int arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  arg3 =  std::string(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  OpenSim_Array_Sl_std_string_Sg__setitem(arg1,arg2,arg3);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  {
    std::string &_result_ref = ((OpenSim::Array<std::string > const *)arg1)->getLast();
    result = (std::string *) &_result_ref;
  }
  *(std::string **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->searchBinary((std::string const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->searchBinary((std::string const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->searchBinary((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayStr_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::Array<std::string > *arg1 = (OpenSim::Array<std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::Array<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::Array<std::string > const *)arg1)->searchBinary((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1ArrayPtrsObj(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayPtrsObj_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (OpenSim::ArrayPtrs<OpenSim::Object > *)new OpenSim::ArrayPtrs<OpenSim::Object >(arg1);
  *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayPtrsObj_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OpenSim::ArrayPtrs<OpenSim::Object > *)new OpenSim::ArrayPtrs<OpenSim::Object >();
  *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ArrayPtrsObj_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Object > const & reference is null");
    return 0;
  } 
  result = (OpenSim::ArrayPtrs<OpenSim::Object > *)new OpenSim::ArrayPtrs<OpenSim::Object >((OpenSim::ArrayPtrs<OpenSim::Object > const &)*arg1);
  *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1clearAndDestroy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  (arg1)->clearAndDestroy();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1setMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setMemoryOwner(arg2);
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1getMemoryOwner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  result = (bool)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getMemoryOwner();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1computeNewCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->computeNewCapacity(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1ensureCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->ensureCapacity(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  (arg1)->trim();
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1getCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getCapacity();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1setCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCapacityIncrement(arg2);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1getCapacityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getCapacityIncrement();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getSize();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getIndex((OpenSim::Object const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getIndex((OpenSim::Object const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1getIndex_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getIndex((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1getIndex_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  result = (bool)(arg1)->append(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ArrayPtrs<OpenSim::Object > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->append(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  OpenSim::Object *arg3 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Object **)&jarg3; 
  result = (bool)(arg1)->insert(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1remove_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->remove(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1remove_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2; 
  result = (bool)(arg1)->remove((OpenSim::Object const *)arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  OpenSim::Object *arg3 = (OpenSim::Object *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(OpenSim::Object **)&jarg3; 
  result = (bool)(arg1)->set(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  int arg2 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OpenSim::Object *)(arg1)->get(arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  std::string *arg2 = 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (OpenSim::Object *)(arg1)->get((std::string const &)*arg2);
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1getLast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  result = (OpenSim::Object *)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->getLast();
  *(OpenSim::Object **)&jresult = result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1searchBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->searchBinary((OpenSim::Object const &)*arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1searchBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3, jint jarg4) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->searchBinary((OpenSim::Object const &)*arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1searchBinary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->searchBinary((OpenSim::Object const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ArrayPtrsObj_1searchBinary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  OpenSim::ArrayPtrs<OpenSim::Object > *arg1 = (OpenSim::ArrayPtrs<OpenSim::Object > *) 0 ;
  OpenSim::Object *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ArrayPtrs<OpenSim::Object > **)&jarg1; 
  arg2 = *(OpenSim::Object **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::Object const & reference is null");
    return 0;
  } 
  result = (int)((OpenSim::ArrayPtrs<OpenSim::Object > const *)arg1)->searchBinary((OpenSim::Object const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1rdSDFast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1constructBodies(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  (arg1)->constructBodies();
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getNJ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  result = (int)((OpenSim::rdSDFast const *)arg1)->getNJ();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getNQ(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  result = (int)((OpenSim::rdSDFast const *)arg1)->getNQ();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getNU(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  result = (int)((OpenSim::rdSDFast const *)arg1)->getNU();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getCoordinateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::rdSDFast const *)arg1)->getCoordinateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getCoordinate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::rdSDFast const *)arg1)->getCoordinate(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getCoordinate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::rdSDFast const *)arg1)->getCoordinate((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getCoordinateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::rdSDFast const *)arg1)->getCoordinateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->getCoordinates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getSpeedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::rdSDFast const *)arg1)->getSpeedName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getSpeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::rdSDFast const *)arg1)->getSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getSpeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::rdSDFast const *)arg1)->getSpeed((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getSpeedIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::rdSDFast const *)arg1)->getSpeedIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getSpeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->getSpeeds(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->getAccelerations(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAcceleration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::rdSDFast const *)arg1)->getAcceleration((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAcceleration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::rdSDFast const *)arg1)->getAcceleration(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1setGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setGravity(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->getGravity(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1setConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setConfiguration((double const (*))arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1setConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setConfiguration((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1extractConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->extractConfiguration((double const (*))arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg2; 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1assemble(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jint jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  int *arg4 = (int *) 0 ;
  double arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(int **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  result = (int)(arg1)->assemble(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->dump((std::string const &)*arg2);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getGroundID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  result = (int)((OpenSim::rdSDFast const *)arg1)->getGroundID();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1setBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setBodyToJointBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getBodyToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->getBodyToJointBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1setInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setInboardToJointBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getInboardToJointBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->getInboardToJointBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1setPin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jdoubleArray jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->setPin(arg2,arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getPin(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jdoubleArray jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->getPin(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getJointInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jintArray jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  int *arg3 ;
  int *arg4 ;
  jint *jarr3 ;
  jint *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 50) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->getJointInfo(arg2,arg3,arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutInt(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::rdSDFast const *)arg1)->getMass(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1setMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (int)(arg1)->setMass(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getInertiaBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double (*arg3)[3] ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  result = (int)((OpenSim::rdSDFast const *)arg1)->getInertiaBodyLocal(arg2,(double (*)[3])arg3);
  jresult = (jint)result; 
  
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getInertiaBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)((OpenSim::rdSDFast const *)arg1)->getInertiaBodyLocal(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1setInertiaBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double (*arg3)[3] ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  result = (int)(arg1)->setInertiaBodyLocal(arg2,(double const (*)[3])arg3);
  jresult = (jint)result; 
  
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getSystemInertia_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 ;
  double (*arg4)[3] ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  ((OpenSim::rdSDFast const *)arg1)->getSystemInertia(arg2,arg3,(double (*)[3])arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getSystemInertia_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::rdSDFast const *)arg1)->getSystemInertia(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->getPosition(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->getVelocity(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAcceleration_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->getAcceleration(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::rdSDFast const *)arg1)->getDirectionCosines(arg2,(double (*)[3])arg3);
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::rdSDFast const *)arg1)->getDirectionCosines(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAngularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->getAngularVelocity(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAngularVelocityBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->getAngularVelocityBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAngularAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->getAngularAcceleration(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getAngularAccelerationBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->getAngularAccelerationBodyLocal(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForce(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForces(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForces(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyForceBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyForceBodyLocal(arg2,(double const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyForcesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  double (*arg5)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4,(double const (*)[3])arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyForcesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  (arg1)->applyForcesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4,(double const *)arg5);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorque(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyTorques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorques(arg2,(int const (*))arg3,(double const (*)[3])arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyTorques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorques(arg2,(int const (*))arg3,(double const *)arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyTorqueBodyLocal(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->applyTorqueBodyLocal(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyTorquesBodyLocal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  int *arg3 ;
  double (*arg4)[3] ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double (**)[3])&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const (*)[3])arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyTorquesBodyLocal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jlong jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 = (double *) 0 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  (arg1)->applyTorquesBodyLocal(arg2,(int const (*))arg3,(double const *)arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->applyGeneralizedForce(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyGeneralizedForces_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->applyGeneralizedForces((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1applyGeneralizedForces_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jintArray jarg3, jdoubleArray jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  int *arg3 ;
  double *arg4 ;
  jint *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  (arg1)->applyGeneralizedForces(arg2,(int const (*))arg3,(double const (*))arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1getNetAppliedGeneralizedForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::rdSDFast const *)arg1)->getNetAppliedGeneralizedForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1computeGeneralizedForces(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->computeGeneralizedForces(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1computeReactions(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double (*arg2)[3] ;
  double (*arg3)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double (**)[3])&jarg3; 
  ((OpenSim::rdSDFast const *)arg1)->computeReactions((double (*)[3])arg2,(double (*)[3])arg3);
  
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1prescribeMotion(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->prescribeMotion(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1formMassMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->formMassMatrix(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1formEulerTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::rdSDFast const *)arg1)->formEulerTransform(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1formJacobianTranslation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jlong jarg4, jint jarg5) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  arg5 = (int)jarg5; 
  ((OpenSim::rdSDFast const *)arg1)->formJacobianTranslation(arg2,(double const (*))arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1formJacobianTranslation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jlong jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 = (double *) 0 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = *(double **)&jarg4; 
  ((OpenSim::rdSDFast const *)arg1)->formJacobianTranslation(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1formJacobianOrientation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  ((OpenSim::rdSDFast const *)arg1)->formJacobianOrientation(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1formJacobianOrientation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::rdSDFast const *)arg1)->formJacobianOrientation(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1formJacobianEuler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = (int)jarg4; 
  ((OpenSim::rdSDFast const *)arg1)->formJacobianEuler(arg2,arg3,arg4);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1formJacobianEuler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::rdSDFast const *)arg1)->formJacobianEuler(arg2,arg3);
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1computeAccelerations(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (int)(arg1)->computeAccelerations(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jint jarg4, jdoubleArray jarg5) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  int arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  arg4 = (int)jarg4; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->transform(arg2,(double const (*))arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1transformPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::rdSDFast const *)arg1)->transformPosition(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertQuaternionsToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::rdSDFast const *)arg1)->convertQuaternionsToAngles(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertQuaternionsToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::rdSDFast const *)arg1)->convertQuaternionsToAngles(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertAnglesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::rdSDFast const *)arg1)->convertAnglesToQuaternions(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertAnglesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::rdSDFast const *)arg1)->convertAnglesToQuaternions(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertRadiansToDegrees_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::rdSDFast const *)arg1)->convertRadiansToDegrees(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertRadiansToDegrees_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::rdSDFast const *)arg1)->convertRadiansToDegrees(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertDegreesToRadians_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  ((OpenSim::rdSDFast const *)arg1)->convertDegreesToRadians(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertDegreesToRadians_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  OpenSim::Storage *arg2 = (OpenSim::Storage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(OpenSim::Storage **)&jarg2; 
  ((OpenSim::rdSDFast const *)arg1)->convertDegreesToRadians(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertAnglesToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double (*arg5)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double (**)[3])&jarg5; 
  ((OpenSim::rdSDFast const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,(double (*)[3])arg5);
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertAnglesToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::rdSDFast const *)arg1)->convertAnglesToDirectionCosines(arg2,arg3,arg4,arg5);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertDirectionCosinesToAngles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::rdSDFast const *)arg1)->convertDirectionCosinesToAngles((double (*)[3])arg2,arg3,arg4,arg5);
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertDirectionCosinesToAngles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  ((OpenSim::rdSDFast const *)arg1)->convertDirectionCosinesToAngles(arg2,arg3,arg4,arg5);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertDirectionCosinesToQuaternions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double (*arg2)[3] ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(double (**)[3])&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::rdSDFast const *)arg1)->convertDirectionCosinesToQuaternions((double (*)[3])arg2,arg3,arg4,arg5,arg6);
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertDirectionCosinesToQuaternions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::rdSDFast const *)arg1)->convertDirectionCosinesToQuaternions(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertQuaternionsToDirectionCosines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double (*arg6)[3] ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double (**)[3])&jarg6; 
  ((OpenSim::rdSDFast const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,(double (*)[3])arg6);
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1convertQuaternionsToDirectionCosines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jlong jarg6) {
  OpenSim::rdSDFast *arg1 = (OpenSim::rdSDFast *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::rdSDFast **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = *(double **)&jarg6; 
  ((OpenSim::rdSDFast const *)arg1)->convertQuaternionsToDirectionCosines(arg2,arg3,arg4,arg5,arg6);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_rdSDFast_1SDUForce(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::rdSDFast::SDUForce();
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ActuatedModel_1SDFast_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  OpenSim::ActuatorSet *arg1 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::ContactForceSet *arg2 = (OpenSim::ContactForceSet *) 0 ;
  OpenSim::ActuatedModel_SDFast *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatorSet **)&jarg1; 
  arg2 = *(OpenSim::ContactForceSet **)&jarg2; 
  result = (OpenSim::ActuatedModel_SDFast *)new OpenSim::ActuatedModel_SDFast((OpenSim::ActuatorSet const *)arg1,(OpenSim::ContactForceSet const *)arg2);
  *(OpenSim::ActuatedModel_SDFast **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1ActuatedModel_1SDFast_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::ActuatorSet *arg2 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::ContactForceSet *arg3 = (OpenSim::ContactForceSet *) 0 ;
  OpenSim::ActuatedModel_SDFast *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(OpenSim::ActuatorSet **)&jarg2; 
  arg3 = *(OpenSim::ContactForceSet **)&jarg3; 
  result = (OpenSim::ActuatedModel_SDFast *)new OpenSim::ActuatedModel_SDFast((std::string const &)*arg1,arg2,arg3);
  *(OpenSim::ActuatedModel_SDFast **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1ActuatedModel_1SDFast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  result = (int)((OpenSim::ActuatedModel_SDFast const *)arg1)->getNX();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getNA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  result = (int)((OpenSim::ActuatedModel_SDFast const *)arg1)->getNA();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getNP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  result = (int)((OpenSim::ActuatedModel_SDFast const *)arg1)->getNP();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  result = (int)((OpenSim::ActuatedModel_SDFast const *)arg1)->getNY();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getNYP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  result = (int)((OpenSim::ActuatedModel_SDFast const *)arg1)->getNYP();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getActuatorName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::ActuatedModel_SDFast const *)arg1)->getActuatorName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::ActuatedModel_SDFast const *)arg1)->getControlName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::ActuatedModel_SDFast const *)arg1)->getStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getPseudoStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::ActuatedModel_SDFast const *)arg1)->getPseudoStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getActuatorIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ActuatedModel_SDFast const *)arg1)->getActuatorIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ActuatedModel_SDFast const *)arg1)->getControlIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ActuatedModel_SDFast const *)arg1)->getStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getPseudoStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::ActuatedModel_SDFast const *)arg1)->getPseudoStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getActuatorSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  OpenSim::ActuatorSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  result = (OpenSim::ActuatorSet *)(arg1)->getActuatorSet();
  *(OpenSim::ActuatorSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getContactForceSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  OpenSim::ContactForceSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  result = (OpenSim::ContactForceSet *)(arg1)->getContactForceSet();
  *(OpenSim::ContactForceSet **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControl(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setControl((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setControls((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getControl((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getControl(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ActuatedModel_SDFast const *)arg1)->getControls(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ActuatedModel_SDFast const *)arg1)->getStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1setPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ActuatedModel_SDFast const *)arg1)->getPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getPseudoState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1setInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setInitialPseudoStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getInitialPseudoState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getInitialPseudoState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getInitialPseudoState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getInitialPseudoState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getInitialPseudoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ActuatedModel_SDFast const *)arg1)->getInitialPseudoStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setInitialStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getInitialState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getInitialState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getInitialState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getInitialState((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::ActuatedModel_SDFast const *)arg1)->getInitialStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  (arg1)->computeActuation();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1computeActuatorStateDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->computeActuatorStateDerivatives(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1applyActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->applyActuatorForce(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1applyActuatorForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  (arg1)->applyActuatorForces();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1setActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setActuatorForce(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getActuatorForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getActuatorStress(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getActuatorStress(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getActuatorSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getActuatorSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getActuatorPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getActuatorPower(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  (arg1)->computeContact();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1applyContactForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->applyContactForce(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1applyContactForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  (arg1)->applyContactForces();
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getContactBodyA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatedModel_SDFast const *)arg1)->getContactBodyA(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getContactBodyB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((OpenSim::ActuatedModel_SDFast const *)arg1)->getContactBodyB(arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1setContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setContactPointA(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getContactPointA(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::ActuatedModel_SDFast const *)arg1)->getContactPointA(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1setContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setContactPointB(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getContactPointB(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::ActuatedModel_SDFast const *)arg1)->getContactPointB(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getContactForce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::ActuatedModel_SDFast const *)arg1)->getContactForce(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getContactNormalForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::ActuatedModel_SDFast const *)arg1)->getContactNormalForce(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getContactTangentForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  jdouble *jarr5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  if (jarg5 && jenv->GetArrayLength(jarg5) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr5, &arg5, jarg5)) return ; 
  ((OpenSim::ActuatedModel_SDFast const *)arg1)->getContactTangentForce(arg2,arg3,arg4,arg5);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr5, arg5, jarg5); 
  delete [] arg3; 
  delete [] arg4; 
  delete [] arg5; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getContactStiffness(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::ActuatedModel_SDFast const *)arg1)->getContactStiffness(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getContactViscosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  double *arg4 ;
  jdouble *jarr3 ;
  jdouble *jarr4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  if (jarg4 && jenv->GetArrayLength(jarg4) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr4, &arg4, jarg4)) return ; 
  ((OpenSim::ActuatedModel_SDFast const *)arg1)->getContactViscosity(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr4, arg4, jarg4); 
  delete [] arg3; 
  delete [] arg4; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getContactFrictionCorrection(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdoubleArray jarg3) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  ((OpenSim::ActuatedModel_SDFast const *)arg1)->getContactFrictionCorrection(arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg3; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getContactForce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getContactForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getContactSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getContactSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1getContactPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::ActuatedModel_SDFast const *)arg1)->getContactPower(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1promoteControlsToStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdouble jarg3) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  double *arg2 ;
  double arg3 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  arg3 = (double)jarg3; 
  (arg1)->promoteControlsToStates((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_ActuatedModel_1SDFast_1computeAuxiliaryDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::ActuatedModel_SDFast *arg1 = (OpenSim::ActuatedModel_SDFast *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::ActuatedModel_SDFast **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->computeAuxiliaryDerivatives(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1suPipeline40(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getNX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  result = (int)((OpenSim::suPipeline40 const *)arg1)->getNX();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getNA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  result = (int)((OpenSim::suPipeline40 const *)arg1)->getNA();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getNY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  result = (int)((OpenSim::suPipeline40 const *)arg1)->getNY();
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getActuatorName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::suPipeline40 const *)arg1)->getActuatorName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getControlName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::suPipeline40 const *)arg1)->getControlName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jstring JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((OpenSim::suPipeline40 const *)arg1)->getStateName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getActuatorIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::suPipeline40 const *)arg1)->getActuatorIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getControlIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::suPipeline40 const *)arg1)->getControlIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT jint JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getStateIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((OpenSim::suPipeline40 const *)arg1)->getStateIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setControl(arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->setControl((std::string const &)*arg2,arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setControls((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getControl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (double)((OpenSim::suPipeline40 const *)arg1)->getControl((std::string const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getControl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::suPipeline40 const *)arg1)->getControl(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::suPipeline40 const *)arg1)->getControls(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setInitialStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getInitialStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::suPipeline40 const *)arg1)->getInitialStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getInitialState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::suPipeline40 const *)arg1)->getInitialState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setStates((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  ((OpenSim::suPipeline40 const *)arg1)->getStates(arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::suPipeline40 const *)arg1)->getState(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  (arg1)->setConfiguration((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdoubleArray jarg2, jdoubleArray jarg3) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  double *arg2 ;
  double *arg3 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, &arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, &arg3, jarg3)) return ; 
  (arg1)->setConfiguration((double const (*))arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  OpenSim::ScaleSet *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = *(OpenSim::ScaleSet **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OpenSim::ScaleSet const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->scale((OpenSim::ScaleSet const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT jboolean JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getIncludePipelineActuators(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  result = (bool)((OpenSim::suPipeline40 const *)arg1)->getIncludePipelineActuators();
  jresult = (jboolean)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1computeActuation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  (arg1)->computeActuation();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1applyActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->applyActuatorForce(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1applyActuatorForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  (arg1)->applyActuatorForces();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setActuatorForce(arg2,arg3);
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getActuatorForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::suPipeline40 const *)arg1)->getActuatorForce(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getActuatorStress(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::suPipeline40 const *)arg1)->getActuatorStress(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getActuatorSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::suPipeline40 const *)arg1)->getActuatorSpeed(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT jdouble JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1getActuatorPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((OpenSim::suPipeline40 const *)arg1)->getActuatorPower(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1computeContact(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  (arg1)->computeContact();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1applyContactForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->applyContactForce(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1applyContactForces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  (arg1)->applyContactForces();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1computeAuxiliaryDerivatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->computeAuxiliaryDerivatives(arg2);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40_1setIncludePipelineActuators(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  OpenSim::suPipeline40 *arg1 = (OpenSim::suPipeline40 *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40 **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setIncludePipelineActuators(arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1suPipeline40Workflow_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::ActuatorSet *arg2 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::ContactForceSet *arg3 = (OpenSim::ContactForceSet *) 0 ;
  OpenSim::suPipeline40Workflow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(OpenSim::ActuatorSet **)&jarg2; 
  arg3 = *(OpenSim::ContactForceSet **)&jarg3; 
  result = (OpenSim::suPipeline40Workflow *)new OpenSim::suPipeline40Workflow((std::string const &)*arg1,arg2,arg3);
  *(OpenSim::suPipeline40Workflow **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1suPipeline40Workflow_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::ActuatorSet *arg2 = (OpenSim::ActuatorSet *) 0 ;
  OpenSim::suPipeline40Workflow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(OpenSim::ActuatorSet **)&jarg2; 
  result = (OpenSim::suPipeline40Workflow *)new OpenSim::suPipeline40Workflow((std::string const &)*arg1,arg2);
  *(OpenSim::suPipeline40Workflow **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1suPipeline40Workflow_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::suPipeline40Workflow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::suPipeline40Workflow *)new OpenSim::suPipeline40Workflow((std::string const &)*arg1);
  *(OpenSim::suPipeline40Workflow **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1suPipeline40Workflow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::suPipeline40Workflow *arg1 = (OpenSim::suPipeline40Workflow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40Workflow **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40Workflow_1initPipeline(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  OpenSim::suPipeline40Workflow *arg1 = (OpenSim::suPipeline40Workflow *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40Workflow **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->initPipeline((std::string const &)*arg2,(std::string const &)*arg3);
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suPipeline40Workflow_1computeConstrainedCoordinates(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  OpenSim::suPipeline40Workflow *arg1 = (OpenSim::suPipeline40Workflow *) 0 ;
  double *arg2 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suPipeline40Workflow **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  (arg1)->computeConstrainedCoordinates(arg2);
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1suS26_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::ContactForceSet *arg2 = (OpenSim::ContactForceSet *) 0 ;
  OpenSim::suS26 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(OpenSim::ContactForceSet **)&jarg2; 
  result = (OpenSim::suS26 *)new OpenSim::suS26((std::string const &)*arg1,arg2);
  *(OpenSim::suS26 **)&jresult = result; 
  return jresult;
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_new_1suS26_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  OpenSim::suS26 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (OpenSim::suS26 *)new OpenSim::suS26((std::string const &)*arg1);
  *(OpenSim::suS26 **)&jresult = result; 
  return jresult;
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_delete_1suS26(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::suS26 *arg1 = (OpenSim::suS26 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suS26 **)&jarg1; 
  delete arg1;
  
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suS26_1constructGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OpenSim::suS26 *arg1 = (OpenSim::suS26 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OpenSim::suS26 **)&jarg1; 
  (arg1)->constructGeometry();
}


JNIEXPORT void JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_suS26_1RegisterTypes(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  OpenSim::suS26::RegisterTypes();
}


JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGMaterialUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Material **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGVisiblePropertiesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::VisibleProperties **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGTransformUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Transform **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGVisibleObjectUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::VisibleObject **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGBodyUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::VisibleObject **)&baseptr = *(OpenSim::Body **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGSetBodiesUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Body > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGSetMaterialsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Material > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGMaterialSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::Material > **)&baseptr = *(OpenSim::MaterialSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGActuatorUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Actuator **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGSetActuatorsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Set<OpenSim::Actuator > **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGActuatorSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Set<OpenSim::Actuator > **)&baseptr = *(OpenSim::ActuatorSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGContactForceSetUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::ActuatorSet **)&baseptr = *(OpenSim::ContactForceSet **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGStorageUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Storage **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGModelUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Object **)&baseptr = *(OpenSim::Model **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGrdSDFastUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::Model **)&baseptr = *(OpenSim::rdSDFast **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGActuatedModel_1SDFastUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::rdSDFast **)&baseptr = *(OpenSim::ActuatedModel_SDFast **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGsuPipeline40Upcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::ActuatedModel_SDFast **)&baseptr = *(OpenSim::suPipeline40 **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGsuPipeline40WorkflowUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::suPipeline40 **)&baseptr = *(OpenSim::suPipeline40Workflow **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_simtksuS26Pkg_suS26ModuleJNI_SWIGsuS26Upcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OpenSim::suPipeline40Workflow **)&baseptr = *(OpenSim::suS26 **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

