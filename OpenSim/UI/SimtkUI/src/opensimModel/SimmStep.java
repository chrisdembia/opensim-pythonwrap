/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package opensimModel;

public class SimmStep {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected SimmStep(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SimmStep obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      opensimModelJNI.delete_SimmStep(swigCPtr);
    }
    swigCPtr = 0;
  }

  public SimmStep() {
    this(opensimModelJNI.new_SimmStep__SWIG_0(), true);
  }

  public SimmStep(SimmJoint aJoint, SimmStep.Direction aDirection) {
    this(opensimModelJNI.new_SimmStep__SWIG_1(SimmJoint.getCPtr(aJoint), aDirection.swigValue()), true);
  }

  public SimmStep.Direction getDirection() {
    return SimmStep.Direction.swigToEnum(opensimModelJNI.SimmStep_getDirection(swigCPtr));
  }

  public SimmJoint getJoint() {
    long cPtr = opensimModelJNI.SimmStep_getJoint(swigCPtr);
    return (cPtr == 0) ? null : new SimmJoint(cPtr, false);
  }

  public Transform getJointTransform() {
    return new Transform(opensimModelJNI.SimmStep_getJointTransform(swigCPtr), false);
  }

  public void peteTest() {
    opensimModelJNI.SimmStep_peteTest(swigCPtr);
  }

  public final static class Direction {
    public final static Direction forward = new Direction("forward");
    public final static Direction inverse = new Direction("inverse");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Direction swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Direction.class + " with value " + swigValue);
    }

    private Direction(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Direction(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Direction(String swigName, Direction swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Direction[] swigValues = { forward, inverse };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
