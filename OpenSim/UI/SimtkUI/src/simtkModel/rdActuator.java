/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version: 1.3.19
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package simtkModel;


public class rdActuator extends rdObject {
  private long swigCPtr;

  
  public  rdActuator(long cPtr, boolean cMemoryOwn) {
    super(ModelJNI.SWIGrdActuatorTordObject(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected rdActuator() {
    this(0, false);
  }

  protected void finalize() {
    delete();
  }

  public void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      ModelJNI.delete_rdActuator(swigCPtr);
      swigCMemOwn = false;
      super.delete();
    }
    swigCPtr = 0;
  }

  public static long getCPtr(rdActuator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public static double getLARGE() {
    return ModelJNI.get_rdActuator_LARGE();
  }

  public rdObject copy() {
    long cPtr = ModelJNI.rdActuator_copy__SWIG_0(swigCPtr);
    return (cPtr == 0) ? null : new rdObject(cPtr, false);
  }

  public rdObject copy(SWIGTYPE_p_DOMElement aElement) {
    long cPtr = ModelJNI.rdActuator_copy__SWIG_1(swigCPtr, SWIGTYPE_p_DOMElement.getCPtr(aElement));
    return (cPtr == 0) ? null : new rdObject(cPtr, false);
  }

  public void setModel(rdModel aModel) {
    ModelJNI.rdActuator_setModel(swigCPtr, rdModel.getCPtr(aModel));
  }

  public rdModel getModel() {
    long cPtr = ModelJNI.rdActuator_getModel(swigCPtr);
    return (cPtr == 0) ? null : new rdModel(cPtr, false);
  }

  public int getNX() {
    return ModelJNI.rdActuator_getNX(swigCPtr);
  }

  public String getControlName(int aIndex) {
    return ModelJNI.rdActuator_getControlName(swigCPtr, aIndex);
  }

  public int getControlIndex(String aName) {
    return ModelJNI.rdActuator_getControlIndex(swigCPtr, aName);
  }

  public void setControl(int aIndex, double aValue) {
    ModelJNI.rdActuator_setControl__SWIG_0(swigCPtr, aIndex, aValue);
  }

  public void setControl(String aName, double aValue) {
    ModelJNI.rdActuator_setControl__SWIG_1(swigCPtr, aName, aValue);
  }

  public void setControls(SWIGTYPE_p_double aX) {
    ModelJNI.rdActuator_setControls(swigCPtr, SWIGTYPE_p_double.getCPtr(aX));
  }

  public double getControl(int aIndex) {
    return ModelJNI.rdActuator_getControl__SWIG_0(swigCPtr, aIndex);
  }

  public double getControl(String aName) {
    return ModelJNI.rdActuator_getControl__SWIG_1(swigCPtr, aName);
  }

  public void getControls(SWIGTYPE_p_double rX) {
    ModelJNI.rdActuator_getControls(swigCPtr, SWIGTYPE_p_double.getCPtr(rX));
  }

  public int getNY() {
    return ModelJNI.rdActuator_getNY(swigCPtr);
  }

  public String getStateName(int aIndex) {
    return ModelJNI.rdActuator_getStateName(swigCPtr, aIndex);
  }

  public int getStateIndex(String aName) {
    return ModelJNI.rdActuator_getStateIndex(swigCPtr, aName);
  }

  public void setState(int aIndex, double aValue) {
    ModelJNI.rdActuator_setState__SWIG_0(swigCPtr, aIndex, aValue);
  }

  public void setState(String aName, double aValue) {
    ModelJNI.rdActuator_setState__SWIG_1(swigCPtr, aName, aValue);
  }

  public void setStates(SWIGTYPE_p_double aY) {
    ModelJNI.rdActuator_setStates(swigCPtr, SWIGTYPE_p_double.getCPtr(aY));
  }

  public double getState(int aIndex) {
    return ModelJNI.rdActuator_getState__SWIG_0(swigCPtr, aIndex);
  }

  public double getState(String aName) {
    return ModelJNI.rdActuator_getState__SWIG_1(swigCPtr, aName);
  }

  public void getStates(SWIGTYPE_p_double rY) {
    ModelJNI.rdActuator_getStates(swigCPtr, SWIGTYPE_p_double.getCPtr(rY));
  }

  public int getNYP() {
    return ModelJNI.rdActuator_getNYP(swigCPtr);
  }

  public String getPseudoStateName(int aIndex) {
    return ModelJNI.rdActuator_getPseudoStateName(swigCPtr, aIndex);
  }

  public int getPseudoStateIndex(String aName) {
    return ModelJNI.rdActuator_getPseudoStateIndex(swigCPtr, aName);
  }

  public void setPseudoState(int aIndex, double aValue) {
    ModelJNI.rdActuator_setPseudoState__SWIG_0(swigCPtr, aIndex, aValue);
  }

  public void setPseudoState(String aName, double aValue) {
    ModelJNI.rdActuator_setPseudoState__SWIG_1(swigCPtr, aName, aValue);
  }

  public void setPseudoStates(SWIGTYPE_p_double aY) {
    ModelJNI.rdActuator_setPseudoStates(swigCPtr, SWIGTYPE_p_double.getCPtr(aY));
  }

  public double getPseudoState(int aIndex) {
    return ModelJNI.rdActuator_getPseudoState__SWIG_0(swigCPtr, aIndex);
  }

  public double getPseudoState(String aName) {
    return ModelJNI.rdActuator_getPseudoState__SWIG_1(swigCPtr, aName);
  }

  public void getPseudoStates(SWIGTYPE_p_double rY) {
    ModelJNI.rdActuator_getPseudoStates(swigCPtr, SWIGTYPE_p_double.getCPtr(rY));
  }

  public void setArea(double aArea) {
    ModelJNI.rdActuator_setArea(swigCPtr, aArea);
  }

  public double getArea() {
    return ModelJNI.rdActuator_getArea(swigCPtr);
  }

  public boolean getAppliesForce() {
    return ModelJNI.rdActuator_getAppliesForce(swigCPtr);
  }

  public void setForce(double aForce) {
    ModelJNI.rdActuator_setForce(swigCPtr, aForce);
  }

  public double getForce() {
    return ModelJNI.rdActuator_getForce(swigCPtr);
  }

  public double getStress() {
    return ModelJNI.rdActuator_getStress(swigCPtr);
  }

  public double getSpeed() {
    return ModelJNI.rdActuator_getSpeed(swigCPtr);
  }

  public double getPower() {
    return ModelJNI.rdActuator_getPower(swigCPtr);
  }

  public void setMaxForce(double aMax) {
    ModelJNI.rdActuator_setMaxForce(swigCPtr, aMax);
  }

  public double getMaxForce() {
    return ModelJNI.rdActuator_getMaxForce(swigCPtr);
  }

  public void setMinForce(double aMin) {
    ModelJNI.rdActuator_setMinForce(swigCPtr, aMin);
  }

  public double getMinForce() {
    return ModelJNI.rdActuator_getMinForce(swigCPtr);
  }

  public void setOptimalForce(double aOptimalForce) {
    ModelJNI.rdActuator_setOptimalForce(swigCPtr, aOptimalForce);
  }

  public double getOptimalForce() {
    return ModelJNI.rdActuator_getOptimalForce(swigCPtr);
  }

  public void promoteControlsToStates(SWIGTYPE_p_double aX, double aDT) {
    ModelJNI.rdActuator_promoteControlsToStates(swigCPtr, SWIGTYPE_p_double.getCPtr(aX), aDT);
  }

  public void computeActuation() {
    ModelJNI.rdActuator_computeActuation(swigCPtr);
  }

  public void computeStateDerivatives(SWIGTYPE_p_double rDYDT) {
    ModelJNI.rdActuator_computeStateDerivatives(swigCPtr, SWIGTYPE_p_double.getCPtr(rDYDT));
  }

  public void updatePseudoStates() {
    ModelJNI.rdActuator_updatePseudoStates(swigCPtr);
  }

  public void apply() {
    ModelJNI.rdActuator_apply(swigCPtr);
  }

  public boolean check() {
    return ModelJNI.rdActuator_check(swigCPtr);
  }

}
